domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_java_DOT_lang_DOT_Number(): TYPE
  
  unique function class_java_DOT_lang_DOT_Class(): TYPE
  
  unique function class_java_DOT_lang_DOT_Integer(): TYPE
  
  unique function class_Node(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  unique function class_MagicWands(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Number_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Number()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Class_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Class()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Integer_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Integer()) == class_java_DOT_lang_DOT_Number()
  }
  
  axiom Node_directSuperclass {
    directSuperclass(class_Node()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MagicWands_directSuperclass {
    directSuperclass(class_MagicWands()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field possibly_illegal_cast: Ref

//  a field 
field field_Node_key: Int

//  a field 
field field_Node_left: Ref

//  a field 
field field_Node_right: Ref

//  a field 
field field_Node_color: Bool

//  a field 
field field_Node_dblack: Bool

//  a field 
field field_Node_dblackNull: Bool

//  a field 
field field_java_DOT_lang_DOT_Integer_MIN_VALUE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_MAX_VALUE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_TYPE: Ref

//  a field 
field field_java_DOT_lang_DOT_Integer_SIZE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_BYTES: Int

function instanceof(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


method constructor_java_DOT_lang_DOT_Object_java_DOT_lang_DOT_Object(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method internal_java_DOT_lang_DOT_Object_java_DOT_lang_DOT_Object(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method constructor_java_DOT_lang_DOT_Number_java_DOT_lang_DOT_Number(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Number()
{
  inhale false
}

method internal_java_DOT_lang_DOT_Number_java_DOT_lang_DOT_Number(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Number()
{
  inhale false
}

method __contract_unsatisfiable__constructor_Node_Node__Integer(current_thread_id: Int, globals: Ref, item: Int) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_Node()
{
  var diz__1: Ref
  diz__1 := new(field_Node_key, field_Node_left, field_Node_right, field_Node_color, field_Node_dblack, field_Node_dblackNull)
  inhale type_of(diz__1) == class_Node()
  inhale true && (acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= item)
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__constructor_Node_Node__Integer_0
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_Node()
  inhale false
}

method constructor_Node_Node__Integer(current_thread_id: Int, globals: Ref, item: Int) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= item
  ensures sys__result != null
  ensures type_of(sys__result) == class_Node()
  ensures acc(sys__result.field_Node_key, write)
  ensures acc(sys__result.field_Node_left, write)
  ensures acc(sys__result.field_Node_right, write)
  ensures acc(sys__result.field_Node_color, write)
  ensures acc(sys__result.field_Node_dblack, write)
  ensures acc(sys__result.field_Node_dblackNull, write)
  ensures acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  ensures globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key
  ensures sys__result.field_Node_key == item
  ensures sys__result.field_Node_left == null
  ensures sys__result.field_Node_right == null
  ensures sys__result.field_Node_color == true
  ensures sys__result.field_Node_dblack == false
  ensures sys__result.field_Node_dblackNull == false
{
  var diz__2: Ref
  diz__2 := new(field_Node_key, field_Node_left, field_Node_right, field_Node_color, field_Node_dblack, field_Node_dblackNull)
  inhale type_of(diz__2) == class_Node()
  diz__2.field_Node_key := item
  diz__2.field_Node_left := null
  diz__2.field_Node_right := null
  diz__2.field_Node_color := true
  diz__2.field_Node_dblack := false
  diz__2.field_Node_dblackNull := false
  label method_end_constructor_Node_Node__Integer_1
  sys__result := diz__2
  // assert
  assert sys__result != null && type_of(sys__result) == class_Node() && acc(sys__result.field_Node_key, write) && acc(sys__result.field_Node_left, write) && acc(sys__result.field_Node_right, write) && acc(sys__result.field_Node_color, write) && acc(sys__result.field_Node_dblack, write) && acc(sys__result.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key && sys__result.field_Node_key == item && sys__result.field_Node_left == null && sys__result.field_Node_right == null && sys__result.field_Node_color == true && sys__result.field_Node_dblack == false && sys__result.field_Node_dblackNull == false
  inhale false
}