domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_NodeListIterator(): TYPE
  
  unique function class_NodeList(): TYPE
  
  unique function class_java_DOT_lang_DOT_Number(): TYPE
  
  unique function class_java_DOT_lang_DOT_Class(): TYPE
  
  unique function class_java_DOT_lang_DOT_Integer(): TYPE
  
  unique function class_Node(): TYPE
  
  unique function class_Util(): TYPE
  
  unique function class_Tree(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  unique function class_MagicWands(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom NodeListIterator_directSuperclass {
    directSuperclass(class_NodeListIterator()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom NodeList_directSuperclass {
    directSuperclass(class_NodeList()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Number_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Number()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Class_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Class()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Integer_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Integer()) == class_java_DOT_lang_DOT_Number()
  }
  
  axiom Node_directSuperclass {
    directSuperclass(class_Node()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Util_directSuperclass {
    directSuperclass(class_Util()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Tree_directSuperclass {
    directSuperclass(class_Tree()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MagicWands_directSuperclass {
    directSuperclass(class_MagicWands()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

//  a field 
field possibly_illegal_cast: Ref

//  a field 
field field_NodeListIterator_current: Ref

//  a field 
field field_NodeList_node: Ref

//  a field 
field field_NodeList_next: Ref

//  a field 
field field_Node_key: Int

//  a field 
field field_Node_left: Ref

//  a field 
field field_Node_right: Ref

//  a field 
field field_Node_color: Bool

//  a field 
field field_Node_dblack: Bool

//  a field 
field field_Node_dblackNull: Bool

//  a field 
field field_Tree_root: Ref

//  a field 
field field_java_DOT_lang_DOT_Integer_MIN_VALUE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_MAX_VALUE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_TYPE: Ref

//  a field 
field field_java_DOT_lang_DOT_Integer_SIZE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_BYTES: Int

function instanceof(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function method_NodeListIterator_sorted__NodeListIterator(globals: Ref, it: Ref): Bool
  requires it != null ==> acc(it.field_NodeListIterator_current, wildcard) && acc(method_NodeList_list_perm__NodeList(globals, it.field_NodeListIterator_current), wildcard)
{
  it != null ==> method_NodeList_sorted__NodeList(globals, it.field_NodeListIterator_current)
}

function method_NodeListIterator_toSeq__NodeListIterator(globals: Ref, it: Ref): Seq[Ref]
  requires it != null ==> acc(it.field_NodeListIterator_current, wildcard) && acc(method_NodeList_list_perm__NodeList(globals, it.field_NodeListIterator_current), wildcard)
  ensures (it == null ? |result| == 0 : |result| == method_NodeList_size__NodeList(globals, it.field_NodeListIterator_current))
{
  (it == null ? Seq[Ref]() : method_NodeList_toSeq__NodeList(globals, it.field_NodeListIterator_current))
}

function method_NodeListIterator_toSeqKeys__NodeListIterator(globals: Ref, it: Ref): Seq[Int]
  requires it != null ==> acc(it.field_NodeListIterator_current, wildcard) && acc(method_NodeList_list_perm__NodeList(globals, it.field_NodeListIterator_current), wildcard)
{
  (it == null ? Seq[Int]() : method_NodeList_toSeqKeys__NodeList(globals, it.field_NodeListIterator_current))
}

function method_NodeList_size__NodeList(globals: Ref, nl: Ref): Int
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
  ensures nl != null ==> 0 < result
  ensures nl == null ==> result == 0
{
  (nl == null ? 0 : (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in 1 + method_NodeList_size__NodeList(globals, nl.field_NodeList_next)))
}

function method_NodeList_toSeq__NodeList(globals: Ref, nl: Ref): Seq[Ref]
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
  ensures |result| == method_NodeList_size__NodeList(globals, nl)
  ensures nl != null ==> result[0] == (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in nl.field_NodeList_node)
{
  (nl == null ? Seq[Ref]() : (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in Seq(nl.field_NodeList_node) ++ method_NodeList_toSeq__NodeList(globals, nl.field_NodeList_next)))
}

function method_NodeList_toSeqKeys__NodeList(globals: Ref, nl: Ref): Seq[Int]
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
  ensures |result| == method_NodeList_size__NodeList(globals, nl)
  ensures nl != null ==> result[0] == (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in nl.field_NodeList_node.field_Node_key)
{
  (nl == null ? Seq[Int]() : (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in Seq(nl.field_NodeList_node.field_Node_key) ++ method_NodeList_toSeqKeys__NodeList(globals, nl.field_NodeList_next)))
}

function method_NodeList_sorted__NodeList(globals: Ref, nl: Ref): Bool
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
{
  method_Util_sorted__Sequence$Integer$(method_NodeList_toSeqKeys__NodeList(globals, nl))
}

function method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(seq1: Seq[Int], seq2: Seq[Int]): Bool
  decreases _
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result && 0 < |seq1| ==> method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(seq1[1..], seq2[1..])
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } { seq2[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i]))
{
  (|seq1| <= 0 ? true : (|seq2| <= 0 ? false : seq1[0] == seq2[0] && method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(seq1[1..], seq2[1..])))
}

function method_Util_isPrefix__Sequence$Node$__Sequence$Node$(seq1: Seq[Ref], seq2: Seq[Ref]): Bool
  decreases _
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result && 0 < |seq1| ==> method_Util_isPrefix__Sequence$Node$__Sequence$Node$(seq1[1..], seq2[1..])
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } { seq2[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i]))
{
  (|seq1| <= 0 ? true : (|seq2| <= 0 ? false : seq1[0] == seq2[0] && method_Util_isPrefix__Sequence$Node$__Sequence$Node$(seq1[1..], seq2[1..])))
}

function method_Util_prefixExtensionLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref: Seq[Ref], all: Seq[Ref], extension: Seq[Ref], newAll: Seq[Ref]): Bool
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, all)
  requires newAll == all ++ extension
  ensures method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, newAll)
  ensures result
{
  0 < |pref| ==> 0 < |all| && 0 < |newAll| && method_Util_prefixExtensionLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref[1..], all[1..], extension, newAll[1..])
}

function method_Util_prefixTransLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref: Seq[Ref], intermed: Seq[Ref], all: Seq[Ref]): Bool
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, intermed)
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(intermed, all)
  ensures method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, all)
  ensures result
{
  0 < |pref| ==> 0 < |intermed| && 0 < |all| && method_Util_prefixTransLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref[1..], intermed[1..], all[1..])
}

function method_Util_isSuffix__Sequence$Node$__Sequence$Node$(seq1: Seq[Ref], seq2: Seq[Ref]): Bool
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i + |seq2| - |seq1|]))
{
  (|seq2| < |seq1| ? false : (|seq1| <= 0 ? true : (|seq1| < |seq2| ? method_Util_isSuffix__Sequence$Node$__Sequence$Node$(seq1, seq2[1..]) : seq1[0] == seq2[0] && method_Util_isSuffix__Sequence$Node$__Sequence$Node$(seq1[1..], seq2[1..]))))
}

function method_Util_isSuffix__Sequence$Integer$__Sequence$Integer$(seq1: Seq[Int], seq2: Seq[Int]): Bool
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i + |seq2| - |seq1|]))
{
  (|seq2| < |seq1| ? false : (|seq1| <= 0 ? true : (|seq1| < |seq2| ? method_Util_isSuffix__Sequence$Integer$__Sequence$Integer$(seq1, seq2[1..]) : seq1[0] == seq2[0] && method_Util_isSuffix__Sequence$Integer$__Sequence$Integer$(seq1[1..], seq2[1..]))))
}

function method_Util_suffixShortenLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(suff: Seq[Ref], all: Seq[Ref], taken: Seq[Ref], remainder: Seq[Ref]): Bool
  requires method_Util_isSuffix__Sequence$Node$__Sequence$Node$(suff, all)
  requires suff == taken ++ remainder
  ensures method_Util_isSuffix__Sequence$Node$__Sequence$Node$(remainder, all)
  ensures result
{
  (|suff| < |all| ? method_Util_suffixShortenLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(suff, all[1..], taken, remainder) : (|taken| <= 0 ? suff == remainder && method_Util_isSuffix__Sequence$Node$__Sequence$Node$(remainder, all) : 0 < |suff| && 0 < |all| && method_Util_suffixShortenLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(suff[1..], all[1..], taken[1..], remainder)))
}

function method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf: Seq[Int], all: Seq[Int], idx: Int): Bool
  requires 0 <= idx
  ensures result && 0 < |inf| ==> idx <= |all| - |inf| && all[idx] == inf[0]
  ensures result == (idx <= |all| - |inf| && (forall i: Int :: { inf[i] } 0 <= i && i < |inf| ==> inf[i] == all[i + idx]))
{
  (|all| < idx ? false : (idx == 0 ? method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(inf, all) : method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf, all[1..], idx - 1)))
}

function method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf: Seq[Ref], all: Seq[Ref], idx: Int): Bool
  requires 0 <= idx
  ensures result && 0 < |inf| ==> idx <= |all| - |inf| && all[idx] == inf[0]
  ensures result == (idx <= |all| - |inf| && (forall i: Int :: { inf[i] } 0 <= i && i < |inf| ==> inf[i] == all[i + idx]))
{
  (|all| < idx ? false : (idx == 0 ? method_Util_isPrefix__Sequence$Node$__Sequence$Node$(inf, all) : method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf, all[1..], idx - 1)))
}

function method_Util_infixSuffixLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(suff: Seq[Int], all: Seq[Int], taken: Seq[Int], remainder: Seq[Int], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(suff, all, idx)
  requires suff == taken ++ remainder
  ensures method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(remainder, all, idx + |taken|)
  ensures result
{
  (0 < idx ? method_Util_infixSuffixLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(suff, all[1..], taken, remainder, idx - 1) : (|taken| <= 0 ? suff == remainder && method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(remainder, all, idx) : 0 < |suff| && 0 < |all| && method_Util_infixSuffixLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(suff[1..], all[1..], taken[1..], remainder, idx)))
}

function method_Util_infixTailLemma__Sequence$Node$__Sequence$Node$__Integer(inf: Seq[Ref], all: Seq[Ref], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf, all, idx)
  requires 0 < |inf|
  ensures result
  ensures method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf[1..], all, idx + 1)


function method_Util_infixAdditionLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(inf1: Seq[Int], inf2: Seq[Int], all: Seq[Int], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf1, all, idx)
  requires method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf2, all, idx + |inf1|)
  ensures result
  ensures method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf1 ++ inf2, all, idx)


function method_Util_infixAdditionLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Integer(inf1: Seq[Ref], inf2: Seq[Ref], all: Seq[Ref], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf1, all, idx)
  requires method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf2, all, idx + |inf1|)
  ensures result
  ensures method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf1 ++ inf2, all, idx)


function method_Util_sorted__Sequence$Integer$(s: Seq[Int]): Bool
{
  (forall i: Int, j: Int :: { s[j],s[i] } 0 <= i && i < |s| && (i < j && j < |s|) ==> s[i] <= s[j])
}

function method_Util_sortedTailLemma__Sequence$Integer$(s: Seq[Int]): Bool
  requires method_Util_sorted__Sequence$Integer$(s)
  ensures method_Util_sorted__Sequence$Integer$(s[1..])
{
  true
}

function method_Util_sortedLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$(all: Seq[Int], front: Seq[Int], back: Seq[Int], larger: Seq[Int]): Bool
  requires method_Util_sorted__Sequence$Integer$(all)
  requires all == front ++ back
  requires method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(all, larger)
  ensures method_Util_sorted__Sequence$Integer$(back)
  ensures method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(back, larger)
  ensures result


function method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(smaller: Seq[Int], larger: Seq[Int]): Bool
{
  (forall i: Int, j: Int :: { larger[j],smaller[i] } 0 <= i && i < |smaller| && (0 <= j && j < |larger|) ==> smaller[i] <= larger[j])
}

function method_Util_toBag__Sequence$Node$(s: Seq[Ref]): Multiset[Ref]
  ensures |result| == |s|
  ensures (forall i: Int :: 0 <= i && i < |s| ==> 0 < ((s[i] in result)))
{
  method_Util_toBag__Sequence$Node$__Integer(s, |s|)
}

function method_Util_toBag__Sequence$Node$__Integer(s: Seq[Ref], maxIdx: Int): Multiset[Ref]
  requires 0 <= maxIdx && maxIdx <= |s|
  ensures |result| == maxIdx
  ensures (forall i: Int :: 0 <= i && i < maxIdx ==> 0 < ((s[i] in result)))
{
  method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, 0, maxIdx)
}

function method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s: Seq[Ref], idx: Int, maxIdx: Int): Multiset[Ref]
  requires 0 <= idx
  requires 0 <= maxIdx && maxIdx <= |s|
  ensures idx <= maxIdx ==> |result| == maxIdx - idx
  ensures (forall i: Int :: idx <= i && i < maxIdx ==> 0 < ((s[i] in result)))
{
  (maxIdx <= idx ? Multiset[Ref]() : (Multiset(s[idx]) union method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx + 1, maxIdx)))
}

function method_Util_toBagPrefixLemma__Sequence$Node$__Sequence$Node$__Integer__Integer__Bag$Node$(pre: Seq[Ref], all: Seq[Ref], idx: Int, maxIdx: Int, asBag: Multiset[Ref]): Bool
  requires 0 <= idx
  requires idx <= maxIdx && maxIdx <= |pre|
  requires method_Util_toBagFrom__Sequence$Node$__Integer__Integer(pre, idx, maxIdx) == asBag
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pre, all)
  ensures method_Util_toBagFrom__Sequence$Node$__Integer__Integer(all, idx, maxIdx) == asBag
  ensures result
{
  (idx < maxIdx ? pre[idx] == all[idx] && method_Util_toBagPrefixLemma__Sequence$Node$__Sequence$Node$__Integer__Integer__Bag$Node$(pre, all, idx + 1, maxIdx, (asBag setminus Multiset(pre[idx]))) : asBag == Multiset[Ref]())
}

function method_Util_toBagMaxIdxIncrLemma__Sequence$Node$__Integer__Integer__Bag$Node$(s: Seq[Ref], idx: Int, maxIdx: Int, asBag: Multiset[Ref]): Bool
  requires 0 <= idx
  requires idx <= maxIdx && maxIdx < |s|
  requires method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx, maxIdx) == asBag
  ensures method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx, maxIdx + 1) == (asBag union Multiset(s[maxIdx]))
  ensures result
{
  (idx < maxIdx ? method_Util_toBagMaxIdxIncrLemma__Sequence$Node$__Integer__Integer__Bag$Node$(s, idx + 1, maxIdx, (asBag setminus Multiset(s[idx]))) : asBag == Multiset[Ref]() && method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx, maxIdx + 1) == Multiset(s[maxIdx]))
}

function method_Tree_validTree__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  method_Tree_validSubtree__Node(globals, current) && !method_Tree_getColor__Node(globals, current)
}

function method_Tree_validSubtree__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  requires method_Tree_sortedCritEqualLemma__Node(globals, current)
{
  method_Tree_blackBalanced__Node(globals, current) && method_Tree_noDBlack__Node(globals, current) && method_Tree_noDoubleRed__Node(globals, current) && method_Tree_sorted__Node(globals, current)
}

function method_Tree_blackHeight__Node(globals: Ref, current: Ref): Int
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  ensures 1 <= result
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current == null ? 1 : (current.field_Node_dblackNull ? 2 : method_Tree_getBlacks__Node(globals, current) + (method_Tree_blackHeight__Node(globals, current.field_Node_right) < method_Tree_blackHeight__Node(globals, current.field_Node_left) ? method_Tree_blackHeight__Node(globals, current.field_Node_left) : method_Tree_blackHeight__Node(globals, current.field_Node_right)))))
}

function method_Tree_getBlacks__Node(globals: Ref, current: Ref): Int
  requires current != null ==> acc(current.field_Node_color, wildcard) && acc(current.field_Node_dblack, wildcard)
{
  (current == null ? 1 : (current.field_Node_color ? 0 : (current.field_Node_dblack ? 2 : 1)))
}

function method_Tree_isDBlack__Node(globals: Ref, current: Ref): Bool
  requires current != null ==> acc(current.field_Node_dblack, wildcard)
{
  current != null && current.field_Node_dblack
}

function method_Tree_blackBalanced__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current == null ? true : method_Tree_blackHeight__Node(globals, current.field_Node_left) == method_Tree_blackHeight__Node(globals, current.field_Node_right) && method_Tree_blackBalanced__Node(globals, current.field_Node_left) && method_Tree_blackBalanced__Node(globals, current.field_Node_right)))
}

function method_Tree_noDBlack__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in !method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtTop__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtLeft__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_dblackAtTop__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtLeftLeft__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_dblackAtLeft__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtRight__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_dblackAtTop__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtRightRight__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_dblackAtRight__Node(globals, current.field_Node_right))
}

function method_Tree_noDoubleRed__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (!method_Tree_getColor__Node(globals, current) || !method_Tree_getColor__Node(globals, current.field_Node_left) && !method_Tree_getColor__Node(globals, current.field_Node_right)) && method_Tree_noDoubleRed__Node(globals, current.field_Node_left) && method_Tree_noDoubleRed__Node(globals, current.field_Node_right))
}

function method_Tree_dbRedAtLeft__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null && (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_getColor__Node(globals, current) && (method_Tree_getColor__Node(globals, current.field_Node_left) && !method_Tree_getColor__Node(globals, current.field_Node_right)) && method_Tree_noDoubleRed__Node(globals, current.field_Node_left) && method_Tree_noDoubleRed__Node(globals, current.field_Node_right))
}

function method_Tree_dbRedAtRight__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null && (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_getColor__Node(globals, current) && (!method_Tree_getColor__Node(globals, current.field_Node_left) && method_Tree_getColor__Node(globals, current.field_Node_right)) && method_Tree_noDoubleRed__Node(globals, current.field_Node_left) && method_Tree_noDoubleRed__Node(globals, current.field_Node_right))
}

function method_Tree_toBag__Node(globals: Ref, current: Ref): Multiset[Int]
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (current == null ? Multiset[Int]() : (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current.field_Node_dblackNull ? Multiset[Int]() : ((method_Tree_toBag__Node(globals, current.field_Node_left) union Multiset(current.field_Node_key)) union method_Tree_toBag__Node(globals, current.field_Node_right)))))
}

function method_Tree_subbag__Bag$Integer$__Bag$Integer$(b1: Multiset[Int], b2: Multiset[Int]): Bool
{
  (forall i: Int :: { (i in b1) } { (i in b2) } (i in b1) != 0 ==> ((i in b1)) <= ((i in b2)))
}

function method_Tree_toSeq__Node(globals: Ref, current: Ref): Seq[Ref]
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (current == null ? Seq[Ref]() : (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current.field_Node_dblackNull ? Seq[Ref]() : method_Tree_toSeq__Node(globals, current.field_Node_left) ++ Seq(current) ++ method_Tree_toSeq__Node(globals, current.field_Node_right))))
}

function method_Tree_toSeqKeys__Node(globals: Ref, current: Ref): Seq[Int]
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  ensures |result| == |method_Tree_toSeq__Node(globals, current)|
{
  (current == null ? Seq[Int]() : (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current.field_Node_dblackNull ? Seq[Int]() : method_Tree_toSeqKeys__Node(globals, current.field_Node_left) ++ Seq(current.field_Node_key) ++ method_Tree_toSeqKeys__Node(globals, current.field_Node_right))))
}

function method_Tree_smaller__Bag$Integer$__Integer(b: Multiset[Int], max: Int): Bool
{
  (forall i: Int :: { (i in b) } (i in b) != 0 ==> i <= max)
}

function method_Tree_larger__Bag$Integer$__Integer(b: Multiset[Int], min: Int): Bool
{
  (forall i: Int :: { (i in b) } (i in b) != 0 ==> min <= i)
}

function method_Tree_larger__Bag$Integer$__Bag$Integer$(b1: Multiset[Int], b2: Multiset[Int]): Bool
{
  (forall i: Int :: { (i in b2) } (i in b2) != 0 ==> method_Tree_larger__Bag$Integer$__Integer(b1, i))
}

function method_Tree_sorted__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_smaller__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, current.field_Node_left), current.field_Node_key) && method_Tree_larger__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, current.field_Node_right), current.field_Node_key) && method_Tree_sorted__Node(globals, current.field_Node_left) && method_Tree_sorted__Node(globals, current.field_Node_right))
}

function method_Tree_sortedKeySeq__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (forall i: Int :: { method_Tree_toSeqKeys__Node(globals, current.field_Node_left)[i] } 0 <= i && i < |method_Tree_toSeqKeys__Node(globals, current.field_Node_left)| ==> method_Tree_toSeqKeys__Node(globals, current.field_Node_left)[i] <= current.field_Node_key) && (forall i: Int :: { method_Tree_toSeqKeys__Node(globals, current.field_Node_right)[i] } 0 <= i && i < |method_Tree_toSeqKeys__Node(globals, current.field_Node_right)| ==> current.field_Node_key <= method_Tree_toSeqKeys__Node(globals, current.field_Node_right)[i]) && method_Tree_sortedKeySeq__Node(globals, current.field_Node_left) && method_Tree_sortedKeySeq__Node(globals, current.field_Node_right))
}

function method_Tree_sortedCritEqualLemma__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  ensures result
  ensures method_Tree_sorted__Node(globals, current) == method_Tree_sortedKeySeq__Node(globals, current)


function method_Tree_getColor__Node(globals: Ref, node: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, node), wildcard)
{
  node != null && (unfolding acc(method_Tree_tree_perm__Node(globals, node), wildcard) in node.field_Node_color)
}

function method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals: Ref, current: Ref, oldColor: Bool, oldHeight: Int, oldBag: Multiset[Int]): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  method_Tree_getColor__Node(globals, current) == oldColor && method_Tree_blackHeight__Node(globals, current) == oldHeight && method_Tree_toBag__Node(globals, current) == oldBag
}

function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


predicate method_NodeList_list_perm__NodeList(globals: Ref, nl: Ref) {
  nl != null ==> acc(nl.field_NodeList_node, write) && acc(nl.field_NodeList_next, write) && nl.field_NodeList_node != null && (acc(nl.field_NodeList_node.field_Node_key, write) && acc(nl.field_NodeList_node.field_Node_left, write) && acc(nl.field_NodeList_node.field_Node_right, write) && acc(nl.field_NodeList_node.field_Node_color, write) && acc(nl.field_NodeList_node.field_Node_dblack, write) && acc(nl.field_NodeList_node.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= nl.field_NodeList_node.field_Node_key) && acc(method_NodeList_list_perm__NodeList(globals, nl.field_NodeList_next), write)
}

predicate method_Tree_tree_perm__Node(globals: Ref, current: Ref) {
  current != null ==> acc(current.field_Node_key, write) && acc(current.field_Node_left, write) && acc(current.field_Node_right, write) && acc(current.field_Node_color, write) && acc(current.field_Node_dblack, write) && acc(current.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= current.field_Node_key && acc(method_Tree_tree_perm__Node(globals, current.field_Node_left), write) && acc(method_Tree_tree_perm__Node(globals, current.field_Node_right), write) && (current.field_Node_dblackNull ==> current.field_Node_left == null && current.field_Node_right == null && !current.field_Node_color && current.field_Node_dblack) && (current.field_Node_dblack ==> !current.field_Node_color)
}

predicate Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(x_0: Ref, x_1: Ref, x_2: Ref, x_3: Ref, x_4: Ref, x_5: Ref, x_6: Bool, x_7: Int, x_8: Multiset[Int], x_9: Ref, x_10: Ref, x_11: Ref, x_12: Ref, x_13: Ref, x_14: Ref, x_15: Bool, x_16: Int, x_17: Multiset[Int]) 

method constructor_java_DOT_lang_DOT_Object_java_DOT_lang_DOT_Object(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method internal_java_DOT_lang_DOT_Object_java_DOT_lang_DOT_Object(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method __contract_unsatisfiable__constructor_NodeListIterator_NodeListIterator__NodeList(current_thread_id: Int, globals: Ref, list: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_NodeListIterator()
{
  var diz__1: Ref
  diz__1 := new(field_NodeListIterator_current)
  inhale type_of(diz__1) == class_NodeListIterator()
  inhale true && (acc(method_NodeList_list_perm__NodeList(globals, list), write) && method_NodeList_sorted__NodeList(globals, list))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__constructor_NodeListIterator_NodeListIterator__NodeList_0
  sys__result := diz__1
  // assert
  assert sys__result != null && type_of(sys__result) == class_NodeListIterator()
  inhale false
}

method constructor_NodeListIterator_NodeListIterator__NodeList(current_thread_id: Int, globals: Ref, list: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, list), write)
  requires method_NodeList_sorted__NodeList(globals, list)
  ensures sys__result != null
  ensures type_of(sys__result) == class_NodeListIterator()
  ensures acc(sys__result.field_NodeListIterator_current, write)
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result.field_NodeListIterator_current), write)
  ensures method_NodeListIterator_sorted__NodeListIterator(globals, sys__result)
  ensures sys__result.field_NodeListIterator_current == list
  ensures method_NodeListIterator_toSeq__NodeListIterator(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, list))
  ensures method_NodeListIterator_toSeqKeys__NodeListIterator(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, list))
{
  var diz__2: Ref
  diz__2 := new(field_NodeListIterator_current)
  inhale type_of(diz__2) == class_NodeListIterator()
  diz__2.field_NodeListIterator_current := list
  label method_end_constructor_NodeListIterator_NodeListIterator__NodeList_1
  sys__result := diz__2
  // assert
  assert sys__result != null && type_of(sys__result) == class_NodeListIterator() && acc(sys__result.field_NodeListIterator_current, write) && acc(method_NodeList_list_perm__NodeList(globals, sys__result.field_NodeListIterator_current), write) && method_NodeListIterator_sorted__NodeListIterator(globals, sys__result) && sys__result.field_NodeListIterator_current == list && method_NodeListIterator_toSeq__NodeListIterator(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, list)) && method_NodeListIterator_toSeqKeys__NodeListIterator(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, list))
  inhale false
}

method __contract_unsatisfiable__method_NodeListIterator_hasNext(diz: Ref, current_thread_id: Int, globals: Ref, p: frac) returns (sys__result: Bool)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (acc(diz.field_NodeListIterator_current, frac_val(p)) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), frac_val(p)) && method_NodeListIterator_sorted__NodeListIterator(globals, diz))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_NodeListIterator_hasNext_2
}

method method_NodeListIterator_hasNext(diz: Ref, current_thread_id: Int, globals: Ref, p: frac) returns (sys__result: Bool)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_NodeListIterator_current, frac_val(p))
  requires acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), frac_val(p))
  requires method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  ensures acc(diz.field_NodeListIterator_current, frac_val(p))
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), frac_val(p))
  ensures method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  ensures sys__result == (diz.field_NodeListIterator_current != null)
  ensures !sys__result ==> |method_NodeListIterator_toSeq__NodeListIterator(globals, diz)| == 0
{
  var sys__local__result__3: Bool
  sys__local__result__3 := diz.field_NodeListIterator_current != null
  // assert
  assert acc(diz.field_NodeListIterator_current, frac_val(p)) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), frac_val(p)) && method_NodeListIterator_sorted__NodeListIterator(globals, diz) && sys__local__result__3 == (diz.field_NodeListIterator_current != null) && (!sys__local__result__3 ==> |method_NodeListIterator_toSeq__NodeListIterator(globals, diz)| == 0)
  goto __return_hasNext
  label __return_hasNext
  sys__result := sys__local__result__3
  // assert
  assert acc(diz.field_NodeListIterator_current, frac_val(p)) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), frac_val(p)) && method_NodeListIterator_sorted__NodeListIterator(globals, diz) && sys__result == (diz.field_NodeListIterator_current != null) && (!sys__result ==> |method_NodeListIterator_toSeq__NodeListIterator(globals, diz)| == 0)
  inhale false
  label method_end_method_NodeListIterator_hasNext_3
}

method __contract_unsatisfiable__method_NodeListIterator_getNext(diz: Ref, current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (acc(diz.field_NodeListIterator_current, write) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write) && method_NodeListIterator_sorted__NodeListIterator(globals, diz) && diz.field_NodeListIterator_current != null)
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_NodeListIterator_getNext_4
}

method method_NodeListIterator_getNext(diz: Ref, current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_NodeListIterator_current, write)
  requires acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write)
  requires method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  requires diz.field_NodeListIterator_current != null
  ensures acc(diz.field_NodeListIterator_current, write)
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write)
  ensures method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  ensures acc(sys__result.field_Node_key, write)
  ensures acc(sys__result.field_Node_left, write)
  ensures acc(sys__result.field_Node_right, write)
  ensures acc(sys__result.field_Node_color, write)
  ensures acc(sys__result.field_Node_dblack, write)
  ensures acc(sys__result.field_Node_dblackNull, write)
  ensures acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  ensures globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key
  ensures method_NodeListIterator_toSeq__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeq__NodeListIterator(globals, diz)[1..])
  ensures method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[1..])
  ensures sys__result == old((unfolding acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write) in diz.field_NodeListIterator_current.field_NodeList_node))
  ensures sys__result.field_Node_key == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[0])
  ensures sys__result != null
{
  var sys__local__result__4: Ref
  var keys__5: Seq[Int]
  var res__6: Ref
  var __flatten_35__7: Ref
  var __flatten_36__8: Ref
  var __flatten_37__9: Ref
  keys__5 := method_NodeList_toSeqKeys__NodeList(globals, diz.field_NodeListIterator_current)
  unfold acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write)
  __flatten_35__7 := diz.field_NodeListIterator_current
  res__6 := __flatten_35__7.field_NodeList_node
  // assert
  assert method_NodeList_toSeqKeys__NodeList(globals, diz.field_NodeListIterator_current.field_NodeList_next) == keys__5[1..]
  __flatten_37__9 := diz.field_NodeListIterator_current
  __flatten_36__8 := __flatten_37__9.field_NodeList_next
  diz.field_NodeListIterator_current := __flatten_36__8
  sys__local__result__4 := res__6
  // assert
  assert acc(diz.field_NodeListIterator_current, write) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write) && method_NodeListIterator_sorted__NodeListIterator(globals, diz) && (acc(sys__local__result__4.field_Node_key, write) && acc(sys__local__result__4.field_Node_left, write) && acc(sys__local__result__4.field_Node_right, write) && acc(sys__local__result__4.field_Node_color, write) && acc(sys__local__result__4.field_Node_dblack, write) && acc(sys__local__result__4.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__local__result__4.field_Node_key) && method_NodeListIterator_toSeq__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeq__NodeListIterator(globals, diz)[1..]) && method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[1..]) && sys__local__result__4 == old((unfolding acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write) in diz.field_NodeListIterator_current.field_NodeList_node)) && sys__local__result__4.field_Node_key == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[0]) && sys__local__result__4 != null
  goto __return_getNext
  label __return_getNext
  sys__result := sys__local__result__4
  // assert
  assert acc(diz.field_NodeListIterator_current, write) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write) && method_NodeListIterator_sorted__NodeListIterator(globals, diz) && acc(sys__result.field_Node_key, write) && acc(sys__result.field_Node_left, write) && acc(sys__result.field_Node_right, write) && acc(sys__result.field_Node_color, write) && acc(sys__result.field_Node_dblack, write) && acc(sys__result.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key && method_NodeListIterator_toSeq__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeq__NodeListIterator(globals, diz)[1..]) && method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[1..]) && sys__result == old((unfolding acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write) in diz.field_NodeListIterator_current.field_NodeList_node)) && sys__result.field_Node_key == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[0]) && sys__result != null
  inhale false
  label method_end_method_NodeListIterator_getNext_5
}

method method_NodeList_appendRec__Node__NodeList(current_thread_id: Int, globals: Ref, node: Ref, nl: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), write)
  requires node != null
  requires acc(node.field_Node_key, write)
  requires acc(node.field_Node_left, write)
  requires acc(node.field_Node_right, write)
  requires acc(node.field_Node_color, write)
  requires acc(node.field_Node_dblack, write)
  requires acc(node.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= node.field_Node_key
  requires method_NodeList_sorted__NodeList(globals, nl) && (forall i: Int :: { method_NodeList_toSeqKeys__NodeList(globals, nl)[i] } 0 <= i && i < |method_NodeList_toSeqKeys__NodeList(globals, nl)| ==> method_NodeList_toSeqKeys__NodeList(globals, nl)[i] <= node.field_Node_key)
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures method_NodeList_size__NodeList(globals, sys__result) == 1 + old(method_NodeList_size__NodeList(globals, nl))
  ensures method_NodeList_toSeq__NodeList(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, nl) ++ Seq(node))
  ensures method_NodeList_toSeqKeys__NodeList(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, nl) ++ Seq(node.field_Node_key))
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
{
  inhale false
}

method method_NodeList_extend__NodeList__NodeList(current_thread_id: Int, globals: Ref, front: Ref, back: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, front), write)
  requires acc(method_NodeList_list_perm__NodeList(globals, back), write)
  requires method_NodeList_sorted__NodeList(globals, front) && method_NodeList_sorted__NodeList(globals, back) && (forall i: Int, j: Int :: { method_NodeList_toSeqKeys__NodeList(globals, back)[j],method_NodeList_toSeqKeys__NodeList(globals, front)[i] } 0 <= i && i < |method_NodeList_toSeqKeys__NodeList(globals, front)| && (0 <= j && j < |method_NodeList_toSeqKeys__NodeList(globals, back)|) ==> method_NodeList_toSeqKeys__NodeList(globals, front)[i] <= method_NodeList_toSeqKeys__NodeList(globals, back)[j])
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures method_NodeList_size__NodeList(globals, sys__result) == old(method_NodeList_size__NodeList(globals, front)) + old(method_NodeList_size__NodeList(globals, back))
  ensures method_NodeList_toSeq__NodeList(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, front)) ++ old(method_NodeList_toSeq__NodeList(globals, back))
  ensures method_NodeList_toSeqKeys__NodeList(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, front)) ++ old(method_NodeList_toSeqKeys__NodeList(globals, back))
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
{
  inhale false
}

method method_NodeList_fromTree__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires method_Tree_noDBlack__Node(globals, node)
  requires method_Tree_sortedKeySeq__Node(globals, node)
  ensures node != null ==> sys__result != null
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures old(method_Tree_toSeq__Node(globals, node)) == method_NodeList_toSeq__NodeList(globals, sys__result)
  ensures old(method_Tree_toSeqKeys__Node(globals, node)) == method_NodeList_toSeqKeys__NodeList(globals, sys__result)
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
{
  inhale false
}

method constructor_NodeList_NodeList__Node__NodeList(current_thread_id: Int, globals: Ref, node: Ref, nl: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires node != null
  requires acc(node.field_Node_key, write)
  requires acc(node.field_Node_left, write)
  requires acc(node.field_Node_right, write)
  requires acc(node.field_Node_color, write)
  requires acc(node.field_Node_dblack, write)
  requires acc(node.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= node.field_Node_key
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), write)
  requires method_NodeList_sorted__NodeList(globals, nl) && (let nlKeys == (method_NodeList_toSeqKeys__NodeList(globals, nl)) in (forall i: Int :: { nlKeys[i] } 0 <= i && i < |nlKeys| ==> node.field_Node_key <= nlKeys[i]))
  ensures sys__result != null
  ensures type_of(sys__result) == class_NodeList()
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
  ensures method_NodeList_size__NodeList(globals, sys__result) == old(method_NodeList_size__NodeList(globals, nl)) + 1
  ensures method_NodeList_toSeqKeys__NodeList(globals, sys__result) == old(Seq(node.field_Node_key) ++ method_NodeList_toSeqKeys__NodeList(globals, nl))
  ensures (unfolding acc(method_NodeList_list_perm__NodeList(globals, sys__result), write) in sys__result.field_NodeList_node == node && sys__result.field_NodeList_next == nl && method_NodeList_toSeq__NodeList(globals, sys__result.field_NodeList_next) == old(method_NodeList_toSeq__NodeList(globals, nl)))
{
  inhale false
}

method method_NodeList_length(diz: Ref, current_thread_id: Int, globals: Ref, p: frac) returns (sys__result: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, diz), frac_val(p))
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz), frac_val(p))
  ensures sys__result == method_NodeList_size__NodeList(globals, diz)
{
  inhale false
}

method method_NodeList_append__Node(diz: Ref, current_thread_id: Int, globals: Ref, node: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires node != null
  requires acc(node.field_Node_key, write)
  requires acc(node.field_Node_left, write)
  requires acc(node.field_Node_right, write)
  requires acc(node.field_Node_color, write)
  requires acc(node.field_Node_dblack, write)
  requires acc(node.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= node.field_Node_key
  requires acc(method_NodeList_list_perm__NodeList(globals, diz), write)
  requires method_NodeList_sorted__NodeList(globals, diz) && (forall i: Int :: { method_NodeList_toSeqKeys__NodeList(globals, diz)[i] } 0 <= i && i < |method_NodeList_toSeqKeys__NodeList(globals, diz)| ==> method_NodeList_toSeqKeys__NodeList(globals, diz)[i] <= node.field_Node_key)
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz), write)
  ensures method_NodeList_size__NodeList(globals, diz) == 1 + old(method_NodeList_size__NodeList(globals, diz))
  ensures method_NodeList_toSeq__NodeList(globals, diz) == old(method_NodeList_toSeq__NodeList(globals, diz) ++ Seq(node))
  ensures method_NodeList_toSeqKeys__NodeList(globals, diz) == old(method_NodeList_toSeqKeys__NodeList(globals, diz) ++ Seq(node.field_Node_key))
  ensures method_NodeList_sorted__NodeList(globals, diz)
{
  inhale false
}

method constructor_java_DOT_lang_DOT_Number_java_DOT_lang_DOT_Number(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Number()
{
  inhale false
}

method internal_java_DOT_lang_DOT_Number_java_DOT_lang_DOT_Number(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Number()
{
  inhale false
}

method constructor_Node_Node__Integer(current_thread_id: Int, globals: Ref, item: Int) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= item
  ensures sys__result != null
  ensures type_of(sys__result) == class_Node()
  ensures acc(sys__result.field_Node_key, write)
  ensures acc(sys__result.field_Node_left, write)
  ensures acc(sys__result.field_Node_right, write)
  ensures acc(sys__result.field_Node_color, write)
  ensures acc(sys__result.field_Node_dblack, write)
  ensures acc(sys__result.field_Node_dblackNull, write)
  ensures acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  ensures globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key
  ensures sys__result.field_Node_key == item
  ensures sys__result.field_Node_left == null
  ensures sys__result.field_Node_right == null
  ensures sys__result.field_Node_color == true
  ensures sys__result.field_Node_dblack == false
  ensures sys__result.field_Node_dblackNull == false
{
  inhale false
}

method constructor_Util_Util(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_Util()
{
  inhale false
}

method internal_Util_Util(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_Util()
{
  inhale false
}

method method_Tree_subbagCompareLemma__Bag$Integer$__Bag$Integer$__Bag$Integer$__Integer(current_thread_id: Int, globals: Ref, bigBag: Multiset[Int], subBag: Multiset[Int], diff: Multiset[Int], key: Int)
  requires 0 <= current_thread_id
  requires bigBag == (subBag union diff)
  ensures method_Tree_smaller__Bag$Integer$__Integer(bigBag, key) ==> method_Tree_smaller__Bag$Integer$__Integer(subBag, key)
  ensures method_Tree_larger__Bag$Integer$__Integer(bigBag, key) ==> method_Tree_larger__Bag$Integer$__Integer(subBag, key)
{
  inhale false
}

method method_Tree_makeWand__Node__Node__Node__Node__Boolean__Integer__Bag$Integer$__Boolean__Integer__Bag$Integer$__Boolean__Integer__Bag$Integer$__Boolean(current_thread_id: Int, globals: Ref, res: Ref, current: Ref, containingSubtree: Ref, otherSubtree: Ref, oldColor: Bool, oldHeight: Int, oldBag: Multiset[Int], subColor: Bool, subHeight: Int, subBag: Multiset[Int], resColor: Bool, resHeight: Int, resBag: Multiset[Int], goLeft: Bool)
  requires 0 <= current_thread_id
  requires current != null
  requires acc(current.field_Node_key, write)
  requires acc(current.field_Node_left, write)
  requires acc(current.field_Node_right, write)
  requires acc(current.field_Node_color, write)
  requires acc(current.field_Node_dblack, write)
  requires acc(current.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= current.field_Node_key
  requires acc(method_Tree_tree_perm__Node(globals, otherSubtree), write)
  requires current.field_Node_dblackNull ==> current.field_Node_left == null && current.field_Node_right == null && !current.field_Node_color && current.field_Node_dblack
  requires current.field_Node_dblack ==> !current.field_Node_color
  requires (goLeft ? containingSubtree == current.field_Node_left && otherSubtree == current.field_Node_right : containingSubtree == current.field_Node_right && otherSubtree == current.field_Node_left)
  requires acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, res, globals, res, globals, res, resColor, resHeight, resBag, globals, containingSubtree, globals, containingSubtree, globals, containingSubtree, subColor, subHeight, subBag), write)
  requires subHeight == method_Tree_blackHeight__Node(globals, otherSubtree) && method_Tree_blackBalanced__Node(globals, otherSubtree)
  requires oldHeight == method_Tree_getBlacks__Node(globals, current) + subHeight
  requires method_Tree_noDBlack__Node(globals, otherSubtree)
  requires !current.field_Node_dblack
  requires current.field_Node_color == oldColor
  requires (!current.field_Node_color || !subColor && !method_Tree_getColor__Node(globals, otherSubtree)) && method_Tree_noDoubleRed__Node(globals, otherSubtree)
  requires oldBag == ((subBag union method_Tree_toBag__Node(globals, otherSubtree)) union Multiset(current.field_Node_key))
  requires (goLeft ? method_Tree_smaller__Bag$Integer$__Integer(subBag, current.field_Node_key) && method_Tree_larger__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, otherSubtree), current.field_Node_key) : method_Tree_larger__Bag$Integer$__Integer(subBag, current.field_Node_key) && method_Tree_smaller__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, otherSubtree), current.field_Node_key))
  requires method_Tree_sorted__Node(globals, otherSubtree)
  ensures acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, res, globals, res, globals, res, resColor, resHeight, resBag, globals, current, globals, current, globals, current, oldColor, oldHeight, oldBag), write)
{
  inhale false
}

method method_Tree_isBlack__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Bool)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures sys__result == (node == null || (unfolding acc(method_Tree_tree_perm__Node(globals, node), 1 / 2) in !node.field_Node_color))
{
  inhale false
}

method method_Tree_isRed__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Bool)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures sys__result == (node != null && (unfolding acc(method_Tree_tree_perm__Node(globals, node), 1 / 2) in node.field_Node_color))
{
  inhale false
}

method method_Tree_makeNodeSingleBlack__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires node != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getBlacks__Node(globals, sys__result) == 1)
  ensures old(method_Tree_sorted__Node(globals, node)) ==> method_Tree_sorted__Node(globals, sys__result)
  ensures old(method_Tree_blackBalanced__Node(globals, node)) ==> method_Tree_blackBalanced__Node(globals, sys__result)
  ensures old(method_Tree_noDoubleRed__Node(globals, node) || (method_Tree_dbRedAtLeft__Node(globals, node) || method_Tree_dbRedAtRight__Node(globals, node))) ==> method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures old(method_Tree_toBag__Node(globals, node)) == method_Tree_toBag__Node(globals, sys__result)
  ensures (old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getBlacks__Node(globals, node))) == 2 ? old(method_Tree_blackHeight__Node(globals, node)) - 1 == method_Tree_blackHeight__Node(globals, sys__result) : (old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getBlacks__Node(globals, node))) == 1 ? old(method_Tree_blackHeight__Node(globals, node)) == method_Tree_blackHeight__Node(globals, sys__result) : old(method_Tree_blackHeight__Node(globals, node)) + 1 == method_Tree_blackHeight__Node(globals, sys__result)))
  ensures old(method_Tree_dblackAtTop__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
  ensures old(method_Tree_noDBlack__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_insert__Integer(diz: Ref, current_thread_id: Int, globals: Ref, key: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_Tree_root, write)
  requires acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  requires method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  requires method_Tree_sorted__Node(globals, diz.field_Tree_root)
  requires method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  requires method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= key
  ensures acc(diz.field_Tree_root, write)
  ensures acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  ensures method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  ensures method_Tree_sorted__Node(globals, diz.field_Tree_root)
  ensures method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  ensures method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
{
  inhale false
}

method method_Tree_insertRec__Node__Integer(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref, key: Int) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= key
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDBlack__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  ensures sys__result != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result) || (method_Tree_dbRedAtLeft__Node(globals, sys__result) || method_Tree_dbRedAtRight__Node(globals, sys__result))
  ensures old(method_Tree_blackHeight__Node(globals, current)) == method_Tree_blackHeight__Node(globals, sys__result)
  ensures (old(method_Tree_toBag__Node(globals, current)) union Multiset(key)) == method_Tree_toBag__Node(globals, sys__result)
  ensures old(method_Tree_getColor__Node(globals, current)) == method_Tree_getColor__Node(globals, sys__result) || method_Tree_getColor__Node(globals, sys__result) && !(unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_left)) && !(unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_right))
{
  inhale false
}

method method_Tree_deleteKey__Integer(diz: Ref, current_thread_id: Int, globals: Ref, key: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_Tree_root, write)
  requires acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  requires method_Tree_sorted__Node(globals, diz.field_Tree_root)
  requires method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  requires method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  requires method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
  ensures acc(diz.field_Tree_root, write)
  ensures acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  ensures method_Tree_sorted__Node(globals, diz.field_Tree_root)
  ensures method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  ensures method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  ensures method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
{
  inhale false
}

method method_Tree_fixDBlackLeft__Node(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires current != null
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_dblackAtLeft__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result) || method_Tree_dblackAtTop__Node(globals, sys__result)
  ensures old(method_Tree_toBag__Node(globals, current)) == method_Tree_toBag__Node(globals, sys__result)
  ensures !old(method_Tree_getColor__Node(globals, current)) ==> !method_Tree_getColor__Node(globals, sys__result)
  ensures old(method_Tree_blackHeight__Node(globals, current)) == method_Tree_blackHeight__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_fixDBlackRight__Node(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires current != null
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_dblackAtRight__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result) || method_Tree_dblackAtTop__Node(globals, sys__result)
  ensures old(method_Tree_toBag__Node(globals, current)) == method_Tree_toBag__Node(globals, sys__result)
  ensures !old(method_Tree_getColor__Node(globals, current)) ==> !method_Tree_getColor__Node(globals, sys__result)
  ensures old(method_Tree_blackHeight__Node(globals, current)) == method_Tree_blackHeight__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_deleteRec__Node__Integer(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref, key: Int) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires current != null
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_noDBlack__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result) || method_Tree_dblackAtTop__Node(globals, sys__result)
  ensures ((key in old(method_Tree_toBag__Node(globals, current))) == 0 ? old(method_Tree_toBag__Node(globals, current)) == method_Tree_toBag__Node(globals, sys__result) : old(method_Tree_toBag__Node(globals, current)) == (method_Tree_toBag__Node(globals, sys__result) union Multiset(key)))
  ensures !old(method_Tree_getColor__Node(globals, current)) ==> !method_Tree_getColor__Node(globals, sys__result)
  ensures method_Tree_blackHeight__Node(globals, sys__result) == old(method_Tree_blackHeight__Node(globals, current))
{
  inhale false
}

method method_Tree_getMin__Node(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref) returns (sys__result: Ref, resColor: Bool, resHeight: Int, resBag: Multiset[Int])
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_validSubtree__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_validSubtree__Node(globals, sys__result)
  ensures acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, sys__result, globals, sys__result, globals, sys__result, resColor, resHeight, resBag, globals, current, globals, current, globals, current, old(method_Tree_getColor__Node(globals, current)), old(method_Tree_blackHeight__Node(globals, current)), old(method_Tree_toBag__Node(globals, current))), write)
  ensures current == null ==> sys__result == null
  ensures current != null ==> sys__result != null && (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_left == null) && method_Tree_larger__Bag$Integer$__Integer(old(method_Tree_toBag__Node(globals, current)), (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_key)) && 0 < (((unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_key) in old(method_Tree_toBag__Node(globals, current))))
  ensures resColor == method_Tree_getColor__Node(globals, sys__result)
  ensures resHeight == method_Tree_blackHeight__Node(globals, sys__result)
  ensures resBag == method_Tree_toBag__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_search__Node__Integer(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref, key: Int) returns (sys__result: Ref, resColor: Bool, resHeight: Int, resBag: Multiset[Int])
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_validSubtree__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_validSubtree__Node(globals, sys__result)
  ensures current == null ==> sys__result == null
  ensures sys__result != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_key == key)
  ensures acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, sys__result, globals, sys__result, globals, sys__result, resColor, resHeight, resBag, globals, current, globals, current, globals, current, old(method_Tree_getColor__Node(globals, current)), old(method_Tree_blackHeight__Node(globals, current)), old(method_Tree_toBag__Node(globals, current))), write)
  ensures resColor == method_Tree_getColor__Node(globals, sys__result)
  ensures resHeight == method_Tree_blackHeight__Node(globals, sys__result)
  ensures resBag == method_Tree_toBag__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_rotateLeft__Node(diz: Ref, current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires node != null
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires method_Tree_sorted__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in node.field_Node_right != null)
  requires !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_left)) || !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_right))
  requires !method_Tree_getColor__Node(globals, node) || (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in !(unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_right), write) in method_Tree_getColor__Node(globals, node.field_Node_right.field_Node_right)))
  requires method_Tree_noDoubleRed__Node(globals, node) || method_Tree_dbRedAtRight__Node(globals, node) || !method_Tree_getColor__Node(globals, node) && (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_noDoubleRed__Node(globals, node.field_Node_left) && method_Tree_dbRedAtRight__Node(globals, node.field_Node_right))
  requires method_Tree_noDBlack__Node(globals, node) || method_Tree_dblackAtLeft__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackBalanced__Node(globals, node.field_Node_left) && method_Tree_blackBalanced__Node(globals, node.field_Node_right))
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackHeight__Node(globals, node.field_Node_left) == (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_right), write) in method_Tree_blackHeight__Node(globals, node.field_Node_right.field_Node_left)))
  ensures sys__result != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_left != null)
  ensures old(method_Tree_toBag__Node(globals, node)) == method_Tree_toBag__Node(globals, sys__result)
  ensures old(method_Tree_getColor__Node(globals, node)) == method_Tree_getColor__Node(globals, sys__result)
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_right))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_left))
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_right), write) in method_Tree_getColor__Node(globals, node.field_Node_right.field_Node_right)))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_right))
  ensures old(method_Tree_blackHeight__Node(globals, node)) == method_Tree_blackHeight__Node(globals, sys__result)
  ensures (old(method_Tree_dbRedAtRight__Node(globals, node)) ? method_Tree_dbRedAtLeft__Node(globals, sys__result) : method_Tree_noDoubleRed__Node(globals, sys__result))
  ensures old(method_Tree_noDBlack__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
  ensures old(method_Tree_dblackAtLeft__Node(globals, node)) ==> method_Tree_dblackAtLeftLeft__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackBalanced__Node(globals, sys__result.field_Node_left) && method_Tree_blackBalanced__Node(globals, sys__result.field_Node_right))
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_right) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result.field_Node_left), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_left.field_Node_right)))
{
  inhale false
}

method method_Tree_rotateRight__Node(diz: Ref, current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires node != null
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires method_Tree_sorted__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in node.field_Node_left != null)
  requires !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_left)) || !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_right))
  requires !method_Tree_getColor__Node(globals, node) || (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in !(unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_left), write) in method_Tree_getColor__Node(globals, node.field_Node_left.field_Node_left)))
  requires method_Tree_noDoubleRed__Node(globals, node) || method_Tree_dbRedAtLeft__Node(globals, node) || !method_Tree_getColor__Node(globals, node) && (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_noDoubleRed__Node(globals, node.field_Node_right) && method_Tree_dbRedAtLeft__Node(globals, node.field_Node_left))
  requires method_Tree_noDBlack__Node(globals, node) || method_Tree_dblackAtRight__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackBalanced__Node(globals, node.field_Node_left) && method_Tree_blackBalanced__Node(globals, node.field_Node_right))
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackHeight__Node(globals, node.field_Node_right) == (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_left), write) in method_Tree_blackHeight__Node(globals, node.field_Node_left.field_Node_right)))
  ensures sys__result != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_right != null)
  ensures old(method_Tree_toBag__Node(globals, node)) == method_Tree_toBag__Node(globals, sys__result)
  ensures old(method_Tree_getColor__Node(globals, node)) == method_Tree_getColor__Node(globals, sys__result)
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_left))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_right))
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_left), write) in method_Tree_getColor__Node(globals, node.field_Node_left.field_Node_left)))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_left))
  ensures old(method_Tree_blackHeight__Node(globals, node)) == method_Tree_blackHeight__Node(globals, sys__result)
  ensures (old(method_Tree_dbRedAtLeft__Node(globals, node)) ? method_Tree_dbRedAtRight__Node(globals, sys__result) : method_Tree_noDoubleRed__Node(globals, sys__result))
  ensures old(method_Tree_noDBlack__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
  ensures old(method_Tree_dblackAtRight__Node(globals, node)) ==> method_Tree_dblackAtRightRight__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackBalanced__Node(globals, sys__result.field_Node_left) && method_Tree_blackBalanced__Node(globals, sys__result.field_Node_right))
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_left) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result.field_Node_right), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_right.field_Node_left)))
{
  inhale false
}

method constructor_Tree_Tree(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_Tree()
  ensures acc(sys__result.field_Tree_root, write) && sys__result.field_Tree_root == null
{
  inhale false
}

method array_new_Sequence_Integer_(size0: Int) returns (sys__result: Seq[Int])
  ensures 0 < size0 ==> sys__result == Seq[Int]()
{
  inhale false
}

method array_new_Sequence_Node_(size0: Int) returns (sys__result: Seq[Ref])
  ensures 0 < size0 ==> sys__result == Seq[Ref]()
{
  inhale false
}

method array_new_Bag_Integer_(size0: Int) returns (sys__result: Multiset[Int])
  ensures 0 < size0 ==> sys__result == Multiset[Int]()
{
  inhale false
}

method array_new_Bag_Node_(size0: Int) returns (sys__result: Multiset[Ref])
  ensures 0 < size0 ==> sys__result == Multiset[Ref]()
{
  inhale false
}
