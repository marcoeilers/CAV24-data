domain TYPE {
  
  unique function class_java_DOT_lang_DOT_Object(): TYPE
  
  unique function class_java_DOT_lang_DOT_Number(): TYPE
  
  unique function class_java_DOT_lang_DOT_Class(): TYPE
  
  unique function class_java_DOT_lang_DOT_Integer(): TYPE
  
  unique function class_TreeMerger(): TYPE
  
  unique function class_TreeConverterThread(): TYPE
  
  unique function class_ListMergerThread(): TYPE
  
  unique function class_VerCorsThread(): TYPE
  
  unique function class_ListListQueue(): TYPE
  
  unique function class_Node(): TYPE
  
  unique function class_Tree(): TYPE
  
  unique function class_Util(): TYPE
  
  unique function class_NodeList(): TYPE
  
  unique function class_NodeListIterator(): TYPE
  
  unique function class_ListList(): TYPE
  
  unique function class_EncodedGlobalVariables(): TYPE
  
  unique function class_MagicWands(): TYPE
  
  function directSuperclass(t: TYPE): TYPE
  
  function type_of(val: Ref): TYPE
  
  axiom java_DOT_lang_DOT_Object_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Object()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Number_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Number()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Class_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Class()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom java_DOT_lang_DOT_Integer_directSuperclass {
    directSuperclass(class_java_DOT_lang_DOT_Integer()) == class_java_DOT_lang_DOT_Number()
  }
  
  axiom TreeMerger_directSuperclass {
    directSuperclass(class_TreeMerger()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom TreeConverterThread_directSuperclass {
    directSuperclass(class_TreeConverterThread()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom ListMergerThread_directSuperclass {
    directSuperclass(class_ListMergerThread()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom VerCorsThread_directSuperclass {
    directSuperclass(class_VerCorsThread()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom ListListQueue_directSuperclass {
    directSuperclass(class_ListListQueue()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Node_directSuperclass {
    directSuperclass(class_Node()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Tree_directSuperclass {
    directSuperclass(class_Tree()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom Util_directSuperclass {
    directSuperclass(class_Util()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom NodeList_directSuperclass {
    directSuperclass(class_NodeList()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom NodeListIterator_directSuperclass {
    directSuperclass(class_NodeListIterator()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom ListList_directSuperclass {
    directSuperclass(class_ListList()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom EncodedGlobalVariables_directSuperclass {
    directSuperclass(class_EncodedGlobalVariables()) == class_java_DOT_lang_DOT_Object()
  }
  
  axiom MagicWands_directSuperclass {
    directSuperclass(class_MagicWands()) == class_java_DOT_lang_DOT_Object()
  }
}

domain frac {
  
  function frac_val(a: frac): Perm
  
  axiom frac_eq {
    (forall a: frac, b: frac :: { frac_val(a),frac_val(b) } (frac_val(a) == frac_val(b)) == (a == b))
  }
  
  axiom frac_bound {
    (forall a: frac :: { frac_val(a) } 0 / 1 < frac_val(a) && frac_val(a) <= 1 / 1)
  }
}

domain zfrac {
  
  function zfrac_val(a: zfrac): Perm
  
  axiom zfrac_eq {
    (forall a: zfrac, b: zfrac :: { zfrac_val(a),zfrac_val(b) } (zfrac_val(a) == zfrac_val(b)) == (a == b))
  }
  
  axiom zfrac_bound {
    (forall a: zfrac :: { zfrac_val(a) } 0 / 1 <= zfrac_val(a) && zfrac_val(a) <= 1 / 1)
  }
}

domain VCTArray[CT] {
  
  function loc(a: VCTArray[CT], i: Int): CT
  
  function alen(a: VCTArray[CT]): Int
  
  function first(r: CT): VCTArray[CT]
  
  function second(r: CT): Int
  
  axiom all_diff {
    (forall a: VCTArray[CT], i: Int :: { (loc(a, i): CT) } (first((loc(a, i): CT)): VCTArray[CT]) == a && (second((loc(a, i): CT)): Int) == i)
  }
  
  axiom len_nonneg {
    (forall a: VCTArray[CT] :: { (alen(a): Int) } (alen(a): Int) >= 0)
  }
}

domain VCTOption[T] {
  
  function VCTNone(): VCTOption[T]
  
  function VCTSome(t: T): VCTOption[T]
  
  function getVCTOption(o: VCTOption[T]): T
  
  function getVCTOptionOrElse(o: VCTOption[T], default: T): T
  
  axiom not_equal_vct {
    (forall x: T :: { (VCTSome(x): VCTOption[T]) } (VCTNone(): VCTOption[T]) != (VCTSome(x): VCTOption[T]))
  }
  
  axiom get_axiom_vct {
    (forall x: T :: { (getVCTOption((VCTSome(x): VCTOption[T])): T) } (getVCTOption((VCTSome(x): VCTOption[T])): T) == x)
  }
  
  axiom get_axiom_vct_2 {
    (forall x: VCTOption[T] :: { (VCTSome((getVCTOption(x): T)): VCTOption[T]) } (VCTSome((getVCTOption(x): T)): VCTOption[T]) == x)
  }
  
  axiom get_or_else_axiom_1 {
    (forall val: T, default: T :: { (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTSome(val): VCTOption[T]), default): T) == val)
  }
  
  axiom get_or_else_axiom_2 {
    (forall default: T :: { (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) } (getVCTOptionOrElse((VCTNone(): VCTOption[T]), default): T) == default)
  }
}

//  a field 
field possibly_illegal_cast: Ref

//  a field 
field field_TreeConverterThread_tree: Ref

//  a field 
field field_TreeConverterThread_res: Ref

//  a field 
field field_TreeConverterThread_treeAsSeq: Seq[Ref]

//  a field 
field field_TreeConverterThread_keysAsSeq: Seq[Int]

//  a field 
field field_ListMergerThread_src1: Ref

//  a field 
field field_ListMergerThread_src2: Ref

//  a field 
field field_ListMergerThread_dst: Ref

//  a field 
field field_ListListQueue_curNLIterator: Ref

//  a field 
field field_ListListQueue_batches: Ref

//  a field 
field field_ListListQueue_filling: Ref

//  a field 
field field_ListListQueue_isLastBatch: Bool

//  a field 
field field_ListListQueue_finalised: Bool

//  a field 
field field_ListListQueue_allP: Seq[Ref]

//  a field 
field field_ListListQueue_allC: Seq[Ref]

//  a field 
field field_ListListQueue_keysP: Seq[Int]

//  a field 
field field_ListListQueue_keysC: Seq[Int]

//  a field 
field field_ListListQueue_readHead: Int

//  a field 
field field_ListListQueue_batchHead: Int

//  a field 
field field_ListListQueue_finalisedC: Bool

//  a field 
field field_ListListQueue_maxKey: Int

//  a field 
field field_ListListQueue_maxKeyBatches: Int

//  a field 
field field_Node_key: Int

//  a field 
field field_Node_left: Ref

//  a field 
field field_Node_right: Ref

//  a field 
field field_Node_color: Bool

//  a field 
field field_Node_dblack: Bool

//  a field 
field field_Node_dblackNull: Bool

//  a field 
field field_Tree_root: Ref

//  a field 
field field_NodeList_node: Ref

//  a field 
field field_NodeList_next: Ref

//  a field 
field field_NodeListIterator_current: Ref

//  a field 
field field_ListList_nodeList: Ref

//  a field 
field field_ListList_next: Ref

//  a field 
field field_java_DOT_lang_DOT_Integer_MIN_VALUE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_MAX_VALUE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_TYPE: Ref

//  a field 
field field_java_DOT_lang_DOT_Integer_SIZE: Int

//  a field 
field field_java_DOT_lang_DOT_Integer_BYTES: Int

//  a field 
field Ref__item: Ref

function instanceof(t: TYPE, u: TYPE): Bool
  ensures result == (t == u || directSuperclass(t) == u)


function method_TreeMerger_toBags__Option$Array$Cell$Node$$$__Integer(globals: Ref, trees: VCTOption[VCTArray[Ref]], idx: Int): Seq[Multiset[Ref]]
  requires 0 <= idx
  requires trees != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (forall j: Int :: { (loc(getVCTOption1(trees), j): Ref) } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(trees), j): Ref).Ref__item, 1 / 2))
  requires (forall j: Int :: { (loc(getVCTOption1(trees), j): Ref) } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> (loc(getVCTOption1(trees), j): Ref).Ref__item != null)
  requires (forall j: Int :: 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> acc(method_Tree_tree_perm__Node(globals, (loc(getVCTOption1(trees), j): Ref).Ref__item), write))
  ensures idx <= (alen(getVCTOption1(trees)): Int) ==> |result| == (alen(getVCTOption1(trees)): Int) - idx
  ensures (forall j: Int :: idx <= j && j < (alen(getVCTOption1(trees)): Int) ==> result[j - idx] == method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j): Ref).Ref__item)))
{
  ((alen(getVCTOption1(trees)): Int) <= idx ? Seq[Multiset[Ref]]() : Seq(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), idx): Ref).Ref__item))) ++ method_TreeMerger_toBags__Option$Array$Cell$Node$$$__Integer(globals, trees, idx + 1))
}

function method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags: Seq[Multiset[Ref]], idx: Int, offset: Int): Bool
  requires 0 <= idx && 2 * idx + 1 < |nodeBags| && 0 <= offset && idx + offset < |nodeBags|
  ensures result ==> (forall n: Ref :: 0 < ((n in nodeBags[2 * idx])) ==> 0 < ((n in nodeBags[idx + offset])))
  ensures result ==> (forall n: Ref :: 0 < ((n in nodeBags[2 * idx + 1])) ==> 0 < ((n in nodeBags[idx + offset])))
  ensures result ==> |nodeBags[idx + offset]| == |nodeBags[2 * idx]| + |nodeBags[2 * idx + 1]|
{
  nodeBags[idx + offset] == (nodeBags[2 * idx] union nodeBags[2 * idx + 1])
}

function method_TreeMerger_bagSumExtensionLemma__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Integer__Integer__Integer(oldSeq: Seq[Multiset[Ref]], newSeq: Seq[Multiset[Ref]], diff: Seq[Multiset[Ref]], maxI: Int, offset: Int, idx: Int): Bool
  requires newSeq == oldSeq ++ diff
  requires 0 <= idx && idx < maxI
  requires 2 * maxI - 1 < |oldSeq| && 0 <= offset && maxI + offset <= |oldSeq|
  requires (forall j: Int :: { method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(oldSeq, j, offset) } idx <= j && j < maxI ==> method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(oldSeq, j, offset))
  ensures (forall j: Int :: { method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(newSeq, j, offset) } idx <= j && j < maxI ==> method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(newSeq, j, offset))
  ensures result
{
  (oldSeq[2 * idx] == newSeq[2 * idx] && oldSeq[2 * idx + 1] == newSeq[2 * idx + 1] && oldSeq[offset + idx] == newSeq[offset + idx] && method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(oldSeq, idx, offset) ==> method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(newSeq, idx, offset)) && (idx + 1 < maxI ==> method_TreeMerger_bagSumExtensionLemma__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Integer__Integer__Integer(oldSeq, newSeq, diff, maxI, offset, idx + 1))
}

function method_TreeMerger_transitivityLemma__Sequence$Bag$Node$$__Integer__Integer__Node(nodeBags: Seq[Multiset[Ref]], treesLen: Int, idx: Int, node: Ref): Bool
  requires |nodeBags| == 2 * treesLen - 1 && 0 <= idx && idx < |nodeBags|
  requires (forall j: Int :: { method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags, j, treesLen) } 0 <= j && j < treesLen - 1 ==> method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags, j, treesLen))
  ensures result
  ensures 0 < ((node in nodeBags[idx])) ==> 0 < ((node in nodeBags[2 * treesLen - 2]))
{
  idx < 2 * treesLen - 2 ==> method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags, idx / 2, treesLen) && (forall n: Ref :: { (n in nodeBags[idx]) } 0 < ((n in nodeBags[idx])) ==> 0 < ((n in nodeBags[idx / 2 + treesLen]))) && method_TreeMerger_transitivityLemma__Sequence$Bag$Node$$__Integer__Integer__Node(nodeBags, treesLen, idx / 2 + treesLen, node)
}

function method_TreeMerger_transClosureBagSumLemma__Sequence$Bag$Node$$__Integer(nodeBags: Seq[Multiset[Ref]], treesLen: Int): Bool
  requires |nodeBags| == 2 * treesLen - 1
  requires (forall j: Int :: { method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags, j, treesLen) } 0 <= j && j < treesLen - 1 ==> method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags, j, treesLen))
  ensures result
  ensures (forall j: Int, n: Ref :: { (n in nodeBags[j]) } 0 <= j && j < treesLen && 0 < ((n in nodeBags[j])) ==> 0 < ((n in nodeBags[2 * treesLen - 2])))
{
  (forall j: Int, n: Ref :: { (n in nodeBags[j]) } 0 <= j && j < treesLen && 0 < ((n in nodeBags[j])) ==> method_TreeMerger_transitivityLemma__Sequence$Bag$Node$$__Integer__Integer__Node(nodeBags, treesLen, j, n))
}

function method_ListListQueue_maxLength(): Int
  ensures result == 10


function method_ListListQueue_pow2__Integer(x: Int): Int
  requires 0 <= x
  decreases _
  ensures 1 <= result
  ensures 0 < x ==> 1 < result && method_ListListQueue_pow2__Integer(x - 1) == result / 2
  ensures 1 < result ==> 0 < x
{
  (x <= 0 ? 1 : 2 * method_ListListQueue_pow2__Integer(x - 1))
}

function method_ListListQueue_toBagP(diz: Ref, globals: Ref): Multiset[Ref]
  requires diz != null
  requires acc(method_ListListQueue_producer(diz, globals), write)
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in |result| == |diz.field_ListListQueue_allP ++ method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling)|)
{
  (unfolding acc(method_ListListQueue_producer(diz, globals), write) in method_Util_toBag__Sequence$Node$(diz.field_ListListQueue_allP ++ method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling)))
}

function method_ListListQueue_toBagC(diz: Ref, globals: Ref): Multiset[Ref]
  requires diz != null
  requires acc(method_ListListQueue_consumer(diz, globals), write)
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in |result| == diz.field_ListListQueue_readHead)
{
  (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in method_Util_toBag__Sequence$Node$__Integer(diz.field_ListListQueue_allC, diz.field_ListListQueue_readHead))
}

function method_ListListQueue_log2__Integer(diz: Ref, x: Int): Int
  requires diz != null
  requires 0 < x
  decreases _
  ensures 0 <= result
  ensures 1 < x ==> 0 < result && method_ListListQueue_log2__Integer(diz, x / 2) == result - 1
  ensures method_ListListQueue_pow2__Integer(result) <= x && x + 1 <= method_ListListQueue_pow2__Integer(result + 1)


function method_Tree_validTree__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  method_Tree_validSubtree__Node(globals, current) && !method_Tree_getColor__Node(globals, current)
}

function method_Tree_validSubtree__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  requires method_Tree_sortedCritEqualLemma__Node(globals, current)
{
  method_Tree_blackBalanced__Node(globals, current) && method_Tree_noDBlack__Node(globals, current) && method_Tree_noDoubleRed__Node(globals, current) && method_Tree_sorted__Node(globals, current)
}

function method_Tree_blackHeight__Node(globals: Ref, current: Ref): Int
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  ensures 1 <= result
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current == null ? 1 : (current.field_Node_dblackNull ? 2 : method_Tree_getBlacks__Node(globals, current) + (method_Tree_blackHeight__Node(globals, current.field_Node_right) < method_Tree_blackHeight__Node(globals, current.field_Node_left) ? method_Tree_blackHeight__Node(globals, current.field_Node_left) : method_Tree_blackHeight__Node(globals, current.field_Node_right)))))
}

function method_Tree_getBlacks__Node(globals: Ref, current: Ref): Int
  requires current != null ==> acc(current.field_Node_color, wildcard) && acc(current.field_Node_dblack, wildcard)
{
  (current == null ? 1 : (current.field_Node_color ? 0 : (current.field_Node_dblack ? 2 : 1)))
}

function method_Tree_isDBlack__Node(globals: Ref, current: Ref): Bool
  requires current != null ==> acc(current.field_Node_dblack, wildcard)
{
  current != null && current.field_Node_dblack
}

function method_Tree_blackBalanced__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current == null ? true : method_Tree_blackHeight__Node(globals, current.field_Node_left) == method_Tree_blackHeight__Node(globals, current.field_Node_right) && method_Tree_blackBalanced__Node(globals, current.field_Node_left) && method_Tree_blackBalanced__Node(globals, current.field_Node_right)))
}

function method_Tree_noDBlack__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in !method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtTop__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtLeft__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_dblackAtTop__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtLeftLeft__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_dblackAtLeft__Node(globals, current.field_Node_left) && method_Tree_noDBlack__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtRight__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_dblackAtTop__Node(globals, current.field_Node_right))
}

function method_Tree_dblackAtRightRight__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in current != null && !method_Tree_isDBlack__Node(globals, current) && method_Tree_noDBlack__Node(globals, current.field_Node_left) && method_Tree_dblackAtRight__Node(globals, current.field_Node_right))
}

function method_Tree_noDoubleRed__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (!method_Tree_getColor__Node(globals, current) || !method_Tree_getColor__Node(globals, current.field_Node_left) && !method_Tree_getColor__Node(globals, current.field_Node_right)) && method_Tree_noDoubleRed__Node(globals, current.field_Node_left) && method_Tree_noDoubleRed__Node(globals, current.field_Node_right))
}

function method_Tree_dbRedAtLeft__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null && (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_getColor__Node(globals, current) && (method_Tree_getColor__Node(globals, current.field_Node_left) && !method_Tree_getColor__Node(globals, current.field_Node_right)) && method_Tree_noDoubleRed__Node(globals, current.field_Node_left) && method_Tree_noDoubleRed__Node(globals, current.field_Node_right))
}

function method_Tree_dbRedAtRight__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null && (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_getColor__Node(globals, current) && (!method_Tree_getColor__Node(globals, current.field_Node_left) && method_Tree_getColor__Node(globals, current.field_Node_right)) && method_Tree_noDoubleRed__Node(globals, current.field_Node_left) && method_Tree_noDoubleRed__Node(globals, current.field_Node_right))
}

function method_Tree_toBag__Node(globals: Ref, current: Ref): Multiset[Int]
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (current == null ? Multiset[Int]() : (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current.field_Node_dblackNull ? Multiset[Int]() : ((method_Tree_toBag__Node(globals, current.field_Node_left) union Multiset(current.field_Node_key)) union method_Tree_toBag__Node(globals, current.field_Node_right)))))
}

function method_Tree_subbag__Bag$Integer$__Bag$Integer$(b1: Multiset[Int], b2: Multiset[Int]): Bool
{
  (forall i: Int :: { (i in b1) } { (i in b2) } (i in b1) != 0 ==> ((i in b1)) <= ((i in b2)))
}

function method_Tree_toSeq__Node(globals: Ref, current: Ref): Seq[Ref]
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  (current == null ? Seq[Ref]() : (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current.field_Node_dblackNull ? Seq[Ref]() : method_Tree_toSeq__Node(globals, current.field_Node_left) ++ Seq(current) ++ method_Tree_toSeq__Node(globals, current.field_Node_right))))
}

function method_Tree_toSeqKeys__Node(globals: Ref, current: Ref): Seq[Int]
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  ensures |result| == |method_Tree_toSeq__Node(globals, current)|
{
  (current == null ? Seq[Int]() : (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (current.field_Node_dblackNull ? Seq[Int]() : method_Tree_toSeqKeys__Node(globals, current.field_Node_left) ++ Seq(current.field_Node_key) ++ method_Tree_toSeqKeys__Node(globals, current.field_Node_right))))
}

function method_Tree_smaller__Bag$Integer$__Integer(b: Multiset[Int], max: Int): Bool
{
  (forall i: Int :: { (i in b) } (i in b) != 0 ==> i <= max)
}

function method_Tree_larger__Bag$Integer$__Integer(b: Multiset[Int], min: Int): Bool
{
  (forall i: Int :: { (i in b) } (i in b) != 0 ==> min <= i)
}

function method_Tree_larger__Bag$Integer$__Bag$Integer$(b1: Multiset[Int], b2: Multiset[Int]): Bool
{
  (forall i: Int :: { (i in b2) } (i in b2) != 0 ==> method_Tree_larger__Bag$Integer$__Integer(b1, i))
}

function method_Tree_sorted__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in method_Tree_smaller__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, current.field_Node_left), current.field_Node_key) && method_Tree_larger__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, current.field_Node_right), current.field_Node_key) && method_Tree_sorted__Node(globals, current.field_Node_left) && method_Tree_sorted__Node(globals, current.field_Node_right))
}

function method_Tree_sortedKeySeq__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  current != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, current), wildcard) in (forall i: Int :: { method_Tree_toSeqKeys__Node(globals, current.field_Node_left)[i] } 0 <= i && i < |method_Tree_toSeqKeys__Node(globals, current.field_Node_left)| ==> method_Tree_toSeqKeys__Node(globals, current.field_Node_left)[i] <= current.field_Node_key) && (forall i: Int :: { method_Tree_toSeqKeys__Node(globals, current.field_Node_right)[i] } 0 <= i && i < |method_Tree_toSeqKeys__Node(globals, current.field_Node_right)| ==> current.field_Node_key <= method_Tree_toSeqKeys__Node(globals, current.field_Node_right)[i]) && method_Tree_sortedKeySeq__Node(globals, current.field_Node_left) && method_Tree_sortedKeySeq__Node(globals, current.field_Node_right))
}

function method_Tree_sortedCritEqualLemma__Node(globals: Ref, current: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
  ensures result
  ensures method_Tree_sorted__Node(globals, current) == method_Tree_sortedKeySeq__Node(globals, current)


function method_Tree_getColor__Node(globals: Ref, node: Ref): Bool
  requires acc(method_Tree_tree_perm__Node(globals, node), wildcard)
{
  node != null && (unfolding acc(method_Tree_tree_perm__Node(globals, node), wildcard) in node.field_Node_color)
}

function method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals: Ref, current: Ref, oldColor: Bool, oldHeight: Int, oldBag: Multiset[Int]): Bool
  requires acc(method_Tree_tree_perm__Node(globals, current), wildcard)
{
  method_Tree_getColor__Node(globals, current) == oldColor && method_Tree_blackHeight__Node(globals, current) == oldHeight && method_Tree_toBag__Node(globals, current) == oldBag
}

function method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(seq1: Seq[Int], seq2: Seq[Int]): Bool
  decreases _
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result && 0 < |seq1| ==> method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(seq1[1..], seq2[1..])
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } { seq2[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i]))
{
  (|seq1| <= 0 ? true : (|seq2| <= 0 ? false : seq1[0] == seq2[0] && method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(seq1[1..], seq2[1..])))
}

function method_Util_isPrefix__Sequence$Node$__Sequence$Node$(seq1: Seq[Ref], seq2: Seq[Ref]): Bool
  decreases _
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result && 0 < |seq1| ==> method_Util_isPrefix__Sequence$Node$__Sequence$Node$(seq1[1..], seq2[1..])
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } { seq2[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i]))
{
  (|seq1| <= 0 ? true : (|seq2| <= 0 ? false : seq1[0] == seq2[0] && method_Util_isPrefix__Sequence$Node$__Sequence$Node$(seq1[1..], seq2[1..])))
}

function method_Util_prefixExtensionLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref: Seq[Ref], all: Seq[Ref], extension: Seq[Ref], newAll: Seq[Ref]): Bool
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, all)
  requires newAll == all ++ extension
  ensures method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, newAll)
  ensures result
{
  0 < |pref| ==> 0 < |all| && 0 < |newAll| && method_Util_prefixExtensionLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref[1..], all[1..], extension, newAll[1..])
}

function method_Util_prefixTransLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref: Seq[Ref], intermed: Seq[Ref], all: Seq[Ref]): Bool
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, intermed)
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(intermed, all)
  ensures method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pref, all)
  ensures result
{
  0 < |pref| ==> 0 < |intermed| && 0 < |all| && method_Util_prefixTransLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$(pref[1..], intermed[1..], all[1..])
}

function method_Util_isSuffix__Sequence$Node$__Sequence$Node$(seq1: Seq[Ref], seq2: Seq[Ref]): Bool
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i + |seq2| - |seq1|]))
{
  (|seq2| < |seq1| ? false : (|seq1| <= 0 ? true : (|seq1| < |seq2| ? method_Util_isSuffix__Sequence$Node$__Sequence$Node$(seq1, seq2[1..]) : seq1[0] == seq2[0] && method_Util_isSuffix__Sequence$Node$__Sequence$Node$(seq1[1..], seq2[1..]))))
}

function method_Util_isSuffix__Sequence$Integer$__Sequence$Integer$(seq1: Seq[Int], seq2: Seq[Int]): Bool
  ensures seq1 == seq2 ==> result == true
  ensures result ==> |seq1| <= |seq2|
  ensures result == (|seq1| <= |seq2| && (forall i: Int :: { seq1[i] } 0 <= i && i < |seq1| ==> seq1[i] == seq2[i + |seq2| - |seq1|]))
{
  (|seq2| < |seq1| ? false : (|seq1| <= 0 ? true : (|seq1| < |seq2| ? method_Util_isSuffix__Sequence$Integer$__Sequence$Integer$(seq1, seq2[1..]) : seq1[0] == seq2[0] && method_Util_isSuffix__Sequence$Integer$__Sequence$Integer$(seq1[1..], seq2[1..]))))
}

function method_Util_suffixShortenLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(suff: Seq[Ref], all: Seq[Ref], taken: Seq[Ref], remainder: Seq[Ref]): Bool
  requires method_Util_isSuffix__Sequence$Node$__Sequence$Node$(suff, all)
  requires suff == taken ++ remainder
  ensures method_Util_isSuffix__Sequence$Node$__Sequence$Node$(remainder, all)
  ensures result
{
  (|suff| < |all| ? method_Util_suffixShortenLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(suff, all[1..], taken, remainder) : (|taken| <= 0 ? suff == remainder && method_Util_isSuffix__Sequence$Node$__Sequence$Node$(remainder, all) : 0 < |suff| && 0 < |all| && method_Util_suffixShortenLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Sequence$Node$(suff[1..], all[1..], taken[1..], remainder)))
}

function method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf: Seq[Int], all: Seq[Int], idx: Int): Bool
  requires 0 <= idx
  ensures result && 0 < |inf| ==> idx <= |all| - |inf| && all[idx] == inf[0]
  ensures result == (idx <= |all| - |inf| && (forall i: Int :: { inf[i] } 0 <= i && i < |inf| ==> inf[i] == all[i + idx]))
{
  (|all| < idx ? false : (idx == 0 ? method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(inf, all) : method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf, all[1..], idx - 1)))
}

function method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf: Seq[Ref], all: Seq[Ref], idx: Int): Bool
  requires 0 <= idx
  ensures result && 0 < |inf| ==> idx <= |all| - |inf| && all[idx] == inf[0]
  ensures result == (idx <= |all| - |inf| && (forall i: Int :: { inf[i] } 0 <= i && i < |inf| ==> inf[i] == all[i + idx]))
{
  (|all| < idx ? false : (idx == 0 ? method_Util_isPrefix__Sequence$Node$__Sequence$Node$(inf, all) : method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf, all[1..], idx - 1)))
}

function method_Util_infixSuffixLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(suff: Seq[Int], all: Seq[Int], taken: Seq[Int], remainder: Seq[Int], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(suff, all, idx)
  requires suff == taken ++ remainder
  ensures method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(remainder, all, idx + |taken|)
  ensures result
{
  (0 < idx ? method_Util_infixSuffixLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(suff, all[1..], taken, remainder, idx - 1) : (|taken| <= 0 ? suff == remainder && method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(remainder, all, idx) : 0 < |suff| && 0 < |all| && method_Util_infixSuffixLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(suff[1..], all[1..], taken[1..], remainder, idx)))
}

function method_Util_infixTailLemma__Sequence$Node$__Sequence$Node$__Integer(inf: Seq[Ref], all: Seq[Ref], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf, all, idx)
  requires 0 < |inf|
  ensures result
  ensures method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf[1..], all, idx + 1)


function method_Util_infixAdditionLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Integer(inf1: Seq[Int], inf2: Seq[Int], all: Seq[Int], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf1, all, idx)
  requires method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf2, all, idx + |inf1|)
  ensures result
  ensures method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(inf1 ++ inf2, all, idx)


function method_Util_infixAdditionLemma__Sequence$Node$__Sequence$Node$__Sequence$Node$__Integer(inf1: Seq[Ref], inf2: Seq[Ref], all: Seq[Ref], idx: Int): Bool
  requires 0 <= idx
  requires method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf1, all, idx)
  requires method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf2, all, idx + |inf1|)
  ensures result
  ensures method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(inf1 ++ inf2, all, idx)


function method_Util_sorted__Sequence$Integer$(s: Seq[Int]): Bool
{
  (forall i: Int, j: Int :: { s[j],s[i] } 0 <= i && i < |s| && (i < j && j < |s|) ==> s[i] <= s[j])
}

function method_Util_sortedTailLemma__Sequence$Integer$(s: Seq[Int]): Bool
  requires method_Util_sorted__Sequence$Integer$(s)
  ensures method_Util_sorted__Sequence$Integer$(s[1..])
{
  true
}

function method_Util_sortedLemma__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$__Sequence$Integer$(all: Seq[Int], front: Seq[Int], back: Seq[Int], larger: Seq[Int]): Bool
  requires method_Util_sorted__Sequence$Integer$(all)
  requires all == front ++ back
  requires method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(all, larger)
  ensures method_Util_sorted__Sequence$Integer$(back)
  ensures method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(back, larger)
  ensures result


function method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(smaller: Seq[Int], larger: Seq[Int]): Bool
{
  (forall i: Int, j: Int :: { larger[j],smaller[i] } 0 <= i && i < |smaller| && (0 <= j && j < |larger|) ==> smaller[i] <= larger[j])
}

function method_Util_toBag__Sequence$Node$(s: Seq[Ref]): Multiset[Ref]
  ensures |result| == |s|
  ensures (forall i: Int :: 0 <= i && i < |s| ==> 0 < ((s[i] in result)))
{
  method_Util_toBag__Sequence$Node$__Integer(s, |s|)
}

function method_Util_toBag__Sequence$Node$__Integer(s: Seq[Ref], maxIdx: Int): Multiset[Ref]
  requires 0 <= maxIdx && maxIdx <= |s|
  ensures |result| == maxIdx
  ensures (forall i: Int :: 0 <= i && i < maxIdx ==> 0 < ((s[i] in result)))
{
  method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, 0, maxIdx)
}

function method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s: Seq[Ref], idx: Int, maxIdx: Int): Multiset[Ref]
  requires 0 <= idx
  requires 0 <= maxIdx && maxIdx <= |s|
  ensures idx <= maxIdx ==> |result| == maxIdx - idx
  ensures (forall i: Int :: idx <= i && i < maxIdx ==> 0 < ((s[i] in result)))
{
  (maxIdx <= idx ? Multiset[Ref]() : (Multiset(s[idx]) union method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx + 1, maxIdx)))
}

function method_Util_toBagPrefixLemma__Sequence$Node$__Sequence$Node$__Integer__Integer__Bag$Node$(pre: Seq[Ref], all: Seq[Ref], idx: Int, maxIdx: Int, asBag: Multiset[Ref]): Bool
  requires 0 <= idx
  requires idx <= maxIdx && maxIdx <= |pre|
  requires method_Util_toBagFrom__Sequence$Node$__Integer__Integer(pre, idx, maxIdx) == asBag
  requires method_Util_isPrefix__Sequence$Node$__Sequence$Node$(pre, all)
  ensures method_Util_toBagFrom__Sequence$Node$__Integer__Integer(all, idx, maxIdx) == asBag
  ensures result
{
  (idx < maxIdx ? pre[idx] == all[idx] && method_Util_toBagPrefixLemma__Sequence$Node$__Sequence$Node$__Integer__Integer__Bag$Node$(pre, all, idx + 1, maxIdx, (asBag setminus Multiset(pre[idx]))) : asBag == Multiset[Ref]())
}

function method_Util_toBagMaxIdxIncrLemma__Sequence$Node$__Integer__Integer__Bag$Node$(s: Seq[Ref], idx: Int, maxIdx: Int, asBag: Multiset[Ref]): Bool
  requires 0 <= idx
  requires idx <= maxIdx && maxIdx < |s|
  requires method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx, maxIdx) == asBag
  ensures method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx, maxIdx + 1) == (asBag union Multiset(s[maxIdx]))
  ensures result
{
  (idx < maxIdx ? method_Util_toBagMaxIdxIncrLemma__Sequence$Node$__Integer__Integer__Bag$Node$(s, idx + 1, maxIdx, (asBag setminus Multiset(s[idx]))) : asBag == Multiset[Ref]() && method_Util_toBagFrom__Sequence$Node$__Integer__Integer(s, idx, maxIdx + 1) == Multiset(s[maxIdx]))
}

function method_NodeList_size__NodeList(globals: Ref, nl: Ref): Int
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
  ensures nl != null ==> 0 < result
  ensures nl == null ==> result == 0
{
  (nl == null ? 0 : (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in 1 + method_NodeList_size__NodeList(globals, nl.field_NodeList_next)))
}

function method_NodeList_toSeq__NodeList(globals: Ref, nl: Ref): Seq[Ref]
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
  ensures |result| == method_NodeList_size__NodeList(globals, nl)
  ensures nl != null ==> result[0] == (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in nl.field_NodeList_node)
{
  (nl == null ? Seq[Ref]() : (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in Seq(nl.field_NodeList_node) ++ method_NodeList_toSeq__NodeList(globals, nl.field_NodeList_next)))
}

function method_NodeList_toSeqKeys__NodeList(globals: Ref, nl: Ref): Seq[Int]
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
  ensures |result| == method_NodeList_size__NodeList(globals, nl)
  ensures nl != null ==> result[0] == (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in nl.field_NodeList_node.field_Node_key)
{
  (nl == null ? Seq[Int]() : (unfolding acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard) in Seq(nl.field_NodeList_node.field_Node_key) ++ method_NodeList_toSeqKeys__NodeList(globals, nl.field_NodeList_next)))
}

function method_NodeList_sorted__NodeList(globals: Ref, nl: Ref): Bool
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), wildcard)
{
  method_Util_sorted__Sequence$Integer$(method_NodeList_toSeqKeys__NodeList(globals, nl))
}

function method_NodeListIterator_sorted__NodeListIterator(globals: Ref, it: Ref): Bool
  requires it != null ==> acc(it.field_NodeListIterator_current, wildcard) && acc(method_NodeList_list_perm__NodeList(globals, it.field_NodeListIterator_current), wildcard)
{
  it != null ==> method_NodeList_sorted__NodeList(globals, it.field_NodeListIterator_current)
}

function method_NodeListIterator_toSeq__NodeListIterator(globals: Ref, it: Ref): Seq[Ref]
  requires it != null ==> acc(it.field_NodeListIterator_current, wildcard) && acc(method_NodeList_list_perm__NodeList(globals, it.field_NodeListIterator_current), wildcard)
  ensures (it == null ? |result| == 0 : |result| == method_NodeList_size__NodeList(globals, it.field_NodeListIterator_current))
{
  (it == null ? Seq[Ref]() : method_NodeList_toSeq__NodeList(globals, it.field_NodeListIterator_current))
}

function method_NodeListIterator_toSeqKeys__NodeListIterator(globals: Ref, it: Ref): Seq[Int]
  requires it != null ==> acc(it.field_NodeListIterator_current, wildcard) && acc(method_NodeList_list_perm__NodeList(globals, it.field_NodeListIterator_current), wildcard)
{
  (it == null ? Seq[Int]() : method_NodeList_toSeqKeys__NodeList(globals, it.field_NodeListIterator_current))
}

function method_ListList_toSeq__ListList(globals: Ref, ll: Ref): Seq[Ref]
  requires acc(method_ListList_list_perm__ListList(globals, ll), wildcard)
  ensures ll == null ==> |result| == 0
  ensures ll != null ==> 0 < |result|
{
  (ll == null ? Seq[Ref]() : (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in method_NodeList_toSeq__NodeList(globals, ll.field_ListList_nodeList) ++ method_ListList_toSeq__ListList(globals, ll.field_ListList_next)))
}

function method_ListList_toNLSeq__ListList(globals: Ref, ll: Ref): Seq[Ref]
  requires acc(method_ListList_list_perm__ListList(globals, ll), wildcard)
{
  (ll == null ? Seq[Ref]() : (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in Seq(ll.field_ListList_nodeList) ++ method_ListList_toNLSeq__ListList(globals, ll.field_ListList_next)))
}

function method_ListList_toSeqKeys__ListList(globals: Ref, ll: Ref): Seq[Int]
  requires acc(method_ListList_list_perm__ListList(globals, ll), wildcard)
{
  (ll == null ? Seq[Int]() : (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in method_NodeList_toSeqKeys__NodeList(globals, ll.field_ListList_nodeList) ++ method_ListList_toSeqKeys__ListList(globals, ll.field_ListList_next)))
}

function method_ListList_toNLSeqTailLemma__ListList(globals: Ref, ll: Ref): Bool
  requires acc(method_ListList_list_perm__ListList(globals, ll), wildcard)
  ensures ll != null ==> method_ListList_toNLSeq__ListList(globals, ll)[1..] == (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in method_ListList_toNLSeq__ListList(globals, ll.field_ListList_next))
  ensures result
{
  ll != null ==> method_ListList_toNLSeq__ListList(globals, ll) == (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in Seq(ll.field_ListList_nodeList) ++ method_ListList_toNLSeq__ListList(globals, ll.field_ListList_next))
}

function method_ListList_seqSizeLemma__ListList(globals: Ref, ll: Ref): Bool
  requires acc(method_ListList_list_perm__ListList(globals, ll), wildcard)
  ensures |method_ListList_toSeq__ListList(globals, ll)| == method_ListList_size__ListList(globals, ll)
  ensures |method_ListList_toSeqKeys__ListList(globals, ll)| == method_ListList_size__ListList(globals, ll)
  ensures result
{
  ll != null ==> (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in method_ListList_seqSizeLemma__ListList(globals, ll.field_ListList_next)) && |method_ListList_toSeq__ListList(globals, ll)| == (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in |method_NodeList_toSeq__NodeList(globals, ll.field_ListList_nodeList)| + |method_ListList_toSeq__ListList(globals, ll.field_ListList_next)|) && |method_ListList_toSeqKeys__ListList(globals, ll)| == (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in |method_NodeList_toSeqKeys__NodeList(globals, ll.field_ListList_nodeList)| + |method_ListList_toSeqKeys__ListList(globals, ll.field_ListList_next)|)
}

function method_ListList_sorted__ListList(globals: Ref, ll: Ref): Bool
  requires acc(method_ListList_list_perm__ListList(globals, ll), wildcard)
{
  method_Util_sorted__Sequence$Integer$(method_ListList_toSeqKeys__ListList(globals, ll))
}

function method_ListList_size__ListList(globals: Ref, ll: Ref): Int
  requires acc(method_ListList_list_perm__ListList(globals, ll), wildcard)
{
  (ll == null ? 0 : (unfolding acc(method_ListList_list_perm__ListList(globals, ll), wildcard) in method_NodeList_size__NodeList(globals, ll.field_ListList_nodeList) + method_ListList_size__ListList(globals, ll.field_ListList_next)))
}

function new_frac(x: Perm): frac
  requires 0 / 1 < x && x <= 1 / 1
  ensures frac_val(result) == x


function new_zfrac(x: Perm): zfrac
  requires 0 / 1 <= x && x <= 1 / 1
  ensures zfrac_val(result) == x


function getVCTOption1(x: VCTOption[VCTArray[Ref]]): VCTArray[Ref]
  requires x != (VCTNone(): VCTOption[VCTArray[Ref]])
{
  (getVCTOption(x): VCTArray[Ref])
}

predicate method_TreeMerger_src_initial__ListListQueue(diz: Ref, globals: Ref, it: Ref) {
  diz != null && (it != null && acc(method_ListListQueue_consumer(it, globals), write) && method_ListListQueue_toBagC(it, globals) == Multiset[Ref]() && (unfolding acc(method_ListListQueue_consumer(it, globals), write) in it.field_ListListQueue_readHead == 0))
}

predicate method_TreeMerger_dst_initial__ListListQueue(diz: Ref, globals: Ref, it: Ref) {
  diz != null && (it != null && acc(method_ListListQueue_producer(it, globals), write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && method_ListListQueue_toBagP(it, globals) == Multiset[Ref]() && (unfolding acc(method_ListListQueue_producer(it, globals), write) in !it.field_ListListQueue_finalised && it.field_ListListQueue_maxKey == globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE))
}

predicate method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz: Ref, globals: Ref, nodeBags: Seq[Multiset[Ref]], iterator: Ref, idx: Int) {
  diz != null && (iterator != null && 0 <= idx && idx < |nodeBags| && acc(method_ListListQueue_producer(iterator, globals), write) && (unfolding acc(method_ListListQueue_producer(iterator, globals), write) in iterator.field_ListListQueue_finalised) && method_ListListQueue_toBagP(iterator, globals) == nodeBags[idx])
}

predicate method_TreeConverterThread_join_token__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && true
}

predicate method_TreeConverterThread_pre_fork__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && (acc(diz.field_TreeConverterThread_res, write) && acc(diz.field_TreeConverterThread_tree, 1 / 2) && diz.field_TreeConverterThread_tree != null && acc(method_Tree_tree_perm__Node(globals, diz.field_TreeConverterThread_tree), write) && acc(diz.field_TreeConverterThread_treeAsSeq, 1 / 2) && acc(diz.field_TreeConverterThread_keysAsSeq, 1 / 2) && method_Tree_validTree__Node(globals, diz.field_TreeConverterThread_tree) && diz.field_TreeConverterThread_treeAsSeq == method_Tree_toSeq__Node(globals, diz.field_TreeConverterThread_tree) && diz.field_TreeConverterThread_keysAsSeq == method_Tree_toSeqKeys__Node(globals, diz.field_TreeConverterThread_tree))
}

predicate method_TreeConverterThread_post_join__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && (acc(diz.field_TreeConverterThread_res, write) && diz.field_TreeConverterThread_res != null && acc(method_ListListQueue_consumer(diz.field_TreeConverterThread_res, globals), write) && acc(method_ListListQueue_producer(diz.field_TreeConverterThread_res, globals), write) && acc(diz.field_TreeConverterThread_treeAsSeq, 1 / 2) && acc(diz.field_TreeConverterThread_keysAsSeq, 1 / 2) && (unfolding acc(method_ListListQueue_producer(diz.field_TreeConverterThread_res, globals), write) in diz.field_TreeConverterThread_res.field_ListListQueue_finalised && diz.field_TreeConverterThread_res.field_ListListQueue_allP == diz.field_TreeConverterThread_treeAsSeq && diz.field_TreeConverterThread_res.field_ListListQueue_keysP == diz.field_TreeConverterThread_keysAsSeq) && (unfolding acc(method_ListListQueue_consumer(diz.field_TreeConverterThread_res, globals), write) in diz.field_TreeConverterThread_res.field_ListListQueue_readHead == 0 && diz.field_TreeConverterThread_res.field_ListListQueue_finalisedC))
}

predicate method_ListMergerThread_join_token__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && true
}

predicate method_ListMergerThread_pre_fork__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && (acc(diz.field_ListMergerThread_src1, 1 / 2) && acc(diz.field_ListMergerThread_src2, 1 / 2) && acc(diz.field_ListMergerThread_dst, 1 / 2) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && diz.field_ListMergerThread_src1 != null && diz.field_ListMergerThread_src2 != null && diz.field_ListMergerThread_dst != null && acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) && acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) && acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) && (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) in diz.field_ListMergerThread_src1.field_ListListQueue_readHead == 0) && (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in diz.field_ListMergerThread_src2.field_ListListQueue_readHead == 0) && (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in !diz.field_ListMergerThread_dst.field_ListListQueue_finalised && diz.field_ListMergerThread_dst.field_ListListQueue_maxKey == globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE) && method_ListListQueue_toBagC(diz.field_ListMergerThread_src1, globals) == Multiset[Ref]() && method_ListListQueue_toBagC(diz.field_ListMergerThread_src2, globals) == Multiset[Ref]() && method_ListListQueue_toBagP(diz.field_ListMergerThread_dst, globals) == Multiset[Ref]())
}

predicate method_ListMergerThread_post_join__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && (acc(diz.field_ListMergerThread_src1, 1 / 2) && acc(diz.field_ListMergerThread_src2, 1 / 2) && acc(diz.field_ListMergerThread_dst, 1 / 2) && diz.field_ListMergerThread_src1 != null && diz.field_ListMergerThread_src2 != null && diz.field_ListMergerThread_dst != null && acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) && acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) && acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) && (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) in diz.field_ListMergerThread_src1.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src1.field_ListListQueue_curNLIterator == null) && (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in diz.field_ListMergerThread_src2.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src2.field_ListListQueue_curNLIterator == null) && (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in diz.field_ListMergerThread_dst.field_ListListQueue_finalised) && method_ListListQueue_toBagP(diz.field_ListMergerThread_dst, globals) == (method_ListListQueue_toBagC(diz.field_ListMergerThread_src1, globals) union method_ListListQueue_toBagC(diz.field_ListMergerThread_src2, globals)))
}

predicate method_VerCorsThread_join_token__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && true
}

predicate method_VerCorsThread_pre_fork__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && true
}

predicate method_VerCorsThread_post_join__Fraction(diz: Ref, globals: Ref, p: frac) {
  diz != null && true
}

predicate method_ListListQueue_producer(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.field_ListListQueue_filling, write) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_ListListQueue_filling), write) && acc(diz.field_ListListQueue_allP, 1 / 2) && acc(diz.field_ListListQueue_keysP, 1 / 2) && acc(diz.field_ListListQueue_finalised, 1 / 2) && acc(diz.field_ListListQueue_maxKey, write) && acc(diz.field_ListListQueue_maxKeyBatches, 1 / 2) && method_NodeList_size__NodeList(globals, diz.field_ListListQueue_filling) < method_ListListQueue_maxLength() && (diz.field_ListListQueue_finalised ==> method_NodeList_size__NodeList(globals, diz.field_ListListQueue_filling) == 0) && |diz.field_ListListQueue_allP| == |diz.field_ListListQueue_keysP| && method_NodeList_sorted__NodeList(globals, diz.field_ListListQueue_filling) && method_Util_sorted__Sequence$Integer$(diz.field_ListListQueue_keysP) && diz.field_ListListQueue_maxKeyBatches <= diz.field_ListListQueue_maxKey && (let fillKeys == (method_NodeList_toSeqKeys__NodeList(globals, diz.field_ListListQueue_filling)) in (forall i: Int :: { fillKeys[i] } 0 <= i && i < |fillKeys| ==> diz.field_ListListQueue_maxKeyBatches <= fillKeys[i]) && (forall i: Int :: { fillKeys[i] } 0 <= i && i < |fillKeys| ==> fillKeys[i] <= diz.field_ListListQueue_maxKey)) && (forall i: Int :: { diz.field_ListListQueue_keysP[i] } 0 <= i && i < |diz.field_ListListQueue_keysP| ==> diz.field_ListListQueue_keysP[i] <= diz.field_ListListQueue_maxKeyBatches))
}

predicate method_ListListQueue_consumer(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.field_ListListQueue_allC, 1 / 2) && acc(diz.field_ListListQueue_finalisedC, 1 / 2) && acc(diz.field_ListListQueue_keysC, 1 / 2) && acc(diz.field_ListListQueue_readHead, write) && acc(diz.field_ListListQueue_batchHead, 1 / 2) && acc(diz.field_ListListQueue_isLastBatch, write) && acc(diz.field_ListListQueue_curNLIterator, write) && (diz.field_ListListQueue_curNLIterator != null ==> acc(diz.field_ListListQueue_curNLIterator.field_NodeListIterator_current, write) && acc(method_NodeList_list_perm__NodeList(globals, diz.field_ListListQueue_curNLIterator.field_NodeListIterator_current), write) && method_NodeListIterator_sorted__NodeListIterator(globals, diz.field_ListListQueue_curNLIterator) && diz.field_ListListQueue_curNLIterator.field_NodeListIterator_current != null) && method_Util_sorted__Sequence$Integer$(diz.field_ListListQueue_keysC) && |diz.field_ListListQueue_allC| == |diz.field_ListListQueue_keysC| && 0 <= diz.field_ListListQueue_readHead && diz.field_ListListQueue_readHead <= |diz.field_ListListQueue_allC| && diz.field_ListListQueue_batchHead <= |diz.field_ListListQueue_allC| && diz.field_ListListQueue_isLastBatch == (diz.field_ListListQueue_batchHead == |diz.field_ListListQueue_allC| && diz.field_ListListQueue_finalisedC) && diz.field_ListListQueue_batchHead - diz.field_ListListQueue_readHead == |method_NodeListIterator_toSeq__NodeListIterator(globals, diz.field_ListListQueue_curNLIterator)| && method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(method_NodeListIterator_toSeq__NodeListIterator(globals, diz.field_ListListQueue_curNLIterator), diz.field_ListListQueue_allC, diz.field_ListListQueue_readHead) && method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz.field_ListListQueue_curNLIterator), diz.field_ListListQueue_keysC, diz.field_ListListQueue_readHead))
}

predicate method_ListListQueue_lock_invariant(diz: Ref, globals: Ref) {
  diz != null && (acc(diz.field_ListListQueue_batches, write) && acc(method_ListList_list_perm__ListList(globals, diz.field_ListListQueue_batches), write) && acc(diz.field_ListListQueue_allP, 1 / 2) && acc(diz.field_ListListQueue_allC, 1 / 2) && acc(diz.field_ListListQueue_keysP, 1 / 2) && acc(diz.field_ListListQueue_keysC, 1 / 2) && acc(diz.field_ListListQueue_finalised, 1 / 2) && acc(diz.field_ListListQueue_finalisedC, 1 / 2) && acc(diz.field_ListListQueue_batchHead, 1 / 2) && acc(diz.field_ListListQueue_maxKeyBatches, 1 / 2) && 0 <= diz.field_ListListQueue_batchHead && diz.field_ListListQueue_batchHead == |diz.field_ListListQueue_allP| - |method_ListList_toSeq__ListList(globals, diz.field_ListListQueue_batches)| && method_Util_isPrefix__Sequence$Node$__Sequence$Node$(diz.field_ListListQueue_allC, diz.field_ListListQueue_allP) && method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(diz.field_ListListQueue_keysC, diz.field_ListListQueue_keysP) && method_Util_sorted__Sequence$Integer$(diz.field_ListListQueue_keysP) && method_Util_sorted__Sequence$Integer$(diz.field_ListListQueue_keysC) && |diz.field_ListListQueue_allC| == |diz.field_ListListQueue_keysC| && |diz.field_ListListQueue_allP| == |diz.field_ListListQueue_keysP| && method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(method_ListList_toSeq__ListList(globals, diz.field_ListListQueue_batches), diz.field_ListListQueue_allP, diz.field_ListListQueue_batchHead) && method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(method_ListList_toSeqKeys__ListList(globals, diz.field_ListListQueue_batches), diz.field_ListListQueue_keysP, diz.field_ListListQueue_batchHead) && (diz.field_ListListQueue_finalisedC ==> diz.field_ListListQueue_finalised && diz.field_ListListQueue_allC == diz.field_ListListQueue_allP && diz.field_ListListQueue_keysC == diz.field_ListListQueue_keysP) && method_ListList_sorted__ListList(globals, diz.field_ListListQueue_batches))
}

predicate method_Tree_tree_perm__Node(globals: Ref, current: Ref) {
  current != null ==> acc(current.field_Node_key, write) && acc(current.field_Node_left, write) && acc(current.field_Node_right, write) && acc(current.field_Node_color, write) && acc(current.field_Node_dblack, write) && acc(current.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= current.field_Node_key && acc(method_Tree_tree_perm__Node(globals, current.field_Node_left), write) && acc(method_Tree_tree_perm__Node(globals, current.field_Node_right), write) && (current.field_Node_dblackNull ==> current.field_Node_left == null && current.field_Node_right == null && !current.field_Node_color && current.field_Node_dblack) && (current.field_Node_dblack ==> !current.field_Node_color)
}

predicate method_NodeList_list_perm__NodeList(globals: Ref, nl: Ref) {
  nl != null ==> acc(nl.field_NodeList_node, write) && acc(nl.field_NodeList_next, write) && nl.field_NodeList_node != null && (acc(nl.field_NodeList_node.field_Node_key, write) && acc(nl.field_NodeList_node.field_Node_left, write) && acc(nl.field_NodeList_node.field_Node_right, write) && acc(nl.field_NodeList_node.field_Node_color, write) && acc(nl.field_NodeList_node.field_Node_dblack, write) && acc(nl.field_NodeList_node.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= nl.field_NodeList_node.field_Node_key) && acc(method_NodeList_list_perm__NodeList(globals, nl.field_NodeList_next), write)
}

predicate method_ListList_list_perm__ListList(globals: Ref, ll: Ref) {
  ll != null ==> acc(ll.field_ListList_nodeList, write) && acc(ll.field_ListList_next, write) && ll.field_ListList_nodeList != null && acc(method_NodeList_list_perm__NodeList(globals, ll.field_ListList_nodeList), write) && acc(method_ListList_list_perm__ListList(globals, ll.field_ListList_next), write)
}

predicate Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(x_0: Ref, x_1: Ref, x_2: Ref, x_3: Ref, x_4: Ref, x_5: Ref, x_6: Bool, x_7: Int, x_8: Multiset[Int], x_9: Ref, x_10: Ref, x_11: Ref, x_12: Ref, x_13: Ref, x_14: Ref, x_15: Bool, x_16: Int, x_17: Multiset[Int]) 

method constructor_java_DOT_lang_DOT_Object_java_DOT_lang_DOT_Object(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method internal_java_DOT_lang_DOT_Object_java_DOT_lang_DOT_Object(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Object()
{
  inhale false
}

method constructor_java_DOT_lang_DOT_Number_java_DOT_lang_DOT_Number(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Number()
{
  inhale false
}

method internal_java_DOT_lang_DOT_Number_java_DOT_lang_DOT_Number(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_java_DOT_lang_DOT_Number()
{
  inhale false
}

method __contract_unsatisfiable__method_TreeMerger_refoldEqual_bags__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Option$Array$Cell$ListListQueue$$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, oldBag: Seq[Multiset[Ref]], newBag: Seq[Multiset[Ref]], iterators: VCTOption[VCTArray[Ref]], idx: Int)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (0 <= idx && 2 * idx + 2 <= |oldBag| && |oldBag| <= |newBag| && (iterators != (VCTNone(): VCTOption[VCTArray[Ref]]) && |newBag| <= (alen(getVCTOption1(iterators)): Int)) && (forall j__1: Int :: { (loc(getVCTOption1(iterators), j__1): Ref) } 0 <= j__1 && j__1 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__1): Ref).Ref__item, 1 / 2)) && (forall j__2: Int :: { newBag[j__2] } { oldBag[j__2] } 0 <= j__2 && j__2 < |oldBag| ==> newBag[j__2] == oldBag[j__2]) && (forall j__3: Int :: 2 * idx + 2 <= j__3 && j__3 < |oldBag| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, oldBag, (loc(getVCTOption1(iterators), j__3): Ref).Ref__item, j__3), write)))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_TreeMerger_refoldEqual_bags__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Option$Array$Cell$ListListQueue$$$__Integer_0
}

method method_TreeMerger_refoldEqual_bags__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Option$Array$Cell$ListListQueue$$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, oldBag: Seq[Multiset[Ref]], newBag: Seq[Multiset[Ref]], iterators: VCTOption[VCTArray[Ref]], idx: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires 0 <= idx && 2 * idx + 2 <= |oldBag| && |oldBag| <= |newBag|
  requires iterators != (VCTNone(): VCTOption[VCTArray[Ref]]) && |newBag| <= (alen(getVCTOption1(iterators)): Int)
  requires (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, 1 / 2))
  requires (forall j: Int :: { newBag[j] } { oldBag[j] } 0 <= j && j < |oldBag| ==> newBag[j] == oldBag[j])
  requires (forall j: Int :: 2 * idx + 2 <= j && j < |oldBag| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, oldBag, (loc(getVCTOption1(iterators), j): Ref).Ref__item, j), write))
  ensures 0 <= idx && 2 * idx + 2 <= |oldBag| && |oldBag| <= |newBag|
  ensures iterators != (VCTNone(): VCTOption[VCTArray[Ref]]) && |newBag| <= (alen(getVCTOption1(iterators)): Int)
  ensures (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, 1 / 2))
  ensures (forall j: Int :: { newBag[j] } { oldBag[j] } 0 <= j && j < |oldBag| ==> newBag[j] == oldBag[j])
  ensures (forall j: Int :: 2 * idx + 2 <= j && j < |oldBag| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, newBag, (loc(getVCTOption1(iterators), j): Ref).Ref__item, j), write))
{
  var k__4: Int
  var __flatten_52__5: Int
  k__4 := 2 * idx + 2
  while (k__4 < |oldBag|)
    invariant 0 <= idx && 2 * idx + 2 <= k__4 && k__4 <= |oldBag| && |oldBag| <= |newBag|
    invariant iterators != (VCTNone(): VCTOption[VCTArray[Ref]]) && |newBag| <= (alen(getVCTOption1(iterators)): Int)
    invariant (forall j__6: Int :: { (loc(getVCTOption1(iterators), j__6): Ref) } 0 <= j__6 && j__6 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__6): Ref).Ref__item, 1 / 2))
    invariant (forall j__7: Int :: 2 * idx + 2 <= j__7 && j__7 < k__4 ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, newBag, (loc(getVCTOption1(iterators), j__7): Ref).Ref__item, j__7), write))
    invariant (forall j__8: Int :: k__4 <= j__8 && j__8 < |oldBag| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, oldBag, (loc(getVCTOption1(iterators), j__8): Ref).Ref__item, j__8), write)) 
  {
    unfold acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, oldBag, (loc(getVCTOption1(iterators), k__4): Ref).Ref__item, k__4), write)
    fold acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, newBag, (loc(getVCTOption1(iterators), k__4): Ref).Ref__item, k__4), write)
    __flatten_52__5 := k__4
    k__4 := k__4 + 1
  }
  label method_end_method_TreeMerger_refoldEqual_bags__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Option$Array$Cell$ListListQueue$$$__Integer_1
}

method __contract_unsatisfiable__method_TreeMerger_joinIteratorPC__ListListQueue__Sequence$Bag$Node$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, iterator: Ref, nodeBags: Seq[Multiset[Ref]], idx: Int)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (0 <= idx && idx < |nodeBags| && acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, nodeBags, iterator, idx), write) && acc(method_ListListQueue_consumer(iterator, globals), write) && (unfolding acc(method_ListListQueue_consumer(iterator, globals), write) in iterator.field_ListListQueue_isLastBatch && iterator.field_ListListQueue_curNLIterator == null) == true)
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_TreeMerger_joinIteratorPC__ListListQueue__Sequence$Bag$Node$$__Integer_2
}

method method_TreeMerger_joinIteratorPC__ListListQueue__Sequence$Bag$Node$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, iterator: Ref, nodeBags: Seq[Multiset[Ref]], idx: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires 0 <= idx && idx < |nodeBags|
  requires acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, nodeBags, iterator, idx), write)
  requires acc(method_ListListQueue_consumer(iterator, globals), write)
  requires (unfolding acc(method_ListListQueue_consumer(iterator, globals), write) in iterator.field_ListListQueue_isLastBatch && iterator.field_ListListQueue_curNLIterator == null) == true
  ensures acc(iterator.field_ListListQueue_allP, 1 / 2)
  ensures method_Util_toBag__Sequence$Node$(iterator.field_ListListQueue_allP) == nodeBags[idx]
  ensures method_Util_toBag__Sequence$Node$(iterator.field_ListListQueue_allP) == old(method_ListListQueue_toBagC(iterator, globals))
{
  unfold acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, nodeBags, iterator, idx), write)
  // assert
  assert acc(method_ListListQueue_producer(iterator, globals), write)
  // assert
  assert (unfolding acc(method_ListListQueue_producer(iterator, globals), write) in method_Util_toBag__Sequence$Node$(iterator.field_ListListQueue_allP) == nodeBags[idx])
  method_ListListQueue_joinPC(iterator, current_thread_id, globals)
  label method_end_method_TreeMerger_joinIteratorPC__ListListQueue__Sequence$Bag$Node$$__Integer_3
}

method __contract_unsatisfiable__method_TreeMerger_initIterators__Option$Array$Cell$Node$$$__Option$Array$Cell$ListListQueue$$$(diz: Ref, current_thread_id: Int, globals: Ref, trees: VCTOption[VCTArray[Ref]], iterators: VCTOption[VCTArray[Ref]], treeBags: Seq[Multiset[Ref]])
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (trees != (VCTNone(): VCTOption[VCTArray[Ref]]) && iterators != (VCTNone(): VCTOption[VCTArray[Ref]]) && ((alen(getVCTOption1(iterators)): Int) == 2 * (alen(getVCTOption1(trees)): Int) - 1 && |treeBags| == (alen(getVCTOption1(trees)): Int)) && (forall j__9: Int :: { (loc(getVCTOption1(iterators), j__9): Ref) } 0 <= j__9 && j__9 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__9): Ref).Ref__item, write)) && (forall j__10: Int :: { (loc(getVCTOption1(trees), j__10): Ref) } 0 <= j__10 && j__10 < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(trees), j__10): Ref).Ref__item, 1 / 2)) && (forall j__11: Int :: { (loc(getVCTOption1(trees), j__11): Ref) } 0 <= j__11 && j__11 < (alen(getVCTOption1(trees)): Int) ==> (loc(getVCTOption1(trees), j__11): Ref).Ref__item != null) && (forall j__12: Int :: 0 <= j__12 && j__12 < (alen(getVCTOption1(trees)): Int) ==> acc(method_Tree_tree_perm__Node(globals, (loc(getVCTOption1(trees), j__12): Ref).Ref__item), write)) && (forall j__13: Int :: { (loc(getVCTOption1(trees), j__13): Ref).Ref__item } 0 <= j__13 && j__13 < (alen(getVCTOption1(trees)): Int) ==> method_Tree_validTree__Node(globals, (loc(getVCTOption1(trees), j__13): Ref).Ref__item)) && (forall j__14: Int :: { treeBags[j__14] } 0 <= j__14 && j__14 < (alen(getVCTOption1(trees)): Int) ==> treeBags[j__14] == method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__14): Ref).Ref__item))))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_TreeMerger_initIterators__Option$Array$Cell$Node$$$__Option$Array$Cell$ListListQueue$$$_4
}

method method_TreeMerger_initIterators__Option$Array$Cell$Node$$$__Option$Array$Cell$ListListQueue$$$(diz: Ref, current_thread_id: Int, globals: Ref, trees: VCTOption[VCTArray[Ref]], iterators: VCTOption[VCTArray[Ref]], treeBags: Seq[Multiset[Ref]])
  requires diz != null
  requires 0 <= current_thread_id
  requires trees != (VCTNone(): VCTOption[VCTArray[Ref]]) && iterators != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires (alen(getVCTOption1(iterators)): Int) == 2 * (alen(getVCTOption1(trees)): Int) - 1 && |treeBags| == (alen(getVCTOption1(trees)): Int)
  requires (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, write))
  requires (forall j: Int :: { (loc(getVCTOption1(trees), j): Ref) } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(trees), j): Ref).Ref__item, 1 / 2))
  requires (forall j: Int :: { (loc(getVCTOption1(trees), j): Ref) } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> (loc(getVCTOption1(trees), j): Ref).Ref__item != null)
  requires (forall j: Int :: 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> acc(method_Tree_tree_perm__Node(globals, (loc(getVCTOption1(trees), j): Ref).Ref__item), write))
  requires (forall j: Int :: { (loc(getVCTOption1(trees), j): Ref).Ref__item } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> method_Tree_validTree__Node(globals, (loc(getVCTOption1(trees), j): Ref).Ref__item))
  requires (forall j: Int :: { treeBags[j] } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> treeBags[j] == method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j): Ref).Ref__item)))
  ensures trees != (VCTNone(): VCTOption[VCTArray[Ref]]) && iterators != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(iterators)): Int) == 2 * (alen(getVCTOption1(trees)): Int) - 1 && |treeBags| == (alen(getVCTOption1(trees)): Int)
  ensures (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, write))
  ensures (forall j: Int :: { (loc(getVCTOption1(trees), j): Ref) } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(trees), j): Ref).Ref__item, 1 / 2))
  ensures (forall j: Int :: { (loc(getVCTOption1(trees), j): Ref) } 0 <= j && j < (alen(getVCTOption1(trees)): Int) ==> (loc(getVCTOption1(trees), j): Ref).Ref__item != null)
  ensures (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != null)
  ensures (forall j: Int, k: Int :: { (loc(getVCTOption1(iterators), k): Ref),(loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) && (0 <= k && k < j) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != (loc(getVCTOption1(iterators), k): Ref).Ref__item)
  ensures (forall j: Int :: 0 <= j && j < |treeBags| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j): Ref).Ref__item, j), write))
  ensures (forall j: Int :: 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j): Ref).Ref__item), write))
  ensures (forall j: Int :: (alen(getVCTOption1(trees)): Int) <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_dst_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j): Ref).Ref__item), write))
{
  var thread__73: Ref
  var threads__15: VCTOption[VCTArray[Ref]]
  var i__16: Int
  var __flatten_55__17: Ref
  var __flatten_56__18: Ref
  var __flatten_57__19: Ref
  var __flatten_59__20: Ref
  var __flatten_61__21: Int
  var __flatten_62__22: Ref
  var __flatten_63__23: Ref
  var __flatten_65__24: Int
  var __flatten_66__25: Ref
  var __flatten_68__26: Ref
  var __flatten_69__27: Ref
  var __flatten_70__28: Int
  var __flatten_183__29: VCTArray[Ref]
  var __flatten_184__30: Int
  var __flatten_186__31: VCTArray[Ref]
  var __flatten_188__32: VCTArray[Ref]
  var __flatten_191__33: VCTArray[Ref]
  var __flatten_194__34: VCTArray[Ref]
  var __flatten_196__35: VCTArray[Ref]
  var __flatten_199__36: VCTArray[Ref]
  var __flatten_202__37: VCTArray[Ref]
  __flatten_183__29 := getVCTOption1(trees)
  __flatten_184__30 := (alen(__flatten_183__29): Int)
  threads__15 := array_new_Option_Array_Cell_TreeConverterThread___(__flatten_184__30)
  i__16 := 0
  while (i__16 < (alen(getVCTOption1(trees)): Int))
    invariant (alen(getVCTOption1(threads__15)): Int) == (alen(getVCTOption1(trees)): Int)
    invariant 0 <= i__16 && i__16 <= (alen(getVCTOption1(trees)): Int)
    invariant (forall j__38: Int :: { (loc(getVCTOption1(threads__15), j__38): Ref) } 0 <= j__38 && j__38 < (alen(getVCTOption1(threads__15)): Int) ==> acc((loc(getVCTOption1(threads__15), j__38): Ref).Ref__item, write))
    invariant (forall j__39: Int :: { (loc(getVCTOption1(trees), j__39): Ref) } 0 <= j__39 && j__39 < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(trees), j__39): Ref).Ref__item, 1 / 2))
    invariant (forall j__40: Int :: { (loc(getVCTOption1(trees), j__40): Ref) } 0 <= j__40 && j__40 < (alen(getVCTOption1(trees)): Int) ==> (loc(getVCTOption1(trees), j__40): Ref).Ref__item != null)
    invariant (forall j__41: Int :: i__16 <= j__41 && j__41 < (alen(getVCTOption1(trees)): Int) ==> acc(method_Tree_tree_perm__Node(globals, (loc(getVCTOption1(trees), j__41): Ref).Ref__item), write))
    invariant (forall j__42: Int :: { (loc(getVCTOption1(trees), j__42): Ref).Ref__item } i__16 <= j__42 && j__42 < (alen(getVCTOption1(trees)): Int) ==> method_Tree_validTree__Node(globals, (loc(getVCTOption1(trees), j__42): Ref).Ref__item))
    invariant (forall j__43: Int :: { (loc(getVCTOption1(threads__15), j__43): Ref) } 0 <= j__43 && j__43 < i__16 ==> (loc(getVCTOption1(threads__15), j__43): Ref).Ref__item != null)
    invariant (forall j__44: Int :: { (loc(getVCTOption1(threads__15), j__44): Ref) } 0 <= j__44 && j__44 < i__16 ==> acc(method_TreeConverterThread_join_token__Fraction((loc(getVCTOption1(threads__15), j__44): Ref).Ref__item, globals, new_frac(write)), write))
    invariant (forall j__45: Int :: { (loc(getVCTOption1(threads__15), j__45): Ref) } 0 <= j__45 && j__45 < i__16 ==> acc((loc(getVCTOption1(threads__15), j__45): Ref).Ref__item.field_TreeConverterThread_treeAsSeq, 1 / 2))
    invariant (forall j__46: Int :: { (loc(getVCTOption1(threads__15), j__46): Ref) } 0 <= j__46 && j__46 < i__16 ==> acc((loc(getVCTOption1(threads__15), j__46): Ref).Ref__item.field_TreeConverterThread_keysAsSeq, 1 / 2))
    invariant (forall j__47: Int :: { (loc(getVCTOption1(threads__15), j__47): Ref) } 0 <= j__47 && j__47 < i__16 ==> (loc(getVCTOption1(threads__15), j__47): Ref).Ref__item.field_TreeConverterThread_treeAsSeq == old(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__47): Ref).Ref__item))) && (forall j__48: Int :: { (loc(getVCTOption1(threads__15), j__48): Ref) } 0 <= j__48 && j__48 < i__16 ==> (loc(getVCTOption1(threads__15), j__48): Ref).Ref__item.field_TreeConverterThread_keysAsSeq == old(method_Tree_toSeqKeys__Node(globals, (loc(getVCTOption1(trees), j__48): Ref).Ref__item)))
    invariant (forall j__49: Int :: { (loc(getVCTOption1(trees), j__49): Ref).Ref__item } i__16 <= j__49 && j__49 < (alen(getVCTOption1(trees)): Int) ==> method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__49): Ref).Ref__item) == old(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__49): Ref).Ref__item))) && (forall j__50: Int :: { (loc(getVCTOption1(trees), j__50): Ref).Ref__item } i__16 <= j__50 && j__50 < (alen(getVCTOption1(trees)): Int) ==> method_Tree_toSeqKeys__Node(globals, (loc(getVCTOption1(trees), j__50): Ref).Ref__item) == old(method_Tree_toSeqKeys__Node(globals, (loc(getVCTOption1(trees), j__50): Ref).Ref__item))) 
  {
    __flatten_186__31 := getVCTOption1(threads__15)
    __flatten_55__17 := (loc(__flatten_186__31, i__16): Ref)
    __flatten_188__32 := getVCTOption1(trees)
    __flatten_57__19 := (loc(__flatten_188__32, i__16): Ref)
    __flatten_56__18 := constructor_TreeConverterThread_TreeConverterThread__Node(current_thread_id, globals, __flatten_57__19.Ref__item)
    __flatten_55__17.Ref__item := __flatten_56__18
    inhale (forall j__51: Int :: { (loc(getVCTOption1(threads__15), j__51): Ref) } 0 <= j__51 && j__51 < i__16 ==> (loc(getVCTOption1(threads__15), j__51): Ref).Ref__item != (loc(getVCTOption1(threads__15), i__16): Ref).Ref__item)
    __flatten_191__33 := getVCTOption1(threads__15)
    __flatten_59__20 := (loc(__flatten_191__33, i__16): Ref)
    method_TreeConverterThread_start(__flatten_59__20.Ref__item, current_thread_id, globals)
    __flatten_61__21 := i__16
    i__16 := i__16 + 1
  }
  inhale acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  __flatten_194__34 := getVCTOption1(trees)
  i__16 := (alen(__flatten_194__34): Int)
  while (i__16 < 2 * (alen(getVCTOption1(trees)): Int) - 1)
    invariant acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
    invariant (alen(getVCTOption1(iterators)): Int) == 2 * (alen(getVCTOption1(trees)): Int) - 1
    invariant (alen(getVCTOption1(trees)): Int) <= i__16 && i__16 <= (alen(getVCTOption1(iterators)): Int)
    invariant (forall j__52: Int :: { (loc(getVCTOption1(iterators), j__52): Ref) } 0 <= j__52 && j__52 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__52): Ref).Ref__item, write))
    invariant (forall j__53: Int :: { (loc(getVCTOption1(iterators), j__53): Ref) } (alen(getVCTOption1(trees)): Int) <= j__53 && j__53 < i__16 ==> (loc(getVCTOption1(iterators), j__53): Ref).Ref__item != null)
    invariant (forall j__54: Int :: (alen(getVCTOption1(trees)): Int) <= j__54 && j__54 < i__16 ==> acc(method_TreeMerger_dst_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j__54): Ref).Ref__item), write))
    invariant (forall j__55: Int :: (alen(getVCTOption1(trees)): Int) <= j__55 && j__55 < i__16 ==> acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j__55): Ref).Ref__item), write))
    invariant (forall j__56: Int, k__57: Int :: { (loc(getVCTOption1(iterators), j__56): Ref),(loc(getVCTOption1(iterators), k__57): Ref) } (alen(getVCTOption1(trees)): Int) <= j__56 && j__56 < i__16 && ((alen(getVCTOption1(trees)): Int) <= k__57 && k__57 < j__56) ==> (loc(getVCTOption1(iterators), j__56): Ref).Ref__item != (loc(getVCTOption1(iterators), k__57): Ref).Ref__item) 
  {
    __flatten_196__35 := getVCTOption1(iterators)
    __flatten_62__22 := (loc(__flatten_196__35, i__16): Ref)
    __flatten_63__23 := constructor_ListListQueue_ListListQueue(current_thread_id, globals)
    __flatten_62__22.Ref__item := __flatten_63__23
    inhale (forall j__58: Int :: { (loc(getVCTOption1(iterators), j__58): Ref) } (alen(getVCTOption1(trees)): Int) <= j__58 && j__58 < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j__58): Ref).Ref__item != (loc(getVCTOption1(iterators), i__16): Ref).Ref__item)
    fold acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), i__16): Ref).Ref__item), write)
    fold acc(method_TreeMerger_dst_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), i__16): Ref).Ref__item), write)
    __flatten_65__24 := i__16
    i__16 := i__16 + 1
  }
  i__16 := 0
  while (i__16 < (alen(getVCTOption1(trees)): Int))
    invariant acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
    invariant 0 <= i__16 && i__16 <= (alen(getVCTOption1(threads__15)): Int) && (alen(getVCTOption1(threads__15)): Int) == (alen(getVCTOption1(trees)): Int)
    invariant (alen(getVCTOption1(iterators)): Int) == 2 * (alen(getVCTOption1(trees)): Int) - 1
    invariant (forall j__59: Int :: { (loc(getVCTOption1(threads__15), j__59): Ref) } 0 <= j__59 && j__59 < (alen(getVCTOption1(threads__15)): Int) ==> acc((loc(getVCTOption1(threads__15), j__59): Ref).Ref__item, write))
    invariant (forall j__60: Int :: { (loc(getVCTOption1(iterators), j__60): Ref) } 0 <= j__60 && j__60 < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(iterators), j__60): Ref).Ref__item, write))
    invariant (forall j__61: Int :: { (loc(getVCTOption1(iterators), j__61): Ref) } (alen(getVCTOption1(trees)): Int) <= j__61 && j__61 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__61): Ref).Ref__item, 1 / 2))
    invariant (forall j__62: Int :: { (loc(getVCTOption1(iterators), j__62): Ref) } 0 <= j__62 && j__62 < i__16 || (alen(getVCTOption1(trees)): Int) <= j__62 && j__62 < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j__62): Ref).Ref__item != null)
    invariant (forall j__63: Int :: { (loc(getVCTOption1(threads__15), j__63): Ref) } 0 <= j__63 && j__63 < (alen(getVCTOption1(threads__15)): Int) ==> (loc(getVCTOption1(threads__15), j__63): Ref).Ref__item != null)
    invariant (forall j__64: Int :: { (loc(getVCTOption1(threads__15), j__64): Ref) } i__16 <= j__64 && j__64 < (alen(getVCTOption1(trees)): Int) ==> acc(method_TreeConverterThread_join_token__Fraction((loc(getVCTOption1(threads__15), j__64): Ref).Ref__item, globals, new_frac(write)), write))
    invariant (forall j__65: Int :: { (loc(getVCTOption1(threads__15), j__65): Ref) } i__16 <= j__65 && j__65 < (alen(getVCTOption1(threads__15)): Int) ==> acc((loc(getVCTOption1(threads__15), j__65): Ref).Ref__item.field_TreeConverterThread_treeAsSeq, 1 / 2))
    invariant (forall j__66: Int :: { (loc(getVCTOption1(threads__15), j__66): Ref) } i__16 <= j__66 && j__66 < (alen(getVCTOption1(threads__15)): Int) ==> acc((loc(getVCTOption1(threads__15), j__66): Ref).Ref__item.field_TreeConverterThread_keysAsSeq, 1 / 2))
    invariant (forall j__67: Int :: { (loc(getVCTOption1(threads__15), j__67): Ref) } i__16 <= j__67 && j__67 < (alen(getVCTOption1(threads__15)): Int) ==> (loc(getVCTOption1(threads__15), j__67): Ref).Ref__item.field_TreeConverterThread_treeAsSeq == old(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__67): Ref).Ref__item))) && (forall j__68: Int :: { (loc(getVCTOption1(threads__15), j__68): Ref) } i__16 <= j__68 && j__68 < (alen(getVCTOption1(threads__15)): Int) ==> (loc(getVCTOption1(threads__15), j__68): Ref).Ref__item.field_TreeConverterThread_keysAsSeq == old(method_Tree_toSeqKeys__Node(globals, (loc(getVCTOption1(trees), j__68): Ref).Ref__item)))
    invariant (forall j__69: Int, k__70: Int :: { (loc(getVCTOption1(iterators), j__69): Ref),(loc(getVCTOption1(iterators), k__70): Ref) } (0 <= j__69 && j__69 < i__16 || (alen(getVCTOption1(trees)): Int) <= j__69 && j__69 < (alen(getVCTOption1(iterators)): Int)) && (0 <= k__70 && k__70 < (i__16 < j__69 ? i__16 : j__69) || (alen(getVCTOption1(trees)): Int) <= k__70 && k__70 < j__69) ==> (loc(getVCTOption1(iterators), j__69): Ref).Ref__item != (loc(getVCTOption1(iterators), k__70): Ref).Ref__item)
    invariant (forall j__71: Int :: 0 <= j__71 && j__71 < i__16 ==> acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j__71): Ref).Ref__item), write))
    invariant (forall j__72: Int :: 0 <= j__72 && j__72 < i__16 ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j__72): Ref).Ref__item, j__72), write)) 
  {
    __flatten_199__36 := getVCTOption1(threads__15)
    __flatten_66__25 := (loc(__flatten_199__36, i__16): Ref)
    thread__73 := __flatten_66__25.Ref__item
    method_TreeConverterThread_join(thread__73, current_thread_id, globals)
    unfold acc(method_TreeConverterThread_post_join__Fraction(thread__73, globals, new_frac(write)), write)
    __flatten_202__37 := getVCTOption1(iterators)
    __flatten_68__26 := (loc(__flatten_202__37, i__16): Ref)
    __flatten_69__27 := thread__73.field_TreeConverterThread_res
    __flatten_68__26.Ref__item := __flatten_69__27
    inhale (forall j__74: Int :: { (loc(getVCTOption1(iterators), j__74): Ref) } 0 <= j__74 && j__74 < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j__74): Ref).Ref__item != (loc(getVCTOption1(iterators), i__16): Ref).Ref__item)
    fold acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), i__16): Ref).Ref__item), write)
    fold acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), i__16): Ref).Ref__item, i__16), write)
    __flatten_70__28 := i__16
    i__16 := i__16 + 1
  }
  label method_end_method_TreeMerger_initIterators__Option$Array$Cell$Node$$$__Option$Array$Cell$ListListQueue$$$_5
}

method __contract_unsatisfiable__method_TreeMerger_startMergerThreads__Option$Array$Cell$ListListQueue$$$__Option$Array$Cell$ListMergerThread$$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, iterators: VCTOption[VCTArray[Ref]], threads: VCTOption[VCTArray[Ref]], treesLen: Int, treeBags: Seq[Multiset[Ref]])
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (iterators != (VCTNone(): VCTOption[VCTArray[Ref]]) && threads != (VCTNone(): VCTOption[VCTArray[Ref]]) && 0 < treesLen && ((alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1) && |treeBags| == treesLen && (forall j__75: Int :: { (loc(getVCTOption1(iterators), j__75): Ref) } 0 <= j__75 && j__75 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__75): Ref).Ref__item, write)) && (forall j__76: Int :: { (loc(getVCTOption1(iterators), j__76): Ref) } 0 <= j__76 && j__76 < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j__76): Ref).Ref__item != null) && (forall j__77: Int, k__78: Int :: { (loc(getVCTOption1(iterators), j__77): Ref),(loc(getVCTOption1(iterators), k__78): Ref) } 0 <= j__77 && j__77 < (alen(getVCTOption1(iterators)): Int) && (0 <= k__78 && k__78 < j__77) ==> (loc(getVCTOption1(iterators), j__77): Ref).Ref__item != (loc(getVCTOption1(iterators), k__78): Ref).Ref__item) && (forall j__79: Int :: { (loc(getVCTOption1(threads), j__79): Ref) } 0 <= j__79 && j__79 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__79): Ref).Ref__item, write)) && (forall j__80: Int :: 0 <= j__80 && j__80 < |treeBags| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j__80): Ref).Ref__item, j__80), write)) && (forall j__81: Int :: 0 <= j__81 && j__81 < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j__81): Ref).Ref__item), write)) && (forall j__82: Int :: treesLen <= j__82 && j__82 < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_dst_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j__82): Ref).Ref__item), write)))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_TreeMerger_startMergerThreads__Option$Array$Cell$ListListQueue$$$__Option$Array$Cell$ListMergerThread$$$__Integer_6
}

method method_TreeMerger_startMergerThreads__Option$Array$Cell$ListListQueue$$$__Option$Array$Cell$ListMergerThread$$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, iterators: VCTOption[VCTArray[Ref]], threads: VCTOption[VCTArray[Ref]], treesLen: Int, treeBags: Seq[Multiset[Ref]])
  requires diz != null
  requires 0 <= current_thread_id
  requires iterators != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires threads != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 < treesLen
  requires (alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1
  requires |treeBags| == treesLen
  requires (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, write))
  requires (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != null)
  requires (forall j: Int, k: Int :: { (loc(getVCTOption1(iterators), k): Ref),(loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) && (0 <= k && k < j) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != (loc(getVCTOption1(iterators), k): Ref).Ref__item)
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item, write))
  requires (forall j: Int :: 0 <= j && j < |treeBags| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j): Ref).Ref__item, j), write))
  requires (forall j: Int :: 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j): Ref).Ref__item), write))
  requires (forall j: Int :: treesLen <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_dst_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j): Ref).Ref__item), write))
  ensures iterators != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures threads != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < treesLen
  ensures (alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1
  ensures |treeBags| == treesLen
  ensures (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, write))
  ensures (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != null)
  ensures (forall j: Int, k: Int :: { (loc(getVCTOption1(iterators), k): Ref),(loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) && (0 <= k && k < j) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != (loc(getVCTOption1(iterators), k): Ref).Ref__item)
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item, write))
  ensures (forall j: Int :: 0 <= j && j < |treeBags| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j): Ref).Ref__item, j), write))
  ensures acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), (alen(getVCTOption1(iterators)): Int) - 1): Ref).Ref__item), write)
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item != null)
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src1, 1 / 2))
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src2, 1 / 2))
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_dst, 1 / 2))
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src1 == (loc(getVCTOption1(iterators), 2 * j): Ref).Ref__item) && (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src2 == (loc(getVCTOption1(iterators), 2 * j + 1): Ref).Ref__item) && (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_dst == (loc(getVCTOption1(iterators), treesLen + j): Ref).Ref__item)
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc(method_ListMergerThread_join_token__Fraction((loc(getVCTOption1(threads), j): Ref).Ref__item, globals, new_frac(write)), write))
  ensures treeBags == old(treeBags)
{
  var s2__114: Ref
  var s1__113: Ref
  var d__112: Ref
  var i__83: Int
  var __flatten_71__84: Ref
  var __flatten_72__85: Ref
  var __flatten_73__86: Ref
  var __flatten_74__87: Ref
  var __flatten_75__88: Ref
  var __flatten_77__89: Ref
  var __flatten_79__90: Int
  var __flatten_204__91: VCTArray[Ref]
  var __flatten_206__92: VCTArray[Ref]
  var __flatten_208__93: VCTArray[Ref]
  var __flatten_210__94: VCTArray[Ref]
  var __flatten_213__95: VCTArray[Ref]
  inhale acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  i__83 := 0
  while (i__83 < treesLen - 1)
    invariant 0 <= i__83 && i__83 <= treesLen - 1
    invariant acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
    invariant (alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1
    invariant |treeBags| == treesLen
    invariant (forall j__96: Int :: { (loc(getVCTOption1(iterators), j__96): Ref) } 0 <= j__96 && j__96 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__96): Ref).Ref__item, write))
    invariant (forall j__97: Int :: { (loc(getVCTOption1(iterators), j__97): Ref) } 0 <= j__97 && j__97 < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j__97): Ref).Ref__item != null)
    invariant (forall j__98: Int, k__99: Int :: { (loc(getVCTOption1(iterators), k__99): Ref),(loc(getVCTOption1(iterators), j__98): Ref) } 0 <= j__98 && j__98 < (alen(getVCTOption1(iterators)): Int) && (0 <= k__99 && k__99 < j__98) ==> (loc(getVCTOption1(iterators), j__98): Ref).Ref__item != (loc(getVCTOption1(iterators), k__99): Ref).Ref__item)
    invariant (forall j__100: Int :: { (loc(getVCTOption1(threads), j__100): Ref) } 0 <= j__100 && j__100 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__100): Ref).Ref__item, write))
    invariant (forall j__101: Int :: 0 <= j__101 && j__101 < |treeBags| ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j__101): Ref).Ref__item, j__101), write))
    invariant (forall j__102: Int :: { (loc(getVCTOption1(threads), j__102): Ref) } 0 <= j__102 && j__102 < i__83 ==> (loc(getVCTOption1(threads), j__102): Ref).Ref__item != null)
    invariant (forall j__103: Int :: { (loc(getVCTOption1(threads), j__103): Ref) } 0 <= j__103 && j__103 < i__83 ==> acc((loc(getVCTOption1(threads), j__103): Ref).Ref__item.field_ListMergerThread_src1, 1 / 2))
    invariant (forall j__104: Int :: { (loc(getVCTOption1(threads), j__104): Ref) } 0 <= j__104 && j__104 < i__83 ==> acc((loc(getVCTOption1(threads), j__104): Ref).Ref__item.field_ListMergerThread_src2, 1 / 2))
    invariant (forall j__105: Int :: { (loc(getVCTOption1(threads), j__105): Ref) } 0 <= j__105 && j__105 < i__83 ==> acc((loc(getVCTOption1(threads), j__105): Ref).Ref__item.field_ListMergerThread_dst, 1 / 2))
    invariant (forall j__106: Int :: { (loc(getVCTOption1(threads), j__106): Ref) } 0 <= j__106 && j__106 < i__83 ==> (loc(getVCTOption1(threads), j__106): Ref).Ref__item.field_ListMergerThread_src1 == (loc(getVCTOption1(iterators), 2 * j__106): Ref).Ref__item) && (forall j__107: Int :: { (loc(getVCTOption1(threads), j__107): Ref) } 0 <= j__107 && j__107 < i__83 ==> (loc(getVCTOption1(threads), j__107): Ref).Ref__item.field_ListMergerThread_src2 == (loc(getVCTOption1(iterators), 2 * j__107 + 1): Ref).Ref__item) && (forall j__108: Int :: { (loc(getVCTOption1(threads), j__108): Ref) } 0 <= j__108 && j__108 < i__83 ==> (loc(getVCTOption1(threads), j__108): Ref).Ref__item.field_ListMergerThread_dst == (loc(getVCTOption1(iterators), treesLen + j__108): Ref).Ref__item)
    invariant (forall j__109: Int :: { (loc(getVCTOption1(threads), j__109): Ref) } 0 <= j__109 && j__109 < i__83 ==> acc(method_ListMergerThread_join_token__Fraction((loc(getVCTOption1(threads), j__109): Ref).Ref__item, globals, new_frac(write)), write))
    invariant (forall j__110: Int :: 2 * i__83 <= j__110 && j__110 < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j__110): Ref).Ref__item), write))
    invariant (forall j__111: Int :: treesLen + i__83 <= j__111 && j__111 < (alen(getVCTOption1(iterators)): Int) ==> acc(method_TreeMerger_dst_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), j__111): Ref).Ref__item), write))
    invariant treeBags == old(treeBags) 
  {
    __flatten_204__91 := getVCTOption1(iterators)
    __flatten_71__84 := (loc(__flatten_204__91, treesLen + i__83): Ref)
    d__112 := __flatten_71__84.Ref__item
    __flatten_206__92 := getVCTOption1(iterators)
    __flatten_72__85 := (loc(__flatten_206__92, 2 * i__83): Ref)
    s1__113 := __flatten_72__85.Ref__item
    __flatten_208__93 := getVCTOption1(iterators)
    __flatten_73__86 := (loc(__flatten_208__93, 2 * i__83 + 1): Ref)
    s2__114 := __flatten_73__86.Ref__item
    unfold acc(method_TreeMerger_dst_initial__ListListQueue(diz, globals, d__112), write)
    unfold acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, s1__113), write)
    unfold acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, s2__114), write)
    __flatten_210__94 := getVCTOption1(threads)
    __flatten_74__87 := (loc(__flatten_210__94, i__83): Ref)
    __flatten_75__88 := constructor_ListMergerThread_ListMergerThread__ListListQueue__ListListQueue__ListListQueue(current_thread_id, globals, s1__113, s2__114, d__112)
    __flatten_74__87.Ref__item := __flatten_75__88
    inhale (forall j__115: Int :: { (loc(getVCTOption1(threads), j__115): Ref) } 0 <= j__115 && j__115 < i__83 ==> (loc(getVCTOption1(threads), j__115): Ref).Ref__item != (loc(getVCTOption1(threads), i__83): Ref).Ref__item)
    __flatten_213__95 := getVCTOption1(threads)
    __flatten_77__89 := (loc(__flatten_213__95, i__83): Ref)
    method_ListMergerThread_start(__flatten_77__89.Ref__item, current_thread_id, globals)
    __flatten_79__90 := i__83
    i__83 := i__83 + 1
  }
  label method_end_method_TreeMerger_startMergerThreads__Option$Array$Cell$ListListQueue$$$__Option$Array$Cell$ListMergerThread$$$__Integer_7
}

method __contract_unsatisfiable__method_TreeMerger_joinMergerThreads__Option$Array$Cell$ListMergerThread$$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, threads: VCTOption[VCTArray[Ref]], treesLen: Int, treeBags: Seq[Multiset[Ref]], iterators: VCTOption[VCTArray[Ref]]) returns (merged: Ref)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (iterators != (VCTNone(): VCTOption[VCTArray[Ref]]) && threads != (VCTNone(): VCTOption[VCTArray[Ref]]) && 0 < treesLen && ((alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1) && (forall j__116: Int :: { (loc(getVCTOption1(iterators), j__116): Ref) } 0 <= j__116 && j__116 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__116): Ref).Ref__item, write)) && (forall j__117: Int :: { (loc(getVCTOption1(iterators), j__117): Ref) } 0 <= j__117 && j__117 < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j__117): Ref).Ref__item != null) && (forall j__118: Int, k__119: Int :: { (loc(getVCTOption1(iterators), j__118): Ref),(loc(getVCTOption1(iterators), k__119): Ref) } 0 <= j__118 && j__118 < (alen(getVCTOption1(iterators)): Int) && (0 <= k__119 && k__119 < j__118) ==> (loc(getVCTOption1(iterators), j__118): Ref).Ref__item != (loc(getVCTOption1(iterators), k__119): Ref).Ref__item) && acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), 2 * treesLen - 2): Ref).Ref__item), write) && (forall j__120: Int :: { (loc(getVCTOption1(threads), j__120): Ref) } 0 <= j__120 && j__120 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__120): Ref).Ref__item, write)) && (forall j__121: Int :: { (loc(getVCTOption1(threads), j__121): Ref) } 0 <= j__121 && j__121 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__121): Ref).Ref__item != null) && (forall j__122: Int, k__123: Int :: { (loc(getVCTOption1(threads), j__122): Ref),(loc(getVCTOption1(threads), k__123): Ref) } 0 <= j__122 && j__122 < (alen(getVCTOption1(threads)): Int) && (0 <= k__123 && k__123 < j__122) ==> (loc(getVCTOption1(threads), j__122): Ref).Ref__item != (loc(getVCTOption1(threads), k__123): Ref).Ref__item) && ((forall j__124: Int :: { (loc(getVCTOption1(threads), j__124): Ref) } 0 <= j__124 && j__124 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__124): Ref).Ref__item.field_ListMergerThread_src1, 1 / 2)) && (forall j__125: Int :: { (loc(getVCTOption1(threads), j__125): Ref) } 0 <= j__125 && j__125 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__125): Ref).Ref__item.field_ListMergerThread_src2, 1 / 2)) && (forall j__126: Int :: { (loc(getVCTOption1(threads), j__126): Ref) } 0 <= j__126 && j__126 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__126): Ref).Ref__item.field_ListMergerThread_dst, 1 / 2))) && ((forall j__127: Int :: { (loc(getVCTOption1(threads), j__127): Ref) } 0 <= j__127 && j__127 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__127): Ref).Ref__item.field_ListMergerThread_src1 == (loc(getVCTOption1(iterators), 2 * j__127): Ref).Ref__item) && (forall j__128: Int :: { (loc(getVCTOption1(threads), j__128): Ref) } 0 <= j__128 && j__128 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__128): Ref).Ref__item.field_ListMergerThread_src2 == (loc(getVCTOption1(iterators), 2 * j__128 + 1): Ref).Ref__item) && (forall j__129: Int :: { (loc(getVCTOption1(threads), j__129): Ref) } 0 <= j__129 && j__129 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__129): Ref).Ref__item.field_ListMergerThread_dst == (loc(getVCTOption1(iterators), treesLen + j__129): Ref).Ref__item)) && |treeBags| == treesLen && (forall j__130: Int :: { (loc(getVCTOption1(threads), j__130): Ref) } 0 <= j__130 && j__130 < (alen(getVCTOption1(threads)): Int) ==> acc(method_ListMergerThread_join_token__Fraction((loc(getVCTOption1(threads), j__130): Ref).Ref__item, globals, new_frac(write)), write)) && (forall j__131: Int :: 0 <= j__131 && j__131 < treesLen ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j__131): Ref).Ref__item, j__131), write)))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_TreeMerger_joinMergerThreads__Option$Array$Cell$ListMergerThread$$$__Integer_8
}

method method_TreeMerger_joinMergerThreads__Option$Array$Cell$ListMergerThread$$$__Integer(diz: Ref, current_thread_id: Int, globals: Ref, threads: VCTOption[VCTArray[Ref]], treesLen: Int, treeBags: Seq[Multiset[Ref]], iterators: VCTOption[VCTArray[Ref]]) returns (merged: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires iterators != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires threads != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 < treesLen
  requires (alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1
  requires (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, write))
  requires (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != null)
  requires (forall j: Int, k: Int :: { (loc(getVCTOption1(iterators), k): Ref),(loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) && (0 <= k && k < j) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != (loc(getVCTOption1(iterators), k): Ref).Ref__item)
  requires acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), 2 * treesLen - 2): Ref).Ref__item), write)
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item, write))
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item != null)
  requires (forall j: Int, k: Int :: { (loc(getVCTOption1(threads), j): Ref),(loc(getVCTOption1(threads), k): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) && (0 <= k && k < j) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item != (loc(getVCTOption1(threads), k): Ref).Ref__item)
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src1, 1 / 2))
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src2, 1 / 2))
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_dst, 1 / 2))
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src1 == (loc(getVCTOption1(iterators), 2 * j): Ref).Ref__item) && (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src2 == (loc(getVCTOption1(iterators), 2 * j + 1): Ref).Ref__item) && (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_dst == (loc(getVCTOption1(iterators), treesLen + j): Ref).Ref__item)
  requires |treeBags| == treesLen
  requires (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc(method_ListMergerThread_join_token__Fraction((loc(getVCTOption1(threads), j): Ref).Ref__item, globals, new_frac(write)), write))
  requires (forall j: Int :: 0 <= j && j < treesLen ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, treeBags, (loc(getVCTOption1(iterators), j): Ref).Ref__item, j), write))
  ensures iterators != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures threads != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures 0 < treesLen
  ensures (alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1
  ensures (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j): Ref).Ref__item, write))
  ensures (forall j: Int :: { (loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != null)
  ensures (forall j: Int, k: Int :: { (loc(getVCTOption1(iterators), k): Ref),(loc(getVCTOption1(iterators), j): Ref) } 0 <= j && j < (alen(getVCTOption1(iterators)): Int) && (0 <= k && k < j) ==> (loc(getVCTOption1(iterators), j): Ref).Ref__item != (loc(getVCTOption1(iterators), k): Ref).Ref__item)
  ensures acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), 2 * treesLen - 2): Ref).Ref__item), write)
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item, write))
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item != null)
  ensures (forall j: Int, k: Int :: { (loc(getVCTOption1(threads), j): Ref),(loc(getVCTOption1(threads), k): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) && (0 <= k && k < j) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item != (loc(getVCTOption1(threads), k): Ref).Ref__item)
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src1, 1 / 2))
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src2, 1 / 2))
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_dst, 1 / 2))
  ensures (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src1 == (loc(getVCTOption1(iterators), 2 * j): Ref).Ref__item) && (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_src2 == (loc(getVCTOption1(iterators), 2 * j + 1): Ref).Ref__item) && (forall j: Int :: { (loc(getVCTOption1(threads), j): Ref) } 0 <= j && j < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j): Ref).Ref__item.field_ListMergerThread_dst == (loc(getVCTOption1(iterators), treesLen + j): Ref).Ref__item)
  ensures merged == (loc(getVCTOption1(iterators), 2 * treesLen - 2): Ref).Ref__item
  ensures acc(method_ListListQueue_producer(merged, globals), write)
  ensures (unfolding acc(method_ListListQueue_producer(merged, globals), write) in merged.field_ListListQueue_finalised)
  ensures (let last_bag == (method_ListListQueue_toBagP(merged, globals)) in (forall j: Int, n: Ref :: { (n in treeBags[j]) } 0 <= j && j < treesLen && 0 < ((n in treeBags[j])) ==> 0 < ((n in last_bag))))
{
  var new_bag__166: Seq[Multiset[Ref]]
  var oldBag__165: Seq[Multiset[Ref]]
  var nodeBags__132: Seq[Multiset[Ref]]
  var i__133: Int
  var __flatten_80__134: Ref
  var __flatten_82__135: Ref
  var __flatten_84__136: Ref
  var __flatten_86__137: Seq[Multiset[Ref]]
  var __flatten_88__138: Int
  var last_it__139: Int
  var __flatten_89__140: Ref
  var __flatten_216__141: VCTArray[Ref]
  var __flatten_219__142: VCTArray[Ref]
  var __flatten_222__143: VCTArray[Ref]
  var __flatten_225__144: Seq[Multiset[Ref]]
  var __flatten_227__145: VCTArray[Ref]
  nodeBags__132 := treeBags
  i__133 := 0
  while (i__133 < treesLen - 1)
    invariant 0 <= i__133 && i__133 <= treesLen - 1
    invariant (alen(getVCTOption1(iterators)): Int) == 2 * treesLen - 1 && (alen(getVCTOption1(threads)): Int) == treesLen - 1
    invariant (forall j__146: Int :: { (loc(getVCTOption1(iterators), j__146): Ref) } 0 <= j__146 && j__146 < (alen(getVCTOption1(iterators)): Int) ==> acc((loc(getVCTOption1(iterators), j__146): Ref).Ref__item, write))
    invariant (forall j__147: Int :: { (loc(getVCTOption1(iterators), j__147): Ref) } 0 <= j__147 && j__147 < (alen(getVCTOption1(iterators)): Int) ==> (loc(getVCTOption1(iterators), j__147): Ref).Ref__item != null)
    invariant (forall j__148: Int, k__149: Int :: { (loc(getVCTOption1(iterators), j__148): Ref),(loc(getVCTOption1(iterators), k__149): Ref) } 0 <= j__148 && j__148 < (alen(getVCTOption1(iterators)): Int) && (0 <= k__149 && k__149 < j__148) ==> (loc(getVCTOption1(iterators), j__148): Ref).Ref__item != (loc(getVCTOption1(iterators), k__149): Ref).Ref__item)
    invariant acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, (loc(getVCTOption1(iterators), 2 * treesLen - 2): Ref).Ref__item), write)
    invariant (forall j__150: Int :: { (loc(getVCTOption1(threads), j__150): Ref) } 0 <= j__150 && j__150 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__150): Ref).Ref__item, write))
    invariant (forall j__151: Int :: { (loc(getVCTOption1(threads), j__151): Ref) } 0 <= j__151 && j__151 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__151): Ref).Ref__item != null)
    invariant (forall j__152: Int, k__153: Int :: { (loc(getVCTOption1(threads), k__153): Ref),(loc(getVCTOption1(threads), j__152): Ref) } 0 <= j__152 && j__152 < (alen(getVCTOption1(threads)): Int) && (0 <= k__153 && k__153 < j__152) ==> (loc(getVCTOption1(threads), j__152): Ref).Ref__item != (loc(getVCTOption1(threads), k__153): Ref).Ref__item)
    invariant (forall j__154: Int :: { (loc(getVCTOption1(threads), j__154): Ref) } 0 <= j__154 && j__154 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__154): Ref).Ref__item.field_ListMergerThread_src1, 1 / 2))
    invariant (forall j__155: Int :: { (loc(getVCTOption1(threads), j__155): Ref) } 0 <= j__155 && j__155 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__155): Ref).Ref__item.field_ListMergerThread_src2, 1 / 2))
    invariant (forall j__156: Int :: { (loc(getVCTOption1(threads), j__156): Ref) } 0 <= j__156 && j__156 < (alen(getVCTOption1(threads)): Int) ==> acc((loc(getVCTOption1(threads), j__156): Ref).Ref__item.field_ListMergerThread_dst, 1 / 2))
    invariant (forall j__157: Int :: { (loc(getVCTOption1(threads), j__157): Ref) } 0 <= j__157 && j__157 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__157): Ref).Ref__item.field_ListMergerThread_src1 == (loc(getVCTOption1(iterators), 2 * j__157): Ref).Ref__item) && (forall j__158: Int :: { (loc(getVCTOption1(threads), j__158): Ref) } 0 <= j__158 && j__158 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__158): Ref).Ref__item.field_ListMergerThread_src2 == (loc(getVCTOption1(iterators), 2 * j__158 + 1): Ref).Ref__item) && (forall j__159: Int :: { (loc(getVCTOption1(threads), j__159): Ref) } 0 <= j__159 && j__159 < (alen(getVCTOption1(threads)): Int) ==> (loc(getVCTOption1(threads), j__159): Ref).Ref__item.field_ListMergerThread_dst == (loc(getVCTOption1(iterators), treesLen + j__159): Ref).Ref__item)
    invariant |nodeBags__132| == treesLen + i__133
    invariant (forall j__160: Int :: { (loc(getVCTOption1(threads), j__160): Ref) } i__133 <= j__160 && j__160 < (alen(getVCTOption1(threads)): Int) ==> acc(method_ListMergerThread_join_token__Fraction((loc(getVCTOption1(threads), j__160): Ref).Ref__item, globals, new_frac(write)), write))
    invariant (forall j__161: Int :: 2 * i__133 <= j__161 && j__161 < treesLen + i__133 ==> acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, nodeBags__132, (loc(getVCTOption1(iterators), j__161): Ref).Ref__item, j__161), write))
    invariant (forall j__162: Int :: { nodeBags__132[j__162] } { treeBags[j__162] } 0 <= j__162 && j__162 < treesLen ==> nodeBags__132[j__162] == treeBags[j__162])
    invariant (forall j__163: Int :: { (loc(getVCTOption1(iterators), j__163): Ref) } 0 <= j__163 && j__163 < 2 * i__133 ==> acc((loc(getVCTOption1(iterators), j__163): Ref).Ref__item.field_ListListQueue_allP, 1 / 2))
    invariant (forall j__164: Int :: { method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags__132, j__164, treesLen) } 0 <= j__164 && j__164 < i__133 ==> method_TreeMerger_bagSum__Sequence$Bag$Node$$__Integer__Integer(nodeBags__132, j__164, treesLen)) 
  {
    __flatten_216__141 := getVCTOption1(threads)
    __flatten_80__134 := (loc(__flatten_216__141, i__133): Ref)
    method_ListMergerThread_join(__flatten_80__134.Ref__item, current_thread_id, globals)
    unfold acc(method_ListMergerThread_post_join__Fraction((loc(getVCTOption1(threads), i__133): Ref).Ref__item, globals, new_frac(write)), write)
    __flatten_219__142 := getVCTOption1(iterators)
    __flatten_82__135 := (loc(__flatten_219__142, 2 * i__133): Ref)
    method_TreeMerger_joinIteratorPC__ListListQueue__Sequence$Bag$Node$$__Integer(diz, current_thread_id, globals, __flatten_82__135.Ref__item, nodeBags__132, 2 * i__133)
    __flatten_222__143 := getVCTOption1(iterators)
    __flatten_84__136 := (loc(__flatten_222__143, 2 * i__133 + 1): Ref)
    method_TreeMerger_joinIteratorPC__ListListQueue__Sequence$Bag$Node$$__Integer(diz, current_thread_id, globals, __flatten_84__136.Ref__item, nodeBags__132, 2 * i__133 + 1)
    oldBag__165 := nodeBags__132
    unfold acc(method_ListListQueue_producer((loc(getVCTOption1(iterators), i__133 + treesLen): Ref).Ref__item, globals), write)
    __flatten_225__144 := Seq(method_Util_toBag__Sequence$Node$((loc(getVCTOption1(iterators), i__133 + treesLen): Ref).Ref__item.field_ListListQueue_allP))
    __flatten_86__137 := __flatten_225__144
    new_bag__166 := __flatten_86__137
    fold acc(method_ListListQueue_producer((loc(getVCTOption1(iterators), i__133 + treesLen): Ref).Ref__item, globals), write)
    nodeBags__132 := nodeBags__132 ++ new_bag__166
    // assert
    assert 0 < i__133 ==> method_TreeMerger_bagSumExtensionLemma__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Integer__Integer__Integer(oldBag__165, nodeBags__132, new_bag__166, i__133, treesLen, 0)
    method_TreeMerger_refoldEqual_bags__Sequence$Bag$Node$$__Sequence$Bag$Node$$__Option$Array$Cell$ListListQueue$$$__Integer(diz, current_thread_id, globals, oldBag__165, nodeBags__132, iterators, i__133)
    fold acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, nodeBags__132, (loc(getVCTOption1(iterators), i__133 + treesLen): Ref).Ref__item, i__133 + treesLen), write)
    __flatten_88__138 := i__133
    i__133 := i__133 + 1
  }
  last_it__139 := 2 * treesLen - 2
  __flatten_227__145 := getVCTOption1(iterators)
  __flatten_89__140 := (loc(__flatten_227__145, 2 * treesLen - 2): Ref)
  merged := __flatten_89__140.Ref__item
  // assert
  assert method_TreeMerger_transClosureBagSumLemma__Sequence$Bag$Node$$__Integer(nodeBags__132, treesLen)
  // assert
  assert (forall j__167: Int, n__168: Ref :: { (n__168 in nodeBags__132[j__167]) } 0 <= j__167 && j__167 < treesLen && 0 < ((n__168 in nodeBags__132[j__167])) ==> 0 < ((n__168 in nodeBags__132[last_it__139])))
  unfold acc(method_TreeMerger_equal_bags__Sequence$Bag$Node$$__ListListQueue__Integer(diz, globals, nodeBags__132, merged, last_it__139), write)
  // assert
  assert (forall j__169: Int, n__170: Ref :: { (n__170 in nodeBags__132[j__169]) } 0 <= j__169 && j__169 < treesLen && 0 < ((n__170 in nodeBags__132[j__169])) ==> 0 < ((n__170 in method_ListListQueue_toBagP(merged, globals))))
  label method_end_method_TreeMerger_joinMergerThreads__Option$Array$Cell$ListMergerThread$$$__Integer_9
}

method __contract_unsatisfiable__method_TreeMerger_mergeTrees__Option$Array$Cell$Node$$$(diz: Ref, current_thread_id: Int, globals: Ref, trees: VCTOption[VCTArray[Ref]]) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && (trees != (VCTNone(): VCTOption[VCTArray[Ref]]) && 0 < (alen(getVCTOption1(trees)): Int) && (forall i__171: Int :: { (loc(getVCTOption1(trees), i__171): Ref) } 0 <= i__171 && i__171 < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(trees), i__171): Ref).Ref__item, 1 / 2)) && (forall i__172: Int :: { (loc(getVCTOption1(trees), i__172): Ref) } 0 <= i__172 && i__172 < (alen(getVCTOption1(trees)): Int) ==> (loc(getVCTOption1(trees), i__172): Ref).Ref__item != null) && (forall i__173: Int :: 0 <= i__173 && i__173 < (alen(getVCTOption1(trees)): Int) ==> acc(method_Tree_tree_perm__Node(globals, (loc(getVCTOption1(trees), i__173): Ref).Ref__item), write)) && (forall i__174: Int :: { (loc(getVCTOption1(trees), i__174): Ref).Ref__item } 0 <= i__174 && i__174 < (alen(getVCTOption1(trees)): Int) ==> method_Tree_validTree__Node(globals, (loc(getVCTOption1(trees), i__174): Ref).Ref__item)))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_TreeMerger_mergeTrees__Option$Array$Cell$Node$$$_10
}

method method_TreeMerger_mergeTrees__Option$Array$Cell$Node$$$(diz: Ref, current_thread_id: Int, globals: Ref, trees: VCTOption[VCTArray[Ref]]) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires trees != (VCTNone(): VCTOption[VCTArray[Ref]])
  requires 0 < (alen(getVCTOption1(trees)): Int)
  requires (forall i: Int :: { (loc(getVCTOption1(trees), i): Ref) } 0 <= i && i < (alen(getVCTOption1(trees)): Int) ==> acc((loc(getVCTOption1(trees), i): Ref).Ref__item, 1 / 2))
  requires (forall i: Int :: { (loc(getVCTOption1(trees), i): Ref) } 0 <= i && i < (alen(getVCTOption1(trees)): Int) ==> (loc(getVCTOption1(trees), i): Ref).Ref__item != null)
  requires (forall i: Int :: 0 <= i && i < (alen(getVCTOption1(trees)): Int) ==> acc(method_Tree_tree_perm__Node(globals, (loc(getVCTOption1(trees), i): Ref).Ref__item), write))
  requires (forall i: Int :: { (loc(getVCTOption1(trees), i): Ref).Ref__item } 0 <= i && i < (alen(getVCTOption1(trees)): Int) ==> method_Tree_validTree__Node(globals, (loc(getVCTOption1(trees), i): Ref).Ref__item))
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures (forall j: Int, n: Ref :: { (n in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j): Ref).Ref__item)))) } 0 <= j && j < (alen(getVCTOption1(trees)): Int) && 0 < ((n in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j): Ref).Ref__item))))) ==> 0 < ((n in method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, sys__result)))))
  ensures method_Tree_validTree__Node(globals, sys__result)
{
  var sys__local__result__175: Ref
  var __flatten_90__176: Ref
  var treesLen__177: Int
  var iterators__178: VCTOption[VCTArray[Ref]]
  var threads__179: VCTOption[VCTArray[Ref]]
  var treeBags__180: Seq[Multiset[Ref]]
  var mergedIterator__181: Ref
  var idxLastIterator__182: Int
  var merged__183: Ref
  var __flatten_97__184: Ref
  var res__185: Ref
  var __flatten_229__186: VCTArray[Ref]
  var __flatten_230__187: Int
  var __flatten_231__188: VCTArray[Ref]
  var __flatten_233__189: VCTArray[Ref]
  var __flatten_241__190: VCTArray[Ref]
  __flatten_229__186 := getVCTOption1(trees)
  __flatten_230__187 := (alen(__flatten_229__186): Int)
  if (__flatten_230__187 == 1) {
    __flatten_231__188 := getVCTOption1(trees)
    __flatten_90__176 := (loc(__flatten_231__188, 0): Ref)
    sys__local__result__175 := __flatten_90__176.Ref__item
    // assert
    assert acc(method_Tree_tree_perm__Node(globals, sys__local__result__175), write) && (forall j__191: Int, n__192: Ref :: { (n__192 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__191): Ref).Ref__item)))) } 0 <= j__191 && j__191 < (alen(getVCTOption1(trees)): Int) && 0 < ((n__192 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__191): Ref).Ref__item))))) ==> 0 < ((n__192 in method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, sys__local__result__175))))) && method_Tree_validTree__Node(globals, sys__local__result__175)
    goto __return_mergeTrees
  }
  __flatten_233__189 := getVCTOption1(trees)
  treesLen__177 := (alen(__flatten_233__189): Int)
  iterators__178 := array_new_Option_Array_Cell_ListListQueue___(2 * treesLen__177 - 1)
  threads__179 := array_new_Option_Array_Cell_ListMergerThread___(treesLen__177 - 1)
  treeBags__180 := method_TreeMerger_toBags__Option$Array$Cell$Node$$$__Integer(globals, trees, 0)
  method_TreeMerger_initIterators__Option$Array$Cell$Node$$$__Option$Array$Cell$ListListQueue$$$(diz, current_thread_id, globals, trees, iterators__178, treeBags__180)
  method_TreeMerger_startMergerThreads__Option$Array$Cell$ListListQueue$$$__Option$Array$Cell$ListMergerThread$$$__Integer(diz, current_thread_id, globals, iterators__178, threads__179, treesLen__177, treeBags__180)
  mergedIterator__181 := method_TreeMerger_joinMergerThreads__Option$Array$Cell$ListMergerThread$$$__Integer(diz, current_thread_id, globals, threads__179, treesLen__177, treeBags__180, iterators__178)
  idxLastIterator__182 := 2 * treesLen__177 - 2
  // assert
  assert (forall j__193: Int, n__194: Ref :: { (n__194 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__193): Ref).Ref__item)))) } 0 <= j__193 && j__193 < (alen(getVCTOption1(trees)): Int) && 0 < ((n__194 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__193): Ref).Ref__item))))) ==> 0 < ((n__194 in method_ListListQueue_toBagP(mergedIterator__181, globals))))
  __flatten_241__190 := getVCTOption1(iterators__178)
  __flatten_97__184 := (loc(__flatten_241__190, idxLastIterator__182): Ref)
  merged__183 := __flatten_97__184.Ref__item
  // assert
  assert merged__183 == mergedIterator__181
  unfold acc(method_TreeMerger_src_initial__ListListQueue(diz, globals, merged__183), write)
  res__185 := method_ListListQueue_toTree(merged__183, current_thread_id, globals)
  method_ListListQueue_joinPC(merged__183, current_thread_id, globals)
  sys__local__result__175 := res__185
  // assert
  assert acc(method_Tree_tree_perm__Node(globals, sys__local__result__175), write) && (forall j__195: Int, n__196: Ref :: { (n__196 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__195): Ref).Ref__item)))) } 0 <= j__195 && j__195 < (alen(getVCTOption1(trees)): Int) && 0 < ((n__196 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__195): Ref).Ref__item))))) ==> 0 < ((n__196 in method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, sys__local__result__175))))) && method_Tree_validTree__Node(globals, sys__local__result__175)
  goto __return_mergeTrees
  label __return_mergeTrees
  sys__result := sys__local__result__175
  // assert
  assert acc(method_Tree_tree_perm__Node(globals, sys__result), write) && (forall j__197: Int, n__198: Ref :: { (n__198 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__197): Ref).Ref__item)))) } 0 <= j__197 && j__197 < (alen(getVCTOption1(trees)): Int) && 0 < ((n__198 in old(method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, (loc(getVCTOption1(trees), j__197): Ref).Ref__item))))) ==> 0 < ((n__198 in method_Util_toBag__Sequence$Node$(method_Tree_toSeq__Node(globals, sys__result))))) && method_Tree_validTree__Node(globals, sys__result)
  inhale false
  label method_end_method_TreeMerger_mergeTrees__Option$Array$Cell$Node$$$_11
}

method constructor_TreeMerger_TreeMerger(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_TreeMerger()
{
  var diz__199: Ref
  diz__199 := new()
  inhale type_of(diz__199) == class_TreeMerger()
  label method_end_constructor_TreeMerger_TreeMerger_12
  sys__result := diz__199
  // assert
  assert sys__result != null && type_of(sys__result) == class_TreeMerger()
  inhale false
}

method __contract_unsatisfiable__constructor_TreeConverterThread_TreeConverterThread__Node(current_thread_id: Int, globals: Ref, tree: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_TreeConverterThread()
{
  var diz__200: Ref
  diz__200 := new(field_TreeConverterThread_tree, field_TreeConverterThread_res, field_TreeConverterThread_treeAsSeq, field_TreeConverterThread_keysAsSeq)
  inhale type_of(diz__200) == class_TreeConverterThread()
  inhale true && (tree != null && acc(method_Tree_tree_perm__Node(globals, tree), write) && method_Tree_validTree__Node(globals, tree))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__constructor_TreeConverterThread_TreeConverterThread__Node_13
  sys__result := diz__200
  // assert
  assert sys__result != null && type_of(sys__result) == class_TreeConverterThread()
  inhale false
}

method constructor_TreeConverterThread_TreeConverterThread__Node(current_thread_id: Int, globals: Ref, tree: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires tree != null
  requires acc(method_Tree_tree_perm__Node(globals, tree), write)
  requires method_Tree_validTree__Node(globals, tree)
  ensures sys__result != null
  ensures type_of(sys__result) == class_TreeConverterThread()
  ensures acc(method_TreeConverterThread_pre_fork__Fraction(sys__result, globals, new_frac(write)), write)
  ensures acc(sys__result.field_TreeConverterThread_tree, 1 / 2)
  ensures acc(sys__result.field_TreeConverterThread_treeAsSeq, 1 / 2)
  ensures acc(sys__result.field_TreeConverterThread_keysAsSeq, 1 / 2)
  ensures sys__result.field_TreeConverterThread_treeAsSeq == old(method_Tree_toSeq__Node(globals, tree)) && sys__result.field_TreeConverterThread_keysAsSeq == old(method_Tree_toSeqKeys__Node(globals, tree))
  ensures sys__result.field_TreeConverterThread_tree == tree
{
  var diz__201: Ref
  var __flatten_100__202: Seq[Ref]
  var __flatten_102__203: Seq[Int]
  diz__201 := new(field_TreeConverterThread_tree, field_TreeConverterThread_res, field_TreeConverterThread_treeAsSeq, field_TreeConverterThread_keysAsSeq)
  inhale type_of(diz__201) == class_TreeConverterThread()
  diz__201.field_TreeConverterThread_tree := tree
  diz__201.field_TreeConverterThread_res := null
  __flatten_100__202 := method_Tree_toSeq__Node(globals, tree)
  diz__201.field_TreeConverterThread_treeAsSeq := __flatten_100__202
  __flatten_102__203 := method_Tree_toSeqKeys__Node(globals, tree)
  diz__201.field_TreeConverterThread_keysAsSeq := __flatten_102__203
  fold acc(method_TreeConverterThread_pre_fork__Fraction(diz__201, globals, new_frac(write)), write)
  label method_end_constructor_TreeConverterThread_TreeConverterThread__Node_14
  sys__result := diz__201
  // assert
  assert sys__result != null && type_of(sys__result) == class_TreeConverterThread() && acc(method_TreeConverterThread_pre_fork__Fraction(sys__result, globals, new_frac(write)), write) && acc(sys__result.field_TreeConverterThread_tree, 1 / 2) && acc(sys__result.field_TreeConverterThread_treeAsSeq, 1 / 2) && acc(sys__result.field_TreeConverterThread_keysAsSeq, 1 / 2) && (sys__result.field_TreeConverterThread_treeAsSeq == old(method_Tree_toSeq__Node(globals, tree)) && sys__result.field_TreeConverterThread_keysAsSeq == old(method_Tree_toSeqKeys__Node(globals, tree))) && sys__result.field_TreeConverterThread_tree == tree
  inhale false
}

method __contract_unsatisfiable__method_TreeConverterThread_run(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && acc(method_TreeConverterThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_TreeConverterThread_run_15
}

method method_TreeConverterThread_run(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_TreeConverterThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_TreeConverterThread_post_join__Fraction(diz, globals, new_frac(write)), write)
{
  var __flatten_104__204: Ref
  var __flatten_105__205: Ref
  var __flatten_106__206: Ref
  unfold acc(method_TreeConverterThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  __flatten_105__205 := method_NodeList_fromTree__Node(current_thread_id, globals, diz.field_TreeConverterThread_tree)
  __flatten_106__206 := constructor_NodeListIterator_NodeListIterator__NodeList(current_thread_id, globals, __flatten_105__205)
  __flatten_104__204 := constructor_ListListQueue_ListListQueue__NodeListIterator(current_thread_id, globals, __flatten_106__206)
  diz.field_TreeConverterThread_res := __flatten_104__204
  fold acc(method_TreeConverterThread_post_join__Fraction(diz, globals, new_frac(write)), write)
  label method_end_method_TreeConverterThread_run_16
}

method method_TreeConverterThread_start(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_TreeConverterThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_TreeConverterThread_join_token__Fraction(diz, globals, new_frac(write)), write)
{
  inhale false
}

method method_TreeConverterThread_join(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_TreeConverterThread_join_token__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_TreeConverterThread_post_join__Fraction(diz, globals, new_frac(write)), write)
{
  inhale false
}

method __contract_unsatisfiable__constructor_ListMergerThread_ListMergerThread__ListListQueue__ListListQueue__ListListQueue(current_thread_id: Int, globals: Ref, src1: Ref, src2: Ref, dst: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_ListMergerThread()
{
  var diz__207: Ref
  diz__207 := new(field_ListMergerThread_src1, field_ListMergerThread_src2, field_ListMergerThread_dst)
  inhale type_of(diz__207) == class_ListMergerThread()
  inhale true && (acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && (src1 != null && src2 != null && dst != null) && acc(method_ListListQueue_consumer(src1, globals), write) && acc(method_ListListQueue_consumer(src2, globals), write) && acc(method_ListListQueue_producer(dst, globals), write) && (unfolding acc(method_ListListQueue_consumer(src1, globals), write) in src1.field_ListListQueue_readHead == 0) && (unfolding acc(method_ListListQueue_consumer(src2, globals), write) in src2.field_ListListQueue_readHead == 0) && method_ListListQueue_toBagP(dst, globals) == Multiset[Ref]() && (unfolding acc(method_ListListQueue_producer(dst, globals), write) in !dst.field_ListListQueue_finalised && dst.field_ListListQueue_maxKey == globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE))
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__constructor_ListMergerThread_ListMergerThread__ListListQueue__ListListQueue__ListListQueue_17
  sys__result := diz__207
  // assert
  assert sys__result != null && type_of(sys__result) == class_ListMergerThread()
  inhale false
}

method constructor_ListMergerThread_ListMergerThread__ListListQueue__ListListQueue__ListListQueue(current_thread_id: Int, globals: Ref, src1: Ref, src2: Ref, dst: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires src1 != null && src2 != null && dst != null
  requires acc(method_ListListQueue_consumer(src1, globals), write)
  requires acc(method_ListListQueue_consumer(src2, globals), write)
  requires acc(method_ListListQueue_producer(dst, globals), write)
  requires (unfolding acc(method_ListListQueue_consumer(src1, globals), write) in src1.field_ListListQueue_readHead == 0)
  requires (unfolding acc(method_ListListQueue_consumer(src2, globals), write) in src2.field_ListListQueue_readHead == 0)
  requires method_ListListQueue_toBagP(dst, globals) == Multiset[Ref]()
  requires (unfolding acc(method_ListListQueue_producer(dst, globals), write) in !dst.field_ListListQueue_finalised && dst.field_ListListQueue_maxKey == globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE)
  ensures sys__result != null
  ensures type_of(sys__result) == class_ListMergerThread()
  ensures acc(method_ListMergerThread_pre_fork__Fraction(sys__result, globals, new_frac(write)), write)
  ensures acc(sys__result.field_ListMergerThread_src1, 1 / 2)
  ensures acc(sys__result.field_ListMergerThread_src2, 1 / 2)
  ensures acc(sys__result.field_ListMergerThread_dst, 1 / 2)
  ensures sys__result.field_ListMergerThread_src1 == src1
  ensures sys__result.field_ListMergerThread_src2 == src2
  ensures sys__result.field_ListMergerThread_dst == dst
{
  var diz__208: Ref
  diz__208 := new(field_ListMergerThread_src1, field_ListMergerThread_src2, field_ListMergerThread_dst)
  inhale type_of(diz__208) == class_ListMergerThread()
  diz__208.field_ListMergerThread_src1 := src1
  diz__208.field_ListMergerThread_src2 := src2
  diz__208.field_ListMergerThread_dst := dst
  fold acc(method_ListMergerThread_pre_fork__Fraction(diz__208, globals, new_frac(write)), write)
  label method_end_constructor_ListMergerThread_ListMergerThread__ListListQueue__ListListQueue__ListListQueue_18
  sys__result := diz__208
  // assert
  assert sys__result != null && type_of(sys__result) == class_ListMergerThread() && acc(method_ListMergerThread_pre_fork__Fraction(sys__result, globals, new_frac(write)), write) && acc(sys__result.field_ListMergerThread_src1, 1 / 2) && acc(sys__result.field_ListMergerThread_src2, 1 / 2) && acc(sys__result.field_ListMergerThread_dst, 1 / 2) && sys__result.field_ListMergerThread_src1 == src1 && sys__result.field_ListMergerThread_src2 == src2 && sys__result.field_ListMergerThread_dst == dst
  inhale false
}

method __contract_unsatisfiable__method_ListMergerThread_run(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
{
  inhale true && acc(method_ListMergerThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  // assert
  assert false
  inhale false
  label method_end___contract_unsatisfiable__method_ListMergerThread_run_19
}

method method_ListMergerThread_run(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListMergerThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_ListMergerThread_post_join__Fraction(diz, globals, new_frac(write)), write)
{
  var oldCur1__225: Ref
  var bs2__224: Multiset[Ref]
  var bs1__223: Multiset[Ref]
  var bd__222: Multiset[Ref]
  var oldCur2__221: Ref
  var oldCur1__220: Ref
  var bs2__219: Multiset[Ref]
  var bs1__218: Multiset[Ref]
  var bd__217: Multiset[Ref]
  var cur1__209: Ref
  var cur2__210: Ref
  var __flatten_108__211: Bool
  var __flatten_110__212: Bool
  var __flatten_116__213: Bool
  var __flatten_119__214: Bool
  var __flatten_125__215: Bool
  var __flatten_128__216: Bool
  unfold acc(method_ListMergerThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  cur1__209 := null
  cur2__210 := null
  __flatten_108__211 := method_ListListQueue_hasNext(diz.field_ListMergerThread_src1, current_thread_id, globals)
  if (__flatten_108__211) {
    cur1__209 := method_ListListQueue_getNext(diz.field_ListMergerThread_src1, current_thread_id, globals)
  }
  __flatten_110__212 := method_ListListQueue_hasNext(diz.field_ListMergerThread_src2, current_thread_id, globals)
  if (__flatten_110__212) {
    cur2__210 := method_ListListQueue_getNext(diz.field_ListMergerThread_src2, current_thread_id, globals)
  }
  while (cur1__209 != null && cur2__210 != null)
    invariant acc(diz.field_ListMergerThread_src1, 1 / 2)
    invariant acc(diz.field_ListMergerThread_src2, 1 / 2)
    invariant acc(diz.field_ListMergerThread_dst, 1 / 2)
    invariant diz.field_ListMergerThread_src1 != null
    invariant diz.field_ListMergerThread_src2 != null
    invariant diz.field_ListMergerThread_dst != null
    invariant acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write)
    invariant acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write)
    invariant acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write)
    invariant (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in !diz.field_ListMergerThread_dst.field_ListListQueue_finalised)
    invariant cur1__209 != null ==> acc(cur1__209.field_Node_key, write) && acc(cur1__209.field_Node_left, write) && acc(cur1__209.field_Node_right, write) && acc(cur1__209.field_Node_color, write) && acc(cur1__209.field_Node_dblack, write) && acc(cur1__209.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= cur1__209.field_Node_key
    invariant cur2__210 != null ==> acc(cur2__210.field_Node_key, write) && acc(cur2__210.field_Node_left, write) && acc(cur2__210.field_Node_right, write) && acc(cur2__210.field_Node_color, write) && acc(cur2__210.field_Node_dblack, write) && acc(cur2__210.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= cur2__210.field_Node_key
    invariant cur1__209 != null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) in 0 < diz.field_ListMergerThread_src1.field_ListListQueue_readHead && cur1__209.field_Node_key == diz.field_ListMergerThread_src1.field_ListListQueue_keysC[diz.field_ListMergerThread_src1.field_ListListQueue_readHead - 1])
    invariant cur2__210 != null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in 0 < diz.field_ListMergerThread_src2.field_ListListQueue_readHead && cur2__210.field_Node_key == diz.field_ListMergerThread_src2.field_ListListQueue_keysC[diz.field_ListMergerThread_src2.field_ListListQueue_readHead - 1])
    invariant cur1__209 == null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) in diz.field_ListMergerThread_src1.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src1.field_ListListQueue_curNLIterator == null)
    invariant cur2__210 == null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in diz.field_ListMergerThread_src2.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src2.field_ListListQueue_curNLIterator == null)
    invariant (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in (cur1__209 != null ==> diz.field_ListMergerThread_dst.field_ListListQueue_maxKey <= cur1__209.field_Node_key) && (cur2__210 != null ==> diz.field_ListMergerThread_dst.field_ListListQueue_maxKey <= cur2__210.field_Node_key))
    invariant ((method_ListListQueue_toBagP(diz.field_ListMergerThread_dst, globals) union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209))) union (cur2__210 == null ? Multiset[Ref]() : Multiset(cur2__210))) == (method_ListListQueue_toBagC(diz.field_ListMergerThread_src1, globals) union method_ListListQueue_toBagC(diz.field_ListMergerThread_src2, globals)) 
  {
    bd__217 := method_ListListQueue_toBagP(diz.field_ListMergerThread_dst, globals)
    bs1__218 := method_ListListQueue_toBagC(diz.field_ListMergerThread_src1, globals)
    bs2__219 := method_ListListQueue_toBagC(diz.field_ListMergerThread_src2, globals)
    if (cur1__209.field_Node_key <= cur2__210.field_Node_key) {
      oldCur1__220 := cur1__209
      method_ListListQueue_append__Node(diz.field_ListMergerThread_dst, current_thread_id, globals, cur1__209)
      __flatten_116__213 := method_ListListQueue_hasNext(diz.field_ListMergerThread_src1, current_thread_id, globals)
      if (__flatten_116__213) {
        cur1__209 := method_ListListQueue_getNext(diz.field_ListMergerThread_src1, current_thread_id, globals)
      } else {
        cur1__209 := null
      }
      // assert
      assert (((bd__217 union Multiset(oldCur1__220)) union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209))) union Multiset(cur2__210)) == (((bd__217 union Multiset(oldCur1__220)) union Multiset(cur2__210)) union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209)))
      // assert
      assert ((bs1__218 union bs2__219) union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209))) == ((bs1__218 union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209))) union bs2__219)
    } else {
      oldCur2__221 := cur2__210
      method_ListListQueue_append__Node(diz.field_ListMergerThread_dst, current_thread_id, globals, cur2__210)
      __flatten_119__214 := method_ListListQueue_hasNext(diz.field_ListMergerThread_src2, current_thread_id, globals)
      if (__flatten_119__214) {
        cur2__210 := method_ListListQueue_getNext(diz.field_ListMergerThread_src2, current_thread_id, globals)
      } else {
        cur2__210 := null
      }
      // assert
      assert (((bd__217 union Multiset(oldCur2__221)) union Multiset(cur1__209)) union (cur2__210 == null ? Multiset[Ref]() : Multiset(cur2__210))) == ((bs1__218 union bs2__219) union (cur2__210 == null ? Multiset[Ref]() : Multiset(cur2__210)))
    }
  }
  while (cur1__209 != null)
    invariant acc(diz.field_ListMergerThread_src1, 1 / 2)
    invariant acc(diz.field_ListMergerThread_src2, 1 / 2)
    invariant acc(diz.field_ListMergerThread_dst, 1 / 2)
    invariant diz.field_ListMergerThread_src1 != null
    invariant diz.field_ListMergerThread_src2 != null
    invariant diz.field_ListMergerThread_dst != null
    invariant acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write)
    invariant acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write)
    invariant acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write)
    invariant (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in !diz.field_ListMergerThread_dst.field_ListListQueue_finalised)
    invariant cur1__209 != null ==> acc(cur1__209.field_Node_key, write) && acc(cur1__209.field_Node_left, write) && acc(cur1__209.field_Node_right, write) && acc(cur1__209.field_Node_color, write) && acc(cur1__209.field_Node_dblack, write) && acc(cur1__209.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= cur1__209.field_Node_key
    invariant cur2__210 != null ==> acc(cur2__210.field_Node_key, 1 / 2) && acc(cur2__210.field_Node_left, 1 / 2) && acc(cur2__210.field_Node_right, 1 / 2) && acc(cur2__210.field_Node_color, 1 / 2) && acc(cur2__210.field_Node_dblack, 1 / 2) && acc(cur2__210.field_Node_dblackNull, 1 / 2) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= cur2__210.field_Node_key
    invariant cur1__209 != null ==> cur2__210 == null
    invariant cur1__209 != null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) in 0 < diz.field_ListMergerThread_src1.field_ListListQueue_readHead && cur1__209.field_Node_key == diz.field_ListMergerThread_src1.field_ListListQueue_keysC[diz.field_ListMergerThread_src1.field_ListListQueue_readHead - 1])
    invariant cur2__210 != null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in 0 < diz.field_ListMergerThread_src2.field_ListListQueue_readHead && cur2__210.field_Node_key == diz.field_ListMergerThread_src2.field_ListListQueue_keysC[diz.field_ListMergerThread_src2.field_ListListQueue_readHead - 1])
    invariant cur1__209 == null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) in diz.field_ListMergerThread_src1.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src1.field_ListListQueue_curNLIterator == null)
    invariant cur2__210 == null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in diz.field_ListMergerThread_src2.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src2.field_ListListQueue_curNLIterator == null)
    invariant (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in cur1__209 != null ==> diz.field_ListMergerThread_dst.field_ListListQueue_maxKey <= cur1__209.field_Node_key)
    invariant (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in cur2__210 != null ==> diz.field_ListMergerThread_dst.field_ListListQueue_maxKey <= cur2__210.field_Node_key)
    invariant ((method_ListListQueue_toBagP(diz.field_ListMergerThread_dst, globals) union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209))) union (cur2__210 == null ? Multiset[Ref]() : Multiset(cur2__210))) == (method_ListListQueue_toBagC(diz.field_ListMergerThread_src1, globals) union method_ListListQueue_toBagC(diz.field_ListMergerThread_src2, globals)) 
  {
    bd__222 := method_ListListQueue_toBagP(diz.field_ListMergerThread_dst, globals)
    bs1__223 := method_ListListQueue_toBagC(diz.field_ListMergerThread_src1, globals)
    bs2__224 := method_ListListQueue_toBagC(diz.field_ListMergerThread_src2, globals)
    oldCur1__225 := cur1__209
    // assert
    assert (bd__222 union Multiset(oldCur1__225)) == (bs1__223 union bs2__224)
    method_ListListQueue_append__Node(diz.field_ListMergerThread_dst, current_thread_id, globals, cur1__209)
    __flatten_125__215 := method_ListListQueue_hasNext(diz.field_ListMergerThread_src1, current_thread_id, globals)
    if (__flatten_125__215) {
      cur1__209 := method_ListListQueue_getNext(diz.field_ListMergerThread_src1, current_thread_id, globals)
    } else {
      cur1__209 := null
    }
    // assert
    assert ((bd__222 union Multiset(oldCur1__225)) union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209))) == ((bs1__223 union (cur1__209 == null ? Multiset[Ref]() : Multiset(cur1__209))) union bs2__224)
  }
  while (cur2__210 != null)
    invariant acc(diz.field_ListMergerThread_src1, 1 / 2)
    invariant acc(diz.field_ListMergerThread_src2, 1 / 2)
    invariant acc(diz.field_ListMergerThread_dst, 1 / 2)
    invariant diz.field_ListMergerThread_src1 != null
    invariant diz.field_ListMergerThread_src2 != null
    invariant diz.field_ListMergerThread_dst != null
    invariant acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write)
    invariant acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write)
    invariant acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write)
    invariant (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src1, globals), write) in diz.field_ListMergerThread_src1.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src1.field_ListListQueue_curNLIterator == null)
    invariant (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in !diz.field_ListMergerThread_dst.field_ListListQueue_finalised)
    invariant cur2__210 != null ==> acc(cur2__210.field_Node_key, write) && acc(cur2__210.field_Node_left, write) && acc(cur2__210.field_Node_right, write) && acc(cur2__210.field_Node_color, write) && acc(cur2__210.field_Node_dblack, write) && acc(cur2__210.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= cur2__210.field_Node_key
    invariant cur2__210 != null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in 0 < diz.field_ListMergerThread_src2.field_ListListQueue_readHead && cur2__210.field_Node_key == diz.field_ListMergerThread_src2.field_ListListQueue_keysC[diz.field_ListMergerThread_src2.field_ListListQueue_readHead - 1])
    invariant cur2__210 == null ==> (unfolding acc(method_ListListQueue_consumer(diz.field_ListMergerThread_src2, globals), write) in diz.field_ListMergerThread_src2.field_ListListQueue_isLastBatch && diz.field_ListMergerThread_src2.field_ListListQueue_curNLIterator == null)
    invariant (unfolding acc(method_ListListQueue_producer(diz.field_ListMergerThread_dst, globals), write) in cur2__210 != null ==> diz.field_ListMergerThread_dst.field_ListListQueue_maxKey <= cur2__210.field_Node_key)
    invariant (method_ListListQueue_toBagP(diz.field_ListMergerThread_dst, globals) union (cur2__210 == null ? Multiset[Ref]() : Multiset(cur2__210))) == (method_ListListQueue_toBagC(diz.field_ListMergerThread_src1, globals) union method_ListListQueue_toBagC(diz.field_ListMergerThread_src2, globals)) 
  {
    method_ListListQueue_append__Node(diz.field_ListMergerThread_dst, current_thread_id, globals, cur2__210)
    __flatten_128__216 := method_ListListQueue_hasNext(diz.field_ListMergerThread_src2, current_thread_id, globals)
    if (__flatten_128__216) {
      cur2__210 := method_ListListQueue_getNext(diz.field_ListMergerThread_src2, current_thread_id, globals)
    } else {
      cur2__210 := null
    }
  }
  method_ListListQueue_finalise(diz.field_ListMergerThread_dst, current_thread_id, globals)
  fold acc(method_ListMergerThread_post_join__Fraction(diz, globals, new_frac(write)), write)
  label method_end_method_ListMergerThread_run_20
}

method method_ListMergerThread_start(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListMergerThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_ListMergerThread_join_token__Fraction(diz, globals, new_frac(write)), write)
{
  inhale false
}

method method_ListMergerThread_join(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListMergerThread_join_token__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_ListMergerThread_post_join__Fraction(diz, globals, new_frac(write)), write)
{
  inhale false
}

method method_VerCorsThread_run(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_VerCorsThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_VerCorsThread_post_join__Fraction(diz, globals, new_frac(write)), write)
{
  inhale false
}

method method_VerCorsThread_start(diz: Ref, current_thread_id: Int, globals: Ref, p: frac)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_VerCorsThread_pre_fork__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_VerCorsThread_join_token__Fraction(diz, globals, new_frac(write)), write)
{
  inhale false
}

method method_VerCorsThread_join(diz: Ref, current_thread_id: Int, globals: Ref, p: frac)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_VerCorsThread_join_token__Fraction(diz, globals, new_frac(write)), write)
  ensures acc(method_VerCorsThread_post_join__Fraction(diz, globals, new_frac(write)), write)
{
  inhale false
}

method constructor_VerCorsThread_VerCorsThread(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_VerCorsThread()
{
  var diz__226: Ref
  diz__226 := new()
  inhale type_of(diz__226) == class_VerCorsThread()
  label method_end_constructor_VerCorsThread_VerCorsThread_21
  sys__result := diz__226
  // assert
  assert sys__result != null && type_of(sys__result) == class_VerCorsThread()
  inhale false
}

method constructor_ListListQueue_ListListQueue(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_ListListQueue()
  ensures acc(method_ListListQueue_producer(sys__result, globals), write)
  ensures acc(method_ListListQueue_consumer(sys__result, globals), write)
  ensures acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  ensures (unfolding acc(method_ListListQueue_producer(sys__result, globals), write) in sys__result.field_ListListQueue_filling == null && |sys__result.field_ListListQueue_allP| == 0 && !sys__result.field_ListListQueue_finalised && sys__result.field_ListListQueue_maxKey == globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE)
  ensures (unfolding acc(method_ListListQueue_consumer(sys__result, globals), write) in sys__result.field_ListListQueue_curNLIterator == null && |sys__result.field_ListListQueue_allC| == 0 && !sys__result.field_ListListQueue_finalisedC && sys__result.field_ListListQueue_readHead == 0 && !sys__result.field_ListListQueue_isLastBatch)
  ensures method_ListListQueue_toBagC(sys__result, globals) == Multiset[Ref]()
  ensures method_ListListQueue_toBagP(sys__result, globals) == Multiset[Ref]()
{
  inhale false
}

method constructor_ListListQueue_ListListQueue__NodeListIterator(current_thread_id: Int, globals: Ref, it: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires it != null
  requires acc(it.field_NodeListIterator_current, write)
  requires acc(method_NodeList_list_perm__NodeList(globals, it.field_NodeListIterator_current), write)
  requires method_NodeListIterator_sorted__NodeListIterator(globals, it)
  requires it.field_NodeListIterator_current != null
  ensures sys__result != null
  ensures type_of(sys__result) == class_ListListQueue()
  ensures acc(method_ListListQueue_consumer(sys__result, globals), write)
  ensures acc(method_ListListQueue_producer(sys__result, globals), write)
  ensures (unfolding acc(method_ListListQueue_producer(sys__result, globals), write) in sys__result.field_ListListQueue_finalised && sys__result.field_ListListQueue_allP == old(method_NodeListIterator_toSeq__NodeListIterator(globals, it)) && sys__result.field_ListListQueue_keysP == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, it)))
  ensures (unfolding acc(method_ListListQueue_consumer(sys__result, globals), write) in sys__result.field_ListListQueue_readHead == 0 && sys__result.field_ListListQueue_curNLIterator == it && sys__result.field_ListListQueue_isLastBatch)
  ensures method_ListListQueue_toBagC(sys__result, globals) == Multiset[Ref]()
{
  inhale false
}

method method_ListListQueue_append__Node(diz: Ref, current_thread_id: Int, globals: Ref, node: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_producer(diz, globals), write)
  requires (unfolding acc(method_ListListQueue_producer(diz, globals), write) in !diz.field_ListListQueue_finalised)
  requires node != null
  requires acc(node.field_Node_key, write)
  requires acc(node.field_Node_left, write)
  requires acc(node.field_Node_right, write)
  requires acc(node.field_Node_color, write)
  requires acc(node.field_Node_dblack, write)
  requires acc(node.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= node.field_Node_key
  requires (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_maxKey <= node.field_Node_key)
  ensures acc(method_ListListQueue_producer(diz, globals), write)
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in !diz.field_ListListQueue_finalised)
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_maxKey == old(node.field_Node_key))
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_allP ++ method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling) == old((unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_allP ++ method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling))) ++ Seq(node))
  ensures method_ListListQueue_toBagP(diz, globals) == (old(method_ListListQueue_toBagP(diz, globals)) union Multiset(node))
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_keysP ++ method_NodeList_toSeqKeys__NodeList(globals, diz.field_ListListQueue_filling) == old((unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_keysP ++ method_NodeList_toSeqKeys__NodeList(globals, diz.field_ListListQueue_filling) ++ Seq(node.field_Node_key))))
{
  inhale false
}

method method_ListListQueue_submitFilling(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_ListListQueue_finalised, 1 / 2)
  requires acc(diz.field_ListListQueue_filling, write)
  requires acc(diz.field_ListListQueue_allP, 1 / 2)
  requires acc(diz.field_ListListQueue_keysP, 1 / 2)
  requires acc(diz.field_ListListQueue_maxKey, 1 / 2)
  requires acc(diz.field_ListListQueue_maxKeyBatches, 1 / 2)
  requires acc(method_NodeList_list_perm__NodeList(globals, diz.field_ListListQueue_filling), write)
  requires diz.field_ListListQueue_maxKeyBatches <= diz.field_ListListQueue_maxKey
  requires !diz.field_ListListQueue_finalised
  requires (forall i: Int :: { diz.field_ListListQueue_keysP[i] } 0 <= i && i < |diz.field_ListListQueue_keysP| ==> diz.field_ListListQueue_keysP[i] <= diz.field_ListListQueue_maxKeyBatches)
  requires diz.field_ListListQueue_filling != null
  requires method_Util_sorted__Sequence$Integer$(diz.field_ListListQueue_keysP)
  requires method_NodeList_sorted__NodeList(globals, diz.field_ListListQueue_filling)
  requires (let newKeys == (method_NodeList_toSeqKeys__NodeList(globals, diz.field_ListListQueue_filling)) in (forall i: Int :: { newKeys[i] } 0 <= i && i < |newKeys| ==> diz.field_ListListQueue_maxKeyBatches <= newKeys[i]) && (forall i: Int :: { newKeys[i] } 0 <= i && i < |newKeys| ==> newKeys[i] <= diz.field_ListListQueue_maxKey))
  ensures acc(diz.field_ListListQueue_finalised, 1 / 2)
  ensures acc(diz.field_ListListQueue_filling, write)
  ensures acc(diz.field_ListListQueue_allP, 1 / 2)
  ensures acc(diz.field_ListListQueue_keysP, 1 / 2)
  ensures acc(diz.field_ListListQueue_maxKey, 1 / 2)
  ensures acc(diz.field_ListListQueue_maxKeyBatches, 1 / 2)
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz.field_ListListQueue_filling), write)
  ensures diz.field_ListListQueue_maxKeyBatches <= diz.field_ListListQueue_maxKey
  ensures !diz.field_ListListQueue_finalised
  ensures (forall i: Int :: { diz.field_ListListQueue_keysP[i] } 0 <= i && i < |diz.field_ListListQueue_keysP| ==> diz.field_ListListQueue_keysP[i] <= diz.field_ListListQueue_maxKeyBatches)
  ensures diz.field_ListListQueue_filling == null
  ensures diz.field_ListListQueue_allP == old(diz.field_ListListQueue_allP) ++ old(method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling))
  ensures diz.field_ListListQueue_keysP == old(diz.field_ListListQueue_keysP) ++ old(method_NodeList_toSeqKeys__NodeList(globals, diz.field_ListListQueue_filling))
  ensures method_Util_toBag__Sequence$Node$(diz.field_ListListQueue_allP ++ method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling)) == old(method_Util_toBag__Sequence$Node$(diz.field_ListListQueue_allP ++ method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling)))
  ensures method_Util_sorted__Sequence$Integer$(diz.field_ListListQueue_keysP)
{
  inhale false
}

method method_ListListQueue_finalise(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_producer(diz, globals), write)
  requires (unfolding acc(method_ListListQueue_producer(diz, globals), write) in !diz.field_ListListQueue_finalised)
  ensures acc(method_ListListQueue_producer(diz, globals), write)
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_finalised)
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_allP == old((unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_allP ++ method_NodeList_toSeq__NodeList(globals, diz.field_ListListQueue_filling))))
  ensures (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_keysP == old((unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_keysP ++ method_NodeList_toSeqKeys__NodeList(globals, diz.field_ListListQueue_filling))))
  ensures method_ListListQueue_toBagP(diz, globals) == old(method_ListListQueue_toBagP(diz, globals))
{
  inhale false
}

method method_ListListQueue_hasNext(diz: Ref, current_thread_id: Int, globals: Ref) returns (sys__result: Bool)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_consumer(diz, globals), write)
  ensures acc(method_ListListQueue_consumer(diz, globals), write)
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead)))
  ensures method_Util_isPrefix__Sequence$Node$__Sequence$Node$(old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC)), (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC))
  ensures method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC)), (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC))
  ensures method_ListListQueue_toBagC(diz, globals) == old(method_ListListQueue_toBagC(diz, globals))
  ensures sys__result ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead < |diz.field_ListListQueue_allC| && diz.field_ListListQueue_readHead < |diz.field_ListListQueue_keysC|)
  ensures !sys__result ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_isLastBatch && diz.field_ListListQueue_curNLIterator == null)
{
  inhale false
}

method method_ListListQueue_getNext(diz: Ref, current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_consumer(diz, globals), write)
  ensures acc(method_ListListQueue_consumer(diz, globals), write)
  ensures old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_finalisedC)) ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_finalisedC && old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in |diz.field_ListListQueue_allC|)) == |diz.field_ListListQueue_allC|)
  ensures method_Util_isPrefix__Sequence$Node$__Sequence$Node$(old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC)), (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC))
  ensures method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC)), (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC))
  ensures sys__result != null ==> acc(sys__result.field_Node_key, write) && acc(sys__result.field_Node_left, write) && acc(sys__result.field_Node_right, write) && acc(sys__result.field_Node_color, write) && acc(sys__result.field_Node_dblack, write) && acc(sys__result.field_Node_dblackNull, write) && acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard) && globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key
  ensures sys__result != null ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead)) + 1)
  ensures sys__result != null ==> sys__result == (let idx == (old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead))) in (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC[idx]))
  ensures sys__result != null ==> sys__result.field_Node_key == (let idx == (old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead))) in (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC[idx]))
  ensures sys__result != null ==> method_ListListQueue_toBagC(diz, globals) == (old(method_ListListQueue_toBagC(diz, globals)) union Multiset(sys__result))
  ensures sys__result == null ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_isLastBatch && diz.field_ListListQueue_curNLIterator == null) && (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead)) && |diz.field_ListListQueue_allC| == diz.field_ListListQueue_readHead)
  ensures sys__result == null ==> method_ListListQueue_toBagC(diz, globals) == old(method_ListListQueue_toBagC(diz, globals))
{
  inhale false
}

method method_ListListQueue_getBatch(diz: Ref, current_thread_id: Int, globals: Ref) returns (sys__result: Bool)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_consumer(diz, globals), write)
  requires (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_curNLIterator == null && diz.field_ListListQueue_readHead == diz.field_ListListQueue_batchHead && !diz.field_ListListQueue_isLastBatch)
  ensures acc(method_ListListQueue_consumer(diz, globals), write)
  ensures old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_finalisedC)) ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_finalisedC && old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in |diz.field_ListListQueue_allC|)) == |diz.field_ListListQueue_allC|)
  ensures method_Util_isPrefix__Sequence$Node$__Sequence$Node$(old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC)), (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC))
  ensures method_Util_isPrefix__Sequence$Integer$__Sequence$Integer$(old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC)), (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC))
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead)))
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_batchHead == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_batchHead)) + |method_NodeListIterator_toSeq__NodeListIterator(globals, diz.field_ListListQueue_curNLIterator)|)
  ensures method_ListListQueue_toBagC(diz, globals) == old(method_ListListQueue_toBagC(diz, globals))
  ensures sys__result ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_curNLIterator != null && diz.field_ListListQueue_readHead < |diz.field_ListListQueue_allC|)
  ensures !sys__result ==> (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_isLastBatch && diz.field_ListListQueue_curNLIterator == null)
{
  inhale false
}

method method_ListListQueue_toTree(diz: Ref, current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_consumer(diz, globals), write)
  requires (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead == 0)
  ensures acc(method_ListListQueue_consumer(diz, globals), write)
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_isLastBatch && diz.field_ListListQueue_curNLIterator == null)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_toSeq__Node(globals, sys__result) == (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC)
  ensures method_Tree_validTree__Node(globals, sys__result)
{
  inhale false
}

method method_ListListQueue_makeTree__Integer__Integer(diz: Ref, current_thread_id: Int, globals: Ref, height: Int, numNodes: Int) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_consumer(diz, globals), write)
  requires (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_finalisedC)
  requires 0 <= height && 0 < numNodes
  requires method_ListListQueue_pow2__Integer(height) - 2 < numNodes && numNodes < method_ListListQueue_pow2__Integer(height + 1)
  requires (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in numNodes <= |diz.field_ListListQueue_allC| - diz.field_ListListQueue_readHead)
  ensures acc(method_ListListQueue_consumer(diz, globals), write)
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_finalisedC)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures sys__result != null
  ensures |method_Tree_toSeq__Node(globals, sys__result)| == numNodes
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_allC)))
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_keysC)))
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead == old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead)) + numNodes)
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in method_Util_isInfix__Sequence$Node$__Sequence$Node$__Integer(method_Tree_toSeq__Node(globals, sys__result), diz.field_ListListQueue_allC, old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead))))
  ensures (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in method_Util_isInfix__Sequence$Integer$__Sequence$Integer$__Integer(method_Tree_toSeqKeys__Node(globals, sys__result), diz.field_ListListQueue_keysC, old((unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_readHead))))
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_color == (height % 2 == 0))
  ensures method_Tree_blackHeight__Node(globals, sys__result) == (height + 1) / 2 + 1
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures method_Tree_sortedKeySeq__Node(globals, sys__result)
{
  inhale false
}

method method_ListListQueue_joinPC(diz: Ref, current_thread_id: Int, globals: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListListQueue_producer(diz, globals), write)
  requires acc(method_ListListQueue_consumer(diz, globals), write)
  requires (unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_finalised)
  requires (unfolding acc(method_ListListQueue_consumer(diz, globals), write) in diz.field_ListListQueue_isLastBatch && diz.field_ListListQueue_curNLIterator == null) == true
  ensures acc(diz.field_ListListQueue_allP, 1 / 2)
  ensures diz.field_ListListQueue_allP == old((unfolding acc(method_ListListQueue_producer(diz, globals), write) in diz.field_ListListQueue_allP))
  ensures method_Util_toBag__Sequence$Node$(diz.field_ListListQueue_allP) == old(method_ListListQueue_toBagP(diz, globals))
  ensures method_Util_toBag__Sequence$Node$(diz.field_ListListQueue_allP) == old(method_ListListQueue_toBagC(diz, globals))
{
  inhale false
}

method constructor_Node_Node__Integer(current_thread_id: Int, globals: Ref, item: Int) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= item
  ensures sys__result != null
  ensures type_of(sys__result) == class_Node()
  ensures acc(sys__result.field_Node_key, write)
  ensures acc(sys__result.field_Node_left, write)
  ensures acc(sys__result.field_Node_right, write)
  ensures acc(sys__result.field_Node_color, write)
  ensures acc(sys__result.field_Node_dblack, write)
  ensures acc(sys__result.field_Node_dblackNull, write)
  ensures acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  ensures globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key
  ensures sys__result.field_Node_key == item
  ensures sys__result.field_Node_left == null
  ensures sys__result.field_Node_right == null
  ensures sys__result.field_Node_color == true
  ensures sys__result.field_Node_dblack == false
  ensures sys__result.field_Node_dblackNull == false
{
  inhale false
}

method method_Tree_subbagCompareLemma__Bag$Integer$__Bag$Integer$__Bag$Integer$__Integer(current_thread_id: Int, globals: Ref, bigBag: Multiset[Int], subBag: Multiset[Int], diff: Multiset[Int], key: Int)
  requires 0 <= current_thread_id
  requires bigBag == (subBag union diff)
  ensures method_Tree_smaller__Bag$Integer$__Integer(bigBag, key) ==> method_Tree_smaller__Bag$Integer$__Integer(subBag, key)
  ensures method_Tree_larger__Bag$Integer$__Integer(bigBag, key) ==> method_Tree_larger__Bag$Integer$__Integer(subBag, key)
{
  inhale false
}

method method_Tree_makeWand__Node__Node__Node__Node__Boolean__Integer__Bag$Integer$__Boolean__Integer__Bag$Integer$__Boolean__Integer__Bag$Integer$__Boolean(current_thread_id: Int, globals: Ref, res: Ref, current: Ref, containingSubtree: Ref, otherSubtree: Ref, oldColor: Bool, oldHeight: Int, oldBag: Multiset[Int], subColor: Bool, subHeight: Int, subBag: Multiset[Int], resColor: Bool, resHeight: Int, resBag: Multiset[Int], goLeft: Bool)
  requires 0 <= current_thread_id
  requires current != null
  requires acc(current.field_Node_key, write)
  requires acc(current.field_Node_left, write)
  requires acc(current.field_Node_right, write)
  requires acc(current.field_Node_color, write)
  requires acc(current.field_Node_dblack, write)
  requires acc(current.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= current.field_Node_key
  requires acc(method_Tree_tree_perm__Node(globals, otherSubtree), write)
  requires current.field_Node_dblackNull ==> current.field_Node_left == null && current.field_Node_right == null && !current.field_Node_color && current.field_Node_dblack
  requires current.field_Node_dblack ==> !current.field_Node_color
  requires (goLeft ? containingSubtree == current.field_Node_left && otherSubtree == current.field_Node_right : containingSubtree == current.field_Node_right && otherSubtree == current.field_Node_left)
  requires acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, res, globals, res, globals, res, resColor, resHeight, resBag, globals, containingSubtree, globals, containingSubtree, globals, containingSubtree, subColor, subHeight, subBag), write)
  requires subHeight == method_Tree_blackHeight__Node(globals, otherSubtree) && method_Tree_blackBalanced__Node(globals, otherSubtree)
  requires oldHeight == method_Tree_getBlacks__Node(globals, current) + subHeight
  requires method_Tree_noDBlack__Node(globals, otherSubtree)
  requires !current.field_Node_dblack
  requires current.field_Node_color == oldColor
  requires (!current.field_Node_color || !subColor && !method_Tree_getColor__Node(globals, otherSubtree)) && method_Tree_noDoubleRed__Node(globals, otherSubtree)
  requires oldBag == ((subBag union method_Tree_toBag__Node(globals, otherSubtree)) union Multiset(current.field_Node_key))
  requires (goLeft ? method_Tree_smaller__Bag$Integer$__Integer(subBag, current.field_Node_key) && method_Tree_larger__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, otherSubtree), current.field_Node_key) : method_Tree_larger__Bag$Integer$__Integer(subBag, current.field_Node_key) && method_Tree_smaller__Bag$Integer$__Integer(method_Tree_toBag__Node(globals, otherSubtree), current.field_Node_key))
  requires method_Tree_sorted__Node(globals, otherSubtree)
  ensures acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, res, globals, res, globals, res, resColor, resHeight, resBag, globals, current, globals, current, globals, current, oldColor, oldHeight, oldBag), write)
{
  inhale false
}

method method_Tree_isBlack__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Bool)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures sys__result == (node == null || (unfolding acc(method_Tree_tree_perm__Node(globals, node), 1 / 2) in !node.field_Node_color))
{
  inhale false
}

method method_Tree_isRed__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Bool)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures acc(method_Tree_tree_perm__Node(globals, node), 1 / 2)
  ensures sys__result == (node != null && (unfolding acc(method_Tree_tree_perm__Node(globals, node), 1 / 2) in node.field_Node_color))
{
  inhale false
}

method method_Tree_makeNodeSingleBlack__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires node != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getBlacks__Node(globals, sys__result) == 1)
  ensures old(method_Tree_sorted__Node(globals, node)) ==> method_Tree_sorted__Node(globals, sys__result)
  ensures old(method_Tree_blackBalanced__Node(globals, node)) ==> method_Tree_blackBalanced__Node(globals, sys__result)
  ensures old(method_Tree_noDoubleRed__Node(globals, node) || (method_Tree_dbRedAtLeft__Node(globals, node) || method_Tree_dbRedAtRight__Node(globals, node))) ==> method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures old(method_Tree_toBag__Node(globals, node)) == method_Tree_toBag__Node(globals, sys__result)
  ensures (old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getBlacks__Node(globals, node))) == 2 ? old(method_Tree_blackHeight__Node(globals, node)) - 1 == method_Tree_blackHeight__Node(globals, sys__result) : (old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getBlacks__Node(globals, node))) == 1 ? old(method_Tree_blackHeight__Node(globals, node)) == method_Tree_blackHeight__Node(globals, sys__result) : old(method_Tree_blackHeight__Node(globals, node)) + 1 == method_Tree_blackHeight__Node(globals, sys__result)))
  ensures old(method_Tree_dblackAtTop__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
  ensures old(method_Tree_noDBlack__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_insert__Integer(diz: Ref, current_thread_id: Int, globals: Ref, key: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_Tree_root, write)
  requires acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  requires method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  requires method_Tree_sorted__Node(globals, diz.field_Tree_root)
  requires method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  requires method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= key
  ensures acc(diz.field_Tree_root, write)
  ensures acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  ensures method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  ensures method_Tree_sorted__Node(globals, diz.field_Tree_root)
  ensures method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  ensures method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
{
  inhale false
}

method method_Tree_insertRec__Node__Integer(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref, key: Int) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= key
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDBlack__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  ensures sys__result != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result) || (method_Tree_dbRedAtLeft__Node(globals, sys__result) || method_Tree_dbRedAtRight__Node(globals, sys__result))
  ensures old(method_Tree_blackHeight__Node(globals, current)) == method_Tree_blackHeight__Node(globals, sys__result)
  ensures (old(method_Tree_toBag__Node(globals, current)) union Multiset(key)) == method_Tree_toBag__Node(globals, sys__result)
  ensures old(method_Tree_getColor__Node(globals, current)) == method_Tree_getColor__Node(globals, sys__result) || method_Tree_getColor__Node(globals, sys__result) && !(unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_left)) && !(unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_right))
{
  inhale false
}

method method_Tree_deleteKey__Integer(diz: Ref, current_thread_id: Int, globals: Ref, key: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_Tree_root, write)
  requires acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  requires method_Tree_sorted__Node(globals, diz.field_Tree_root)
  requires method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  requires method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  requires method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
  ensures acc(diz.field_Tree_root, write)
  ensures acc(method_Tree_tree_perm__Node(globals, diz.field_Tree_root), write)
  ensures method_Tree_sorted__Node(globals, diz.field_Tree_root)
  ensures method_Tree_noDoubleRed__Node(globals, diz.field_Tree_root)
  ensures method_Tree_noDBlack__Node(globals, diz.field_Tree_root)
  ensures method_Tree_blackBalanced__Node(globals, diz.field_Tree_root)
{
  inhale false
}

method method_Tree_fixDBlackLeft__Node(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires current != null
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_dblackAtLeft__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result) || method_Tree_dblackAtTop__Node(globals, sys__result)
  ensures old(method_Tree_toBag__Node(globals, current)) == method_Tree_toBag__Node(globals, sys__result)
  ensures !old(method_Tree_getColor__Node(globals, current)) ==> !method_Tree_getColor__Node(globals, sys__result)
  ensures old(method_Tree_blackHeight__Node(globals, current)) == method_Tree_blackHeight__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_fixDBlackRight__Node(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires current != null
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_dblackAtRight__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result) || method_Tree_dblackAtTop__Node(globals, sys__result)
  ensures old(method_Tree_toBag__Node(globals, current)) == method_Tree_toBag__Node(globals, sys__result)
  ensures !old(method_Tree_getColor__Node(globals, current)) ==> !method_Tree_getColor__Node(globals, sys__result)
  ensures old(method_Tree_blackHeight__Node(globals, current)) == method_Tree_blackHeight__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_deleteRec__Node__Integer(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref, key: Int) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires current != null
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_sorted__Node(globals, current)
  requires method_Tree_noDoubleRed__Node(globals, current)
  requires method_Tree_blackBalanced__Node(globals, current)
  requires method_Tree_noDBlack__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures method_Tree_noDoubleRed__Node(globals, sys__result)
  ensures method_Tree_blackBalanced__Node(globals, sys__result)
  ensures method_Tree_noDBlack__Node(globals, sys__result) || method_Tree_dblackAtTop__Node(globals, sys__result)
  ensures ((key in old(method_Tree_toBag__Node(globals, current))) == 0 ? old(method_Tree_toBag__Node(globals, current)) == method_Tree_toBag__Node(globals, sys__result) : old(method_Tree_toBag__Node(globals, current)) == (method_Tree_toBag__Node(globals, sys__result) union Multiset(key)))
  ensures !old(method_Tree_getColor__Node(globals, current)) ==> !method_Tree_getColor__Node(globals, sys__result)
  ensures method_Tree_blackHeight__Node(globals, sys__result) == old(method_Tree_blackHeight__Node(globals, current))
{
  inhale false
}

method method_Tree_getMin__Node(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref) returns (sys__result: Ref, resColor: Bool, resHeight: Int, resBag: Multiset[Int])
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_validSubtree__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_validSubtree__Node(globals, sys__result)
  ensures acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, sys__result, globals, sys__result, globals, sys__result, resColor, resHeight, resBag, globals, current, globals, current, globals, current, old(method_Tree_getColor__Node(globals, current)), old(method_Tree_blackHeight__Node(globals, current)), old(method_Tree_toBag__Node(globals, current))), write)
  ensures current == null ==> sys__result == null
  ensures current != null ==> sys__result != null && (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_left == null) && method_Tree_larger__Bag$Integer$__Integer(old(method_Tree_toBag__Node(globals, current)), (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_key)) && 0 < (((unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_key) in old(method_Tree_toBag__Node(globals, current))))
  ensures resColor == method_Tree_getColor__Node(globals, sys__result)
  ensures resHeight == method_Tree_blackHeight__Node(globals, sys__result)
  ensures resBag == method_Tree_toBag__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_search__Node__Integer(diz: Ref, current_thread_id: Int, globals: Ref, current: Ref, key: Int) returns (sys__result: Ref, resColor: Bool, resHeight: Int, resBag: Multiset[Int])
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, current), write)
  requires method_Tree_validSubtree__Node(globals, current)
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_validSubtree__Node(globals, sys__result)
  ensures current == null ==> sys__result == null
  ensures sys__result != null ==> (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_key == key)
  ensures acc(Wand_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$_for_method_Tree_tree_perm__Node_method_Tree_validSubtree__Node_method_Tree_subtreeFitsHole__Node__Boolean__Integer__Bag$Integer$(globals, sys__result, globals, sys__result, globals, sys__result, resColor, resHeight, resBag, globals, current, globals, current, globals, current, old(method_Tree_getColor__Node(globals, current)), old(method_Tree_blackHeight__Node(globals, current)), old(method_Tree_toBag__Node(globals, current))), write)
  ensures resColor == method_Tree_getColor__Node(globals, sys__result)
  ensures resHeight == method_Tree_blackHeight__Node(globals, sys__result)
  ensures resBag == method_Tree_toBag__Node(globals, sys__result)
{
  inhale false
}

method method_Tree_rotateLeft__Node(diz: Ref, current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires node != null
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires method_Tree_sorted__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in node.field_Node_right != null)
  requires !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_left)) || !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_right))
  requires !method_Tree_getColor__Node(globals, node) || (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in !(unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_right), write) in method_Tree_getColor__Node(globals, node.field_Node_right.field_Node_right)))
  requires method_Tree_noDoubleRed__Node(globals, node) || method_Tree_dbRedAtRight__Node(globals, node) || !method_Tree_getColor__Node(globals, node) && (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_noDoubleRed__Node(globals, node.field_Node_left) && method_Tree_dbRedAtRight__Node(globals, node.field_Node_right))
  requires method_Tree_noDBlack__Node(globals, node) || method_Tree_dblackAtLeft__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackBalanced__Node(globals, node.field_Node_left) && method_Tree_blackBalanced__Node(globals, node.field_Node_right))
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackHeight__Node(globals, node.field_Node_left) == (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_right), write) in method_Tree_blackHeight__Node(globals, node.field_Node_right.field_Node_left)))
  ensures sys__result != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_left != null)
  ensures old(method_Tree_toBag__Node(globals, node)) == method_Tree_toBag__Node(globals, sys__result)
  ensures old(method_Tree_getColor__Node(globals, node)) == method_Tree_getColor__Node(globals, sys__result)
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_right))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_left))
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_right), write) in method_Tree_getColor__Node(globals, node.field_Node_right.field_Node_right)))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_right))
  ensures old(method_Tree_blackHeight__Node(globals, node)) == method_Tree_blackHeight__Node(globals, sys__result)
  ensures (old(method_Tree_dbRedAtRight__Node(globals, node)) ? method_Tree_dbRedAtLeft__Node(globals, sys__result) : method_Tree_noDoubleRed__Node(globals, sys__result))
  ensures old(method_Tree_noDBlack__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
  ensures old(method_Tree_dblackAtLeft__Node(globals, node)) ==> method_Tree_dblackAtLeftLeft__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackBalanced__Node(globals, sys__result.field_Node_left) && method_Tree_blackBalanced__Node(globals, sys__result.field_Node_right))
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_right) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result.field_Node_left), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_left.field_Node_right)))
{
  inhale false
}

method method_Tree_rotateRight__Node(diz: Ref, current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires node != null
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires method_Tree_sorted__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in node.field_Node_left != null)
  requires !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_left)) || !(unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_right))
  requires !method_Tree_getColor__Node(globals, node) || (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in !(unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_left), write) in method_Tree_getColor__Node(globals, node.field_Node_left.field_Node_left)))
  requires method_Tree_noDoubleRed__Node(globals, node) || method_Tree_dbRedAtLeft__Node(globals, node) || !method_Tree_getColor__Node(globals, node) && (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_noDoubleRed__Node(globals, node.field_Node_right) && method_Tree_dbRedAtLeft__Node(globals, node.field_Node_left))
  requires method_Tree_noDBlack__Node(globals, node) || method_Tree_dblackAtRight__Node(globals, node)
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackBalanced__Node(globals, node.field_Node_left) && method_Tree_blackBalanced__Node(globals, node.field_Node_right))
  requires (unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_blackHeight__Node(globals, node.field_Node_right) == (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_left), write) in method_Tree_blackHeight__Node(globals, node.field_Node_left.field_Node_right)))
  ensures sys__result != null
  ensures acc(method_Tree_tree_perm__Node(globals, sys__result), write)
  ensures method_Tree_sorted__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in sys__result.field_Node_right != null)
  ensures old(method_Tree_toBag__Node(globals, node)) == method_Tree_toBag__Node(globals, sys__result)
  ensures old(method_Tree_getColor__Node(globals, node)) == method_Tree_getColor__Node(globals, sys__result)
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in method_Tree_getColor__Node(globals, node.field_Node_left))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_right))
  ensures old((unfolding acc(method_Tree_tree_perm__Node(globals, node), write) in (unfolding acc(method_Tree_tree_perm__Node(globals, node.field_Node_left), write) in method_Tree_getColor__Node(globals, node.field_Node_left.field_Node_left)))) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_getColor__Node(globals, sys__result.field_Node_left))
  ensures old(method_Tree_blackHeight__Node(globals, node)) == method_Tree_blackHeight__Node(globals, sys__result)
  ensures (old(method_Tree_dbRedAtLeft__Node(globals, node)) ? method_Tree_dbRedAtRight__Node(globals, sys__result) : method_Tree_noDoubleRed__Node(globals, sys__result))
  ensures old(method_Tree_noDBlack__Node(globals, node)) ==> method_Tree_noDBlack__Node(globals, sys__result)
  ensures old(method_Tree_dblackAtRight__Node(globals, node)) ==> method_Tree_dblackAtRightRight__Node(globals, sys__result)
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackBalanced__Node(globals, sys__result.field_Node_left) && method_Tree_blackBalanced__Node(globals, sys__result.field_Node_right))
  ensures (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_left) == (unfolding acc(method_Tree_tree_perm__Node(globals, sys__result.field_Node_right), write) in method_Tree_blackHeight__Node(globals, sys__result.field_Node_right.field_Node_left)))
{
  inhale false
}

method constructor_Tree_Tree(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_Tree()
  ensures acc(sys__result.field_Tree_root, write) && sys__result.field_Tree_root == null
{
  inhale false
}

method constructor_Util_Util(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_Util()
{
  inhale false
}

method internal_Util_Util(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
  ensures type_of(sys__result) == class_Util()
{
  inhale false
}

method method_NodeList_appendRec__Node__NodeList(current_thread_id: Int, globals: Ref, node: Ref, nl: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), write)
  requires node != null
  requires acc(node.field_Node_key, write)
  requires acc(node.field_Node_left, write)
  requires acc(node.field_Node_right, write)
  requires acc(node.field_Node_color, write)
  requires acc(node.field_Node_dblack, write)
  requires acc(node.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= node.field_Node_key
  requires method_NodeList_sorted__NodeList(globals, nl) && (forall i: Int :: { method_NodeList_toSeqKeys__NodeList(globals, nl)[i] } 0 <= i && i < |method_NodeList_toSeqKeys__NodeList(globals, nl)| ==> method_NodeList_toSeqKeys__NodeList(globals, nl)[i] <= node.field_Node_key)
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures method_NodeList_size__NodeList(globals, sys__result) == 1 + old(method_NodeList_size__NodeList(globals, nl))
  ensures method_NodeList_toSeq__NodeList(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, nl) ++ Seq(node))
  ensures method_NodeList_toSeqKeys__NodeList(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, nl) ++ Seq(node.field_Node_key))
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
{
  inhale false
}

method method_NodeList_extend__NodeList__NodeList(current_thread_id: Int, globals: Ref, front: Ref, back: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, front), write)
  requires acc(method_NodeList_list_perm__NodeList(globals, back), write)
  requires method_NodeList_sorted__NodeList(globals, front) && method_NodeList_sorted__NodeList(globals, back) && (forall i: Int, j: Int :: { method_NodeList_toSeqKeys__NodeList(globals, back)[j],method_NodeList_toSeqKeys__NodeList(globals, front)[i] } 0 <= i && i < |method_NodeList_toSeqKeys__NodeList(globals, front)| && (0 <= j && j < |method_NodeList_toSeqKeys__NodeList(globals, back)|) ==> method_NodeList_toSeqKeys__NodeList(globals, front)[i] <= method_NodeList_toSeqKeys__NodeList(globals, back)[j])
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures method_NodeList_size__NodeList(globals, sys__result) == old(method_NodeList_size__NodeList(globals, front)) + old(method_NodeList_size__NodeList(globals, back))
  ensures method_NodeList_toSeq__NodeList(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, front)) ++ old(method_NodeList_toSeq__NodeList(globals, back))
  ensures method_NodeList_toSeqKeys__NodeList(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, front)) ++ old(method_NodeList_toSeqKeys__NodeList(globals, back))
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
{
  inhale false
}

method method_NodeList_fromTree__Node(current_thread_id: Int, globals: Ref, node: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_Tree_tree_perm__Node(globals, node), write)
  requires method_Tree_noDBlack__Node(globals, node)
  requires method_Tree_sortedKeySeq__Node(globals, node)
  ensures node != null ==> sys__result != null
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures old(method_Tree_toSeq__Node(globals, node)) == method_NodeList_toSeq__NodeList(globals, sys__result)
  ensures old(method_Tree_toSeqKeys__Node(globals, node)) == method_NodeList_toSeqKeys__NodeList(globals, sys__result)
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
{
  inhale false
}

method constructor_NodeList_NodeList__Node__NodeList(current_thread_id: Int, globals: Ref, node: Ref, nl: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires node != null
  requires acc(node.field_Node_key, write)
  requires acc(node.field_Node_left, write)
  requires acc(node.field_Node_right, write)
  requires acc(node.field_Node_color, write)
  requires acc(node.field_Node_dblack, write)
  requires acc(node.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= node.field_Node_key
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), write)
  requires method_NodeList_sorted__NodeList(globals, nl) && (let nlKeys == (method_NodeList_toSeqKeys__NodeList(globals, nl)) in (forall i: Int :: { nlKeys[i] } 0 <= i && i < |nlKeys| ==> node.field_Node_key <= nlKeys[i]))
  ensures sys__result != null
  ensures type_of(sys__result) == class_NodeList()
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result), write)
  ensures method_NodeList_sorted__NodeList(globals, sys__result)
  ensures method_NodeList_size__NodeList(globals, sys__result) == old(method_NodeList_size__NodeList(globals, nl)) + 1
  ensures method_NodeList_toSeqKeys__NodeList(globals, sys__result) == old(Seq(node.field_Node_key) ++ method_NodeList_toSeqKeys__NodeList(globals, nl))
  ensures (unfolding acc(method_NodeList_list_perm__NodeList(globals, sys__result), write) in sys__result.field_NodeList_node == node && sys__result.field_NodeList_next == nl && method_NodeList_toSeq__NodeList(globals, sys__result.field_NodeList_next) == old(method_NodeList_toSeq__NodeList(globals, nl)))
{
  inhale false
}

method method_NodeList_length(diz: Ref, current_thread_id: Int, globals: Ref, p: frac) returns (sys__result: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, diz), frac_val(p))
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz), frac_val(p))
  ensures sys__result == method_NodeList_size__NodeList(globals, diz)
{
  inhale false
}

method method_NodeList_append__Node(diz: Ref, current_thread_id: Int, globals: Ref, node: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires node != null
  requires acc(node.field_Node_key, write)
  requires acc(node.field_Node_left, write)
  requires acc(node.field_Node_right, write)
  requires acc(node.field_Node_color, write)
  requires acc(node.field_Node_dblack, write)
  requires acc(node.field_Node_dblackNull, write)
  requires acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  requires globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= node.field_Node_key
  requires acc(method_NodeList_list_perm__NodeList(globals, diz), write)
  requires method_NodeList_sorted__NodeList(globals, diz) && (forall i: Int :: { method_NodeList_toSeqKeys__NodeList(globals, diz)[i] } 0 <= i && i < |method_NodeList_toSeqKeys__NodeList(globals, diz)| ==> method_NodeList_toSeqKeys__NodeList(globals, diz)[i] <= node.field_Node_key)
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz), write)
  ensures method_NodeList_size__NodeList(globals, diz) == 1 + old(method_NodeList_size__NodeList(globals, diz))
  ensures method_NodeList_toSeq__NodeList(globals, diz) == old(method_NodeList_toSeq__NodeList(globals, diz) ++ Seq(node))
  ensures method_NodeList_toSeqKeys__NodeList(globals, diz) == old(method_NodeList_toSeqKeys__NodeList(globals, diz) ++ Seq(node.field_Node_key))
  ensures method_NodeList_sorted__NodeList(globals, diz)
{
  inhale false
}

method constructor_NodeListIterator_NodeListIterator__NodeList(current_thread_id: Int, globals: Ref, list: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires acc(method_NodeList_list_perm__NodeList(globals, list), write)
  requires method_NodeList_sorted__NodeList(globals, list)
  ensures sys__result != null
  ensures type_of(sys__result) == class_NodeListIterator()
  ensures acc(sys__result.field_NodeListIterator_current, write)
  ensures acc(method_NodeList_list_perm__NodeList(globals, sys__result.field_NodeListIterator_current), write)
  ensures method_NodeListIterator_sorted__NodeListIterator(globals, sys__result)
  ensures sys__result.field_NodeListIterator_current == list
  ensures method_NodeListIterator_toSeq__NodeListIterator(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, list))
  ensures method_NodeListIterator_toSeqKeys__NodeListIterator(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, list))
{
  inhale false
}

method method_NodeListIterator_hasNext(diz: Ref, current_thread_id: Int, globals: Ref, p: frac) returns (sys__result: Bool)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_NodeListIterator_current, frac_val(p))
  requires acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), frac_val(p))
  requires method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  ensures acc(diz.field_NodeListIterator_current, frac_val(p))
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), frac_val(p))
  ensures method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  ensures sys__result == (diz.field_NodeListIterator_current != null)
  ensures !sys__result ==> |method_NodeListIterator_toSeq__NodeListIterator(globals, diz)| == 0
{
  inhale false
}

method method_NodeListIterator_getNext(diz: Ref, current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(diz.field_NodeListIterator_current, write)
  requires acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write)
  requires method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  requires diz.field_NodeListIterator_current != null
  ensures acc(diz.field_NodeListIterator_current, write)
  ensures acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write)
  ensures method_NodeListIterator_sorted__NodeListIterator(globals, diz)
  ensures acc(sys__result.field_Node_key, write)
  ensures acc(sys__result.field_Node_left, write)
  ensures acc(sys__result.field_Node_right, write)
  ensures acc(sys__result.field_Node_color, write)
  ensures acc(sys__result.field_Node_dblack, write)
  ensures acc(sys__result.field_Node_dblackNull, write)
  ensures acc(globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE, wildcard)
  ensures globals.field_java_DOT_lang_DOT_Integer_MIN_VALUE <= sys__result.field_Node_key
  ensures method_NodeListIterator_toSeq__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeq__NodeListIterator(globals, diz)[1..])
  ensures method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz) == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[1..])
  ensures sys__result == old((unfolding acc(method_NodeList_list_perm__NodeList(globals, diz.field_NodeListIterator_current), write) in diz.field_NodeListIterator_current.field_NodeList_node))
  ensures sys__result.field_Node_key == old(method_NodeListIterator_toSeqKeys__NodeListIterator(globals, diz)[0])
  ensures sys__result != null
{
  inhale false
}

method constructor_ListList_ListList__NodeList(current_thread_id: Int, globals: Ref, nl: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  requires nl != null
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), write)
  requires method_NodeList_sorted__NodeList(globals, nl)
  ensures sys__result != null
  ensures type_of(sys__result) == class_ListList()
  ensures acc(method_ListList_list_perm__ListList(globals, sys__result), write)
  ensures (unfolding acc(method_ListList_list_perm__ListList(globals, sys__result), write) in sys__result.field_ListList_nodeList == nl && sys__result.field_ListList_next == null)
  ensures method_ListList_toSeq__ListList(globals, sys__result) == old(method_NodeList_toSeq__NodeList(globals, nl))
  ensures method_ListList_toSeqKeys__ListList(globals, sys__result) == old(method_NodeList_toSeqKeys__NodeList(globals, nl))
  ensures method_ListList_sorted__ListList(globals, sys__result)
{
  inhale false
}

method method_ListList_size(diz: Ref, current_thread_id: Int, globals: Ref, p: frac) returns (sys__result: Int)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListList_list_perm__ListList(globals, diz), frac_val(p))
  ensures acc(method_ListList_list_perm__ListList(globals, diz), frac_val(p))
  ensures sys__result == method_ListList_size__ListList(globals, diz)
{
  inhale false
}

method method_ListList_append__NodeList(diz: Ref, current_thread_id: Int, globals: Ref, nl: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires acc(method_ListList_list_perm__ListList(globals, diz), write)
  requires nl != null
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), write)
  requires method_ListList_sorted__ListList(globals, diz)
  requires method_NodeList_sorted__NodeList(globals, nl)
  requires method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(method_ListList_toSeqKeys__ListList(globals, diz), method_NodeList_toSeqKeys__NodeList(globals, nl))
  ensures acc(method_ListList_list_perm__ListList(globals, diz), write)
  ensures method_ListList_toSeq__ListList(globals, diz) == old(method_ListList_toSeq__ListList(globals, diz) ++ method_NodeList_toSeq__NodeList(globals, nl))
  ensures method_ListList_toSeqKeys__ListList(globals, diz) == old(method_ListList_toSeqKeys__ListList(globals, diz) ++ method_NodeList_toSeqKeys__NodeList(globals, nl))
  ensures method_ListList_sorted__ListList(globals, diz)
{
  inhale false
}

method method_ListList_appendRec__NodeList__ListList(diz: Ref, current_thread_id: Int, globals: Ref, nl: Ref, ll: Ref) returns (sys__result: Ref)
  requires diz != null
  requires 0 <= current_thread_id
  requires nl != null
  requires acc(method_ListList_list_perm__ListList(globals, ll), write)
  requires acc(method_NodeList_list_perm__NodeList(globals, nl), write)
  requires method_ListList_sorted__ListList(globals, ll)
  requires method_NodeList_sorted__NodeList(globals, nl)
  requires method_Util_smallerSeq__Sequence$Integer$__Sequence$Integer$(method_ListList_toSeqKeys__ListList(globals, ll), method_NodeList_toSeqKeys__NodeList(globals, nl))
  ensures acc(method_ListList_list_perm__ListList(globals, sys__result), write)
  ensures method_ListList_toSeq__ListList(globals, sys__result) == old(method_ListList_toSeq__ListList(globals, ll) ++ method_NodeList_toSeq__NodeList(globals, nl))
  ensures method_ListList_toSeqKeys__ListList(globals, sys__result) == old(method_ListList_toSeqKeys__ListList(globals, ll) ++ method_NodeList_toSeqKeys__NodeList(globals, nl))
  ensures method_ListList_sorted__ListList(globals, sys__result)
{
  inhale false
}

method array_new_Bag_Integer_(size0: Int) returns (sys__result: Multiset[Int])
  ensures 0 < size0 ==> sys__result == Multiset[Int]()
{
  inhale false
}

method array_new_Bag_Node_(size0: Int) returns (sys__result: Multiset[Ref])
  ensures 0 < size0 ==> sys__result == Multiset[Ref]()
{
  inhale false
}

method array_new_Sequence_NodeList_(size0: Int) returns (sys__result: Seq[Ref])
  ensures 0 < size0 ==> sys__result == Seq[Ref]()
{
  inhale false
}

method array_new_Sequence_Integer_(size0: Int) returns (sys__result: Seq[Int])
  ensures 0 < size0 ==> sys__result == Seq[Int]()
{
  inhale false
}

method array_new_Sequence_Node_(size0: Int) returns (sys__result: Seq[Ref])
  ensures 0 < size0 ==> sys__result == Seq[Ref]()
{
  inhale false
}

method array_new_Option_Array_Cell_ListMergerThread___(size0: Int) returns (sys__result: VCTOption[VCTArray[Ref]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref) } 0 <= i0 && i0 < size0 ==> acc((loc(getVCTOption1(sys__result), i0): Ref).Ref__item, write))
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref) } 0 <= i0 && i0 < size0 ==> (loc(getVCTOption1(sys__result), i0): Ref).Ref__item == null)
{
  inhale false
}

method array_new_Option_Array_Cell_ListListQueue___(size0: Int) returns (sys__result: VCTOption[VCTArray[Ref]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref) } 0 <= i0 && i0 < size0 ==> acc((loc(getVCTOption1(sys__result), i0): Ref).Ref__item, write))
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref) } 0 <= i0 && i0 < size0 ==> (loc(getVCTOption1(sys__result), i0): Ref).Ref__item == null)
{
  inhale false
}

method array_new_Option_Array_Cell_TreeConverterThread___(size0: Int) returns (sys__result: VCTOption[VCTArray[Ref]])
  ensures sys__result != (VCTNone(): VCTOption[VCTArray[Ref]])
  ensures (alen(getVCTOption1(sys__result)): Int) == size0
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref) } 0 <= i0 && i0 < size0 ==> acc((loc(getVCTOption1(sys__result), i0): Ref).Ref__item, write))
  ensures (forall i0: Int :: { (loc(getVCTOption1(sys__result), i0): Ref) } 0 <= i0 && i0 < size0 ==> (loc(getVCTOption1(sys__result), i0): Ref).Ref__item == null)
{
  inhale false
}

method array_new_Sequence_Bag_Node__(size0: Int) returns (sys__result: Seq[Multiset[Ref]])
  ensures 0 < size0 ==> sys__result == Seq[Multiset[Ref]]()
{
  inhale false
}
