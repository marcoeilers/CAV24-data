domain String  {
  
  function strLen(id: Int): Int 
  
  function strConcat(l: Int, r: Int): Int 
  
  unique function stringLit(): Int 
  
  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
}

domain Types  {
  
  function empty_interface_Types(): Types 
  
  unique function empty_interface_Types_tag(): Int 
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool 
  
  function nil_Types(): Types 
  
  unique function nil_Types_tag(): Int 
  
  function comparableType_Types(t: Types): Bool 
  
  function tag_Types(t: Types): Int 
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain Tuple2[T0, T1]  {
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1] 
  
  function get0of2(p: Tuple2[T0, T1]): T0 
  
  function get1of2(p: Tuple2[T0, T1]): T1 
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain WellFoundedOrder[T]  {
  
  function decreasing(arg1: T, arg2: T): Bool 
  
  function bounded(arg1: T): Bool 
}

function isLeapYear_be40446d_F(year_V0: Int): Bool
{
  year_V0 % 4 == 0 && (!(year_V0 % 100 == 0) || year_V0 % 400 == 0)
}

// decreases 
function IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), wildcard)


predicate ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types]) 

method convertDaysFixed_be40446d_F(totalDays_V0: Int)
  returns (days_V0: Int, year_V0: Int)
  ensures days_V0 <= 366
{
  inhale days_V0 == 0
  inhale year_V0 == 0
  
  // decl totalDays_V0_CN0: int°°, days_V0_CN1: int°°, year_V0_CN2: int°°
  {
    var year_V0_CN2: Int
    var days_V0_CN1: Int
    var totalDays_V0_CN0: Int
    
    
    
    // init totalDays_V0_CN0
    inhale totalDays_V0_CN0 == 0
    
    // init days_V0_CN1
    inhale days_V0_CN1 == 0
    
    // init year_V0_CN2
    inhale year_V0_CN2 == 0
    
    // totalDays_V0_CN0 = totalDays_V0
    totalDays_V0_CN0 := totalDays_V0
    
    // decl 
    
    // days_V0_CN1 = totalDays_V0_CN0
    days_V0_CN1 := totalDays_V0_CN0
    
    // year_V0_CN2 = 1980
    year_V0_CN2 := 1980
    
    // decl L$6$2$Break
    {
      
      // while(isLeapYear_be40446d_F(year_V0_CN2) && 366 < days_V0_CN1 || !isLeapYear_be40446d_F(year_V0_CN2) && 365 < days_V0_CN1)

      while (isLeapYear_be40446d_F(year_V0_CN2) && 366 < days_V0_CN1 ||
      !isLeapYear_be40446d_F(year_V0_CN2) && 365 < days_V0_CN1) {
        
        // decl L$6$2$Continue
        {
          
          // decl variant_V1: int°°
          {
            var variant_V1: Int
            
            // init variant_V1
            inhale variant_V1 == 0
            
            // variant_V1 = days_V0_CN1
            variant_V1 := days_V0_CN1
            
            // assert variant_V1 >= 0
            assert variant_V1 >= 0
            
            // if(isLeapYear_be40446d_F(year_V0_CN2)) {...} else {...}
            if (isLeapYear_be40446d_F(year_V0_CN2)) {
              
              // decl 
              
              // days_V0_CN1 = days_V0_CN1 - 366
              days_V0_CN1 := days_V0_CN1 - 366
            } else {
              
              // decl 
              
              // days_V0_CN1 = days_V0_CN1 - 365
              days_V0_CN1 := days_V0_CN1 - 365
            }
            
            // year_V0_CN2 = year_V0_CN2 + 1
            year_V0_CN2 := year_V0_CN2 + 1
            
            // assert days_V0_CN1 < variant_V1
            assert days_V0_CN1 < variant_V1
          }
          
          // L$6$2$Continue
          label L$6$2$Continue
        }
        if (isLeapYear_be40446d_F(year_V0_CN2) && 366 < days_V0_CN1 ||
        !isLeapYear_be40446d_F(year_V0_CN2) && 365 < days_V0_CN1) {
        }
      }
      
      // L$6$2$Break
      label L$6$2$Break
    }
    
    // return
    goto returnLabel
    label returnLabel
    
    // days_V0 = days_V0_CN1
    days_V0 := days_V0_CN1
    
    // year_V0 = year_V0_CN2
    year_V0 := year_V0_CN2
  }
}

method convertDaysFixedWithSomeInvariants_be40446d_F(totalDays_V0: Int)
  returns (days_V0: Int, year_V0: Int)
  ensures days_V0 + (year_V0 - 1980) * 365 <= totalDays_V0
  ensures totalDays_V0 <= days_V0 + (year_V0 - 1980) * 366
  ensures days_V0 <= 366
{
  inhale days_V0 == 0
  inhale year_V0 == 0
  
  // decl totalDays_V0_CN0: int°°, days_V0_CN1: int°°, year_V0_CN2: int°°
  {
    var year_V0_CN2: Int
    var days_V0_CN1: Int
    var totalDays_V0_CN0: Int
    
    
    
    // init totalDays_V0_CN0
    inhale totalDays_V0_CN0 == 0
    
    // init days_V0_CN1
    inhale days_V0_CN1 == 0
    
    // init year_V0_CN2
    inhale year_V0_CN2 == 0
    
    // totalDays_V0_CN0 = totalDays_V0
    totalDays_V0_CN0 := totalDays_V0
    
    // decl 
    
    // days_V0_CN1 = totalDays_V0_CN0
    days_V0_CN1 := totalDays_V0_CN0
    
    // year_V0_CN2 = 1980
    year_V0_CN2 := 1980
    
    // decl L$8$2$Break
    {
      
      // while(isLeapYear_be40446d_F(year_V0_CN2) && 366 < days_V0_CN1 || !isLeapYear_be40446d_F(year_V0_CN2) && 365 < days_V0_CN1)
// invariant days_V0_CN1 + year_V0_CN2 - 1980 * 365 <= totalDays_V0_CN0
// invariant totalDays_V0_CN0 <= days_V0_CN1 + year_V0_CN2 - 1980 * 366

      
      while (isLeapYear_be40446d_F(year_V0_CN2) && 366 < days_V0_CN1 ||
      !isLeapYear_be40446d_F(year_V0_CN2) && 365 < days_V0_CN1)
        invariant days_V0_CN1 + (year_V0_CN2 - 1980) * 365 <=
          totalDays_V0_CN0
        invariant totalDays_V0_CN0 <=
          days_V0_CN1 + (year_V0_CN2 - 1980) * 366 
      {
        
        // decl L$8$2$Continue
        {
          
          // decl variant_V1: int°°
          {
            var variant_V1: Int
            
            // init variant_V1
            inhale variant_V1 == 0
            
            // variant_V1 = days_V0_CN1
            variant_V1 := days_V0_CN1
            
            // assert variant_V1 >= 0
            assert variant_V1 >= 0
            
            // if(isLeapYear_be40446d_F(year_V0_CN2)) {...} else {...}
            if (isLeapYear_be40446d_F(year_V0_CN2)) {
              
              // decl 
              
              // days_V0_CN1 = days_V0_CN1 - 366
              days_V0_CN1 := days_V0_CN1 - 366
            } else {
              
              // decl 
              
              // days_V0_CN1 = days_V0_CN1 - 365
              days_V0_CN1 := days_V0_CN1 - 365
            }
            
            // year_V0_CN2 = year_V0_CN2 + 1
            year_V0_CN2 := year_V0_CN2 + 1
            
            // assert days_V0_CN1 < variant_V1
            assert days_V0_CN1 < variant_V1
          }
          
          // L$8$2$Continue
          label L$8$2$Continue
        }
        if (isLeapYear_be40446d_F(year_V0_CN2) && 366 < days_V0_CN1 ||
        !isLeapYear_be40446d_F(year_V0_CN2) && 365 < days_V0_CN1) {
        }
        
      }
      
      // L$8$2$Break
      label L$8$2$Break
    }
    
    // return
    goto returnLabel
    label returnLabel
    
    // days_V0 = days_V0_CN1
    days_V0 := days_V0_CN1
    
    // year_V0 = year_V0_CN2
    year_V0 := year_V0_CN2
  }
}

method $IMPORTS_be40446d_be40446d()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method $IMPORTS_be40446d_bffb141e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_be40446d_285445f7()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method panic_bffb141e_F(v_V0: Tuple2[Ref, Types])
  requires false


// decreases 
method Error_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)


// decreases 
method Duplicate_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e_(thisItf) ==>
    acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)


// decreases 
method IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), wildcard)
  }
}