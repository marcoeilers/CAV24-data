domain String  {
  
  function strLen(id: Int): Int 
  
  function strConcat(l: Int, r: Int): Int 
  
  unique function stringLit(): Int 
  
  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
}

domain Types  {
  
  function Y$b2c983df_37d1251d__Types(): Types 
  
  unique function Y$b2c983df_37d1251d__Types_tag(): Int 
  
  function evaluator_37d1251d_T_Types(): Types 
  
  unique function evaluator_37d1251d_T_Types_tag(): Int 
  
  function childrenCounter_37d1251d_T_Types(): Types 
  
  unique function childrenCounter_37d1251d_T_Types_tag(): Int 
  
  function addition_37d1251d_T_Types(): Types 
  
  unique function addition_37d1251d_T_Types_tag(): Int 
  
  function constant_37d1251d_T_Types(): Types 
  
  unique function constant_37d1251d_T_Types_tag(): Int 
  
  function nil_Types(): Types 
  
  unique function nil_Types_tag(): Int 
  
  function pointer_Types(p0: Types): Types 
  
  unique function pointer_Types_tag(): Int 
  
  function empty_interface_Types(): Types 
  
  unique function empty_interface_Types_tag(): Int 
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool 
  
  function variable_37d1251d_T_Types(): Types 
  
  unique function variable_37d1251d_T_Types_tag(): Int 
  
  function comparableType_Types(t: Types): Bool 
  
  function tag_Types(t: Types): Int 
  
  function get_0_pointer_Types(t: Types): Types 
  
  axiom {
    (forall x0: Types ::
      { pointer_Types(x0) }
      get_0_pointer_Types(pointer_Types(x0)) == x0)
  }
  
  axiom {
    comparableType_Types(Y$b2c983df_37d1251d__Types()) == false
  }
  
  axiom {
    tag_Types(Y$b2c983df_37d1251d__Types()) ==
    Y$b2c983df_37d1251d__Types_tag()
  }
  
  axiom {
    comparableType_Types(evaluator_37d1251d_T_Types()) == true
  }
  
  axiom {
    tag_Types(evaluator_37d1251d_T_Types()) ==
    evaluator_37d1251d_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(childrenCounter_37d1251d_T_Types()) == true
  }
  
  axiom {
    tag_Types(childrenCounter_37d1251d_T_Types()) ==
    childrenCounter_37d1251d_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(addition_37d1251d_T_Types()) == true
  }
  
  axiom {
    tag_Types(addition_37d1251d_T_Types()) ==
    addition_37d1251d_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(constant_37d1251d_T_Types()) == true
  }
  
  axiom {
    tag_Types(constant_37d1251d_T_Types()) ==
    constant_37d1251d_T_Types_tag()
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
  
  axiom {
    (forall p0: Types ::
      { comparableType_Types(pointer_Types(p0)) }
      comparableType_Types(pointer_Types(p0)) == true)
  }
  
  axiom {
    (forall p0: Types ::
      { pointer_Types(p0) }
      tag_Types(pointer_Types(p0)) == pointer_Types_tag())
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    comparableType_Types(variable_37d1251d_T_Types()) == true
  }
  
  axiom {
    tag_Types(variable_37d1251d_T_Types()) ==
    variable_37d1251d_T_Types_tag()
  }
}

domain PolyAdditionalAxioms  {
  
  axiom {
    (forall y: Ref ::
      { (unbox_Poly(y): ShStruct1[Emb_10_Intint$$$_S_$$$]) }
      (box_Poly((unbox_Poly(y): ShStruct1[Emb_10_Intint$$$_S_$$$])): Ref) ==
      y)
  }
  
  axiom {
    (forall y: Ref ::
      { (unbox_Poly(y): ShStruct1[Ref]) }
      (box_Poly((unbox_Poly(y): ShStruct1[Ref])): Ref) == y)
  }
  
  axiom {
    (forall y: Ref ::
      { (unbox_Poly(y): ShStruct2[Ref, Ref]) }
      (box_Poly((unbox_Poly(y): ShStruct2[Ref, Ref])): Ref) == y)
  }
  
  axiom {
    (forall y: Ref ::
      { (unbox_Poly(y): ShStruct1[Ref]) }
      (box_Poly((unbox_Poly(y): ShStruct1[Ref])): Ref) == y)
  }
  
  axiom {
    (forall y: Ref ::
      { (unbox_Poly(y): ShStruct1[Ref]) }
      (box_Poly((unbox_Poly(y): ShStruct1[Ref])): Ref) == y)
  }
}

domain Poly[T]  {
  
  function box_Poly(x: T): Ref 
  
  function unbox_Poly(y: Ref): T 
  
  axiom {
    (forall x: T ::
      { (box_Poly(x): Ref) }
      (unbox_Poly((box_Poly(x): Ref)): T) == x)
  }
}

domain Emb_10_Intint$$$_S_$$$  {
  
  
}

domain Emb_10_Intint$$$$_E_$$$  {
  
  
}

domain ShStruct1[T0]  {
  
  function ShStructrev0of1(v0: T0): ShStruct1[T0] 
  
  function ShStructget0of1(x: ShStruct1[T0]): T0 
  
  axiom {
    (forall x: ShStruct1[T0], y: ShStruct1[T0] ::
      { (eq(x, y): Bool) }
      (eq(x, y): Bool) ==
      ((ShStructget0of1(x): T0) == (ShStructget0of1(y): T0)))
  }
  
  axiom {
    (forall x: ShStruct1[T0] ::
      { (ShStructget0of1(x): T0) }
      (ShStructrev0of1((ShStructget0of1(x): T0)): ShStruct1[T0]) == x)
  }
}

domain ShStruct2[T0, T1]  {
  
  function ShStructrev0of2(v0: T0): ShStruct2[T0, T1] 
  
  function ShStructrev1of2(v1: T1): ShStruct2[T0, T1] 
  
  function ShStructget0of2(x: ShStruct2[T0, T1]): T0 
  
  function ShStructget1of2(x: ShStruct2[T0, T1]): T1 
  
  axiom {
    (forall x: ShStruct2[T0, T1], y: ShStruct2[T0, T1] ::
      { (eq(x, y): Bool) }
      (eq(x, y): Bool) ==
      ((ShStructget0of2(x): T0) == (ShStructget0of2(y): T0) &&
      (ShStructget1of2(x): T1) == (ShStructget1of2(y): T1)))
  }
  
  axiom {
    (forall x: ShStruct2[T0, T1] ::
      { (ShStructget0of2(x): T0) }
      (ShStructrev0of2((ShStructget0of2(x): T0)): ShStruct2[T0, T1]) == x)
  }
  
  axiom {
    (forall x: ShStruct2[T0, T1] ::
      { (ShStructget1of2(x): T1) }
      (ShStructrev1of2((ShStructget1of2(x): T1)): ShStruct2[T0, T1]) == x)
  }
}

domain Equality[T]  {
  
  function eq(l: T, r: T): Bool 
  
  axiom {
    (forall l: T, r: T ::
      { (eq(l, r): Bool) }
      (eq(l, r): Bool) == (l == r))
  }
}

domain Tuple2[T0, T1]  {
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1] 
  
  function get0of2(p: Tuple2[T0, T1]): T0 
  
  function get1of2(p: Tuple2[T0, T1]): T1 
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Tuple1[T0]  {
  
  function tuple1(t0: T0): Tuple1[T0] 
  
  function get0of1(p: Tuple1[T0]): T0 
  
  axiom getter_over_tuple1 {
    (forall t0: T0 ::
      { (tuple1(t0): Tuple1[T0]) }
      (get0of1((tuple1(t0): Tuple1[T0])): T0) == t0)
  }
  
  axiom tuple1_over_getter {
    (forall p: Tuple1[T0] ::
      { (get0of1(p): T0) }
      (tuple1((get0of1(p): T0)): Tuple1[T0]) == p)
  }
}

domain ShArray[T]  {
  
  function ShArrayloc(a: ShArray[T], i: Int): T 
  
  function ShArraylen(a: ShArray[T]): Int 
  
  function ShArrayfirst(r: T): ShArray[T] 
  
  function ShArraysecond(r: T): Int 
  
  axiom {
    (forall a: ShArray[T], i: Int ::
      { (ShArrayloc(a, i): T) }
      0 <= i && i < (ShArraylen(a): Int) ==>
      (ShArrayfirst((ShArrayloc(a, i): T)): ShArray[T]) == a &&
      (ShArraysecond((ShArrayloc(a, i): T)): Int) == i)
  }
  
  axiom {
    (forall a: ShArray[T] ::
      { (ShArraylen(a): Int) }
      (ShArraylen(a): Int) >= 0)
  }
}

domain WellFoundedOrder[T]  {
  
  function decreasing(arg1: T, arg2: T): Bool 
  
  function bounded(arg1: T): Bool 
}

field Intint$$$$_E_$$$: Int

field Definednode_37d1251d_T$$$$_E_$$$: Tuple2[Ref, Types]

function sequenceEmpty_Intint$$$$_E_$$$(n: Int): Seq[Int]
  requires 0 <= n
  ensures |result| == n
  ensures (forall i: Int ::
      { result[i] }
      0 <= i && i < n ==> result[i] == 0)


// decreases _
function typeOfInterface_Y$b2c983df_37d1251d_(itf: Tuple2[Ref, Types]): Types
  ensures result == (get1of2(itf): Types)
  ensures behavioral_subtype_Types(result, Y$b2c983df_37d1251d__Types())


// decreases _
function arrayNil_10_Intint$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int ::
      { (ShArrayloc(result, idx): Ref) }
      (ShArrayloc(result, idx): Ref) == null)


// decreases _
function box_Emb_10_Intint$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_10_Intint$$$_S_$$$
  requires (ShArraylen(x): Int) == 10 || x == arrayNil_10_Intint$$$_S_$$$()
  ensures unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref(result) == x


// decreases _
function unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref(y: Emb_10_Intint$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 10 ||
    result == arrayNil_10_Intint$$$_S_$$$()
  ensures box_Emb_10_Intint$$$_S_$$$_ShArray_Ref(result) == y


// decreases _
function box_Emb_10_Intint$$$$_E_$$$_Seq_Int(x: Seq[Int]): Emb_10_Intint$$$$_E_$$$
  requires |x| == 10
  ensures unbox_Emb_10_Intint$$$$_E_$$$_Seq_Int(result) == x


// decreases _
function unbox_Emb_10_Intint$$$$_E_$$$_Seq_Int(y: Emb_10_Intint$$$$_E_$$$): Seq[Int]
  ensures |result| == 10
  ensures box_Emb_10_Intint$$$$_E_$$$_Seq_Int(result) == y


// decreases _
function shStructDefault_$fA_Intint$$$_S_$$$$(): ShStruct1[Ref]
  ensures (ShStructget0of1(result): Ref) == null


// decreases _
function shStructDefault_$leftA_Definednode_37d1251d_T$$$_S_$$$_rightA_Definednode_37d1251d_T$$$_S_$$$$(): ShStruct2[Ref, Ref]
  ensures (ShStructget0of2(result): Ref) == null &&
    (ShStructget1of2(result): Ref) == null


// decreases _
function shStructDefault_$storeA_Array10Intint$$$_S_$$$$$$_S_$$$$(): ShStruct1[Emb_10_Intint$$$_S_$$$]
  ensures (ShStructget0of1(result): Emb_10_Intint$$$_S_$$$) ==
    box_Emb_10_Intint$$$_S_$$$_ShArray_Ref(arrayNil_10_Intint$$$_S_$$$())


// decreases _
function shStructDefault_$idA_Intint$$$_S_$$$$(): ShStruct1[Ref]
  ensures (ShStructget0of1(result): Ref) == null


// decreases _
function shStructDefault_$valueA_Intint$$$_S_$$$$(): ShStruct1[Ref]
  ensures (ShStructget0of1(result): Ref) == null


function accept_37d1251d_PMvariable(self_V0: ShStruct1[Ref], v_V0: Tuple2[Ref, Types],
  u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_0((tuple2((box_Poly(self_V0): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_2(v_V0), 1 / u_V0)
  requires !(v_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  visitVariable_37d1251d_SY$4a6ae32b_37d1251d_(v_V0, self_V0, u_V0)
}

function accept_37d1251d_PMconstant(self_V0: ShStruct1[Ref], v_V0: Tuple2[Ref, Types],
  u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_0((tuple2((box_Poly(self_V0): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_2(v_V0), 1 / u_V0)
  requires !(v_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  visitConstant_37d1251d_SY$4a6ae32b_37d1251d_(v_V0, self_V0, u_V0)
}

function accept_37d1251d_PMaddition(self_V0: ShStruct2[Ref, Ref], v_V0: Tuple2[Ref, Types],
  u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_0((tuple2((box_Poly(self_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_2(v_V0), 1 / u_V0)
  requires !(v_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  visitAddition_37d1251d_SY$4a6ae32b_37d1251d_(v_V0, self_V0, u_V0)
}

function visitVariable_37d1251d_PMchildrenCounter(self_V0: ShStruct1[Ref], v_V0: ShStruct1[Ref],
  u_V0: Int): Int
{
  1
}

function visitConstant_37d1251d_PMchildrenCounter(self_V0: ShStruct1[Ref], c_V0: ShStruct1[Ref],
  u_V0: Int): Int
{
  1
}

function visitAddition_37d1251d_PMchildrenCounter(self_V0: ShStruct1[Ref], a_V0: ShStruct2[Ref, Ref],
  u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(childrenCounter_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(a_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  (unfolding acc(dynamic_pred_0((tuple2((box_Poly(a_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) in
    accept_37d1251d_SY$b2c983df_37d1251d_((ShStructget0of2(a_V0): Ref).Definednode_37d1251d_T$$$$_E_$$$,
    (tuple2((box_Poly(self_V0): Ref), pointer_Types(childrenCounter_37d1251d_T_Types())): Tuple2[Ref, Types]),
    u_V0) +
    accept_37d1251d_SY$b2c983df_37d1251d_((ShStructget1of2(a_V0): Ref).Definednode_37d1251d_T$$$$_E_$$$,
    (tuple2((box_Poly(self_V0): Ref), pointer_Types(childrenCounter_37d1251d_T_Types())): Tuple2[Ref, Types]),
    u_V0))
}

function visitVariable_37d1251d_PMevaluator(self_V0: ShStruct1[Emb_10_Intint$$$_S_$$$],
  v_V0: ShStruct1[Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(v_V0): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  (unfolding acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) in
    (ShArrayloc(unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref((ShStructget0of1(self_V0): Emb_10_Intint$$$_S_$$$)),
    (unfolding acc(dynamic_pred_0((tuple2((box_Poly(v_V0): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
      u_V0) in
      (ShStructget0of1(v_V0): Ref).Intint$$$$_E_$$$)): Ref).Intint$$$$_E_$$$)
}

function visitConstant_37d1251d_PMevaluator(self_V0: ShStruct1[Emb_10_Intint$$$_S_$$$],
  c_V0: ShStruct1[Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_0((tuple2((box_Poly(c_V0): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  (unfolding acc(dynamic_pred_0((tuple2((box_Poly(c_V0): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) in
    (ShStructget0of1(c_V0): Ref).Intint$$$$_E_$$$)
}

function visitAddition_37d1251d_PMevaluator(self_V0: ShStruct1[Emb_10_Intint$$$_S_$$$],
  a_V0: ShStruct2[Ref, Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(a_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  (unfolding acc(dynamic_pred_0((tuple2((box_Poly(a_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    (u_V0 + 1)) in
    accept_37d1251d_SY$b2c983df_37d1251d_((ShStructget0of2(a_V0): Ref).Definednode_37d1251d_T$$$$_E_$$$,
    (tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types]),
    u_V0 + 1) +
    accept_37d1251d_SY$b2c983df_37d1251d_((ShStructget1of2(a_V0): Ref).Definednode_37d1251d_T$$$$_E_$$$,
    (tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types]),
    u_V0 + 1))
}

function visitAddition_37d1251d_SY$4a6ae32b_37d1251d_(thisItf: Tuple2[Ref, Types],
  a_V0: ShStruct2[Ref, Ref], u_V0: Int): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires 1 <= u_V0 && acc(dynamic_pred_2(thisItf), 1 / u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(a_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(childrenCounter_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedchildrenCounter_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitAddition_37d1251d_PMchildrenCounter_visitAddition_37d1251d_SY$4a6ae32b_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Ref]),
    a_V0, u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(evaluator_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedevaluator_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitAddition_37d1251d_PMevaluator_visitAddition_37d1251d_SY$4a6ae32b_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Emb_10_Intint$$$_S_$$$]),
    a_V0, u_V0)


function accept_37d1251d_SY$b2c983df_37d1251d_(thisItf: Tuple2[Ref, Types],
  v_V0: Tuple2[Ref, Types], u_V0: Int): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires 1 <= u_V0 && acc(dynamic_pred_0(thisItf), 1 / u_V0) &&
    acc(dynamic_pred_2(v_V0), 1 / u_V0)
  requires !(v_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(addition_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedaddition_37d1251d_T$$$_S_$$$$$$$_E_$$$_accept_37d1251d_PMaddition_accept_37d1251d_SY$b2c983df_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct2[Ref, Ref]),
    v_V0, u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(constant_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedconstant_37d1251d_T$$$_S_$$$$$$$_E_$$$_accept_37d1251d_PMconstant_accept_37d1251d_SY$b2c983df_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Ref]),
    v_V0, u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(variable_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedvariable_37d1251d_T$$$_S_$$$$$$$_E_$$$_accept_37d1251d_PMvariable_accept_37d1251d_SY$b2c983df_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Ref]),
    v_V0, u_V0)


function visitConstant_37d1251d_SY$4a6ae32b_37d1251d_(thisItf: Tuple2[Ref, Types],
  c_V0: ShStruct1[Ref], u_V0: Int): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires 1 <= u_V0 && acc(dynamic_pred_2(thisItf), 1 / u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(c_V0): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(childrenCounter_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedchildrenCounter_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitConstant_37d1251d_PMchildrenCounter_visitConstant_37d1251d_SY$4a6ae32b_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Ref]),
    c_V0, u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(evaluator_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedevaluator_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitConstant_37d1251d_PMevaluator_visitConstant_37d1251d_SY$4a6ae32b_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Emb_10_Intint$$$_S_$$$]),
    c_V0, u_V0)


function visitVariable_37d1251d_SY$4a6ae32b_37d1251d_(thisItf: Tuple2[Ref, Types],
  v_V0: ShStruct1[Ref], u_V0: Int): Int
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires 1 <= u_V0 && acc(dynamic_pred_2(thisItf), 1 / u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(v_V0): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(childrenCounter_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedchildrenCounter_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitVariable_37d1251d_PMchildrenCounter_visitVariable_37d1251d_SY$4a6ae32b_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Ref]),
    v_V0, u_V0)
  ensures (get1of2(thisItf): Types) ==
    pointer_Types(evaluator_37d1251d_T_Types()) ==>
    result ==
    PointerDefinedevaluator_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitVariable_37d1251d_PMevaluator_visitVariable_37d1251d_SY$4a6ae32b_37d1251d__proof((unbox_Poly((get0of2(thisItf): Ref)): ShStruct1[Emb_10_Intint$$$_S_$$$]),
    v_V0, u_V0)


function PointerDefinedevaluator_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitConstant_37d1251d_PMevaluator_visitConstant_37d1251d_SY$4a6ae32b_37d1251d__proof(self_V0: ShStruct1[Emb_10_Intint$$$_S_$$$],
  c_V0: ShStruct1[Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(c_V0): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  visitConstant_37d1251d_PMevaluator(self_V0, c_V0, u_V0)
}

function PointerDefinedevaluator_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitVariable_37d1251d_PMevaluator_visitVariable_37d1251d_SY$4a6ae32b_37d1251d__proof(self_V0: ShStruct1[Emb_10_Intint$$$_S_$$$],
  v_V0: ShStruct1[Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(v_V0): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  visitVariable_37d1251d_PMevaluator(self_V0, v_V0, u_V0)
}

function PointerDefinedvariable_37d1251d_T$$$_S_$$$$$$$_E_$$$_accept_37d1251d_PMvariable_accept_37d1251d_SY$b2c983df_37d1251d__proof(self_V0: ShStruct1[Ref],
  v_V0: Tuple2[Ref, Types], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_0((tuple2((box_Poly(self_V0): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_2(v_V0), 1 / u_V0)
  requires !(v_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  accept_37d1251d_PMvariable(self_V0, v_V0, u_V0)
}

function PointerDefinedchildrenCounter_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitAddition_37d1251d_PMchildrenCounter_visitAddition_37d1251d_SY$4a6ae32b_37d1251d__proof(self_V0: ShStruct1[Ref],
  a_V0: ShStruct2[Ref, Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(childrenCounter_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(a_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  visitAddition_37d1251d_PMchildrenCounter(self_V0, a_V0, u_V0)
}

function PointerDefinedchildrenCounter_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitVariable_37d1251d_PMchildrenCounter_visitVariable_37d1251d_SY$4a6ae32b_37d1251d__proof(self_V0: ShStruct1[Ref],
  v_V0: ShStruct1[Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(childrenCounter_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(v_V0): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  visitVariable_37d1251d_PMchildrenCounter(self_V0, v_V0, u_V0)
}

function PointerDefinedconstant_37d1251d_T$$$_S_$$$$$$$_E_$$$_accept_37d1251d_PMconstant_accept_37d1251d_SY$b2c983df_37d1251d__proof(self_V0: ShStruct1[Ref],
  v_V0: Tuple2[Ref, Types], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_0((tuple2((box_Poly(self_V0): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_2(v_V0), 1 / u_V0)
  requires !(v_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  accept_37d1251d_PMconstant(self_V0, v_V0, u_V0)
}

function PointerDefinedaddition_37d1251d_T$$$_S_$$$$$$$_E_$$$_accept_37d1251d_PMaddition_accept_37d1251d_SY$b2c983df_37d1251d__proof(self_V0: ShStruct2[Ref, Ref],
  v_V0: Tuple2[Ref, Types], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_0((tuple2((box_Poly(self_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_2(v_V0), 1 / u_V0)
  requires !(v_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
{
  accept_37d1251d_PMaddition(self_V0, v_V0, u_V0)
}

function PointerDefinedevaluator_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitAddition_37d1251d_PMevaluator_visitAddition_37d1251d_SY$4a6ae32b_37d1251d__proof(self_V0: ShStruct1[Emb_10_Intint$$$_S_$$$],
  a_V0: ShStruct2[Ref, Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(a_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  visitAddition_37d1251d_PMevaluator(self_V0, a_V0, u_V0)
}

function PointerDefinedchildrenCounter_37d1251d_T$$$_S_$$$$$$$_E_$$$_visitConstant_37d1251d_PMchildrenCounter_visitConstant_37d1251d_SY$4a6ae32b_37d1251d__proof(self_V0: ShStruct1[Ref],
  c_V0: ShStruct1[Ref], u_V0: Int): Int
  requires 1 <= u_V0 &&
    acc(dynamic_pred_2((tuple2((box_Poly(self_V0): Ref), pointer_Types(childrenCounter_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0) &&
    acc(dynamic_pred_0((tuple2((box_Poly(c_V0): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])), 1 /
    u_V0)
{
  visitConstant_37d1251d_PMchildrenCounter(self_V0, c_V0, u_V0)
}

// decreases 
function IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), wildcard)


predicate dynamic_pred_0_unknown(i: Tuple2[Ref, Types]) 

predicate dynamic_pred_0(i: Tuple2[Ref, Types]) {
  ((get1of2(i): Types) == pointer_Types(addition_37d1251d_T_Types()) ?
    (let fn$$0 ==
      ((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])) in
      acc((ShStructget0of2(fn$$0): Ref).Definednode_37d1251d_T$$$$_E_$$$, write) &&
      acc((ShStructget1of2(fn$$0): Ref).Definednode_37d1251d_T$$$$_E_$$$, write)) &&
    acc(dynamic_pred_0((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).Definednode_37d1251d_T$$$$_E_$$$), write) &&
    acc(dynamic_pred_0((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).Definednode_37d1251d_T$$$$_E_$$$), write) &&
    !((ShStructget0of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).Definednode_37d1251d_T$$$$_E_$$$ ==
    (tuple2(null, nil_Types()): Tuple2[Ref, Types])) &&
    !((ShStructget1of2((unbox_Poly((get0of2(i): Ref)): ShStruct2[Ref, Ref])): Ref).Definednode_37d1251d_T$$$$_E_$$$ ==
    (tuple2(null, nil_Types()): Tuple2[Ref, Types])) :
    ((get1of2(i): Types) == pointer_Types(constant_37d1251d_T_Types()) ?
      (let fn$$1 ==
        ((unbox_Poly((get0of2(i): Ref)): ShStruct1[Ref])) in
        acc((ShStructget0of1(fn$$1): Ref).Intint$$$$_E_$$$, write)) :
      ((get1of2(i): Types) == pointer_Types(variable_37d1251d_T_Types()) ?
        (let fn$$2 ==
          ((unbox_Poly((get0of2(i): Ref)): ShStruct1[Ref])) in
          acc((ShStructget0of1(fn$$2): Ref).Intint$$$$_E_$$$, write)) &&
        0 <=
        (ShStructget0of1((unbox_Poly((get0of2(i): Ref)): ShStruct1[Ref])): Ref).Intint$$$$_E_$$$ &&
        (ShStructget0of1((unbox_Poly((get0of2(i): Ref)): ShStruct1[Ref])): Ref).Intint$$$$_E_$$$ <
        10 :
        acc(dynamic_pred_0_unknown(i), write))))
}

predicate dynamic_pred_2_unknown(i: Tuple2[Ref, Types]) 

predicate dynamic_pred_2(i: Tuple2[Ref, Types]) {
  ((get1of2(i): Types) == pointer_Types(childrenCounter_37d1251d_T_Types()) ?
    true :
    ((get1of2(i): Types) == pointer_Types(evaluator_37d1251d_T_Types()) ?
      (let fn$$0 ==
        ((unbox_Poly((get0of2(i): Ref)): ShStruct1[Emb_10_Intint$$$_S_$$$])) in
        (forall fn$$1: Int ::
          { (ShArrayloc(unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$0): Emb_10_Intint$$$_S_$$$)),
          fn$$1): Ref) }
          0 <= fn$$1 && fn$$1 < 10 ==>
          acc((ShArrayloc(unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$0): Emb_10_Intint$$$_S_$$$)),
          fn$$1): Ref).Intint$$$$_E_$$$, write))) :
      acc(dynamic_pred_2_unknown(i), write)))
}

predicate ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types]) 

method childrenCounter_client_37d1251d_F()
{
  
  // decl 
  {
    
    
    
    // decl N0: *childrenCounter_37d1251d_T@°°, ev_V0: *childrenCounter_37d1251d_T@°°, N1: *variable_37d1251d_T@°°, a_V0: node_37d1251d_T°°, N2: *constant_37d1251d_T@°°, b_V0: node_37d1251d_T°°, N3: *addition_37d1251d_T@°°, c_V0: *addition_37d1251d_T@°°, res_V0: int°°
    {
      var res_V0: Int
      var c_V0: ShStruct2[Ref, Ref]
      var N3: ShStruct2[Ref, Ref]
      var b_V0: Tuple2[Ref, Types]
      var N2: ShStruct1[Ref]
      var a_V0: Tuple2[Ref, Types]
      var N1: ShStruct1[Ref]
      var ev_V0: ShStruct1[Ref]
      var N0: ShStruct1[Ref]
      
      // N0 = new(childrenCounter_37d1251d_T°{dflt[int°]})
      {
        var fn$$0: ShStruct1[Ref]
        inhale (let fn$$1 ==
            (fn$$0) in
            acc((ShStructget0of1(fn$$1): Ref).Intint$$$$_E_$$$, write)) &&
          (let fn$$2 ==
            (fn$$0) in
            (let fn$$3 ==
              ((tuple1(0): Tuple1[Int])) in
              (ShStructget0of1(fn$$2): Ref).Intint$$$$_E_$$$ ==
              (get0of1(fn$$3): Int)))
        N0 := fn$$0
      }
      
      // init ev_V0
      inhale ev_V0 == shStructDefault_$fA_Intint$$$_S_$$$$()
      
      // ev_V0 = N0
      ev_V0 := N0
      
      // fold acc(ev_V0.mem2())
      fold acc(dynamic_pred_2((tuple2((box_Poly(ev_V0): Ref), pointer_Types(childrenCounter_37d1251d_T_Types())): Tuple2[Ref, Types])), write)
      
      // N1 = new(variable_37d1251d_T°{0})
      {
        var fn$$4: ShStruct1[Ref]
        inhale (let fn$$5 ==
            (fn$$4) in
            acc((ShStructget0of1(fn$$5): Ref).Intint$$$$_E_$$$, write)) &&
          (let fn$$6 ==
            (fn$$4) in
            (let fn$$7 ==
              ((tuple1(0): Tuple1[Int])) in
              (ShStructget0of1(fn$$6): Ref).Intint$$$$_E_$$$ ==
              (get0of1(fn$$7): Int)))
        N1 := fn$$4
      }
      
      // init a_V0
      inhale a_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
      
      // a_V0 = toInterface(N1)
      a_V0 := (tuple2((box_Poly(N1): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])
      
      // fold acc(a_V0.mem())
      fold acc(dynamic_pred_0(a_V0), write)
      
      // N2 = new(constant_37d1251d_T°{42})
      {
        var fn$$8: ShStruct1[Ref]
        inhale (let fn$$9 ==
            (fn$$8) in
            acc((ShStructget0of1(fn$$9): Ref).Intint$$$$_E_$$$, write)) &&
          (let fn$$10 ==
            (fn$$8) in
            (let fn$$11 ==
              ((tuple1(42): Tuple1[Int])) in
              (ShStructget0of1(fn$$10): Ref).Intint$$$$_E_$$$ ==
              (get0of1(fn$$11): Int)))
        N2 := fn$$8
      }
      
      // init b_V0
      inhale b_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
      
      // b_V0 = toInterface(N2)
      b_V0 := (tuple2((box_Poly(N2): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])
      
      // fold acc(b_V0.mem())
      fold acc(dynamic_pred_0(b_V0), write)
      
      // N3 = new(addition_37d1251d_T°{a_V0, b_V0})
      {
        var fn$$12: ShStruct2[Ref, Ref]
        inhale (let fn$$13 ==
            (fn$$12) in
            acc((ShStructget0of2(fn$$13): Ref).Definednode_37d1251d_T$$$$_E_$$$, write) &&
            acc((ShStructget1of2(fn$$13): Ref).Definednode_37d1251d_T$$$$_E_$$$, write)) &&
          (let fn$$14 ==
            (fn$$12) in
            (let fn$$15 ==
              ((tuple2(a_V0, b_V0): Tuple2[Tuple2[Ref, Types], Tuple2[Ref, Types]])) in
              (ShStructget0of2(fn$$14): Ref).Definednode_37d1251d_T$$$$_E_$$$ ==
              (get0of2(fn$$15): Tuple2[Ref, Types]) &&
              (ShStructget1of2(fn$$14): Ref).Definednode_37d1251d_T$$$$_E_$$$ ==
              (get1of2(fn$$15): Tuple2[Ref, Types])))
        N3 := fn$$12
      }
      
      // init c_V0
      inhale c_V0 ==
        shStructDefault_$leftA_Definednode_37d1251d_T$$$_S_$$$_rightA_Definednode_37d1251d_T$$$_S_$$$$()
      
      // c_V0 = N3
      c_V0 := N3
      
      // fold acc(c_V0.mem())
      fold acc(dynamic_pred_0((tuple2((box_Poly(c_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), write)
      
      // init res_V0
      inhale res_V0 == 0
      
      // res_V0 = ev_V0.visitAddition(c_V0, 2)
      res_V0 := visitAddition_37d1251d_PMchildrenCounter(ev_V0, c_V0, 2)
    }
    label returnLabel
  }
}

method evaluator_client_37d1251d_F()
{
  
  // decl 
  {
    
    
    
    // decl N0: *evaluator_37d1251d_T@°°, ev_V0: *evaluator_37d1251d_T@°°, N1: *variable_37d1251d_T@°°, a_V0: node_37d1251d_T°°, N2: *constant_37d1251d_T@°°, b_V0: node_37d1251d_T°°, N3: *addition_37d1251d_T@°°, c_V0: *addition_37d1251d_T@°°, res_V0: int°°
    {
      var res_V0: Int
      var c_V0: ShStruct2[Ref, Ref]
      var N3: ShStruct2[Ref, Ref]
      var b_V0: Tuple2[Ref, Types]
      var N2: ShStruct1[Ref]
      var a_V0: Tuple2[Ref, Types]
      var N1: ShStruct1[Ref]
      var ev_V0: ShStruct1[Emb_10_Intint$$$_S_$$$]
      var N0: ShStruct1[Emb_10_Intint$$$_S_$$$]
      
      // N0 = new(evaluator_37d1251d_T°{[10]int° { 0:7, 4:99 }})
      {
        var fn$$0: ShStruct1[Emb_10_Intint$$$_S_$$$]
        inhale (let fn$$1 ==
            (fn$$0) in
            (forall fn$$2: Int ::
              { (ShArrayloc(unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$1): Emb_10_Intint$$$_S_$$$)),
              fn$$2): Ref) }
              0 <= fn$$2 && fn$$2 < 10 ==>
              acc((ShArrayloc(unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$1): Emb_10_Intint$$$_S_$$$)),
              fn$$2): Ref).Intint$$$$_E_$$$, write))) &&
          (let fn$$3 ==
            (fn$$0) in
            (let fn$$4 ==
              ((tuple1(box_Emb_10_Intint$$$$_E_$$$_Seq_Int(Seq(7, 0, 0, 0, 99) ++
              sequenceEmpty_Intint$$$$_E_$$$(5))): Tuple1[Emb_10_Intint$$$$_E_$$$])) in
              (let fn$$5 ==
                ((ShStructget0of1(fn$$3): Emb_10_Intint$$$_S_$$$)) in
                (let fn$$6 ==
                  ((get0of1(fn$$4): Emb_10_Intint$$$$_E_$$$)) in
                  (forall fn$$7: Int ::
                    { (ShArrayloc(unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref(fn$$5),
                    fn$$7): Ref) }
                    { unbox_Emb_10_Intint$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7] }
                    0 <= fn$$7 && fn$$7 < 10 ==>
                    (ShArrayloc(unbox_Emb_10_Intint$$$_S_$$$_ShArray_Ref(fn$$5),
                    fn$$7): Ref).Intint$$$$_E_$$$ ==
                    unbox_Emb_10_Intint$$$$_E_$$$_Seq_Int(fn$$6)[fn$$7])))))
        N0 := fn$$0
      }
      
      // init ev_V0
      inhale ev_V0 ==
        shStructDefault_$storeA_Array10Intint$$$_S_$$$$$$_S_$$$$()
      
      // ev_V0 = N0
      ev_V0 := N0
      
      // fold acc(ev_V0.mem2())
      fold acc(dynamic_pred_2((tuple2((box_Poly(ev_V0): Ref), pointer_Types(evaluator_37d1251d_T_Types())): Tuple2[Ref, Types])), write)
      
      // N1 = new(variable_37d1251d_T°{0})
      {
        var fn$$8: ShStruct1[Ref]
        inhale (let fn$$9 ==
            (fn$$8) in
            acc((ShStructget0of1(fn$$9): Ref).Intint$$$$_E_$$$, write)) &&
          (let fn$$10 ==
            (fn$$8) in
            (let fn$$11 ==
              ((tuple1(0): Tuple1[Int])) in
              (ShStructget0of1(fn$$10): Ref).Intint$$$$_E_$$$ ==
              (get0of1(fn$$11): Int)))
        N1 := fn$$8
      }
      
      // init a_V0
      inhale a_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
      
      // a_V0 = toInterface(N1)
      a_V0 := (tuple2((box_Poly(N1): Ref), pointer_Types(variable_37d1251d_T_Types())): Tuple2[Ref, Types])
      
      // fold acc(a_V0.mem())
      fold acc(dynamic_pred_0(a_V0), write)
      
      // N2 = new(constant_37d1251d_T°{42})
      {
        var fn$$12: ShStruct1[Ref]
        inhale (let fn$$13 ==
            (fn$$12) in
            acc((ShStructget0of1(fn$$13): Ref).Intint$$$$_E_$$$, write)) &&
          (let fn$$14 ==
            (fn$$12) in
            (let fn$$15 ==
              ((tuple1(42): Tuple1[Int])) in
              (ShStructget0of1(fn$$14): Ref).Intint$$$$_E_$$$ ==
              (get0of1(fn$$15): Int)))
        N2 := fn$$12
      }
      
      // init b_V0
      inhale b_V0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
      
      // b_V0 = toInterface(N2)
      b_V0 := (tuple2((box_Poly(N2): Ref), pointer_Types(constant_37d1251d_T_Types())): Tuple2[Ref, Types])
      
      // fold acc(b_V0.mem())
      fold acc(dynamic_pred_0(b_V0), write)
      
      // N3 = new(addition_37d1251d_T°{a_V0, b_V0})
      {
        var fn$$16: ShStruct2[Ref, Ref]
        inhale (let fn$$17 ==
            (fn$$16) in
            acc((ShStructget0of2(fn$$17): Ref).Definednode_37d1251d_T$$$$_E_$$$, write) &&
            acc((ShStructget1of2(fn$$17): Ref).Definednode_37d1251d_T$$$$_E_$$$, write)) &&
          (let fn$$18 ==
            (fn$$16) in
            (let fn$$19 ==
              ((tuple2(a_V0, b_V0): Tuple2[Tuple2[Ref, Types], Tuple2[Ref, Types]])) in
              (ShStructget0of2(fn$$18): Ref).Definednode_37d1251d_T$$$$_E_$$$ ==
              (get0of2(fn$$19): Tuple2[Ref, Types]) &&
              (ShStructget1of2(fn$$18): Ref).Definednode_37d1251d_T$$$$_E_$$$ ==
              (get1of2(fn$$19): Tuple2[Ref, Types])))
        N3 := fn$$16
      }
      
      // init c_V0
      inhale c_V0 ==
        shStructDefault_$leftA_Definednode_37d1251d_T$$$_S_$$$_rightA_Definednode_37d1251d_T$$$_S_$$$$()
      
      // c_V0 = N3
      c_V0 := N3
      
      // fold acc(c_V0.mem())
      fold acc(dynamic_pred_0((tuple2((box_Poly(c_V0): Ref), pointer_Types(addition_37d1251d_T_Types())): Tuple2[Ref, Types])), write)
      
      // init res_V0
      inhale res_V0 == 0
      
      // res_V0 = ev_V0.visitAddition(c_V0, 2)
      res_V0 := visitAddition_37d1251d_PMevaluator(ev_V0, c_V0, 2)
      
      // assert res_V0 == 49
      assert res_V0 == 49
    }
    label returnLabel
  }
}

method isAstNode_37d1251d_F(n_V0: Tuple2[Ref, Types])
  returns (res_V0: Bool)
  ensures res_V0 ==>
    typeOfInterface_Y$b2c983df_37d1251d_(n_V0) ==
    pointer_Types(variable_37d1251d_T_Types()) ||
    typeOfInterface_Y$b2c983df_37d1251d_(n_V0) ==
    pointer_Types(constant_37d1251d_T_Types()) ||
    typeOfInterface_Y$b2c983df_37d1251d_(n_V0) ==
    pointer_Types(addition_37d1251d_T_Types())
{
  inhale res_V0 == false
  
  // decl n_V0_CN0: node_37d1251d_T°°, res_V0_CN1: bool°°
  {
    var res_V0_CN1: Bool
    var n_V0_CN0: Tuple2[Ref, Types]
    
    
    
    // init n_V0_CN0
    inhale n_V0_CN0 == (tuple2(null, nil_Types()): Tuple2[Ref, Types])
    
    // init res_V0_CN1
    inhale res_V0_CN1 == false
    
    // n_V0_CN0 = n_V0
    n_V0_CN0 := n_V0
    
    // decl 
    
    // decl v_V1: *variable_37d1251d_T@°°, ok_V1: bool°°, c_V1: *constant_37d1251d_T@°°, a_V1: *addition_37d1251d_T@°°
    {
      var a_V1: ShStruct2[Ref, Ref]
      var c_V1: ShStruct1[Ref]
      var ok_V1: Bool
      var v_V1: ShStruct1[Ref]
      
      // init v_V1
      inhale v_V1 == shStructDefault_$idA_Intint$$$_S_$$$$()
      
      // init ok_V1
      inhale ok_V1 == false
      
      // decl N6: *variable_37d1251d_T@°°, N7: bool°°
      {
        var N7: Bool
        var N6: ShStruct1[Ref]
        
        // N6, N7 = n_V0_CN0.(*variable_37d1251d_T@°)
        N7 := typeOfInterface_Y$b2c983df_37d1251d_(n_V0_CN0) ==
          pointer_Types(variable_37d1251d_T_Types())
        if (N7) {
          N6 := (unbox_Poly((get0of2(n_V0_CN0): Ref)): ShStruct1[Ref])
        } else {
          N6 := shStructDefault_$idA_Intint$$$_S_$$$$()}
        
        // v_V1 = N6
        v_V1 := N6
        
        // ok_V1 = N7
        ok_V1 := N7
      }
      
      // if(ok_V1) {...} else {...}
      if (ok_V1) {
        
        // decl 
        
        // res_V0_CN1 = true
        res_V0_CN1 := true
        
        // return
        goto returnLabel
      } else {
        
        // init c_V1
        inhale c_V1 == shStructDefault_$valueA_Intint$$$_S_$$$$()
        
        // decl N4: *constant_37d1251d_T@°°, N5: bool°°
        {
          var N5: Bool
          var N4: ShStruct1[Ref]
          
          // N4, N5 = n_V0_CN0.(*constant_37d1251d_T@°)
          N5 := typeOfInterface_Y$b2c983df_37d1251d_(n_V0_CN0) ==
            pointer_Types(constant_37d1251d_T_Types())
          if (N5) {
            N4 := (unbox_Poly((get0of2(n_V0_CN0): Ref)): ShStruct1[Ref])
          } else {
            N4 := shStructDefault_$valueA_Intint$$$_S_$$$$()}
          
          // c_V1 = N4
          c_V1 := N4
          
          // ok_V1 = N5
          ok_V1 := N5
        }
        
        // if(ok_V1) {...} else {...}
        if (ok_V1) {
          
          // decl 
          
          // res_V0_CN1 = true
          res_V0_CN1 := true
          
          // return
          goto returnLabel
        } else {
          
          // init a_V1
          inhale a_V1 ==
            shStructDefault_$leftA_Definednode_37d1251d_T$$$_S_$$$_rightA_Definednode_37d1251d_T$$$_S_$$$$()
          
          // decl N2: *addition_37d1251d_T@°°, N3: bool°°
          {
            var N3: Bool
            var N2: ShStruct2[Ref, Ref]
            
            // N2, N3 = n_V0_CN0.(*addition_37d1251d_T@°)
            N3 := typeOfInterface_Y$b2c983df_37d1251d_(n_V0_CN0) ==
              pointer_Types(addition_37d1251d_T_Types())
            if (N3) {
              N2 := (unbox_Poly((get0of2(n_V0_CN0): Ref)): ShStruct2[Ref, Ref])
            } else {
              N2 := shStructDefault_$leftA_Definednode_37d1251d_T$$$_S_$$$_rightA_Definednode_37d1251d_T$$$_S_$$$$()}
            
            // a_V1 = N2
            a_V1 := N2
            
            // ok_V1 = N3
            ok_V1 := N3
          }
          
          // if(ok_V1) {...} else {...}
          if (ok_V1) {
            
            // decl 
            
            // res_V0_CN1 = true
            res_V0_CN1 := true
            
            // return
            goto returnLabel
          } else {
            
            // decl 
            
            // res_V0_CN1 = false
            res_V0_CN1 := false
            
            // return
            goto returnLabel
          }
        }
      }
    }
    label returnLabel
    
    // res_V0 = res_V0_CN1
    res_V0 := res_V0_CN1
  }
}

method $IMPORTS_37d1251d_37d1251d()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method $IMPORTS_37d1251d_bffb141e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_37d1251d_53234bf0()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method panic_bffb141e_F(v_V0: Tuple2[Ref, Types])
  requires false


// decreases 
method Error_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)


// decreases 
method Duplicate_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e_(thisItf) ==>
    acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)


// decreases 
method IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), wildcard)
  }
}