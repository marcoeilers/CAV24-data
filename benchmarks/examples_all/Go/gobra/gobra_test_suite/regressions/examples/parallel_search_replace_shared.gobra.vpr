domain String  {
  
  function strLen(id: Int): Int 
  
  function strConcat(l: Int, r: Int): Int 
  
  unique function stringLit(): Int 
  
  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
}

domain Pred_S1  {
  
  function Pred_S1_make_0(x0: ShStruct1[Emb_3_Intuint32$$$_S_$$$], x1: Int,
  x2: Int): Pred_S1 
  
  function Pred_S1_default(): Pred_S1 
}

domain Pred_S0  {
  
  function Pred_S0_make_2(x0: Seq[Pred_S0], x1: Seq[Perm]): Pred_S0 
  
  function Pred_S0_make_1(x0: Seq[Int], x1: Slice[Ref], x2: Int, x3: Int): Pred_S0 
  
  function Pred_S0_make_0(): Pred_S0 
  
  function Pred_S0_default(): Pred_S0 
}

domain Types  {
  
  function empty_interface_Types(): Types 
  
  unique function empty_interface_Types_tag(): Int 
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool 
  
  function nil_Types(): Types 
  
  unique function nil_Types_tag(): Int 
  
  function comparableType_Types(t: Types): Bool 
  
  function tag_Types(t: Types): Int 
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain Emb_3_Intuint32$$$_S_$$$  {
  
  
}

domain Emb_1_Intint$$$_S_$$$  {
  
  
}

domain Emb_3_Intuint32$$$$_E_$$$  {
  
  
}

domain ShStruct1[T0]  {
  
  function ShStructrev0of1(v0: T0): ShStruct1[T0] 
  
  function ShStructget0of1(x: ShStruct1[T0]): T0 
  
  axiom {
    (forall x: ShStruct1[T0], y: ShStruct1[T0] ::
      { (eq(x, y): Bool) }
      (eq(x, y): Bool) ==
      ((ShStructget0of1(x): T0) == (ShStructget0of1(y): T0)))
  }
  
  axiom {
    (forall x: ShStruct1[T0] ::
      { (ShStructget0of1(x): T0) }
      (ShStructrev0of1((ShStructget0of1(x): T0)): ShStruct1[T0]) == x)
  }
}

domain ShStruct2[T0, T1]  {
  
  function ShStructrev0of2(v0: T0): ShStruct2[T0, T1] 
  
  function ShStructrev1of2(v1: T1): ShStruct2[T0, T1] 
  
  function ShStructget0of2(x: ShStruct2[T0, T1]): T0 
  
  function ShStructget1of2(x: ShStruct2[T0, T1]): T1 
  
  axiom {
    (forall x: ShStruct2[T0, T1], y: ShStruct2[T0, T1] ::
      { (eq(x, y): Bool) }
      (eq(x, y): Bool) ==
      ((ShStructget0of2(x): T0) == (ShStructget0of2(y): T0) &&
      (ShStructget1of2(x): T1) == (ShStructget1of2(y): T1)))
  }
  
  axiom {
    (forall x: ShStruct2[T0, T1] ::
      { (ShStructget0of2(x): T0) }
      (ShStructrev0of2((ShStructget0of2(x): T0)): ShStruct2[T0, T1]) == x)
  }
  
  axiom {
    (forall x: ShStruct2[T0, T1] ::
      { (ShStructget1of2(x): T1) }
      (ShStructrev1of2((ShStructget1of2(x): T1)): ShStruct2[T0, T1]) == x)
  }
}

domain Equality[T]  {
  
  function eq(l: T, r: T): Bool 
  
  axiom {
    (forall l: T, r: T ::
      { (eq(l, r): Bool) }
      (eq(l, r): Bool) == (l == r))
  }
}

domain Tuple1[T0]  {
  
  function tuple1(t0: T0): Tuple1[T0] 
  
  function get0of1(p: Tuple1[T0]): T0 
  
  axiom getter_over_tuple1 {
    (forall t0: T0 ::
      { (tuple1(t0): Tuple1[T0]) }
      (get0of1((tuple1(t0): Tuple1[T0])): T0) == t0)
  }
  
  axiom tuple1_over_getter {
    (forall p: Tuple1[T0] ::
      { (get0of1(p): T0) }
      (tuple1((get0of1(p): T0)): Tuple1[T0]) == p)
  }
}

domain Tuple2[T0, T1]  {
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1] 
  
  function get0of2(p: Tuple2[T0, T1]): T0 
  
  function get1of2(p: Tuple2[T0, T1]): T1 
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Slice[T]  {
  
  function sarray(s: Slice[T]): ShArray[T] 
  
  function soffset(s: Slice[T]): Int 
  
  function slen(s: Slice[T]): Int 
  
  function scap(s: Slice[T]): Int 
  
  function smake(a: ShArray[T], o: Int, l: Int, c: Int): Slice[T] 
  
  axiom {
    (forall s: Slice[T] :: { (soffset(s): Int) } 0 <= (soffset(s): Int))
  }
  
  axiom {
    (forall s: Slice[T] :: { (slen(s): Int) } 0 <= (slen(s): Int))
  }
  
  axiom {
    (forall s: Slice[T] ::
      { (slen(s): Int) }
      { (scap(s): Int) }
      (slen(s): Int) <= (scap(s): Int))
  }
  
  axiom {
    (forall s: Slice[T] ::
      { (soffset(s): Int), (scap(s): Int) }
      { (ShArraylen((sarray(s): ShArray[T])): Int) }
      (soffset(s): Int) + (scap(s): Int) <=
      (ShArraylen((sarray(s): ShArray[T])): Int))
  }
  
  axiom {
    (forall s: Slice[T] ::
      { (sarray(s): ShArray[T]) }
      { (soffset(s): Int) }
      { (slen(s): Int) }
      { (scap(s): Int) }
      s ==
      (smake((sarray(s): ShArray[T]), (soffset(s): Int), (slen(s): Int), (scap(s): Int)): Slice[T]))
  }
  
  axiom deconstructor_over_constructor_array {
    (forall a: ShArray[T], o: Int, l: Int, c: Int ::
      { (sarray((smake(a, o, l, c): Slice[T])): ShArray[T]) }
      0 <= o && (0 <= l && (l <= c && o + c <= (ShArraylen(a): Int))) ==>
      (sarray((smake(a, o, l, c): Slice[T])): ShArray[T]) == a)
  }
  
  axiom deconstructor_over_constructor_offset {
    (forall a: ShArray[T], o: Int, l: Int, c: Int ::
      { (soffset((smake(a, o, l, c): Slice[T])): Int) }
      0 <= o && (0 <= l && (l <= c && o + c <= (ShArraylen(a): Int))) ==>
      (soffset((smake(a, o, l, c): Slice[T])): Int) == o)
  }
  
  axiom deconstructor_over_constructor_len {
    (forall a: ShArray[T], o: Int, l: Int, c: Int ::
      { (slen((smake(a, o, l, c): Slice[T])): Int) }
      0 <= o && (0 <= l && (l <= c && o + c <= (ShArraylen(a): Int))) ==>
      (slen((smake(a, o, l, c): Slice[T])): Int) == l)
  }
  
  axiom deconstructor_over_constructor_cap {
    (forall a: ShArray[T], o: Int, l: Int, c: Int ::
      { (scap((smake(a, o, l, c): Slice[T])): Int) }
      0 <= o && (0 <= l && (l <= c && o + c <= (ShArraylen(a): Int))) ==>
      (scap((smake(a, o, l, c): Slice[T])): Int) == c)
  }
}

domain ShArray[T]  {
  
  function ShArrayloc(a: ShArray[T], i: Int): T 
  
  function ShArraylen(a: ShArray[T]): Int 
  
  function ShArrayfirst(r: T): ShArray[T] 
  
  function ShArraysecond(r: T): Int 
  
  axiom {
    (forall a: ShArray[T], i: Int ::
      { (ShArrayloc(a, i): T) }
      0 <= i && i < (ShArraylen(a): Int) ==>
      (ShArrayfirst((ShArrayloc(a, i): T)): ShArray[T]) == a &&
      (ShArraysecond((ShArrayloc(a, i): T)): Int) == i)
  }
  
  axiom {
    (forall a: ShArray[T] ::
      { (ShArraylen(a): Int) }
      (ShArraylen(a): Int) >= 0)
  }
}

domain WellFoundedOrder[T]  {
  
  function decreasing(arg1: T, arg2: T): Bool 
  
  function bounded(arg1: T): Bool 
}

field Intint$$$$_E_$$$: Int

field PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$: ShStruct1[Emb_3_Intuint32$$$_S_$$$]

field Intint32$$$$_E_$$$: Int

field ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$: Int

field Intuint32$$$$_E_$$$: Int

field SliceIntint$$$_S_$$$$$$$_E_$$$: Slice[Ref]

field Bool$$$$_E_$$$: Bool

function SendGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int): Pred_S0
  requires acc(SendChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), wildcard)


function BufferSize_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int): Int
  requires acc(IsChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), wildcard)


function RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int): Pred_S0
  requires acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), wildcard)


function RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int): Pred_S1
  requires acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), wildcard)


function SendGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int): Pred_S1
  requires acc(SendChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), wildcard)


// decreases _
function sliceDefault_Intint$$$_S_$$$(): Slice[Ref]
  ensures (soffset(result): Int) == 0
  ensures (slen(result): Int) == 0
  ensures (scap(result): Int) == 0
  ensures (sarray(result): ShArray[Ref]) ==
    unbox_Emb_1_Intint$$$_S_$$$_ShArray_Ref(box_Emb_1_Intint$$$_S_$$$_ShArray_Ref(arrayNil_1_Intint$$$_S_$$$()))


// decreases _
function ssliceFromSlice_Ref(s: Slice[Ref], i: Int, j: Int): Slice[Ref]
  requires 0 <= i
  requires i <= j
  requires j <= (scap(s): Int)
  ensures (soffset(result): Int) == (soffset(s): Int) + i
  ensures (slen(result): Int) == j - i
  ensures (scap(result): Int) == (scap(s): Int) - i
  ensures (sarray(result): ShArray[Ref]) == (sarray(s): ShArray[Ref])


// decreases _
function sfullSliceFromSlice_Ref(s: Slice[Ref], i: Int, j: Int, k: Int): Slice[Ref]
  requires 0 <= i
  requires i <= j
  requires j <= k
  requires k <= (scap(s): Int)
  ensures (soffset(result): Int) == (soffset(s): Int) + i
  ensures (slen(result): Int) == j - i
  ensures (scap(result): Int) == k - i
  ensures (sarray(result): ShArray[Ref]) == (sarray(s): ShArray[Ref])


// decreases _
function sfullSliceFromArray_Ref(a: ShArray[Ref], i: Int, j: Int, k: Int): Slice[Ref]
  requires 0 <= i
  requires i <= j
  requires j <= k
  requires k <= (ShArraylen(a): Int)
  ensures (soffset(result): Int) == i
  ensures (slen(result): Int) == j - i
  ensures (scap(result): Int) == k - i
  ensures (sarray(result): ShArray[Ref]) == a


function sconstruct_Ref(a: ShArray[Ref], offset: Int, len: Int, cap: Int): Slice[Ref]
  requires 0 <= offset
  requires 0 <= len
  requires len <= cap
  requires offset + cap <= (ShArraylen(a): Int)
  ensures (sarray(result): ShArray[Ref]) == a
  ensures (soffset(result): Int) == offset
  ensures (slen(result): Int) == len
  ensures (scap(result): Int) == cap


function arrayDefault_3_Intuint32$$$$_E_$$$(): Emb_3_Intuint32$$$$_E_$$$
  ensures |unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(result)| == 3
  ensures (forall idx: Int ::
      { unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(result)[idx] }
      0 <= idx && idx < 3 ==>
      unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(result)[idx] == 0)


// decreases _
function arrayNil_3_Intuint32$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int ::
      { (ShArrayloc(result, idx): Ref) }
      (ShArrayloc(result, idx): Ref) == null)


// decreases _
function arrayNil_1_Intint$$$_S_$$$(): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1
  ensures (forall idx: Int ::
      { (ShArrayloc(result, idx): Ref) }
      (ShArrayloc(result, idx): Ref) == null)


// decreases _
function box_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_3_Intuint32$$$_S_$$$
  requires (ShArraylen(x): Int) == 3 ||
    x == arrayNil_3_Intuint32$$$_S_$$$()
  ensures unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(result) == x


// decreases _
function unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(y: Emb_3_Intuint32$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 3 ||
    result == arrayNil_3_Intuint32$$$_S_$$$()
  ensures box_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(result) == y


// decreases _
function box_Emb_1_Intint$$$_S_$$$_ShArray_Ref(x: ShArray[Ref]): Emb_1_Intint$$$_S_$$$
  requires (ShArraylen(x): Int) == 1 || x == arrayNil_1_Intint$$$_S_$$$()
  ensures unbox_Emb_1_Intint$$$_S_$$$_ShArray_Ref(result) == x


// decreases _
function unbox_Emb_1_Intint$$$_S_$$$_ShArray_Ref(y: Emb_1_Intint$$$_S_$$$): ShArray[Ref]
  ensures (ShArraylen(result): Int) == 1 ||
    result == arrayNil_1_Intint$$$_S_$$$()
  ensures box_Emb_1_Intint$$$_S_$$$_ShArray_Ref(result) == y


// decreases _
function box_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(x: Seq[Int]): Emb_3_Intuint32$$$$_E_$$$
  requires |x| == 3
  ensures unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(result) == x


// decreases _
function unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(y: Emb_3_Intuint32$$$$_E_$$$): Seq[Int]
  ensures |result| == 3
  ensures box_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(result) == y


// decreases _
function shStructDefault_$state1A_Array3Intuint32$$$_S_$$$$$$_S_$$$$(): ShStruct1[Emb_3_Intuint32$$$_S_$$$]
  ensures (ShStructget0of1(result): Emb_3_Intuint32$$$_S_$$$) ==
    box_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(arrayNil_3_Intuint32$$$_S_$$$())


function sadd(left: Int, right: Int): Int
  ensures result == left + right
{
  left + right
}

function toSeq_69c8726d_F(s_V0: Slice[Ref]): Seq[Int]
  requires (forall j_V1: Int ::
      { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      j_V1)): Ref) }
      0 <= j_V1 && j_V1 < (slen(s_V0): Int) ==>
      acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      j_V1)): Ref).Intint$$$$_E_$$$, wildcard))
  ensures |result| == (slen(s_V0): Int)
  ensures (forall j_V2: Int ::
      { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      j_V2)): Ref).Intint$$$$_E_$$$ }
      { result[j_V2] }
      0 <= j_V2 && j_V2 < (slen(s_V0): Int) ==>
      (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), j_V2)): Ref).Intint$$$$_E_$$$ ==
      result[j_V2])
{
  ((slen(s_V0): Int) == 0 ?
    Seq[Int]() :
    toSeq_69c8726d_F(ssliceFromSlice_Ref(s_V0, 0, (slen(s_V0): Int) - 1)) ++
    Seq((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
    (slen(s_V0): Int) - 1)): Ref).Intint$$$$_E_$$$))
}

// decreases 
function IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), wildcard)


function LockInv_40249c7a_PMMutex(m_V0: ShStruct2[Ref, Ref]): Pred_S0
  requires acc(LockP_40249c7a_PMMutex(m_V0), wildcard)


function WaitMode_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$]): Bool
  requires acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), wildcard)


predicate Closed_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int) 

predicate IsChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int) 

predicate RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int) 

predicate SendChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int) 

predicate PredTrue_BF() {
  true
}

predicate eval_Pred_S1(p: Pred_S1, y0: Slice[Ref]) 

predicate eval_Pred_S0(p: Pred_S0) 

predicate replacedPerm_69c8726d_F(s0_V0: Seq[Int], s_V0: Slice[Ref], x_V0: Int,
  y_V0: Int) {
  |s0_V0| == (slen(s_V0): Int) &&
  (forall i_V1: Int ::
    { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref) }
    0 <= i_V1 && i_V1 < (slen(s_V0): Int) ==>
    acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
    i_V1)): Ref).Intint$$$$_E_$$$, write)) &&
  (forall i_V1: Int ::
    { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).Intint$$$$_E_$$$ }
    0 <= i_V1 && i_V1 < (slen(s_V0): Int) ==>
    (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref).Intint$$$$_E_$$$ ==
    (s0_V0[i_V1] == x_V0 ? y_V0 : s0_V0[i_V1]))
}

predicate messagePerm_69c8726d_F(wg_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  s_V0: Slice[Ref], x_V0: Int, y_V0: Int) {
  (forall i_V1: Int ::
    { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V1)): Ref) }
    0 <= i_V1 && i_V1 < (slen(s_V0): Int) ==>
    acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
    i_V1)): Ref).Intint$$$$_E_$$$, write)) &&
  acc(UnitDebt_40249c7a_PMWaitGroup(wg_V0, Pred_S0_make_1(toSeq_69c8726d_F(s_V0),
  s_V0, x_V0, y_V0)), write)
}

predicate ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types]) 

predicate LockP_40249c7a_PMMutex(m_V0: ShStruct2[Ref, Ref]) 

predicate UnlockP_40249c7a_PMMutex(m_V0: ShStruct2[Ref, Ref]) 

predicate WaitGroupP_40249c7a_PMWaitGroup(wg_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$]) 

predicate WaitGroupStarted_40249c7a_PMWaitGroup(wg_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$]) 

predicate UnitDebt_40249c7a_PMWaitGroup(wg_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  p_V0: Pred_S0) 

predicate Token_40249c7a_PMWaitGroup(wg_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  t_V0: Pred_S0) 

predicate TokenById_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  P_V0: Pred_S0, i_V0: Int) {
  acc(Token_40249c7a_PMWaitGroup(g_V0, P_V0), write)
}

predicate InjEval_40249c7a_F(P_V0: Pred_S0, i_V0: Int) {
  acc(eval_Pred_S0(P_V0), write)
}

predicate CollectFractions_40249c7a_F(P_V0: Seq[Pred_S0], perms_V0: Seq[Perm]) {
  |P_V0| == |perms_V0| &&
  (forall i_V1: Int, j_V1: Int ::
    { P_V0[i_V1], P_V0[j_V1] }
    0 <= i_V1 && i_V1 < j_V1 && j_V1 < |P_V0| ==>
    !(P_V0[i_V1] == P_V0[j_V1])) &&
  ((forall i_V2: Int ::
    { perms_V0[i_V2] }
    0 <= i_V2 && i_V2 < |P_V0| ==> perms_V0[i_V2] >= 0 / 1) &&
  (forall i_V2: Int ::
    { P_V0[i_V2] }
    { perms_V0[i_V2] }
    0 <= i_V2 && i_V2 < |P_V0| ==>
    acc(eval_Pred_S0(P_V0[i_V2]), perms_V0[i_V2])))
}

// decreases _
method Init_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c: Int, A: Pred_S1,
  B: Pred_S0)
  requires acc(IsChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), write)
  requires BufferSize_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c) >
    0 ==>
    B == Pred_S0_make_0()
  ensures acc(SendChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), write) &&
    acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c), write)
  ensures SendGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c) ==
    A &&
    SendGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c) == B
  ensures RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c) ==
    B &&
    RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c) == A


method worker_69c8726d_F(c_V0: Int, wg_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  x_V0: Int, y_V0: Int)
  requires acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0), wildcard)
  requires RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0) ==
    Pred_S0_make_0()
  requires RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0) ==
    Pred_S1_make_0(wg_V0, x_V0, y_V0)
{
  
  // decl c_V0_CN0: chan []int@°@@, wg_V0_CN1: *WaitGroup_40249c7a_T@@@, x_V0_CN2: int@@, y_V0_CN3: int@@
  {
    var y_V0_CN3: Ref
    var x_V0_CN2: Ref
    var wg_V0_CN1: Ref
    var c_V0_CN0: Ref
    
    
    
    // init c_V0_CN0
    inhale acc(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$, write) &&
      (c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$ == 0 &&
      !(c_V0_CN0 == null))
    
    // init wg_V0_CN1
    inhale acc(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$, write) &&
      (wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$ ==
      shStructDefault_$state1A_Array3Intuint32$$$_S_$$$$$$_S_$$$$() &&
      !(wg_V0_CN1 == null))
    
    // init x_V0_CN2
    inhale acc(x_V0_CN2.Intint$$$$_E_$$$, write) &&
      (x_V0_CN2.Intint$$$$_E_$$$ == 0 && !(x_V0_CN2 == null))
    
    // init y_V0_CN3
    inhale acc(y_V0_CN3.Intint$$$$_E_$$$, write) &&
      (y_V0_CN3.Intint$$$$_E_$$$ == 0 && !(y_V0_CN3 == null))
    
    // c_V0_CN0 = c_V0
    c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$ := c_V0
    
    // wg_V0_CN1 = wg_V0
    wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$ := wg_V0
    
    // x_V0_CN2 = x_V0
    x_V0_CN2.Intint$$$$_E_$$$ := x_V0
    
    // y_V0_CN3 = y_V0
    y_V0_CN3.Intint$$$$_E_$$$ := y_V0
    
    // decl 
    
    // fold acc(PredTrue_BF{}(), 2/1)
    fold acc(PredTrue_BF(), 2 / 1)
    exhale acc(PredTrue_BF(), 2 / 1)
    inhale acc(eval_Pred_S0(Pred_S0_make_0()), 2 / 1)
    
    // decl s_V1: []int@@@, ok_V1: bool@@, L$7$2$Break
    {
      var ok_V1: Ref
      var s_V1: Ref
      
      // init s_V1
      inhale acc(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$, write) &&
        (s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$ ==
        sliceDefault_Intint$$$_S_$$$() &&
        !(s_V1 == null))
      
      // init ok_V1
      inhale acc(ok_V1.Bool$$$$_E_$$$, write) &&
        (ok_V1.Bool$$$$_E_$$$ == false && !(ok_V1 == null))
      
      // decl N6: []int@°°, N7: bool°°
      {
        var N7: Bool
        var N6: Slice[Ref]
        
        // N6, N7 = <- c_V0_CN0
        {
          var fn$$0: Slice[Ref]
          var fn$$1: Bool
          assert perm(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$)) >
            none
          exhale acc(eval_Pred_S0(RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$)), write)
          inhale acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$), write)
          inhale fn$$1 ==>
            acc(eval_Pred_S1(RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$),
            fn$$0), write)
          inhale !fn$$1 ==>
            acc(Closed_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$), write) &&
            fn$$0 == sliceDefault_Intint$$$_S_$$$()
          N6 := fn$$0
          N7 := fn$$1
        }
        
        // s_V1 = N6
        s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$ := N6
        
        // ok_V1 = N7
        ok_V1.Bool$$$$_E_$$$ := N7
      }
      
      // while(ok_V1)
// invariant acc(c_V0_CN0, 1/2) && acc(wg_V0_CN1, 1/2) && acc(s_V1) && acc(ok_V1) && acc(x_V0_CN2, 1/2) && acc(y_V0_CN3, 1/2)
// invariant acc(PredTrue_BF{}()) && acc(c_V0_CN0.RecvChannel(), _)
// invariant c_V0_CN0.RecvGivenPerm() == PredTrue_BF{}
// invariant c_V0_CN0.RecvGotPerm() == messagePerm_69c8726d_F{wg_V0_CN1, _, x_V0_CN2, y_V0_CN3}
// invariant ok_V1 ==> acc(messagePerm_69c8726d_F{wg_V0_CN1, _, x_V0_CN2, y_V0_CN3}(s_V1))

      
      while (ok_V1.Bool$$$$_E_$$$)
        invariant acc(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$, 1 /
          2) &&
          acc(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$, 1 /
          2) &&
          acc(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$, write) &&
          acc(ok_V1.Bool$$$$_E_$$$, write) &&
          acc(x_V0_CN2.Intint$$$$_E_$$$, 1 / 2) &&
          acc(y_V0_CN3.Intint$$$$_E_$$$, 1 / 2)
        invariant acc(eval_Pred_S0(Pred_S0_make_0()), write) &&
          acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$), wildcard)
        invariant RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$) ==
          Pred_S0_make_0()
        invariant RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$) ==
          Pred_S1_make_0(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$,
          x_V0_CN2.Intint$$$$_E_$$$, y_V0_CN3.Intint$$$$_E_$$$)
        invariant ok_V1.Bool$$$$_E_$$$ ==>
          acc(eval_Pred_S1(Pred_S1_make_0(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$,
          x_V0_CN2.Intint$$$$_E_$$$, y_V0_CN3.Intint$$$$_E_$$$), s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$), write) 
      {
        
        // decl L$7$2$Continue
        {
          
          // decl s0_V2: seq[int°]°°
          {
            var s0_V2: Seq[Int]
            
            // unfold acc(messagePerm_69c8726d_F{wg_V0_CN1, _, x_V0_CN2, y_V0_CN3}(s_V1), write)
            exhale acc(eval_Pred_S1(Pred_S1_make_0(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$,
              x_V0_CN2.Intint$$$$_E_$$$, y_V0_CN3.Intint$$$$_E_$$$), s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$), write)
            inhale acc(messagePerm_69c8726d_F(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$,
              s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$, x_V0_CN2.Intint$$$$_E_$$$,
              y_V0_CN3.Intint$$$$_E_$$$), write)
            unfold acc(messagePerm_69c8726d_F(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$,
              s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$, x_V0_CN2.Intint$$$$_E_$$$,
              y_V0_CN3.Intint$$$$_E_$$$), write)
            
            // init s0_V2
            inhale s0_V2 == Seq[Int]()
            
            // s0_V2 = toSeq_69c8726d_F(s_V1)
            s0_V2 := toSeq_69c8726d_F(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$)
            
            // decl i_V3: int°°, L$15$4$Break
            {
              var i_V3: Int
              
              // init i_V3
              inhale i_V3 == 0
              
              // i_V3 = 0
              i_V3 := 0
              
              // while(i_V3 != len(s_V1))
// invariant acc(c_V0_CN0, 1/4) && acc(wg_V0_CN1, 1/4) && acc(x_V0_CN2, 1/4) && acc(y_V0_CN3, 1/4) && acc(s_V1)
// invariant len(s0_V2) == len(s_V1)
// invariant acc(c_V0_CN0.RecvChannel(), _)
// invariant acc(wg_V0_CN1.UnitDebt(replacedPerm_69c8726d_F{s0_V2, s_V1, x_V0_CN2, y_V0_CN3}))
// invariant 0 <= i_V3 && i_V3 <= len(s_V1)
// invariant forall j_V4: int° :: {  } 0 <= j_V4 && j_V4 < len(s_V1) ==> acc(s_V1[j_V4])
// invariant forall j_V5: int° :: { s_V1[j_V5] } 0 <= j_V5 && j_V5 < len(s_V1) ==> s_V1[j_V5] == s0_V2[j_V5] == x_V0_CN2 && j_V5 < i_V3?y_V0_CN3:s0_V2[j_V5]

              
              while (!(i_V3 ==
              (slen(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int)))
                invariant acc(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$, 1 /
                  4) &&
                  acc(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$, 1 /
                  4) &&
                  acc(x_V0_CN2.Intint$$$$_E_$$$, 1 / 4) &&
                  acc(y_V0_CN3.Intint$$$$_E_$$$, 1 / 4) &&
                  acc(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$, write)
                invariant |s0_V2| ==
                  (slen(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
                invariant acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$), wildcard)
                invariant acc(UnitDebt_40249c7a_PMWaitGroup(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$,
                  Pred_S0_make_1(s0_V2, s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$,
                  x_V0_CN2.Intint$$$$_E_$$$, y_V0_CN3.Intint$$$$_E_$$$)), write)
                invariant 0 <= i_V3 &&
                  i_V3 <= (slen(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int)
                invariant (forall j_V4: Int ::
                    { (ShArrayloc((sarray(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): ShArray[Ref]),
                    sadd((soffset(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int),
                    j_V4)): Ref) }
                    0 <= j_V4 &&
                    j_V4 < (slen(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int) ==>
                    acc((ShArrayloc((sarray(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): ShArray[Ref]),
                    sadd((soffset(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int),
                    j_V4)): Ref).Intint$$$$_E_$$$, write))
                invariant (forall j_V5: Int ::
                    { (ShArrayloc((sarray(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): ShArray[Ref]),
                    sadd((soffset(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int),
                    j_V5)): Ref).Intint$$$$_E_$$$ }
                    0 <= j_V5 &&
                    j_V5 < (slen(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int) ==>
                    (ShArrayloc((sarray(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): ShArray[Ref]),
                    sadd((soffset(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int),
                    j_V5)): Ref).Intint$$$$_E_$$$ ==
                    (s0_V2[j_V5] == x_V0_CN2.Intint$$$$_E_$$$ &&
                    j_V5 < i_V3 ?
                      y_V0_CN3.Intint$$$$_E_$$$ :
                      s0_V2[j_V5])) 
              {
                
                // decl L$15$4$Continue
                {
                  
                  // decl 
                  
                  // if(s_V1[i_V3] == x_V0_CN2) {...} else {...}
                  if ((ShArrayloc((sarray(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): ShArray[Ref]),
                  sadd((soffset(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int),
                  i_V3)): Ref).Intint$$$$_E_$$$ ==
                  x_V0_CN2.Intint$$$$_E_$$$) {
                    
                    // decl 
                    
                    // s_V1[i_V3] = y_V0_CN3
                    (ShArrayloc((sarray(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): ShArray[Ref]),
                    sadd((soffset(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int),
                    i_V3)): Ref).Intint$$$$_E_$$$ := y_V0_CN3.Intint$$$$_E_$$$
                  }
                  
                  // L$15$4$Continue
                  label L$15$4$Continue
                  
                  // i_V3 = i_V3 + 1
                  i_V3 := i_V3 + 1
                }
                if (!(i_V3 ==
                (slen(s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$): Int))) {
                }
                
              }
              
              // L$15$4$Break
              label L$15$4$Break
            }
            
            // fold acc(replacedPerm_69c8726d_F{s0_V2, s_V1, x_V0_CN2, y_V0_CN3}(), write)
            fold acc(replacedPerm_69c8726d_F(s0_V2, s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$,
              x_V0_CN2.Intint$$$$_E_$$$, y_V0_CN3.Intint$$$$_E_$$$), write)
            exhale acc(replacedPerm_69c8726d_F(s0_V2, s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$,
              x_V0_CN2.Intint$$$$_E_$$$, y_V0_CN3.Intint$$$$_E_$$$), write)
            inhale acc(eval_Pred_S0(Pred_S0_make_1(s0_V2, s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$,
              x_V0_CN2.Intint$$$$_E_$$$, y_V0_CN3.Intint$$$$_E_$$$)), write)
            
            // wg_V0_CN1PayDebt(replacedPerm_69c8726d_F{s0_V2, s_V1, x_V0_CN2, y_V0_CN3})
            PayDebt_40249c7a_PMWaitGroup(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$,
              Pred_S0_make_1(s0_V2, s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$, x_V0_CN2.Intint$$$$_E_$$$,
              y_V0_CN3.Intint$$$$_E_$$$))
            
            // wg_V0_CN1Done()
            Done_40249c7a_PMWaitGroup(wg_V0_CN1.PointerDefinedWaitGroup_40249c7a_T$$$_S_$$$$$$$_E_$$$)
            
            // fold acc(PredTrue_BF{}(), write)
            fold acc(PredTrue_BF(), write)
            exhale acc(PredTrue_BF(), write)
            inhale acc(eval_Pred_S0(Pred_S0_make_0()), write)
          }
          
          // L$7$2$Continue
          label L$7$2$Continue
          
          // decl N11: []int@°°, N12: bool°°
          {
            var N12: Bool
            var N11: Slice[Ref]
            
            // N11, N12 = <- c_V0_CN0
            {
              var fn$$2: Slice[Ref]
              var fn$$3: Bool
              assert perm(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$)) >
                none
              exhale acc(eval_Pred_S0(RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$)), write)
              inhale acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$), write)
              inhale fn$$3 ==>
                acc(eval_Pred_S1(RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$),
                fn$$2), write)
              inhale !fn$$3 ==>
                acc(Closed_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V0_CN0.ChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$), write) &&
                fn$$2 == sliceDefault_Intint$$$_S_$$$()
              N11 := fn$$2
              N12 := fn$$3
            }
            
            // s_V1 = N11
            s_V1.SliceIntint$$$_S_$$$$$$$_E_$$$ := N11
            
            // ok_V1 = N12
            ok_V1.Bool$$$$_E_$$$ := N12
          }
        }
        if (ok_V1.Bool$$$$_E_$$$) {
        }
        
      }
      
      // L$7$2$Break
      label L$7$2$Break
    }
    label returnLabel
  }
}

method SearchReplace_69c8726d_F(s_V0: Slice[Ref], x_V0: Int, y_V0: Int)
  requires (forall i_V1: Int ::
      { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      i_V1)): Ref) }
      0 <= i_V1 && i_V1 < (slen(s_V0): Int) ==>
      acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      i_V1)): Ref).Intint$$$$_E_$$$, write))
  ensures (forall i_V1: Int ::
      { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      i_V1)): Ref) }
      0 <= i_V1 && i_V1 < (slen(s_V0): Int) ==>
      acc((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      i_V1)): Ref).Intint$$$$_E_$$$, write))
  ensures (forall i_V2: Int ::
      { (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      i_V2)): Ref).Intint$$$$_E_$$$ }
      0 <= i_V2 && i_V2 < (slen(s_V0): Int) ==>
      (ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int), i_V2)): Ref).Intint$$$$_E_$$$ ==
      (old((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
      i_V2)): Ref).Intint$$$$_E_$$$) ==
      x_V0 ?
        y_V0 :
        old((ShArrayloc((sarray(s_V0): ShArray[Ref]), sadd((soffset(s_V0): Int),
        i_V2)): Ref).Intint$$$$_E_$$$)))
{
  
  // decl s_V0_CN0: []int@°°, x_V0_CN1: int°°, y_V0_CN2: int°°
  {
    var y_V0_CN2: Int
    var x_V0_CN1: Int
    var s_V0_CN0: Slice[Ref]
    
    
    
    // init s_V0_CN0
    inhale s_V0_CN0 == sliceDefault_Intint$$$_S_$$$()
    
    // init x_V0_CN1
    inhale x_V0_CN1 == 0
    
    // init y_V0_CN2
    inhale y_V0_CN2 == 0
    
    // s_V0_CN0 = s_V0
    s_V0_CN0 := s_V0
    
    // x_V0_CN1 = x_V0
    x_V0_CN1 := x_V0
    
    // y_V0_CN2 = y_V0
    y_V0_CN2 := y_V0
    
    // decl workers_V3: int°°, workRange_V3: int°°, s0_V3: seq[int°]°°, N4: chan []int@°°°, c_V3: chan []int@°°°, wg_V3: WaitGroup_40249c7a_T@@, pr_V3: pred([]int@°)°°, seqs_V3: seq[seq[int°]°]°°, pseqs_V3: seq[pred()°]°°
    {
      var pseqs_V3: Seq[Pred_S0]
      var seqs_V3: Seq[Seq[Int]]
      var pr_V3: Pred_S1
      var wg_V3: ShStruct1[Emb_3_Intuint32$$$_S_$$$]
      var c_V3: Int
      var N4: Int
      var s0_V3: Seq[Int]
      var workRange_V3: Int
      var workers_V3: Int
      
      // if(len(s_V0_CN0) == 0) {...} else {...}
      if ((slen(s_V0_CN0): Int) == 0) {
        
        // decl 
        
        // return
        goto returnLabel
      }
      
      // init workers_V3
      inhale workers_V3 == 0
      
      // workers_V3 = 8
      workers_V3 := 8
      
      // init workRange_V3
      inhale workRange_V3 == 0
      
      // workRange_V3 = 1000
      workRange_V3 := 1000
      
      // assert workers_V3 > 0
      assert workers_V3 > 0
      
      // assert workRange_V3 > 0
      assert workRange_V3 > 0
      
      // init s0_V3
      inhale s0_V3 == Seq[Int]()
      
      // s0_V3 = toSeq_69c8726d_F(s_V0_CN0)
      s0_V3 := toSeq_69c8726d_F(s_V0_CN0)
      
      // N4 = make(chan []int@°°, 4)
      {
        var fn$$0: Int
        assert 0 <= 4
        inhale acc(IsChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(fn$$0), write)
        inhale BufferSize_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(fn$$0) ==
          4
        N4 := fn$$0
      }
      
      // init c_V3
      inhale c_V3 == 0
      
      // c_V3 = N4
      c_V3 := N4
      
      // init wg_V3
      {
        var fn$$1: ShStruct1[Emb_3_Intuint32$$$_S_$$$]
        fn$$1 := wg_V3
        {
          var fn$$3: Emb_3_Intuint32$$$_S_$$$
          var fn$$4: Emb_3_Intuint32$$$$_E_$$$
          fn$$3 := (ShStructget0of1(fn$$1): Emb_3_Intuint32$$$_S_$$$)
          fn$$4 := arrayDefault_3_Intuint32$$$$_E_$$$()
          inhale (forall fn$$2: Int ::
              { (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$1): Emb_3_Intuint32$$$_S_$$$)),
              fn$$2): Ref) }
              0 <= fn$$2 && fn$$2 < 3 ==>
              acc((ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$1): Emb_3_Intuint32$$$_S_$$$)),
              fn$$2): Ref).Intuint32$$$$_E_$$$, write)) &&
            ((forall fn$$5: Int ::
              { (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(fn$$3),
              fn$$5): Ref) }
              { unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(fn$$4)[fn$$5] }
              0 <= fn$$5 && fn$$5 < 3 ==>
              (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(fn$$3),
              fn$$5): Ref).Intuint32$$$$_E_$$$ ==
              unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(fn$$4)[fn$$5]) &&
            !((ShStructget0of1(fn$$1): Emb_3_Intuint32$$$_S_$$$) ==
            box_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(arrayNil_3_Intuint32$$$_S_$$$())))
        }
      }
      
      // wg_V3 = dflt[WaitGroup_40249c7a_T°]
      {
        var fn$$6: ShStruct1[Emb_3_Intuint32$$$_S_$$$]
        var fn$$7: Tuple1[Emb_3_Intuint32$$$$_E_$$$]
        fn$$6 := wg_V3
        fn$$7 := (tuple1(arrayDefault_3_Intuint32$$$$_E_$$$()): Tuple1[Emb_3_Intuint32$$$$_E_$$$])
        {
          var fn$$9: Emb_3_Intuint32$$$_S_$$$
          var fn$$10: Emb_3_Intuint32$$$$_E_$$$
          fn$$9 := (ShStructget0of1(fn$$6): Emb_3_Intuint32$$$_S_$$$)
          fn$$10 := (get0of1(fn$$7): Emb_3_Intuint32$$$$_E_$$$)
          exhale (forall fn$$8: Int ::
              { (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$6): Emb_3_Intuint32$$$_S_$$$)),
              fn$$8): Ref) }
              0 <= fn$$8 && fn$$8 < 3 ==>
              acc((ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$6): Emb_3_Intuint32$$$_S_$$$)),
              fn$$8): Ref).Intuint32$$$$_E_$$$, write))
          inhale (forall fn$$8: Int ::
              { (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$6): Emb_3_Intuint32$$$_S_$$$)),
              fn$$8): Ref) }
              0 <= fn$$8 && fn$$8 < 3 ==>
              acc((ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$6): Emb_3_Intuint32$$$_S_$$$)),
              fn$$8): Ref).Intuint32$$$$_E_$$$, write)) &&
            (forall fn$$11: Int ::
              { (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(fn$$9),
              fn$$11): Ref) }
              { unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11] }
              0 <= fn$$11 && fn$$11 < 3 ==>
              (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(fn$$9),
              fn$$11): Ref).Intuint32$$$$_E_$$$ ==
              unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(fn$$10)[fn$$11])
        }
      }
      
      // init pr_V3
      inhale pr_V3 == Pred_S1_default()
      
      // pr_V3 = messagePerm_69c8726d_F{&wg_V3, _, x_V0_CN1, y_V0_CN2}
      pr_V3 := Pred_S1_make_0(wg_V3, x_V0_CN1, y_V0_CN2)
      
      // c_V3Init(pr_V3, PredTrue_BF{})
      Init_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3, pr_V3, Pred_S0_make_0())
      
      // &wg_V3Init()
      Init_40249c7a_PMWaitGroup(wg_V3)
      
      // init seqs_V3
      inhale seqs_V3 == Seq[Seq[Int]]()
      
      // seqs_V3 = seq[seq[int°]°] { }
      seqs_V3 := Seq[Seq[Int]]()
      
      // init pseqs_V3
      inhale pseqs_V3 == Seq[Pred_S0]()
      
      // pseqs_V3 = seq[pred()°] { }
      pseqs_V3 := Seq[Pred_S0]()
      
      // decl i_V4: int°°, L$20$2$Break
      {
        var i_V4: Int
        
        // init i_V4
        inhale i_V4 == 0
        
        // i_V4 = 0
        i_V4 := 0
        
        // while(i_V4 != workers_V3)
// invariant acc(c_V3.RecvChannel(), _)
// invariant c_V3.RecvGivenPerm() == PredTrue_BF{} && c_V3.RecvGotPerm() == pr_V3

        
        while (!(i_V4 == workers_V3))
          invariant acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3), wildcard)
          invariant RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3) ==
            Pred_S0_make_0() &&
            RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3) ==
            pr_V3 
        {
          
          // decl L$20$2$Continue
          {
            
            // decl 
            
            // go worker_69c8726d_F(c_V3, &wg_V3, x_V0_CN1, y_V0_CN2)
            exhale acc(RecvChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3), wildcard) &&
              RecvGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3) ==
              Pred_S0_make_0() &&
              RecvGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3) ==
              Pred_S1_make_0(wg_V3, x_V0_CN1, y_V0_CN2)
            
            // L$20$2$Continue
            label L$20$2$Continue
            
            // i_V4 = i_V4 + 1
            i_V4 := i_V4 + 1
          }
          if (!(i_V4 == workers_V3)) {
          }
          
        }
        
        // L$20$2$Break
        label L$20$2$Break
      }
      
      // decl offset_V5: int°°, L$25$2$Break
      {
        var offset_V5: Int
        
        // init offset_V5
        inhale offset_V5 == 0
        
        // offset_V5 = 0
        offset_V5 := 0
        
        // while(offset_V5 != len(s_V0_CN0))
// invariant acc(c_V3.SendChannel()) && c_V3.SendGivenPerm() == pr_V3
// invariant acc(&wg_V3.WaitGroupP(), 1/2) && !&wg_V3.WaitMode()
// invariant offset_V5 == 0 ==> acc(&wg_V3.WaitGroupP(), 1/2) && !offset_V5 == 0 ==> acc(&wg_V3.WaitGroupStarted(), 1/2)
// invariant 0 <= offset_V5 && offset_V5 <= len(s_V0_CN0)
// invariant forall i_V6: int° :: {  } offset_V5 <= i_V6 && i_V6 < len(s_V0_CN0) ==> acc(s_V0_CN0[i_V6])
// invariant forall i_V7: int° :: {  } offset_V5 <= i_V7 && i_V7 < len(s_V0_CN0) ==> s_V0_CN0[i_V7] == s0_V3[i_V7]
// invariant offset_V5 != len(s_V0_CN0) ==> offset_V5 == len(seqs_V3) * workRange_V3
// invariant offset_V5 == len(s_V0_CN0) ==> len(seqs_V3) > 0 && len(s_V0_CN0) == len(seqs_V3) - 1 * workRange_V3 + len(seqs_V3[len(seqs_V3) - 1])
// invariant forall i_V8: int° :: { seqs_V3[i_V8] } 0 <= i_V8 && i_V8 < len(seqs_V3) - offset_V5 == len(s_V0_CN0)?1:0 ==> len(seqs_V3[i_V8]) == workRange_V3
// invariant forall i_V9: int°, j_V9: int° :: { seqs_V3[i_V9][j_V9] } 0 <= i_V9 && i_V9 < len(seqs_V3) && 0 <= j_V9 && j_V9 < len(seqs_V3[i_V9]) ==> seqs_V3[i_V9][j_V9] == s0_V3[i_V9 * workRange_V3 + j_V9]
// invariant len(pseqs_V3) == len(seqs_V3)
// invariant forall i_V10: int° :: { pseqs_V3[i_V10] } 0 <= i_V10 && i_V10 < len(pseqs_V3) ==> pseqs_V3[i_V10] == replacedPerm_69c8726d_F{seqs_V3[i_V10], s_V0_CN0[i_V10 * workRange_V3:i_V10 * workRange_V3 + len(seqs_V3[i_V10])], x_V0_CN1, y_V0_CN2}
// invariant forall i_V11: int° :: {  } 0 <= i_V11 && i_V11 < len(pseqs_V3) ==> acc(&wg_V3.TokenById(pseqs_V3[i_V11], i_V11))

        
        while (!(offset_V5 == (slen(s_V0_CN0): Int)))
          invariant acc(SendChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3), write) &&
            SendGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3) ==
            pr_V3
          invariant acc(WaitGroupP_40249c7a_PMWaitGroup(wg_V3), 1 / 2) &&
            !WaitMode_40249c7a_PMWaitGroup(wg_V3)
          invariant (offset_V5 == 0 ==>
            acc(WaitGroupP_40249c7a_PMWaitGroup(wg_V3), 1 / 2)) &&
            (!(offset_V5 == 0) ==>
            acc(WaitGroupStarted_40249c7a_PMWaitGroup(wg_V3), 1 / 2))
          invariant 0 <= offset_V5 && offset_V5 <= (slen(s_V0_CN0): Int)
          invariant (forall i_V6: Int ::
              { (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              i_V6)): Ref) }
              offset_V5 <= i_V6 && i_V6 < (slen(s_V0_CN0): Int) ==>
              acc((ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              i_V6)): Ref).Intint$$$$_E_$$$, write))
          invariant (forall i_V7: Int ::
              { (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              i_V7)): Ref) }
              { s0_V3[i_V7] }
              offset_V5 <= i_V7 && i_V7 < (slen(s_V0_CN0): Int) ==>
              (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              i_V7)): Ref).Intint$$$$_E_$$$ ==
              s0_V3[i_V7])
          invariant !(offset_V5 == (slen(s_V0_CN0): Int)) ==>
            offset_V5 == |seqs_V3| * workRange_V3
          invariant offset_V5 == (slen(s_V0_CN0): Int) ==>
            |seqs_V3| > 0 &&
            (slen(s_V0_CN0): Int) ==
            (|seqs_V3| - 1) * workRange_V3 + |seqs_V3[|seqs_V3| - 1]|
          invariant (forall i_V8: Int ::
              { seqs_V3[i_V8] }
              0 <= i_V8 &&
              i_V8 <
              |seqs_V3| - (offset_V5 == (slen(s_V0_CN0): Int) ? 1 : 0) ==>
              |seqs_V3[i_V8]| == workRange_V3)
          invariant (forall i_V9: Int, j_V9: Int ::
              { seqs_V3[i_V9][j_V9] }
              0 <= i_V9 && i_V9 < |seqs_V3| && 0 <= j_V9 &&
              j_V9 < |seqs_V3[i_V9]| ==>
              seqs_V3[i_V9][j_V9] == s0_V3[i_V9 * workRange_V3 + j_V9])
          invariant |pseqs_V3| == |seqs_V3|
          invariant (forall i_V10: Int ::
              { pseqs_V3[i_V10] }
              0 <= i_V10 && i_V10 < |pseqs_V3| ==>
              pseqs_V3[i_V10] ==
              Pred_S0_make_1(seqs_V3[i_V10], ssliceFromSlice_Ref(s_V0_CN0, i_V10 *
              workRange_V3, i_V10 * workRange_V3 + |seqs_V3[i_V10]|), x_V0_CN1,
              y_V0_CN2))
          invariant (forall i_V11: Int ::
              { pseqs_V3[i_V11] }
              0 <= i_V11 && i_V11 < |pseqs_V3| ==>
              acc(TokenById_40249c7a_PMWaitGroup(wg_V3, pseqs_V3[i_V11], i_V11), write)) 
        {
          
          // decl L$25$2$Continue
          {
            
            // decl nextOffset_V12: int°°, section_V12: []int@°°, s1_V12: seq[int°]°°, wpr_V12: pred()°°
            {
              var wpr_V12: Pred_S0
              var s1_V12: Seq[Int]
              var section_V12: Slice[Ref]
              var nextOffset_V12: Int
              
              // init nextOffset_V12
              inhale nextOffset_V12 == 0
              
              // nextOffset_V12 = offset_V5 + workRange_V3
              nextOffset_V12 := offset_V5 + workRange_V3
              
              // if(nextOffset_V12 > len(s_V0_CN0)) {...} else {...}
              if (nextOffset_V12 > (slen(s_V0_CN0): Int)) {
                
                // decl 
                
                // nextOffset_V12 = len(s_V0_CN0)
                nextOffset_V12 := (slen(s_V0_CN0): Int)
              }
              
              // init section_V12
              inhale section_V12 == sliceDefault_Intint$$$_S_$$$()
              
              // section_V12 = s_V0_CN0[offset_V5:nextOffset_V12]
              section_V12 := ssliceFromSlice_Ref(s_V0_CN0, offset_V5, nextOffset_V12)
              
              // assert forall i_V13: int° :: { &section_V12[i_V13] } 0 <= i_V13 && i_V13 < len(s_V0_CN0) ==> &section_V12[i_V13] == &s_V0_CN0[i_V13 + offset_V5]
              assert (forall i_V13: Int ::
                  { (ShArrayloc((sarray(section_V12): ShArray[Ref]), sadd((soffset(section_V12): Int),
                  i_V13)): Ref) }
                  0 <= i_V13 && i_V13 < (slen(s_V0_CN0): Int) ==>
                  (ShArrayloc((sarray(section_V12): ShArray[Ref]), sadd((soffset(section_V12): Int),
                  i_V13)): Ref) ==
                  (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
                  i_V13 + offset_V5)): Ref))
              
              // init s1_V12
              inhale s1_V12 == Seq[Int]()
              
              // s1_V12 = toSeq_69c8726d_F(section_V12)
              s1_V12 := toSeq_69c8726d_F(section_V12)
              
              // init wpr_V12
              inhale wpr_V12 == Pred_S0_default()
              
              // wpr_V12 = replacedPerm_69c8726d_F{s1_V12, section_V12, x_V0_CN1, y_V0_CN2}
              wpr_V12 := Pred_S0_make_1(s1_V12, section_V12, x_V0_CN1, y_V0_CN2)
              
              // &wg_V3Add(1, 1/2, PredTrue_BF{})
              Add_40249c7a_PMWaitGroup(wg_V3, 1, 1 / 2, Pred_S0_make_0())
              
              // if(offset_V5 == 0) {...} else {...}
              if (offset_V5 == 0) {
                
                // decl 
                
                // &wg_V3Start(1/2, PredTrue_BF{})
                Start_40249c7a_PMWaitGroup(wg_V3, 1 / 2, Pred_S0_make_0())
              }
              
              // &wg_V3GenerateTokenAndDebt(wpr_V12)
              GenerateTokenAndDebt_40249c7a_PMWaitGroup(wg_V3, wpr_V12)
              
              // fold acc(&wg_V3.TokenById(wpr_V12, len(pseqs_V3)))
              fold acc(TokenById_40249c7a_PMWaitGroup(wg_V3, wpr_V12, |pseqs_V3|), write)
              
              // seqs_V3 = seqs_V3 ++ seq[seq[int°]°] { 0:s1_V12 }
              seqs_V3 := seqs_V3 ++ Seq(s1_V12)
              
              // pseqs_V3 = pseqs_V3 ++ seq[pred()°] { 0:wpr_V12 }
              pseqs_V3 := pseqs_V3 ++ Seq(wpr_V12)
              
              // fold acc(messagePerm_69c8726d_F{&wg_V3, _, x_V0_CN1, y_V0_CN2}(section_V12), write)
              fold acc(messagePerm_69c8726d_F(wg_V3, section_V12, x_V0_CN1,
                y_V0_CN2), write)
              exhale acc(messagePerm_69c8726d_F(wg_V3, section_V12, x_V0_CN1,
                y_V0_CN2), write)
              inhale acc(eval_Pred_S1(Pred_S1_make_0(wg_V3, x_V0_CN1, y_V0_CN2),
                section_V12), write)
              
              // c_V3 <- section_V12
              assert perm(SendChannel_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3)) >
                none
              exhale acc(eval_Pred_S1(SendGivenPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3),
                section_V12), write)
              inhale acc(eval_Pred_S0(SendGotPerm_BFChannelSliceIntint$$$_S_$$$$$$$_E_$$$$$$$_E_$$$(c_V3)), write)
              
              // offset_V5 = nextOffset_V12
              offset_V5 := nextOffset_V12
            }
            
            // L$25$2$Continue
            label L$25$2$Continue
          }
          if (!(offset_V5 == (slen(s_V0_CN0): Int))) {
          }
          
        }
        
        // L$25$2$Break
        label L$25$2$Break
      }
      
      // &wg_V3SetWaitMode(1/2, 1/2)
      SetWaitMode_40249c7a_PMWaitGroup(wg_V3, 1 / 2, 1 / 2)
      
      // &wg_V3Wait(1/2, pseqs_V3)
      Wait_40249c7a_PMWaitGroup(wg_V3, 1 / 2, pseqs_V3)
      
      // decl 
      
      // decl i_V14: int°°, L$67$4$Break
      {
        var i_V14: Int
        
        // init i_V14
        inhale i_V14 == 0
        
        // i_V14 = 0
        i_V14 := 0
        
        // while(i_V14 != len(pseqs_V3))
// invariant 0 <= i_V14 && i_V14 <= len(seqs_V3)
// invariant forall j_V15: int° :: {  } i_V14 <= j_V15 && j_V15 < len(seqs_V3) ==> acc(InjEval_40249c7a_F(pseqs_V3[j_V15], j_V15))
// invariant forall j_V16: int° :: {  } 0 <= j_V16 && j_V16 < i_V14 == len(seqs_V3)?len(s_V0_CN0):i_V14 * workRange_V3 ==> acc(s_V0_CN0[j_V16]) && s_V0_CN0[j_V16] == s0_V3[j_V16] == x_V0_CN1?y_V0_CN2:s0_V3[j_V16]

        
        while (!(i_V14 == |pseqs_V3|))
          invariant 0 <= i_V14 && i_V14 <= |seqs_V3|
          invariant (forall j_V15: Int ::
              { pseqs_V3[j_V15] }
              i_V14 <= j_V15 && j_V15 < |seqs_V3| ==>
              acc(InjEval_40249c7a_F(pseqs_V3[j_V15], j_V15), write))
          invariant (forall j_V16: Int ::
              { (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              j_V16)): Ref) }
              0 <= j_V16 &&
              j_V16 <
              (i_V14 == |seqs_V3| ?
                (slen(s_V0_CN0): Int) :
                i_V14 * workRange_V3) ==>
              acc((ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              j_V16)): Ref).Intint$$$$_E_$$$, write)) &&
            (forall j_V16: Int ::
              { (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              j_V16)): Ref) }
              { s0_V3[j_V16] }
              0 <= j_V16 &&
              j_V16 <
              (i_V14 == |seqs_V3| ?
                (slen(s_V0_CN0): Int) :
                i_V14 * workRange_V3) ==>
              (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
              j_V16)): Ref).Intint$$$$_E_$$$ ==
              (s0_V3[j_V16] == x_V0_CN1 ? y_V0_CN2 : s0_V3[j_V16])) 
        {
          
          // decl L$67$4$Continue
          {
            
            // decl low_V17: int°°, up_V17: int°°, s1_V17: []int@°°
            {
              var s1_V17: Slice[Ref]
              var up_V17: Int
              var low_V17: Int
              
              // unfold acc(InjEval_40249c7a_F(pseqs_V3[i_V14], i_V14))
              unfold acc(InjEval_40249c7a_F(pseqs_V3[i_V14], i_V14), write)
              
              // init low_V17
              inhale low_V17 == 0
              
              // low_V17 = i_V14 * workRange_V3
              low_V17 := i_V14 * workRange_V3
              
              // init up_V17
              inhale up_V17 == 0
              
              // up_V17 = low_V17 + len(seqs_V3[i_V14])
              up_V17 := low_V17 + |seqs_V3[i_V14]|
              
              // init s1_V17
              inhale s1_V17 == sliceDefault_Intint$$$_S_$$$()
              
              // s1_V17 = s_V0_CN0[low_V17:up_V17]
              s1_V17 := ssliceFromSlice_Ref(s_V0_CN0, low_V17, up_V17)
              
              // unfold acc(replacedPerm_69c8726d_F{seqs_V3[i_V14], s1_V17, x_V0_CN1, y_V0_CN2}(), write)
              exhale acc(eval_Pred_S0(Pred_S0_make_1(seqs_V3[i_V14], s1_V17,
                x_V0_CN1, y_V0_CN2)), write)
              inhale acc(replacedPerm_69c8726d_F(seqs_V3[i_V14], s1_V17, x_V0_CN1,
                y_V0_CN2), write)
              unfold acc(replacedPerm_69c8726d_F(seqs_V3[i_V14], s1_V17, x_V0_CN1,
                y_V0_CN2), write)
              
              // assert forall j_V18: int° :: { &s_V0_CN0[j_V18] } low_V17 <= j_V18 && j_V18 < up_V17 ==> &s_V0_CN0[j_V18] == &s1_V17[j_V18 - low_V17]
              assert (forall j_V18: Int ::
                  { (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
                  j_V18)): Ref) }
                  low_V17 <= j_V18 && j_V18 < up_V17 ==>
                  (ShArrayloc((sarray(s_V0_CN0): ShArray[Ref]), sadd((soffset(s_V0_CN0): Int),
                  j_V18)): Ref) ==
                  (ShArrayloc((sarray(s1_V17): ShArray[Ref]), sadd((soffset(s1_V17): Int),
                  j_V18 - low_V17)): Ref))
            }
            
            // L$67$4$Continue
            label L$67$4$Continue
            
            // i_V14 = i_V14 + 1
            i_V14 := i_V14 + 1
          }
          if (!(i_V14 == |pseqs_V3|)) {
          }
          
        }
        
        // L$67$4$Break
        label L$67$4$Break
      }
    }
    label returnLabel
  }
}

method $IMPORTS_69c8726d_69c8726d()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method $IMPORTS_69c8726d_bffb141e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_69c8726d_3e047bbc()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method panic_bffb141e_F(v_V0: Tuple2[Ref, Types])
  requires false


// decreases 
method Error_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)


// decreases 
method Duplicate_bffb141e_SY$c04328b0_bffb141e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)
  ensures IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e_(thisItf) ==>
    acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), write)


method Lock_40249c7a_PMMutex(m_V0: ShStruct2[Ref, Ref])
  requires acc(LockP_40249c7a_PMMutex(m_V0), wildcard)
  ensures acc(LockP_40249c7a_PMMutex(m_V0), write) &&
    acc(UnlockP_40249c7a_PMMutex(m_V0), write) &&
    acc(eval_Pred_S0(LockInv_40249c7a_PMMutex(m_V0)), write)


// decreases _
method Unlock_40249c7a_PMMutex(m_V0: ShStruct2[Ref, Ref])
  requires acc(LockP_40249c7a_PMMutex(m_V0), wildcard) &&
    acc(UnlockP_40249c7a_PMMutex(m_V0), write) &&
    acc(eval_Pred_S0(LockInv_40249c7a_PMMutex(m_V0)), write)
  ensures acc(LockP_40249c7a_PMMutex(m_V0), write)


// decreases 
method SetInv_40249c7a_PMMutex(m_V0: ShStruct2[Ref, Ref], inv_V0: Pred_S0)
  requires acc(eval_Pred_S0(inv_V0), write) &&
    (let fn$$0 ==
      (m_V0) in
      acc((ShStructget0of2(fn$$0): Ref).Intint32$$$$_E_$$$, write) &&
      acc((ShStructget1of2(fn$$0): Ref).Intuint32$$$$_E_$$$, write)) &&
    (let fn$$1 ==
      (m_V0) in
      (let fn$$2 ==
        ((tuple2(0, 0): Tuple2[Int, Int])) in
        (ShStructget0of2(fn$$1): Ref).Intint32$$$$_E_$$$ ==
        (get0of2(fn$$2): Int) &&
        (ShStructget1of2(fn$$1): Ref).Intuint32$$$$_E_$$$ ==
        (get1of2(fn$$2): Int)))
  ensures acc(LockP_40249c7a_PMMutex(m_V0), write) &&
    LockInv_40249c7a_PMMutex(m_V0) == inv_V0


// decreases _
method Add_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$], n_V0: Int,
  p_V0: Perm, P_V0: Pred_S0)
  requires p_V0 >= 0 / 1
  requires n_V0 > 0 && p_V0 > 0 / 1 ==>
    acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), p_V0) &&
    !WaitMode_40249c7a_PMWaitGroup(g_V0)
  requires n_V0 > 0 && p_V0 == 0 / 1 ==>
    acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, P_V0), write)
  requires n_V0 < 0 ==>
    acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_0()), (0 - n_V0) /
    1)
  ensures n_V0 > 0 && p_V0 > 0 / 1 ==>
    acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), p_V0)
  ensures n_V0 > 0 && p_V0 == 0 / 1 ==>
    acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, P_V0), write)
  ensures n_V0 > 0 ==>
    acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_0()), n_V0 / 1)
  ensures n_V0 > 0 && p_V0 > 0 / 1 ==>
    WaitMode_40249c7a_PMWaitGroup(g_V0) ==
    old(WaitMode_40249c7a_PMWaitGroup(g_V0))


// decreases _
method Done_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$])
  requires acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_0()), write)


method Wait_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  p_V0: Perm, P_V0: Seq[Pred_S0])
  requires p_V0 > 0 / 1
  requires acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), p_V0)
  requires WaitMode_40249c7a_PMWaitGroup(g_V0)
  requires (forall i_V1: Int ::
      { P_V0[i_V1] }
      0 <= i_V1 && i_V1 < |P_V0| ==>
      acc(TokenById_40249c7a_PMWaitGroup(g_V0, P_V0[i_V1], i_V1), write))
  ensures (forall i_V2: Int ::
      { P_V0[i_V2] }
      0 <= i_V2 && i_V2 < |P_V0| ==>
      acc(InjEval_40249c7a_F(P_V0[i_V2], i_V2), write))
  ensures acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), p_V0)


// decreases 
method Init_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$])
  requires (let fn$$0 ==
      (g_V0) in
      (forall fn$$1: Int ::
        { (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$0): Emb_3_Intuint32$$$_S_$$$)),
        fn$$1): Ref) }
        0 <= fn$$1 && fn$$1 < 3 ==>
        acc((ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref((ShStructget0of1(fn$$0): Emb_3_Intuint32$$$_S_$$$)),
        fn$$1): Ref).Intuint32$$$$_E_$$$, write))) &&
    (let fn$$2 ==
      (g_V0) in
      (let fn$$3 ==
        ((tuple1(arrayDefault_3_Intuint32$$$$_E_$$$()): Tuple1[Emb_3_Intuint32$$$$_E_$$$])) in
        (let fn$$4 ==
          ((ShStructget0of1(fn$$2): Emb_3_Intuint32$$$_S_$$$)) in
          (let fn$$5 ==
            ((get0of1(fn$$3): Emb_3_Intuint32$$$$_E_$$$)) in
            (forall fn$$6: Int ::
              { (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(fn$$4),
              fn$$6): Ref) }
              { unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(fn$$5)[fn$$6] }
              0 <= fn$$6 && fn$$6 < 3 ==>
              (ShArrayloc(unbox_Emb_3_Intuint32$$$_S_$$$_ShArray_Ref(fn$$4),
              fn$$6): Ref).Intuint32$$$$_E_$$$ ==
              unbox_Emb_3_Intuint32$$$$_E_$$$_Seq_Int(fn$$5)[fn$$6])))))
  ensures acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), write) &&
    !WaitMode_40249c7a_PMWaitGroup(g_V0)


method UnsetWaitMode_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$])
  requires acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), write)
  ensures acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), write) &&
    !WaitMode_40249c7a_PMWaitGroup(g_V0)


// decreases 
method Start_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  p_V0: Perm, P_V0: Pred_S0)
  requires p_V0 > 0 / 1
  requires acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), p_V0)
  requires !WaitMode_40249c7a_PMWaitGroup(g_V0) &&
    acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, P_V0), write)
  ensures acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, P_V0), write) &&
    acc(WaitGroupStarted_40249c7a_PMWaitGroup(g_V0), p_V0)


// decreases 
method SetWaitMode_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  p_V0: Perm, q_V0: Perm)
  requires p_V0 >= 0 / 1
  requires q_V0 > 0 / 1
  requires p_V0 + q_V0 == 1 / 1
  requires acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), p_V0)
  requires acc(WaitGroupStarted_40249c7a_PMWaitGroup(g_V0), q_V0)
  ensures acc(WaitGroupP_40249c7a_PMWaitGroup(g_V0), write) &&
    WaitMode_40249c7a_PMWaitGroup(g_V0)


// decreases 
method PayDebt_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  P_V0: Pred_S0)
  requires acc(eval_Pred_S0(P_V0), write) &&
    acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, P_V0), write)
  ensures acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_0()), write)


// decreases 
method GenerateTokenAndDebt_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  R_V0: Pred_S0)
  requires acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_0()), write)
  ensures acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, R_V0), write) &&
    acc(Token_40249c7a_PMWaitGroup(g_V0, R_V0), write)


method GenerateToken_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  R_V0: Pred_S0)
  requires acc(eval_Pred_S0(R_V0), write)
  ensures acc(Token_40249c7a_PMWaitGroup(g_V0, R_V0), write)


method SplitSequence_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  P_V0: Seq[Pred_S0], Q_V0: Seq[Pred_S0], permsP_V0: Seq[Perm], permsQ_V0: Seq[Perm])
  requires |P_V0| == |permsP_V0|
  requires |Q_V0| == |permsQ_V0|
  requires acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_2(P_V0 ++
    Q_V0, permsP_V0 ++ permsQ_V0)), write)
  requires acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_0()), write)
  ensures acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_2(P_V0, permsP_V0)), write) &&
    acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_2(Q_V0, permsQ_V0)), write)


method SplitFractions_40249c7a_PMWaitGroup(g_V0: ShStruct1[Emb_3_Intuint32$$$_S_$$$],
  P_V0: Seq[Pred_S0], permsP_V0: Seq[Perm], permsQ_V0: Seq[Perm], permsR_V0: Seq[Perm])
  requires |P_V0| == |permsP_V0|
  requires |P_V0| == |permsQ_V0|
  requires |P_V0| == |permsR_V0|
  requires (forall i_V1: Int ::
      { permsP_V0[i_V1] }
      0 <= i_V1 && i_V1 < |P_V0| ==> permsP_V0[i_V1] >= 0 / 1)
  requires (forall i_V2: Int ::
      { permsQ_V0[i_V2] }
      0 <= i_V2 && i_V2 < |P_V0| ==> permsQ_V0[i_V2] >= 0 / 1)
  requires acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_2(P_V0, permsR_V0)), write)
  requires acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_0()), write)
  requires (forall i_V3: Int ::
      { permsP_V0[i_V3] }
      { permsQ_V0[i_V3] }
      { permsR_V0[i_V3] }
      0 <= i_V3 && i_V3 < |P_V0| ==>
      permsP_V0[i_V3] + permsQ_V0[i_V3] == permsR_V0[i_V3])
  ensures acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_2(P_V0, permsP_V0)), write)
  ensures acc(UnitDebt_40249c7a_PMWaitGroup(g_V0, Pred_S0_make_2(P_V0, permsQ_V0)), write)


// decreases 
method IsDuplicableMem_bffb141e_SY$c04328b0_bffb141e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(ErrorMem_bffb141e_SY$c04328b0_bffb141e_(thisItf), wildcard)
  }
}