domain PredicateInstance  {
  
  
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
}

domain String  {
  
  function strConcat(l: Int, r: Int): Int 
  
  function strLen(id: Int): Int 
  
  unique function stringLit(): Int 
  
  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
}

domain Tuple2[T0, T1]  {
  
  function get0of2(p: Tuple2[T0, T1]): T0 
  
  function get1of2(p: Tuple2[T0, T1]): T1 
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1] 
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Types  {
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool 
  
  function comparableType_Types(t: Types): Bool 
  
  function empty_interface_Types(): Types 
  
  unique function empty_interface_Types_tag(): Int 
  
  function nil_Types(): Types 
  
  unique function nil_Types_tag(): Int 
  
  function tag_Types(t: Types): Int 
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain WellFoundedOrder[T]  {
  
  function bounded(arg1: T): Bool 
  
  function decreasing(arg1: T, arg2: T): Bool 
}

function Average_v1_5aa6d43_F(a_V0: Int, b_V0: Int): Int
{
  (a_V0 + b_V0) / 2
}

function Average_v2_5aa6d43_F(a_V0: Int, b_V0: Int): Int
  requires 0 <= a_V0 && 0 <= b_V0
{
  (a_V0 + b_V0) / 2
}

function F_5aa6d43_F(): Int
{
  29
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
function IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)


function IsEven_5aa6d43_F(x_V0: Int): Bool
{
  x_V0 % 2 == 0
}

function TriplePrime_5aa6d43_F(x_V0: Int): Int
  ensures Average_v1_5aa6d43_F(result, 3 * x_V0) == 3 * x_V0
{
  3 * x_V0 + 1
}

predicate ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]) 

method $IMPORTS_5aa6d43_5aa6d43()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method $IMPORTS_5aa6d43_a4af0e5e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_2d87b3e5()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_4c506ddf()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_59b32d88()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_5f4cc66()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_617cb834()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_7f394d0a()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_9a9b656c()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_dc7f3a69()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_f249faa7()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_5aa6d43_fcdbf3a7()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method Caller_5aa6d43_F()
{
  
  // decl 
  {
    
    
    
    // decl a_V0: int°°, N1: int°°, b_V0: int°°
    {
      var a_V0: Int
      var N1: Int
      var b_V0: Int
      
      // init a_V0
      inhale a_V0 == 0
      
      // a_V0 = F_5aa6d43_F()
      a_V0 := F_5aa6d43_F()
      
      // N1 = M_5aa6d43_F()
      N1 := M_5aa6d43_F()
      
      // init b_V0
      inhale b_V0 == 0
      
      // b_V0 = N1
      b_V0 := N1
      
      // assert a_V0 == 29
      assert a_V0 == 29
    }
    label returnLabel
  }
}

method Caller_MaxSum_5aa6d43_F()
{
  
  // decl 
  {
    
    
    
    // decl N0: int°°, N1: int°°, s_V0: int°°, m_V0: int°°
    {
      var N0: Int
      var N1: Int
      var s_V0: Int
      var m_V0: Int
      
      // N0, N1 = MaxSum_5aa6d43_F(1928, 1)
      N0, N1 := MaxSum_5aa6d43_F(1928, 1)
      
      // init s_V0
      inhale s_V0 == 0
      
      // init m_V0
      inhale m_V0 == 0
      
      // s_V0 = N0
      s_V0 := N0
      
      // m_V0 = N1
      m_V0 := N1
      
      // assert s_V0 == 1929
      assert s_V0 == 1929
      
      // assert m_V0 == 1928
      assert m_V0 == 1928
    }
    label returnLabel
  }
}

method Caller_v1_5aa6d43_F()
{
  
  // decl 
  {
    
    
    
    // decl N0: int°°, t_V0: int°°
    {
      var N0: Int
      var t_V0: Int
      
      // N0 = Triple_v4_5aa6d43_F(18)
      N0 := Triple_v4_5aa6d43_F(18)
      
      // init t_V0
      inhale t_V0 == 0
      
      // t_V0 = N0
      t_V0 := N0
    }
    label returnLabel
  }
}

method Caller_v2_5aa6d43_F()
{
  
  // decl 
  {
    
    
    
    // decl N0: int°°, t_V0: int°°
    {
      var N0: Int
      var t_V0: Int
      
      // N0 = Triple_v5_5aa6d43_F(18)
      N0 := Triple_v5_5aa6d43_F(18)
      
      // init t_V0
      inhale t_V0 == 0
      
      // t_V0 = N0
      t_V0 := N0
      
      // assert t_V0 < 100
      assert t_V0 < 100
    }
    label returnLabel
  }
}

method DoubleQuadruple_5aa6d43_F(x_V0: Int) returns (a_V0: Int, b_V0: Int)
  ensures a_V0 == 2 * x_V0 && b_V0 == 4 * x_V0
{
  inhale a_V0 == 0
  inhale b_V0 == 0
  
  // decl x_V0_CN0: int°°, a_V0_CN1: int°°, b_V0_CN2: int°°
  {
    var x_V0_CN0: Int
    var a_V0_CN1: Int
    var b_V0_CN2: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init a_V0_CN1
    inhale a_V0_CN1 == 0
    
    // init b_V0_CN2
    inhale b_V0_CN2 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl 
    
    // a_V0_CN1 = 2 * x_V0_CN0
    a_V0_CN1 := 2 * x_V0_CN0
    
    // b_V0_CN2 = 2 * a_V0_CN1
    b_V0_CN2 := 2 * a_V0_CN1
    
    // a_V0_CN1 = a_V0_CN1
    a_V0_CN1 := a_V0_CN1
    
    // b_V0_CN2 = b_V0_CN2
    b_V0_CN2 := b_V0_CN2
    
    // return
    goto returnLabel
    label returnLabel
    
    // a_V0 = a_V0_CN1
    a_V0 := a_V0_CN1
    
    // b_V0 = b_V0_CN2
    b_V0 := b_V0_CN2
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Duplicate_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==>
    acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)


// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Error_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))


method Exercise_1_4_a_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
  requires x_V0 % 10 == 0
  ensures r_V0 == 3 * x_V0
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°
    {
      var y_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = x_V0_CN0 / 2
      y_V1 := x_V0_CN0 / 2
      
      // r_V0_CN1 = 6 * y_V1
      r_V0_CN1 := 6 * y_V1
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Exercise_1_4_b_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
  requires x_V0 == 0
  ensures r_V0 == 3 * x_V0
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°
    {
      var y_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = x_V0_CN0 / 2
      y_V1 := x_V0_CN0 / 2
      
      // r_V0_CN1 = 6 * y_V1
      r_V0_CN1 := 6 * y_V1
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Index_v1_5aa6d43_F(n_V0: Int) returns (i_V0: Int)
  requires 1 <= n_V0
  ensures 0 <= i_V0 && i_V0 < n_V0
{
  inhale i_V0 == 0
  
  // decl n_V0_CN0: int°°, i_V0_CN1: int°°
  {
    var n_V0_CN0: Int
    var i_V0_CN1: Int
    
    
    
    // init n_V0_CN0
    inhale n_V0_CN0 == 0
    
    // init i_V0_CN1
    inhale i_V0_CN1 == 0
    
    // n_V0_CN0 = n_V0
    n_V0_CN0 := n_V0
    
    // decl 
    
    // i_V0_CN1 = n_V0_CN0 / 2
    i_V0_CN1 := n_V0_CN0 / 2
    
    // i_V0_CN1 = i_V0_CN1
    i_V0_CN1 := i_V0_CN1
    
    // return
    goto returnLabel
    label returnLabel
    
    // i_V0 = i_V0_CN1
    i_V0 := i_V0_CN1
  }
}

method Index_v2_5aa6d43_F(n_V0: Int) returns (i_V0: Int)
  requires 1 <= n_V0
  ensures 0 <= i_V0 && i_V0 < n_V0
{
  inhale i_V0 == 0
  
  // decl n_V0_CN0: int°°, i_V0_CN1: int°°
  {
    var n_V0_CN0: Int
    var i_V0_CN1: Int
    
    
    
    // init n_V0_CN0
    inhale n_V0_CN0 == 0
    
    // init i_V0_CN1
    inhale i_V0_CN1 == 0
    
    // n_V0_CN0 = n_V0
    n_V0_CN0 := n_V0
    
    // decl 
    
    // i_V0_CN1 = 0
    i_V0_CN1 := 0
    
    // i_V0_CN1 = i_V0_CN1
    i_V0_CN1 := i_V0_CN1
    
    // return
    goto returnLabel
    label returnLabel
    
    // i_V0 = i_V0_CN1
    i_V0 := i_V0_CN1
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)
  }
}

method M_5aa6d43_F() returns (r_V0: Int)
{
  inhale r_V0 == 0
  
  // decl r_V0_CN0: int°°
  {
    var r_V0_CN0: Int
    
    
    
    // init r_V0_CN0
    inhale r_V0_CN0 == 0
    
    // decl 
    
    // r_V0_CN0 = 29
    r_V0_CN0 := 29
    
    // r_V0_CN0 = r_V0_CN0
    r_V0_CN0 := r_V0_CN0
    
    // return
    goto returnLabel
    label returnLabel
    
    // r_V0 = r_V0_CN0
    r_V0 := r_V0_CN0
  }
}

method MaxSum_5aa6d43_F(x_V0: Int, y_V0: Int)
  returns (s_V0: Int, m_V0: Int)
  ensures x_V0 < y_V0 ==> m_V0 == y_V0
  ensures y_V0 <= x_V0 ==> m_V0 == x_V0
  ensures s_V0 == x_V0 + y_V0
{
  inhale s_V0 == 0
  inhale m_V0 == 0
  
  // decl x_V0_CN0: int°°, y_V0_CN1: int°°, s_V0_CN2: int°°, m_V0_CN3: int°°
  {
    var x_V0_CN0: Int
    var y_V0_CN1: Int
    var s_V0_CN2: Int
    var m_V0_CN3: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init y_V0_CN1
    inhale y_V0_CN1 == 0
    
    // init s_V0_CN2
    inhale s_V0_CN2 == 0
    
    // init m_V0_CN3
    inhale m_V0_CN3 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // y_V0_CN1 = y_V0
    y_V0_CN1 := y_V0
    
    // decl 
    
    // if(x_V0_CN0 < y_V0_CN1) {...} else {...}
    if (x_V0_CN0 < y_V0_CN1) {
      
      // decl 
      
      // m_V0_CN3 = y_V0_CN1
      m_V0_CN3 := y_V0_CN1
    } else {
      
      // decl 
      
      // m_V0_CN3 = x_V0_CN0
      m_V0_CN3 := x_V0_CN0
    }
    
    // s_V0_CN2 = x_V0_CN0 + y_V0_CN1
    s_V0_CN2 := x_V0_CN0 + y_V0_CN1
    
    // m_V0_CN3 = m_V0_CN3
    m_V0_CN3 := m_V0_CN3
    
    // return
    goto returnLabel
    label returnLabel
    
    // s_V0 = s_V0_CN2
    s_V0 := s_V0_CN2
    
    // m_V0 = m_V0_CN3
    m_V0 := m_V0_CN3
  }
}

method Min_5aa6d43_F(x_V0: Int, y_V0: Int) returns (m_V0: Int)
  ensures m_V0 <= x_V0 && m_V0 <= y_V0
{
  inhale m_V0 == 0
  
  // decl x_V0_CN0: int°°, y_V0_CN1: int°°, m_V0_CN2: int°°
  {
    var x_V0_CN0: Int
    var y_V0_CN1: Int
    var m_V0_CN2: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init y_V0_CN1
    inhale y_V0_CN1 == 0
    
    // init m_V0_CN2
    inhale m_V0_CN2 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // y_V0_CN1 = y_V0
    y_V0_CN1 := y_V0
    
    // decl 
    
    // if(x_V0_CN0 < y_V0_CN1) {...} else {...}
    if (x_V0_CN0 < y_V0_CN1) {
      
      // decl 
      
      // m_V0_CN2 = x_V0_CN0 - 1000
      m_V0_CN2 := x_V0_CN0 - 1000
      
      // return
      goto returnLabel
    } else {
      
      // decl 
      
      // m_V0_CN2 = y_V0_CN1 - 5
      m_V0_CN2 := y_V0_CN1 - 5
      
      // return
      goto returnLabel
    }
    label returnLabel
    
    // m_V0 = m_V0_CN2
    m_V0 := m_V0_CN2
  }
}

method Triple_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
  ensures r_V0 == 3 * x_V0
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°, N2: int°°, N3: int°°, a_V1: int°°, b_V1: int°°
    {
      var y_V1: Int
      var N2: Int
      var N3: Int
      var a_V1: Int
      var b_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = 2 * x_V0_CN0
      y_V1 := 2 * x_V0_CN0
      
      // r_V0_CN1 = x_V0_CN0 + y_V1
      r_V0_CN1 := x_V0_CN0 + y_V1
      
      // N2, N3 = DoubleQuadruple_5aa6d43_F(x_V0_CN0)
      N2, N3 := DoubleQuadruple_5aa6d43_F(x_V0_CN0)
      
      // init a_V1
      inhale a_V1 == 0
      
      // init b_V1
      inhale b_V1 == 0
      
      // a_V1 = N2
      a_V1 := N2
      
      // b_V1 = N3
      b_V1 := N3
      
      // assert a_V1 <= r_V0_CN1 && r_V0_CN1 <= b_V1 || b_V1 <= r_V0_CN1 && r_V0_CN1 <= a_V1
      assert a_V1 <= r_V0_CN1 && r_V0_CN1 <= b_V1 ||
        b_V1 <= r_V0_CN1 && r_V0_CN1 <= a_V1
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Triple_v1_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°
    {
      var y_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = 2 * x_V0_CN0
      y_V1 := 2 * x_V0_CN0
      
      // r_V0_CN1 = x_V0_CN0 + y_V1
      r_V0_CN1 := x_V0_CN0 + y_V1
      
      // r_V0_CN1 = r_V0_CN1
      r_V0_CN1 := r_V0_CN1
      
      // return
      goto returnLabel
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Triple_v4_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl 
    
    // if(x_V0_CN0 == 0) {...} else {...}
    if (x_V0_CN0 == 0) {
      
      // decl 
      
      // r_V0_CN1 = 0
      r_V0_CN1 := 0
    } else {
      
      // decl y_V1: int°°
      {
        var y_V1: Int
        
        // init y_V1
        inhale y_V1 == 0
        
        // y_V1 = 2 * x_V0_CN0
        y_V1 := 2 * x_V0_CN0
        
        // r_V0_CN1 = x_V0_CN0 + y_V1
        r_V0_CN1 := x_V0_CN0 + y_V1
      }
    }
    
    // assert r_V0_CN1 == 3 * x_V0_CN0
    assert r_V0_CN1 == 3 * x_V0_CN0
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Triple_v5_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
  ensures r_V0 == 3 * x_V0
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°
    {
      var y_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = 2 * x_V0_CN0
      y_V1 := 2 * x_V0_CN0
      
      // r_V0_CN1 = x_V0_CN0 + y_V1
      r_V0_CN1 := x_V0_CN0 + y_V1
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Triple_v6_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
  requires x_V0 % 2 == 0
  ensures r_V0 == 3 * x_V0
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°
    {
      var y_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = x_V0_CN0 / 2
      y_V1 := x_V0_CN0 / 2
      
      // r_V0_CN1 = 6 * y_V1
      r_V0_CN1 := 6 * y_V1
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Triple_v8_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
  ensures r_V0 == 3 * x_V0
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl 
    
    // if(0 <= x_V0_CN0) {...} else {...}
    if (0 <= x_V0_CN0) {
      
      // decl 
      
      // r_V0_CN1 = Average_v2_5aa6d43_F(2 * x_V0_CN0, 4 * x_V0_CN0)
      r_V0_CN1 := Average_v2_5aa6d43_F(2 * x_V0_CN0, 4 * x_V0_CN0)
    } else {
      
      // decl 
      
      // r_V0_CN1 = 0 - Average_v2_5aa6d43_F(0 - 2 * x_V0_CN0, 0 - 4 * x_V0_CN0)
      r_V0_CN1 := 0 -
        Average_v2_5aa6d43_F((0 - 2) * x_V0_CN0, (0 - 4) * x_V0_CN0)
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Truple_v2_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°
    {
      var y_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = 2 * x_V0_CN0
      y_V1 := 2 * x_V0_CN0
      
      // r_V0_CN1 = x_V0_CN0 + y_V1
      r_V0_CN1 := x_V0_CN0 + y_V1
      
      // assert r_V0_CN1 == 3 * x_V0_CN0
      assert r_V0_CN1 == 3 * x_V0_CN0
      
      // r_V0_CN1 = r_V0_CN1
      r_V0_CN1 := r_V0_CN1
      
      // return
      goto returnLabel
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Truple_v3_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl y_V1: int°°
    {
      var y_V1: Int
      
      // init y_V1
      inhale y_V1 == 0
      
      // y_V1 = 2 * x_V0_CN0
      y_V1 := 2 * x_V0_CN0
      
      // r_V0_CN1 = x_V0_CN0 + y_V1
      r_V0_CN1 := x_V0_CN0 + y_V1
      
      // r_V0_CN1 = r_V0_CN1
      r_V0_CN1 := r_V0_CN1
      
      // return
      goto returnLabel
    }
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method Truple_v7_5aa6d43_F(x_V0: Int) returns (r_V0: Int)
  ensures Average_v1_5aa6d43_F(r_V0, 3 * x_V0) == 3 * x_V0
{
  inhale r_V0 == 0
  
  // decl x_V0_CN0: int°°, r_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var r_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init r_V0_CN1
    inhale r_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl 
    
    // r_V0_CN1 = 3 * x_V0_CN0
    r_V0_CN1 := 3 * x_V0_CN0
    
    // r_V0_CN1 = r_V0_CN1
    r_V0_CN1 := r_V0_CN1
    
    // return
    goto returnLabel
    label returnLabel
    
    // r_V0 = r_V0_CN1
    r_V0 := r_V0_CN1
  }
}

method panic_a4af0e5e_F(v_V0: Tuple2[Ref, Types])
  requires false
