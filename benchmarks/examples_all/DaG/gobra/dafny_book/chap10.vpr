domain ADT$BraunTree_1d959445_T  {
  
  function ADT$BraunTree_1d959445_T_Leaf_1d959445_F(): ADT$BraunTree_1d959445_T 
  
  unique function ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag(): Int 
  
  function ADT$BraunTree_1d959445_T_Node_1d959445_F(xA: Int, leftA: ADT$BraunTree_1d959445_T,
  rightA: ADT$BraunTree_1d959445_T): ADT$BraunTree_1d959445_T 
  
  unique function ADT$BraunTree_1d959445_T_Node_1d959445_F_tag(): Int 
  
  function ADT$BraunTree_1d959445_T_dflt(): ADT$BraunTree_1d959445_T 
  
  function ADT$BraunTree_1d959445_T_leftA(t: ADT$BraunTree_1d959445_T): ADT$BraunTree_1d959445_T 
  
  function ADT$BraunTree_1d959445_T_rightA(t: ADT$BraunTree_1d959445_T): ADT$BraunTree_1d959445_T 
  
  function ADT$BraunTree_1d959445_T_tag(t: ADT$BraunTree_1d959445_T): Int 
  
  function ADT$BraunTree_1d959445_T_xA(t: ADT$BraunTree_1d959445_T): Int 
  
  function rank$ADT$BraunTree_1d959445_T(x: ADT$BraunTree_1d959445_T): Int 
  
  axiom {
    (forall t: ADT$BraunTree_1d959445_T ::
      { ADT$BraunTree_1d959445_T_tag(t) }
      t == ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
      t ==
      ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(t),
      ADT$BraunTree_1d959445_T_leftA(t), ADT$BraunTree_1d959445_T_rightA(t)))
  }
  
  axiom {
    (forall t: ADT$BraunTree_1d959445_T ::
      { ADT$BraunTree_1d959445_T_xA(t) }
      { ADT$BraunTree_1d959445_T_leftA(t) }
      { ADT$BraunTree_1d959445_T_rightA(t) }
      ADT$BraunTree_1d959445_T_tag(t) ==
      ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() ==>
      t ==
      ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(t),
      ADT$BraunTree_1d959445_T_leftA(t), ADT$BraunTree_1d959445_T_rightA(t)))
  }
  
  axiom {
    (forall x: ADT$BraunTree_1d959445_T ::
      { rank$ADT$BraunTree_1d959445_T(x) }
      0 <= rank$ADT$BraunTree_1d959445_T(x))
  }
  
  axiom {
    (forall xA: Int, leftA: ADT$BraunTree_1d959445_T, rightA: ADT$BraunTree_1d959445_T ::
      { ADT$BraunTree_1d959445_T_Node_1d959445_F(xA, leftA, rightA) }
      ADT$BraunTree_1d959445_T_tag(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)) ==
      ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
      ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)) ==
      xA &&
      ADT$BraunTree_1d959445_T_leftA(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)) ==
      leftA &&
      ADT$BraunTree_1d959445_T_rightA(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)) ==
      rightA)
  }
  
  axiom {
    (forall xA: Int, leftA: ADT$BraunTree_1d959445_T, rightA: ADT$BraunTree_1d959445_T ::
      { rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)) }
      rank$ADT$BraunTree_1d959445_T(leftA) <
      rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)))
  }
  
  axiom {
    (forall xA: Int, leftA: ADT$BraunTree_1d959445_T, rightA: ADT$BraunTree_1d959445_T ::
      { rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)) }
      rank$ADT$BraunTree_1d959445_T(rightA) <
      rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_Node_1d959445_F(xA,
      leftA, rightA)))
  }
  
  axiom {
    ADT$BraunTree_1d959445_T_tag(ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()
  }
}

domain IntWellFoundedOrder  {
  
  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
}

domain PredicateInstance  {
  
  
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
}

domain String  {
  
  function strConcat(l: Int, r: Int): Int 
  
  function strLen(id: Int): Int 
  
  unique function stringLit(): Int 
  
  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
}

domain Tuple0  {
  
  function tuple0(): Tuple0 
}

domain Tuple2[T0, T1]  {
  
  function get0of2(p: Tuple2[T0, T1]): T0 
  
  function get1of2(p: Tuple2[T0, T1]): T1 
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1] 
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Types  {
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool 
  
  function comparableType_Types(t: Types): Bool 
  
  function empty_interface_Types(): Types 
  
  unique function empty_interface_Types_tag(): Int 
  
  function nil_Types(): Types 
  
  unique function nil_Types_tag(): Int 
  
  function tag_Types(t: Types): Int 
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain WellFoundedOrder[T]  {
  
  function bounded(arg1: T): Bool 
  
  function decreasing(arg1: T, arg2: T): Bool 
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function BinaryHeapStoresMinimum_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int): Tuple0
  requires IsBinaryHeap_1d959445_MPQueue(pq_V0) &&
    0 < ((y_V0 in Elements_1d959445_MPQueue(pq_V0)))
  ensures ADT$BraunTree_1d959445_T_xA(pq_V0) <= y_V0
{
  assertArg2_Tuple0(ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ||
  ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
  true &&
  true &&
  true, (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ?
    tuple0() :
    (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
    ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
    true &&
    true &&
    true ?
      (let x_V1 ==
        (ADT$BraunTree_1d959445_T_xA(pq_V0)) in
        (let l_V1 ==
          (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
          (let r_V1 ==
            (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
            (let __V5 ==
              (asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
              ((Multiset(x_V1) union Elements_1d959445_MPQueue(l_V1)) union
              Elements_1d959445_MPQueue(r_V1)))) in
              (let minL_V4 ==
                ((l_V1 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                  x_V1 :
                  ADT$BraunTree_1d959445_T_xA(l_V1))) in
                (let minR_V3 ==
                  ((r_V1 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                    x_V1 :
                    ADT$BraunTree_1d959445_T_xA(r_V1))) in
                  (let __V2 ==
                    ((0 < ((y_V0 in Elements_1d959445_MPQueue(l_V1))) ?
                      BinaryHeapStoresMinimum_1d959445_MPQueue(l_V1, y_V0) :
                      tuple0())) in
                    (0 < ((y_V0 in Elements_1d959445_MPQueue(r_V1))) ?
                      BinaryHeapStoresMinimum_1d959445_MPQueue(r_V1, y_V0) :
                      tuple0())))))))) :
      tuple0())))
}

// decreases 
function BraunTreeImplication_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Tuple0
  requires !IsEmpty_1d959445_MPQueue(pq_V0)
  ensures IsBalanced_1d959445_MPQueue(pq_V0) ==>
    ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ==>
    ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F()
{
  (let L_V1 ==
    (|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|) in
    (let R_V2 ==
      (|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))|) in
      (IsBalanced_1d959445_MPQueue(pq_V0) ?
        (let __V3 ==
          (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pq_V0))) in
          asserting_1d959445_F(L_V1 == R_V2 || L_V1 == R_V2 + 1)) :
        tuple0())))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function DeleteMinCorrect_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Tuple0
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !(pq_V0 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F())
  ensures (let pqPrime_V1 ==
      (DeleteMin_1d959445_MPQueue(pq_V0)) in
      Valid_1d959445_MPQueue(pqPrime_V1) &&
      (Elements_1d959445_MPQueue(pqPrime_V1) union
      Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))) ==
      Elements_1d959445_MPQueue(pq_V0))
{
  (let pqPrime_V2 ==
    (DeleteMin_1d959445_MPQueue(pq_V0)) in
    (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
    ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
      tuple0() :
      (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <=
      ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)) ?
        (let __V4 ==
          (DeleteMinCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) in
          (let __V3 ==
            (asserting_1d959445_F(Valid_1d959445_MPQueue(DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))))) in
            asserting_1d959445_F(Valid_1d959445_MPQueue(pqPrime_V2)))) :
        (let newX_V6 ==
          (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) in
          (let newLeft_V7 ==
            (ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
            ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))) in
            (let newRight_V5 ==
              (DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) in
              (let __V13 ==
                (DeleteMinCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) in
                (let __V12 ==
                  (asserting_1d959445_F(Valid_1d959445_MPQueue(DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))))) in
                  (let __V11 ==
                    (ReplaceRootCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
                    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))) in
                    (let __V10 ==
                      (asserting_1d959445_F(Valid_1d959445_MPQueue(pqPrime_V2))) in
                      (let __V9 ==
                        (asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                        ((Multiset(newX_V6) union
                        Elements_1d959445_MPQueue(newLeft_V7)) union
                        Elements_1d959445_MPQueue(newRight_V5)))) in
                        (let __V8 ==
                          (asserting_1d959445_F((Elements_1d959445_MPQueue(pqPrime_V2) union
                          Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))) ==
                          (((Multiset(newX_V6) union
                          Elements_1d959445_MPQueue(newLeft_V7)) union
                          Elements_1d959445_MPQueue(newRight_V5)) union
                          Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))))) in
                          asserting_1d959445_F((Elements_1d959445_MPQueue(pqPrime_V2) union
                          Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))) ==
                          (((Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0)) union
                          Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))) union
                          Elements_1d959445_MPQueue(newRight_V5)) union
                          Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))))))))))))))))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function DeleteMin_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): ADT$BraunTree_1d959445_T
  requires IsBalanced_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
{
  (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
  ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
    ADT$BraunTree_1d959445_T_leftA(pq_V0) :
    (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <=
    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)) ?
      ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
      ADT$BraunTree_1d959445_T_rightA(pq_V0), DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) :
      ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)),
      ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0), ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0))),
      DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0)))))
}

// decreases 
function ElementsIntrinsic_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Multiset[Int]
{
  Elements_1d959445_MPQueue(pq_V0)
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function Elements_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Multiset[Int]
{
  assertArg2_Multiset_Int(ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ||
  ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
  true &&
  true &&
  true, (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ?
    Multiset[Int]() :
    (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
    ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
    true &&
    true &&
    true ?
      (let x_V1 ==
        (ADT$BraunTree_1d959445_T_xA(pq_V0)) in
        (let left_V1 ==
          (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
          (let right_V1 ==
            (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
            ((Multiset(x_V1) union Elements_1d959445_MPQueue(left_V1)) union
            Elements_1d959445_MPQueue(right_V1))))) :
      Multiset[Int]())))
}

// decreases 
function EmptyCorrect_1d959445_F(): Tuple0
  ensures (let pq_V1 ==
      (Empty_1d959445_F()) in
      Valid_1d959445_MPQueue(pq_V1) &&
      Elements_1d959445_MPQueue(pq_V1) == Multiset[Int]())
{
  tuple0()
}

// decreases 
function EmptyIntrinsic_1d959445_F(): ADT$BraunTree_1d959445_T
  ensures ValidIntrinsic_1d959445_MPQueue(result)
  ensures ElementsIntrinsic_1d959445_MPQueue(result) == Multiset[Int]()
{
  (let __V1 ==
    (EmptyCorrect_1d959445_F()) in
    Empty_1d959445_F())
}

// decreases 
function Empty_1d959445_F(): ADT$BraunTree_1d959445_T
{
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F()
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function InsertCorrect_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T, y_V0: Int): Tuple0
  requires Valid_1d959445_MPQueue(pq_V0)
  ensures (let pqPrime_V1 ==
      (Insert_1d959445_MPQueue(pq_V0, y_V0)) in
      Valid_1d959445_MPQueue(pqPrime_V1) &&
      Elements_1d959445_MPQueue(pqPrime_V1) ==
      (Elements_1d959445_MPQueue(pq_V0) union Multiset(y_V0)))
{
  assertArg2_Tuple0(ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ||
  ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
  true &&
  true &&
  true, (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ?
    tuple0() :
    (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
    ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
    true &&
    true &&
    true ?
      (let x_V2 ==
        (ADT$BraunTree_1d959445_T_xA(pq_V0)) in
        (let l_V2 ==
          (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
          (let r_V2 ==
            (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
            (let pqPrime_V3 ==
              (Insert_1d959445_MPQueue(pq_V0, y_V0)) in
              (let min_V17 ==
                ((y_V0 < x_V2 ? y_V0 : x_V2)) in
                (let max_V12 ==
                  ((y_V0 < x_V2 ? x_V2 : y_V0)) in
                  (let newRight_V7 ==
                    (Insert_1d959445_MPQueue(r_V2, max_V12)) in
                    (let __V18 ==
                      (asserting_1d959445_F(pqPrime_V3 ==
                      ADT$BraunTree_1d959445_T_Node_1d959445_F(min_V17, newRight_V7,
                      l_V2))) in
                      (let __V16 ==
                        (asserting_1d959445_F((let L_V14 ==
                          (|Elements_1d959445_MPQueue(l_V2)|) in
                          (let R_V15 ==
                            (|Elements_1d959445_MPQueue(r_V2)|) in
                            L_V14 == R_V15 || L_V14 == R_V15 + 1)))) in
                        (let __V13 ==
                          (InsertCorrect_1d959445_MPQueue(r_V2, max_V12)) in
                          (let __V11 ==
                            (asserting_1d959445_F(Valid_1d959445_MPQueue(newRight_V7))) in
                            (let __V10 ==
                              (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newRight_V7))) in
                              (let __V9 ==
                                (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(l_V2))) in
                                (let __V8 ==
                                  (asserting_1d959445_F((let Lprime_V5 ==
                                    (|Elements_1d959445_MPQueue(newRight_V7)|) in
                                    (let Rprime_V6 ==
                                      (|Elements_1d959445_MPQueue(l_V2)|) in
                                      Lprime_V5 == Rprime_V6 ||
                                      Lprime_V5 == Rprime_V6 + 1)))) in
                                  (let __V4 ==
                                    (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V3))) in
                                    asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(pqPrime_V3))))))))))))))))) :
      tuple0())))
}

// decreases 
function InsertIntrinsic_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T, y_V0: Int): ADT$BraunTree_1d959445_T
  requires ValidIntrinsic_1d959445_MPQueue(pq_V0)
  ensures ValidIntrinsic_1d959445_MPQueue(result)
  ensures ElementsIntrinsic_1d959445_MPQueue(result) ==
    (Multiset(y_V0) union ElementsIntrinsic_1d959445_MPQueue(pq_V0))
{
  (let __V1 ==
    (InsertCorrect_1d959445_MPQueue(pq_V0, y_V0)) in
    Insert_1d959445_MPQueue(pq_V0, y_V0))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function Insert_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T, y_V0: Int): ADT$BraunTree_1d959445_T
{
  assertArg2_ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ||
  ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
  true &&
  true &&
  true, (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ?
    ADT$BraunTree_1d959445_T_Node_1d959445_F(y_V0, ADT$BraunTree_1d959445_T_Leaf_1d959445_F(),
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) :
    (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
    ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
    true &&
    true &&
    true ?
      (let x_V1 ==
        (ADT$BraunTree_1d959445_T_xA(pq_V0)) in
        (let left_V1 ==
          (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
          (let right_V1 ==
            (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
            (y_V0 < x_V1 ?
              ADT$BraunTree_1d959445_T_Node_1d959445_F(y_V0, Insert_1d959445_MPQueue(right_V1,
              x_V1), left_V1) :
              ADT$BraunTree_1d959445_T_Node_1d959445_F(x_V1, Insert_1d959445_MPQueue(right_V1,
              y_V0), left_V1))))) :
      ADT$BraunTree_1d959445_T_dflt())))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function IsBalanced_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Bool
{
  assertArg2_Bool(ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ||
  ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
  true &&
  true &&
  true, (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ?
    true :
    (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
    ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
    true &&
    true &&
    true ?
      (let left_V1 ==
        (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
        (let right_V1 ==
          (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
          IsBalanced_1d959445_MPQueue(left_V1) &&
          IsBalanced_1d959445_MPQueue(right_V1) &&
          (let L_V2 ==
            (|Elements_1d959445_MPQueue(left_V1)|) in
            (let R_V3 ==
              (|Elements_1d959445_MPQueue(right_V1)|) in
              L_V2 == R_V3 || L_V2 == R_V3 + 1)))) :
      false)))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function IsBinaryHeap_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Bool
{
  assertArg2_Bool(ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ||
  ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
  true &&
  true &&
  true, (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ?
    true :
    (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
    ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
    true &&
    true &&
    true ?
      (let x_V1 ==
        (ADT$BraunTree_1d959445_T_xA(pq_V0)) in
        (let left_V1 ==
          (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
          (let right_V1 ==
            (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
            IsBinaryHeap_1d959445_MPQueue(left_V1) &&
            IsBinaryHeap_1d959445_MPQueue(right_V1) &&
            (left_V1 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
            x_V1 <= ADT$BraunTree_1d959445_T_xA(left_V1)) &&
            (right_V1 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
            x_V1 <= ADT$BraunTree_1d959445_T_xA(right_V1))))) :
      false)))
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
function IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)


// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function IsEmptyCorrect_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Tuple0
  requires Valid_1d959445_MPQueue(pq_V0)
  ensures IsEmpty_1d959445_MPQueue(pq_V0) ==
    (Elements_1d959445_MPQueue(pq_V0) == Multiset[Int]())
{
  tuple0()
}

// decreases 
function IsEmptyIntrinsic_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Bool
  requires ValidIntrinsic_1d959445_MPQueue(pq_V0)
  ensures result ==
    (ElementsIntrinsic_1d959445_MPQueue(pq_V0) == Multiset[Int]())
{
  (let __V1 ==
    (IsEmptyCorrect_1d959445_MPQueue(pq_V0)) in
    IsEmpty_1d959445_MPQueue(pq_V0))
}

// decreases 
function IsEmpty_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Bool
{
  pq_V0 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F()
}

// decreases 
function IsMinIntrinsic_1d959445_F(m_V0: Int, s_V0: Multiset[Int]): Bool
{
  IsMin_1d959445_F(m_V0, s_V0)
}

// decreases 
function IsMin_1d959445_F(y_V0: Int, s_V0: Multiset[Int]): Bool
{
  0 < ((y_V0 in s_V0)) &&
  (forall x_V1: Int ::
    { (x_V1 in s_V0) }
    (0 < ((x_V1 in s_V0)) ? y_V0 <= x_V1 : true))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function RemoveMinCorrect_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Tuple0
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
  ensures (let pair_V3 ==
      (RemoveMin_1d959445_MPQueue(pq_V0)) in
      (let y_V2 ==
        ((get0of2(pair_V3): Int)) in
        (let pqPrime_V1 ==
          ((get1of2(pair_V3): ADT$BraunTree_1d959445_T)) in
          Valid_1d959445_MPQueue(pqPrime_V1) &&
          IsMin_1d959445_F(y_V2, Elements_1d959445_MPQueue(pq_V0)) &&
          (Elements_1d959445_MPQueue(pqPrime_V1) union Multiset(y_V2)) ==
          Elements_1d959445_MPQueue(pq_V0))))
{
  assertArg2_Tuple0(ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ||
  ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
  true &&
  true &&
  true, (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag() ?
    tuple0() :
    (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
    ADT$BraunTree_1d959445_T_Node_1d959445_F_tag() &&
    true &&
    true &&
    true ?
      (let x_V4 ==
        (ADT$BraunTree_1d959445_T_xA(pq_V0)) in
        (let l_V4 ==
          (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
          (let r_V4 ==
            (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
            (let pair_V16 ==
              (RemoveMin_1d959445_MPQueue(pq_V0)) in
              (let __V18 ==
                (DeleteMinCorrect_1d959445_MPQueue(pq_V0)) in
                (let y_V5 ==
                  ((get0of2(pair_V16): Int)) in
                  (let pqPrime_V17 ==
                    ((get1of2(pair_V16): ADT$BraunTree_1d959445_T)) in
                    (let __V15 ==
                      (asserting_1d959445_F(y_V5 == x_V4)) in
                      (let __V14 ==
                        (asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                        ((Multiset(x_V4) union
                        Elements_1d959445_MPQueue(l_V4)) union
                        Elements_1d959445_MPQueue(r_V4)))) in
                        (let minL_V8 ==
                          ((l_V4 ==
                          ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                            x_V4 :
                            (get0of2(RemoveMin_1d959445_MPQueue(l_V4)): Int))) in
                          (let minR_V6 ==
                            ((r_V4 ==
                            ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                              x_V4 :
                              (get0of2(RemoveMin_1d959445_MPQueue(r_V4)): Int))) in
                            (let __V13 ==
                              ((l_V4 ==
                              ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                                tuple0() :
                                RemoveMinCorrect_1d959445_MPQueue(l_V4))) in
                              (let __V12 ==
                                ((r_V4 ==
                                ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                                  tuple0() :
                                  RemoveMinCorrect_1d959445_MPQueue(r_V4))) in
                                (let __V11 ==
                                  (asserting_1d959445_F(y_V5 <= minL_V8)) in
                                  (let __V10 ==
                                    (asserting_1d959445_F(y_V5 <= minR_V6)) in
                                    (let __V9 ==
                                      ((!(l_V4 ==
                                      ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) ?
                                        asserting_1d959445_F(IsMin_1d959445_F(minL_V8,
                                        Elements_1d959445_MPQueue(l_V4))) :
                                        tuple0())) in
                                      (let __V7 ==
                                        ((!(r_V4 ==
                                        ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) ?
                                          asserting_1d959445_F(IsMin_1d959445_F(minR_V6,
                                          Elements_1d959445_MPQueue(r_V4))) :
                                          tuple0())) in
                                        asserting_1d959445_F(IsMin_1d959445_F(y_V5,
                                        Elements_1d959445_MPQueue(pq_V0)))))))))))))))))))) :
      tuple0())))
}

// decreases 
function RemoveMinIntrinsic_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Tuple2[Int, ADT$BraunTree_1d959445_T]
  requires ValidIntrinsic_1d959445_MPQueue(pq_V0) &&
    !IsEmptyIntrinsic_1d959445_MPQueue(pq_V0)
  ensures (let y_V2 ==
      ((get0of2(result): Int)) in
      (let pqPrime_V1 ==
        ((get1of2(result): ADT$BraunTree_1d959445_T)) in
        Valid_1d959445_MPQueue(pqPrime_V1) &&
        IsMinIntrinsic_1d959445_F(y_V2, ElementsIntrinsic_1d959445_MPQueue(pq_V0)) &&
        (ElementsIntrinsic_1d959445_MPQueue(pqPrime_V1) union
        Multiset(y_V2)) ==
        ElementsIntrinsic_1d959445_MPQueue(pq_V0)))
{
  (let __V3 ==
    (RemoveMinCorrect_1d959445_MPQueue(pq_V0)) in
    RemoveMin_1d959445_MPQueue(pq_V0))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function RemoveMin_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Tuple2[Int, ADT$BraunTree_1d959445_T]
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
{
  (tuple2(ADT$BraunTree_1d959445_T_xA(pq_V0), DeleteMin_1d959445_MPQueue(pq_V0)): Tuple2[Int, ADT$BraunTree_1d959445_T])
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function ReplaceRootCorrect_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int): Tuple0
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
  ensures (let pqPrime_V1 ==
      (ReplaceRoot_1d959445_MPQueue(pq_V0, y_V0)) in
      Valid_1d959445_MPQueue(pqPrime_V1) &&
      (Elements_1d959445_MPQueue(pq_V0) union Multiset(y_V0)) ==
      (Elements_1d959445_MPQueue(pqPrime_V1) union
      Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))) &&
      |Elements_1d959445_MPQueue(pqPrime_V1)| ==
      |Elements_1d959445_MPQueue(pq_V0)|)
{
  (let pqPrime_V2 ==
    (ReplaceRoot_1d959445_MPQueue(pq_V0, y_V0)) in
    (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
    y_V0 <=
    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) &&
    (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
    y_V0 <=
    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) ?
      tuple0() :
      (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
      ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
        (let newLeft_V3 ==
          (ADT$BraunTree_1d959445_T_Node_1d959445_F(y_V0, ADT$BraunTree_1d959445_T_Leaf_1d959445_F(),
          ADT$BraunTree_1d959445_T_Leaf_1d959445_F())) in
          (let newRight_V4 ==
            (ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) in
            (let __V20 ==
              (asserting_1d959445_F(pqPrime_V2 ==
              ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
              newLeft_V3, newRight_V4))) in
              (let __V19 ==
                (asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                ((Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                Elements_1d959445_MPQueue(newLeft_V3)) union
                Elements_1d959445_MPQueue(newRight_V4)))) in
                (let __V18 ==
                  (asserting_1d959445_F(Elements_1d959445_MPQueue(newLeft_V3) ==
                  Multiset(y_V0))) in
                  (let __V17 ==
                    (asserting_1d959445_F(Elements_1d959445_MPQueue(newRight_V4) ==
                    Multiset[Int]())) in
                    (let __V16 ==
                      (asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                      Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
                      y_V0))) in
                      (let __V15 ==
                        (asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                        ((Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0)) union
                        Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                        Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))))) in
                        (let __V14 ==
                          (asserting_1d959445_F(Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0)) ==
                          Multiset[Int]())) in
                          (let __V13 ==
                            (asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                            1 ==
                            |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|)) in
                            (let __V12 ==
                              (asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                              0)) in
                              (let __V11 ==
                                (asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ==
                                1)) in
                                (let __V10 ==
                                  (asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ==
                                  1 +
                                  |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))| +
                                  |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))|)) in
                                  (let __V9 ==
                                    (asserting_1d959445_F(IsEmpty_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(ADT$BraunTree_1d959445_T_leftA(pq_V0))) &&
                                    IsEmpty_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(ADT$BraunTree_1d959445_T_leftA(pq_V0))))) in
                                    (let __V8 ==
                                      (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newLeft_V3) &&
                                      IsBalanced_1d959445_MPQueue(newRight_V4))) in
                                      (let __V7 ==
                                        (asserting_1d959445_F(|Elements_1d959445_MPQueue(newLeft_V3)| ==
                                        1 +
                                        |Elements_1d959445_MPQueue(newRight_V4)|)) in
                                        (let __V6 ==
                                          (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V2))) in
                                          (let __V5 ==
                                            (asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(newLeft_V3) &&
                                            IsBinaryHeap_1d959445_MPQueue(newRight_V4))) in
                                            asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(pqPrime_V2)))))))))))))))))))) :
        (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <
        ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)) ?
          (let newX_V34 ==
            (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0))) in
            (let newLeft_V23 ==
              (ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0),
              y_V0)) in
              (let newRight_V33 ==
                (ADT$BraunTree_1d959445_T_rightA(pq_V0)) in
                (let __V32 ==
                  (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pq_V0))) in
                  (let __V31 ==
                    (asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                    1 ==
                    |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ||
                    |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                    |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|)) in
                    (let __V30 ==
                      (ReplaceRootCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0),
                      y_V0)) in
                      (let __V29 ==
                        (asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                        1 ==
                        |Elements_1d959445_MPQueue(newLeft_V23)| ||
                        |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                        |Elements_1d959445_MPQueue(newLeft_V23)|)) in
                        (let __V28 ==
                          (asserting_1d959445_F(Valid_1d959445_MPQueue(newLeft_V23))) in
                          (let __V27 ==
                            (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newLeft_V23))) in
                            (let __V26 ==
                              (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V2))) in
                              (let __V25 ==
                                (asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(pqPrime_V2))) in
                                (let __V24 ==
                                  (asserting_1d959445_F((Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0)) union
                                  Multiset(y_V0)) ==
                                  (Elements_1d959445_MPQueue(newLeft_V23) union
                                  Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))))) in
                                  (let __V22 ==
                                    (asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                                    ((Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0)) union
                                    Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                                    Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))))) in
                                    (let __V21 ==
                                      (asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                                      ((Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                                      Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pqPrime_V2))) union
                                      Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pqPrime_V2))))) in
                                      asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                                      ((Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0)) union
                                      Multiset(y_V0)) union
                                      Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pqPrime_V2)))))))))))))))))) :
          (let newX_V48 ==
            (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) in
            (let newLeft_V43 ==
              (ADT$BraunTree_1d959445_T_leftA(pq_V0)) in
              (let newRight_V37 ==
                (ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
                y_V0)) in
                (let __V47 ==
                  (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pq_V0))) in
                  (let __V46 ==
                    (asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                    1 ==
                    |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ||
                    |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                    |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|)) in
                    (let __V45 ==
                      (ReplaceRootCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
                      y_V0)) in
                      (let __V44 ==
                        (asserting_1d959445_F(|Elements_1d959445_MPQueue(newRight_V37)| +
                        1 ==
                        |Elements_1d959445_MPQueue(newLeft_V43)| ||
                        |Elements_1d959445_MPQueue(newRight_V37)| ==
                        |Elements_1d959445_MPQueue(newLeft_V43)|)) in
                        (let __V42 ==
                          (asserting_1d959445_F(Valid_1d959445_MPQueue(newRight_V37))) in
                          (let __V41 ==
                            (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newRight_V37))) in
                            (let __V40 ==
                              (asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V2))) in
                              (let __V39 ==
                                (asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(pqPrime_V2))) in
                                (let __V38 ==
                                  (asserting_1d959445_F((Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0)) union
                                  Multiset(y_V0)) ==
                                  (Elements_1d959445_MPQueue(newRight_V37) union
                                  Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)))))) in
                                  (let __V36 ==
                                    (asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                                    ((Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0)) union
                                    Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                                    Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))))) in
                                    (let __V35 ==
                                      (asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                                      ((Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) union
                                      Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pqPrime_V2))) union
                                      Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pqPrime_V2))))) in
                                      asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                                      ((Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0)) union
                                      Multiset(y_V0)) union
                                      Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pqPrime_V2))))))))))))))))))))))
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function ReplaceRoot_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T, y_V0: Int): ADT$BraunTree_1d959445_T
  requires !IsEmpty_1d959445_MPQueue(pq_V0)
{
  (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
  y_V0 <=
  ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) &&
  (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
  y_V0 <=
  ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) ?
    ADT$BraunTree_1d959445_T_Node_1d959445_F(y_V0, ADT$BraunTree_1d959445_T_leftA(pq_V0),
    ADT$BraunTree_1d959445_T_rightA(pq_V0)) :
    (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
      ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
      ADT$BraunTree_1d959445_T_Node_1d959445_F(y_V0, ADT$BraunTree_1d959445_T_Leaf_1d959445_F(),
      ADT$BraunTree_1d959445_T_Leaf_1d959445_F()), ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) :
      (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <
      ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)) ?
        ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
        ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0),
        y_V0), ADT$BraunTree_1d959445_T_rightA(pq_V0)) :
        ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)),
        ADT$BraunTree_1d959445_T_leftA(pq_V0), ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
        y_V0)))))
}

// decreases 
function ValidIntrinsic_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Bool
{
  Valid_1d959445_MPQueue(pq_V0)
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
function Valid_1d959445_MPQueue(pq_V0: ADT$BraunTree_1d959445_T): Bool
{
  IsBinaryHeap_1d959445_MPQueue(pq_V0) &&
  IsBalanced_1d959445_MPQueue(pq_V0)
}

// decreases 
function assertArg2_ADT$BraunTree_1d959445_T(b: Bool, y: ADT$BraunTree_1d959445_T): ADT$BraunTree_1d959445_T
  requires b
{
  y
}

// decreases 
function assertArg2_Bool(b: Bool, y: Bool): Bool
  requires b
{
  y
}

// decreases 
function assertArg2_Multiset_Int(b: Bool, y: Multiset[Int]): Multiset[Int]
  requires b
{
  y
}

// decreases 
function assertArg2_Tuple0(b: Bool, y: Tuple0): Tuple0
  requires b
{
  y
}

// decreases 
function asserting_1d959445_F(b_V0: Bool): Tuple0
  requires b_V0
{
  tuple0()
}

predicate ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]) 

method $IMPORTS_1d959445_1d959445()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method $IMPORTS_1d959445_a4af0e5e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_1d959445_1461189c()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_1d959445_26bd47a6()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_1d959445_65e29755()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_1d959445_8ae2a2c5()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_1d959445_c35e0e7()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_1d959445_c43fa1e5()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_1d959445_c98a7c66()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method BinaryHeapStoresMinimum_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
  requires IsBinaryHeap_1d959445_MPQueue(pq_V0) &&
    0 < ((y_V0 in Elements_1d959445_MPQueue(pq_V0)))
{
  if (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()) {
  } elseif (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag()) {
    {
      var x_V1: Int
      inhale x_V1 == ADT$BraunTree_1d959445_T_xA(pq_V0)
      {
        var l_V1: ADT$BraunTree_1d959445_T
        inhale l_V1 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
        {
          var r_V1: ADT$BraunTree_1d959445_T
          inhale r_V1 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
          {
            var __V5: Tuple0
            inhale __V5 ==
              asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
              ((Multiset(x_V1) union Elements_1d959445_MPQueue(l_V1)) union
              Elements_1d959445_MPQueue(r_V1)))
            {
              var minL_V4: Int
              inhale minL_V4 ==
                (l_V1 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                  x_V1 :
                  ADT$BraunTree_1d959445_T_xA(l_V1))
              {
                var minR_V3: Int
                inhale minR_V3 ==
                  (r_V1 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                    x_V1 :
                    ADT$BraunTree_1d959445_T_xA(r_V1))
                {
                  var __V2: Tuple0
                  if (0 < ((y_V0 in Elements_1d959445_MPQueue(l_V1)))) {
                    assert (decreasing(rank$ADT$BraunTree_1d959445_T(l_V1),
                      old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
                      (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
                  }
                  inhale __V2 ==
                    (0 < ((y_V0 in Elements_1d959445_MPQueue(l_V1))) ?
                      BinaryHeapStoresMinimum_1d959445_MPQueue(l_V1, y_V0) :
                      tuple0())
                  if (0 < ((y_V0 in Elements_1d959445_MPQueue(r_V1)))) {
                    assert (decreasing(rank$ADT$BraunTree_1d959445_T(r_V1),
                      old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
                      (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// decreases 
method BraunTreeImplication_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires !IsEmpty_1d959445_MPQueue(pq_V0)
{
  {
    var L_V1: Int
    inhale L_V1 ==
      |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|
    {
      var R_V2: Int
      inhale R_V2 ==
        |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))|
      if (IsBalanced_1d959445_MPQueue(pq_V0)) {
        {
          var __V3: Tuple0
          inhale __V3 ==
            asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pq_V0))
        }
      }
    }
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method DeleteMinCorrect_1d959445_MPQueue_posts_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !(pq_V0 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F())
{
  var $result: Tuple0
  {
    var pqPrime_V1: ADT$BraunTree_1d959445_T
    inhale pqPrime_V1 == DeleteMin_1d959445_MPQueue(pq_V0)
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method DeleteMinCorrect_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !(pq_V0 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F())
{
  {
    var pqPrime_V2: ADT$BraunTree_1d959445_T
    inhale pqPrime_V2 == DeleteMin_1d959445_MPQueue(pq_V0)
    if (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
    ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) {
    } elseif (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <=
    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) {
      {
        var __V4: Tuple0
        assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
          old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
          (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
        inhale __V4 ==
          DeleteMinCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))
        {
          var __V3: Tuple0
          inhale __V3 ==
            asserting_1d959445_F(Valid_1d959445_MPQueue(DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))))
        }
      }
    } else {
      var newX_V6: Int
      inhale newX_V6 ==
        ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))
      {
        var newLeft_V7: ADT$BraunTree_1d959445_T
        inhale newLeft_V7 ==
          ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
          ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))
        {
          var newRight_V5: ADT$BraunTree_1d959445_T
          inhale newRight_V5 ==
            DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))
          {
            var __V13: Tuple0
            assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
              old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
              (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
            inhale __V13 ==
              DeleteMinCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))
            {
              var __V12: Tuple0
              inhale __V12 ==
                asserting_1d959445_F(Valid_1d959445_MPQueue(DeleteMin_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))))
              {
                var __V11: Tuple0
                inhale __V11 ==
                  ReplaceRootCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
                  ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))
                {
                  var __V10: Tuple0
                  inhale __V10 ==
                    asserting_1d959445_F(Valid_1d959445_MPQueue(pqPrime_V2))
                  {
                    var __V9: Tuple0
                    inhale __V9 ==
                      asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                      ((Multiset(newX_V6) union
                      Elements_1d959445_MPQueue(newLeft_V7)) union
                      Elements_1d959445_MPQueue(newRight_V5)))
                    {
                      var __V8: Tuple0
                      inhale __V8 ==
                        asserting_1d959445_F((Elements_1d959445_MPQueue(pqPrime_V2) union
                        Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))) ==
                        (((Multiset(newX_V6) union
                        Elements_1d959445_MPQueue(newLeft_V7)) union
                        Elements_1d959445_MPQueue(newRight_V5)) union
                        Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0))))
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method DeleteMin_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires IsBalanced_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
{
  if (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
  ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) {
  } elseif (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <=
  ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) {
    assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
      old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
      (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
  } else {
    assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
      old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
      (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)}
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Duplicate_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==>
    acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)


// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method Elements_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
{
  if (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()) {
  } elseif (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag()) {
    {
      var x_V1: Int
      inhale x_V1 == ADT$BraunTree_1d959445_T_xA(pq_V0)
      {
        var left_V1: ADT$BraunTree_1d959445_T
        inhale left_V1 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
        {
          var right_V1: ADT$BraunTree_1d959445_T
          inhale right_V1 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
          assert (decreasing(rank$ADT$BraunTree_1d959445_T(left_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
            (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
          assert (decreasing(rank$ADT$BraunTree_1d959445_T(right_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
            (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
        }
      }
    }
  }
}

// decreases 
method EmptyCorrect_1d959445_F_posts_termination_proof()
{
  var $result: Tuple0
  {
    var pq_V1: ADT$BraunTree_1d959445_T
    inhale pq_V1 == Empty_1d959445_F()
  }
}

// decreases 
method EmptyIntrinsic_1d959445_F_termination_proof()
{
  {
    var __V1: Tuple0
    inhale __V1 == EmptyCorrect_1d959445_F()
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Error_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))


// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method InsertCorrect_1d959445_MPQueue_posts_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
  requires Valid_1d959445_MPQueue(pq_V0)
{
  var $result: Tuple0
  {
    var pqPrime_V1: ADT$BraunTree_1d959445_T
    inhale pqPrime_V1 == Insert_1d959445_MPQueue(pq_V0, y_V0)
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method InsertCorrect_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
  requires Valid_1d959445_MPQueue(pq_V0)
{
  if (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()) {
  } elseif (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag()) {
    {
      var x_V2: Int
      inhale x_V2 == ADT$BraunTree_1d959445_T_xA(pq_V0)
      {
        var l_V2: ADT$BraunTree_1d959445_T
        inhale l_V2 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
        {
          var r_V2: ADT$BraunTree_1d959445_T
          inhale r_V2 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
          {
            var pqPrime_V3: ADT$BraunTree_1d959445_T
            inhale pqPrime_V3 == Insert_1d959445_MPQueue(pq_V0, y_V0)
            {
              var min_V17: Int
              inhale min_V17 == (y_V0 < x_V2 ? y_V0 : x_V2)
              {
                var max_V12: Int
                inhale max_V12 == (y_V0 < x_V2 ? x_V2 : y_V0)
                {
                  var newRight_V7: ADT$BraunTree_1d959445_T
                  inhale newRight_V7 ==
                    Insert_1d959445_MPQueue(r_V2, max_V12)
                  {
                    var __V18: Tuple0
                    inhale __V18 ==
                      asserting_1d959445_F(pqPrime_V3 ==
                      ADT$BraunTree_1d959445_T_Node_1d959445_F(min_V17, newRight_V7,
                      l_V2))
                    {
                      var __V16: Tuple0
                      {
                        var L_V14: Int
                        inhale L_V14 == |Elements_1d959445_MPQueue(l_V2)|
                        {
                          var R_V15: Int
                          inhale R_V15 == |Elements_1d959445_MPQueue(r_V2)|
                        }
                      }
                      inhale __V16 ==
                        asserting_1d959445_F((let L_V14 ==
                          (|Elements_1d959445_MPQueue(l_V2)|) in
                          (let R_V15 ==
                            (|Elements_1d959445_MPQueue(r_V2)|) in
                            L_V14 == R_V15 || L_V14 == R_V15 + 1)))
                      {
                        var __V13: Tuple0
                        assert (decreasing(rank$ADT$BraunTree_1d959445_T(r_V2),
                          old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
                          (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
                        inhale __V13 ==
                          InsertCorrect_1d959445_MPQueue(r_V2, max_V12)
                        {
                          var __V11: Tuple0
                          inhale __V11 ==
                            asserting_1d959445_F(Valid_1d959445_MPQueue(newRight_V7))
                          {
                            var __V10: Tuple0
                            inhale __V10 ==
                              asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newRight_V7))
                            {
                              var __V9: Tuple0
                              inhale __V9 ==
                                asserting_1d959445_F(IsBalanced_1d959445_MPQueue(l_V2))
                              {
                                var __V8: Tuple0
                                {
                                  var Lprime_V5: Int
                                  inhale Lprime_V5 ==
                                    |Elements_1d959445_MPQueue(newRight_V7)|
                                  {
                                    var Rprime_V6: Int
                                    inhale Rprime_V6 ==
                                      |Elements_1d959445_MPQueue(l_V2)|
                                  }
                                }
                                inhale __V8 ==
                                  asserting_1d959445_F((let Lprime_V5 ==
                                    (|Elements_1d959445_MPQueue(newRight_V7)|) in
                                    (let Rprime_V6 ==
                                      (|Elements_1d959445_MPQueue(l_V2)|) in
                                      Lprime_V5 == Rprime_V6 ||
                                      Lprime_V5 == Rprime_V6 + 1)))
                                {
                                  var __V4: Tuple0
                                  inhale __V4 ==
                                    asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V3))
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// decreases 
method InsertIntrinsic_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
  requires ValidIntrinsic_1d959445_MPQueue(pq_V0)
{
  {
    var __V1: Tuple0
    inhale __V1 == InsertCorrect_1d959445_MPQueue(pq_V0, y_V0)
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method Insert_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
{
  if (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()) {
  } elseif (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag()) {
    {
      var x_V1: Int
      inhale x_V1 == ADT$BraunTree_1d959445_T_xA(pq_V0)
      {
        var left_V1: ADT$BraunTree_1d959445_T
        inhale left_V1 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
        {
          var right_V1: ADT$BraunTree_1d959445_T
          inhale right_V1 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
          if (y_V0 < x_V1) {
            assert (decreasing(rank$ADT$BraunTree_1d959445_T(right_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
              (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
          } else {
            assert (decreasing(rank$ADT$BraunTree_1d959445_T(right_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
              (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)}
        }
      }
    }
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method IsBalanced_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
{
  if (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()) {
  } elseif (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag()) {
    {
      var left_V1: ADT$BraunTree_1d959445_T
      inhale left_V1 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
      {
        var right_V1: ADT$BraunTree_1d959445_T
        inhale right_V1 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
        assert (decreasing(rank$ADT$BraunTree_1d959445_T(left_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
          (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
        if (IsBalanced_1d959445_MPQueue(left_V1)) {
          assert (decreasing(rank$ADT$BraunTree_1d959445_T(right_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
            (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
        }
        if (IsBalanced_1d959445_MPQueue(left_V1) &&
        IsBalanced_1d959445_MPQueue(right_V1)) {
          {
            var L_V2: Int
            inhale L_V2 == |Elements_1d959445_MPQueue(left_V1)|
            {
              var R_V3: Int
              inhale R_V3 == |Elements_1d959445_MPQueue(right_V1)|
            }
          }
        }
      }
    }
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method IsBinaryHeap_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
{
  if (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()) {
  } elseif (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag()) {
    {
      var x_V1: Int
      inhale x_V1 == ADT$BraunTree_1d959445_T_xA(pq_V0)
      {
        var left_V1: ADT$BraunTree_1d959445_T
        inhale left_V1 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
        {
          var right_V1: ADT$BraunTree_1d959445_T
          inhale right_V1 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
          assert (decreasing(rank$ADT$BraunTree_1d959445_T(left_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
            (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
          if (IsBinaryHeap_1d959445_MPQueue(left_V1)) {
            assert (decreasing(rank$ADT$BraunTree_1d959445_T(right_V1), old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
              (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
          }
        }
      }
    }
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)
  }
}

// decreases 
method IsEmptyIntrinsic_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires ValidIntrinsic_1d959445_MPQueue(pq_V0)
{
  {
    var __V1: Tuple0
    inhale __V1 == IsEmptyCorrect_1d959445_MPQueue(pq_V0)
  }
}

// decreases 
method IsMin_1d959445_F_termination_proof(y_V0: Int, s_V0: Multiset[Int])
{
  if (0 < ((y_V0 in s_V0))) {
    {
      var x_V11: Int
    }
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method RemoveMinCorrect_1d959445_MPQueue_posts_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
{
  var $result: Tuple0
  {
    var pair_V3: Tuple2[Int, ADT$BraunTree_1d959445_T]
    inhale pair_V3 == RemoveMin_1d959445_MPQueue(pq_V0)
    {
      var y_V2: Int
      inhale y_V2 == (get0of2(pair_V3): Int)
      {
        var pqPrime_V1: ADT$BraunTree_1d959445_T
        inhale pqPrime_V1 == (get1of2(pair_V3): ADT$BraunTree_1d959445_T)
      }
    }
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method RemoveMinCorrect_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
{
  if (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F_tag()) {
  } elseif (ADT$BraunTree_1d959445_T_tag(pq_V0) ==
  ADT$BraunTree_1d959445_T_Node_1d959445_F_tag()) {
    {
      var x_V4: Int
      inhale x_V4 == ADT$BraunTree_1d959445_T_xA(pq_V0)
      {
        var l_V4: ADT$BraunTree_1d959445_T
        inhale l_V4 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
        {
          var r_V4: ADT$BraunTree_1d959445_T
          inhale r_V4 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
          {
            var pair_V16: Tuple2[Int, ADT$BraunTree_1d959445_T]
            inhale pair_V16 == RemoveMin_1d959445_MPQueue(pq_V0)
            {
              var __V18: Tuple0
              inhale __V18 == DeleteMinCorrect_1d959445_MPQueue(pq_V0)
              {
                var y_V5: Int
                inhale y_V5 == (get0of2(pair_V16): Int)
                {
                  var pqPrime_V17: ADT$BraunTree_1d959445_T
                  inhale pqPrime_V17 ==
                    (get1of2(pair_V16): ADT$BraunTree_1d959445_T)
                  {
                    var __V15: Tuple0
                    inhale __V15 == asserting_1d959445_F(y_V5 == x_V4)
                    {
                      var __V14: Tuple0
                      inhale __V14 ==
                        asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                        ((Multiset(x_V4) union
                        Elements_1d959445_MPQueue(l_V4)) union
                        Elements_1d959445_MPQueue(r_V4)))
                      {
                        var minL_V8: Int
                        inhale minL_V8 ==
                          (l_V4 ==
                          ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                            x_V4 :
                            (get0of2(RemoveMin_1d959445_MPQueue(l_V4)): Int))
                        {
                          var minR_V6: Int
                          inhale minR_V6 ==
                            (r_V4 ==
                            ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                              x_V4 :
                              (get0of2(RemoveMin_1d959445_MPQueue(r_V4)): Int))
                          {
                            var __V13: Tuple0
                            if (l_V4 ==
                            ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) {
                            } else {
                              assert (decreasing(rank$ADT$BraunTree_1d959445_T(l_V4),
                                old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
                                (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)}
                            inhale __V13 ==
                              (l_V4 ==
                              ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                                tuple0() :
                                RemoveMinCorrect_1d959445_MPQueue(l_V4))
                            {
                              var __V12: Tuple0
                              if (r_V4 ==
                              ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) {
                              } else {
                                assert (decreasing(rank$ADT$BraunTree_1d959445_T(r_V4),
                                  old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
                                  (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)}
                              inhale __V12 ==
                                (r_V4 ==
                                ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ?
                                  tuple0() :
                                  RemoveMinCorrect_1d959445_MPQueue(r_V4))
                              {
                                var __V11: Tuple0
                                inhale __V11 ==
                                  asserting_1d959445_F(y_V5 <= minL_V8)
                                {
                                  var __V10: Tuple0
                                  inhale __V10 ==
                                    asserting_1d959445_F(y_V5 <= minR_V6)
                                  {
                                    var __V9: Tuple0
                                    inhale __V9 ==
                                      (!(l_V4 ==
                                      ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) ?
                                        asserting_1d959445_F(IsMin_1d959445_F(minL_V8,
                                        Elements_1d959445_MPQueue(l_V4))) :
                                        tuple0())
                                    {
                                      var __V7: Tuple0
                                      inhale __V7 ==
                                        (!(r_V4 ==
                                        ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) ?
                                          asserting_1d959445_F(IsMin_1d959445_F(minR_V6,
                                          Elements_1d959445_MPQueue(r_V4))) :
                                          tuple0())
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// decreases 
method RemoveMinIntrinsic_1d959445_MPQueue_posts_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires ValidIntrinsic_1d959445_MPQueue(pq_V0) &&
    !IsEmptyIntrinsic_1d959445_MPQueue(pq_V0)
{
  var $result: Tuple2[Int, ADT$BraunTree_1d959445_T]
  {
    var y_V2: Int
    inhale y_V2 == (get0of2($result): Int)
    {
      var pqPrime_V1: ADT$BraunTree_1d959445_T
      inhale pqPrime_V1 == (get1of2($result): ADT$BraunTree_1d959445_T)
    }
  }
}

// decreases 
method RemoveMinIntrinsic_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T)
  requires ValidIntrinsic_1d959445_MPQueue(pq_V0) &&
    !IsEmptyIntrinsic_1d959445_MPQueue(pq_V0)
{
  {
    var __V3: Tuple0
    inhale __V3 == RemoveMinCorrect_1d959445_MPQueue(pq_V0)
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method ReplaceRootCorrect_1d959445_MPQueue_posts_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
{
  var $result: Tuple0
  {
    var pqPrime_V1: ADT$BraunTree_1d959445_T
    inhale pqPrime_V1 == ReplaceRoot_1d959445_MPQueue(pq_V0, y_V0)
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method ReplaceRootCorrect_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
  requires Valid_1d959445_MPQueue(pq_V0) &&
    !IsEmpty_1d959445_MPQueue(pq_V0)
{
  {
    var pqPrime_V2: ADT$BraunTree_1d959445_T
    inhale pqPrime_V2 == ReplaceRoot_1d959445_MPQueue(pq_V0, y_V0)
    if (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
    y_V0 <=
    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) &&
    (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
    y_V0 <=
    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)))) {
    } elseif (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
    ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) {
      {
        var newLeft_V3: ADT$BraunTree_1d959445_T
        inhale newLeft_V3 ==
          ADT$BraunTree_1d959445_T_Node_1d959445_F(y_V0, ADT$BraunTree_1d959445_T_Leaf_1d959445_F(),
          ADT$BraunTree_1d959445_T_Leaf_1d959445_F())
        {
          var newRight_V4: ADT$BraunTree_1d959445_T
          inhale newRight_V4 == ADT$BraunTree_1d959445_T_Leaf_1d959445_F()
          {
            var __V20: Tuple0
            inhale __V20 ==
              asserting_1d959445_F(pqPrime_V2 ==
              ADT$BraunTree_1d959445_T_Node_1d959445_F(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
              newLeft_V3, newRight_V4))
            {
              var __V19: Tuple0
              inhale __V19 ==
                asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                ((Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                Elements_1d959445_MPQueue(newLeft_V3)) union
                Elements_1d959445_MPQueue(newRight_V4)))
              {
                var __V18: Tuple0
                inhale __V18 ==
                  asserting_1d959445_F(Elements_1d959445_MPQueue(newLeft_V3) ==
                  Multiset(y_V0))
                {
                  var __V17: Tuple0
                  inhale __V17 ==
                    asserting_1d959445_F(Elements_1d959445_MPQueue(newRight_V4) ==
                    Multiset[Int]())
                  {
                    var __V16: Tuple0
                    inhale __V16 ==
                      asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                      Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
                      y_V0))
                    {
                      var __V15: Tuple0
                      inhale __V15 ==
                        asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                        ((Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0)) union
                        Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                        Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))))
                      {
                        var __V14: Tuple0
                        inhale __V14 ==
                          asserting_1d959445_F(Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0)) ==
                          Multiset[Int]())
                        {
                          var __V13: Tuple0
                          inhale __V13 ==
                            asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                            1 ==
                            |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|)
                          {
                            var __V12: Tuple0
                            inhale __V12 ==
                              asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                              0)
                            {
                              var __V11: Tuple0
                              inhale __V11 ==
                                asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ==
                                1)
                              {
                                var __V10: Tuple0
                                inhale __V10 ==
                                  asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ==
                                  1 +
                                  |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))| +
                                  |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))|)
                                {
                                  var __V9: Tuple0
                                  inhale __V9 ==
                                    asserting_1d959445_F(IsEmpty_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(ADT$BraunTree_1d959445_T_leftA(pq_V0))) &&
                                    IsEmpty_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(ADT$BraunTree_1d959445_T_leftA(pq_V0))))
                                  {
                                    var __V8: Tuple0
                                    inhale __V8 ==
                                      asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newLeft_V3) &&
                                      IsBalanced_1d959445_MPQueue(newRight_V4))
                                    {
                                      var __V7: Tuple0
                                      inhale __V7 ==
                                        asserting_1d959445_F(|Elements_1d959445_MPQueue(newLeft_V3)| ==
                                        1 +
                                        |Elements_1d959445_MPQueue(newRight_V4)|)
                                      {
                                        var __V6: Tuple0
                                        inhale __V6 ==
                                          asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V2))
                                        {
                                          var __V5: Tuple0
                                          inhale __V5 ==
                                            asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(newLeft_V3) &&
                                            IsBinaryHeap_1d959445_MPQueue(newRight_V4))
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } elseif (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <
    ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) {
      {
        var newX_V34: Int
        inhale newX_V34 ==
          ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0))
        {
          var newLeft_V23: ADT$BraunTree_1d959445_T
          inhale newLeft_V23 ==
            ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0),
            y_V0)
          {
            var newRight_V33: ADT$BraunTree_1d959445_T
            inhale newRight_V33 == ADT$BraunTree_1d959445_T_rightA(pq_V0)
            {
              var __V32: Tuple0
              inhale __V32 ==
                asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pq_V0))
              {
                var __V31: Tuple0
                inhale __V31 ==
                  asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                  1 ==
                  |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ||
                  |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                  |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|)
                {
                  var __V30: Tuple0
                  assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
                    old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
                    (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
                  inhale __V30 ==
                    ReplaceRootCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0),
                    y_V0)
                  {
                    var __V29: Tuple0
                    inhale __V29 ==
                      asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                      1 ==
                      |Elements_1d959445_MPQueue(newLeft_V23)| ||
                      |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                      |Elements_1d959445_MPQueue(newLeft_V23)|)
                    {
                      var __V28: Tuple0
                      inhale __V28 ==
                        asserting_1d959445_F(Valid_1d959445_MPQueue(newLeft_V23))
                      {
                        var __V27: Tuple0
                        inhale __V27 ==
                          asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newLeft_V23))
                        {
                          var __V26: Tuple0
                          inhale __V26 ==
                            asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V2))
                          {
                            var __V25: Tuple0
                            inhale __V25 ==
                              asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(pqPrime_V2))
                            {
                              var __V24: Tuple0
                              inhale __V24 ==
                                asserting_1d959445_F((Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0)) union
                                Multiset(y_V0)) ==
                                (Elements_1d959445_MPQueue(newLeft_V23) union
                                Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)))))
                              {
                                var __V22: Tuple0
                                inhale __V22 ==
                                  asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                                  ((Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0)) union
                                  Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                                  Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))))
                                {
                                  var __V21: Tuple0
                                  inhale __V21 ==
                                    asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                                    ((Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                                    Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pqPrime_V2))) union
                                    Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pqPrime_V2))))
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      var newX_V48: Int
      inhale newX_V48 ==
        ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))
      {
        var newLeft_V43: ADT$BraunTree_1d959445_T
        inhale newLeft_V43 == ADT$BraunTree_1d959445_T_leftA(pq_V0)
        {
          var newRight_V37: ADT$BraunTree_1d959445_T
          inhale newRight_V37 ==
            ReplaceRoot_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
            y_V0)
          {
            var __V47: Tuple0
            inhale __V47 ==
              asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pq_V0))
            {
              var __V46: Tuple0
              inhale __V46 ==
                asserting_1d959445_F(|Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| +
                1 ==
                |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))| ||
                |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))| ==
                |Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))|)
              {
                var __V45: Tuple0
                assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_rightA(pq_V0)),
                  old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
                  (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
                inhale __V45 ==
                  ReplaceRootCorrect_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0),
                  y_V0)
                {
                  var __V44: Tuple0
                  inhale __V44 ==
                    asserting_1d959445_F(|Elements_1d959445_MPQueue(newRight_V37)| +
                    1 ==
                    |Elements_1d959445_MPQueue(newLeft_V43)| ||
                    |Elements_1d959445_MPQueue(newRight_V37)| ==
                    |Elements_1d959445_MPQueue(newLeft_V43)|)
                  {
                    var __V42: Tuple0
                    inhale __V42 ==
                      asserting_1d959445_F(Valid_1d959445_MPQueue(newRight_V37))
                    {
                      var __V41: Tuple0
                      inhale __V41 ==
                        asserting_1d959445_F(IsBalanced_1d959445_MPQueue(newRight_V37))
                      {
                        var __V40: Tuple0
                        inhale __V40 ==
                          asserting_1d959445_F(IsBalanced_1d959445_MPQueue(pqPrime_V2))
                        {
                          var __V39: Tuple0
                          inhale __V39 ==
                            asserting_1d959445_F(IsBinaryHeap_1d959445_MPQueue(pqPrime_V2))
                          {
                            var __V38: Tuple0
                            inhale __V38 ==
                              asserting_1d959445_F((Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0)) union
                              Multiset(y_V0)) ==
                              (Elements_1d959445_MPQueue(newRight_V37) union
                              Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)))))
                            {
                              var __V36: Tuple0
                              inhale __V36 ==
                                asserting_1d959445_F(Elements_1d959445_MPQueue(pq_V0) ==
                                ((Multiset(ADT$BraunTree_1d959445_T_xA(pq_V0)) union
                                Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pq_V0))) union
                                Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pq_V0))))
                              {
                                var __V35: Tuple0
                                inhale __V35 ==
                                  asserting_1d959445_F(Elements_1d959445_MPQueue(pqPrime_V2) ==
                                  ((Multiset(ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) union
                                  Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_rightA(pqPrime_V2))) union
                                  Elements_1d959445_MPQueue(ADT$BraunTree_1d959445_T_leftA(pqPrime_V2))))
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

// decreases rank$ADT$BraunTree_1d959445_T(pq_V0)
method ReplaceRoot_1d959445_MPQueue_termination_proof(pq_V0: ADT$BraunTree_1d959445_T,
  y_V0: Int)
  requires !IsEmpty_1d959445_MPQueue(pq_V0)
{
  if (ADT$BraunTree_1d959445_T_leftA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
  y_V0 <=
  ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) &&
  (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F() ||
  y_V0 <=
  ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0)))) {
  } elseif (ADT$BraunTree_1d959445_T_rightA(pq_V0) ==
  ADT$BraunTree_1d959445_T_Leaf_1d959445_F()) {
  } elseif (ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_leftA(pq_V0)) <
  ADT$BraunTree_1d959445_T_xA(ADT$BraunTree_1d959445_T_rightA(pq_V0))) {
    assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_leftA(pq_V0)),
      old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
      (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)
  } else {
    assert (decreasing(rank$ADT$BraunTree_1d959445_T(ADT$BraunTree_1d959445_T_rightA(pq_V0)),
      old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool) &&
      (bounded(old(rank$ADT$BraunTree_1d959445_T(pq_V0))): Bool)}
}

// decreases 
method Test_1d959445_F(x_V0: Int, y_V0: Int)
{
  
  // decl x_V0_CN0: int°°, y_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var y_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init y_V0_CN1
    inhale y_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // y_V0_CN1 = y_V0
    y_V0_CN1 := y_V0
    
    // decl pq0_V1: BraunTree_1d959445_T°°, pq1_V1: BraunTree_1d959445_T°°, pq2_V1: BraunTree_1d959445_T°°, N6: Unit_1d959445_T°°, N8: Unit_1d959445_T°°, N10: Unit_1d959445_T°°, N12: Unit_1d959445_T°°, pair1_V1: PairOfIntPQueue_1d959445_T°°, o1_V1: int°°, pq3_V1: BraunTree_1d959445_T°°, N16: Unit_1d959445_T°°, N18: Unit_1d959445_T°°, pair2_V1: PairOfIntPQueue_1d959445_T°°, o2_V1: int°°, pq4_V1: BraunTree_1d959445_T°°, N21: Unit_1d959445_T°°
    {
      var pq0_V1: ADT$BraunTree_1d959445_T
      var pq1_V1: ADT$BraunTree_1d959445_T
      var pq2_V1: ADT$BraunTree_1d959445_T
      var N6: Tuple0
      var N8: Tuple0
      var N10: Tuple0
      var N12: Tuple0
      var pair1_V1: Tuple2[Int, ADT$BraunTree_1d959445_T]
      var o1_V1: Int
      var pq3_V1: ADT$BraunTree_1d959445_T
      var N16: Tuple0
      var N18: Tuple0
      var pair2_V1: Tuple2[Int, ADT$BraunTree_1d959445_T]
      var o2_V1: Int
      var pq4_V1: ADT$BraunTree_1d959445_T
      var N21: Tuple0
      
      // init pq0_V1
      inhale pq0_V1 == ADT$BraunTree_1d959445_T_dflt()
      
      // pq0_V1 = Empty_1d959445_F()
      pq0_V1 := Empty_1d959445_F()
      
      // init pq1_V1
      inhale pq1_V1 == ADT$BraunTree_1d959445_T_dflt()
      
      // pq1_V1 = pq0_V1.Insert(x_V0_CN0)
      pq1_V1 := Insert_1d959445_MPQueue(pq0_V1, x_V0_CN0)
      
      // init pq2_V1
      inhale pq2_V1 == ADT$BraunTree_1d959445_T_dflt()
      
      // pq2_V1 = pq1_V1.Insert(y_V0_CN1)
      pq2_V1 := Insert_1d959445_MPQueue(pq1_V1, y_V0_CN1)
      
      // N6 = EmptyCorrect_1d959445_F()
      N6 := EmptyCorrect_1d959445_F()
      
      // N8 = pq0_V1.InsertCorrect(x_V0_CN0)
      N8 := InsertCorrect_1d959445_MPQueue(pq0_V1, x_V0_CN0)
      
      // N10 = pq1_V1.InsertCorrect(y_V0_CN1)
      N10 := InsertCorrect_1d959445_MPQueue(pq1_V1, y_V0_CN1)
      
      // N12 = pq2_V1.IsEmptyCorrect()
      N12 := IsEmptyCorrect_1d959445_MPQueue(pq2_V1)
      
      // assert !pq2_V1.IsEmpty()
      assert !IsEmpty_1d959445_MPQueue(pq2_V1)
      
      // init pair1_V1
      {
        var fn$$0: Tuple2[Int, ADT$BraunTree_1d959445_T]
        fn$$0 := pair1_V1
        inhale (get0of2(fn$$0): Int) == 0
        inhale (get1of2(fn$$0): ADT$BraunTree_1d959445_T) ==
          ADT$BraunTree_1d959445_T_dflt()
      }
      
      // pair1_V1 = pq2_V1.RemoveMin()
      pair1_V1 := RemoveMin_1d959445_MPQueue(pq2_V1)
      
      // init o1_V1
      inhale o1_V1 == 0
      
      // o1_V1 = pair1_V1.leftA
      o1_V1 := (get0of2(pair1_V1): Int)
      
      // init pq3_V1
      inhale pq3_V1 == ADT$BraunTree_1d959445_T_dflt()
      
      // pq3_V1 = pair1_V1.rightA
      pq3_V1 := (get1of2(pair1_V1): ADT$BraunTree_1d959445_T)
      
      // N16 = pq2_V1.RemoveMinCorrect()
      N16 := RemoveMinCorrect_1d959445_MPQueue(pq2_V1)
      
      // N18 = pq3_V1.IsEmptyCorrect()
      N18 := IsEmptyCorrect_1d959445_MPQueue(pq3_V1)
      
      // init pair2_V1
      {
        var fn$$1: Tuple2[Int, ADT$BraunTree_1d959445_T]
        fn$$1 := pair2_V1
        inhale (get0of2(fn$$1): Int) == 0
        inhale (get1of2(fn$$1): ADT$BraunTree_1d959445_T) ==
          ADT$BraunTree_1d959445_T_dflt()
      }
      
      // pair2_V1 = pq3_V1.RemoveMin()
      pair2_V1 := RemoveMin_1d959445_MPQueue(pq3_V1)
      
      // init o2_V1
      inhale o2_V1 == 0
      
      // o2_V1 = pair2_V1.leftA
      o2_V1 := (get0of2(pair2_V1): Int)
      
      // init pq4_V1
      inhale pq4_V1 == ADT$BraunTree_1d959445_T_dflt()
      
      // pq4_V1 = pair2_V1.rightA
      pq4_V1 := (get1of2(pair2_V1): ADT$BraunTree_1d959445_T)
      
      // N21 = pq3_V1.RemoveMinCorrect()
      N21 := RemoveMinCorrect_1d959445_MPQueue(pq3_V1)
      
      // assert o1_V1 <= o2_V1
      assert o1_V1 <= o2_V1
    }
    label returnLabel
  }
}

method panic_a4af0e5e_F(v_V0: Tuple2[Ref, Types])
  requires false
