domain ADT$BYTree_da3e1031_T  {
  
  function ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F(): ADT$BYTree_da3e1031_T 
  
  unique function ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag(): Int 
  
  function ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA: ADT$BYTree_da3e1031_T,
  rightA: ADT$BYTree_da3e1031_T): ADT$BYTree_da3e1031_T 
  
  unique function ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag(): Int 
  
  function ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F(): ADT$BYTree_da3e1031_T 
  
  unique function ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag(): Int 
  
  function ADT$BYTree_da3e1031_T_dflt(): ADT$BYTree_da3e1031_T 
  
  function ADT$BYTree_da3e1031_T_leftA(t: ADT$BYTree_da3e1031_T): ADT$BYTree_da3e1031_T 
  
  function ADT$BYTree_da3e1031_T_rightA(t: ADT$BYTree_da3e1031_T): ADT$BYTree_da3e1031_T 
  
  function ADT$BYTree_da3e1031_T_tag(t: ADT$BYTree_da3e1031_T): Int 
  
  function rank$ADT$BYTree_da3e1031_T(x: ADT$BYTree_da3e1031_T): Int 
  
  axiom {
    (forall leftA: ADT$BYTree_da3e1031_T, rightA: ADT$BYTree_da3e1031_T ::
      { ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA, rightA) }
      ADT$BYTree_da3e1031_T_tag(ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA,
      rightA)) ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
      ADT$BYTree_da3e1031_T_leftA(ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA,
      rightA)) ==
      leftA &&
      ADT$BYTree_da3e1031_T_rightA(ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA,
      rightA)) ==
      rightA)
  }
  
  axiom {
    (forall leftA: ADT$BYTree_da3e1031_T, rightA: ADT$BYTree_da3e1031_T ::
      { rank$ADT$BYTree_da3e1031_T(ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA,
      rightA)) }
      rank$ADT$BYTree_da3e1031_T(leftA) <
      rank$ADT$BYTree_da3e1031_T(ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA,
      rightA)))
  }
  
  axiom {
    (forall leftA: ADT$BYTree_da3e1031_T, rightA: ADT$BYTree_da3e1031_T ::
      { rank$ADT$BYTree_da3e1031_T(ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA,
      rightA)) }
      rank$ADT$BYTree_da3e1031_T(rightA) <
      rank$ADT$BYTree_da3e1031_T(ADT$BYTree_da3e1031_T_Node_da3e1031_F(leftA,
      rightA)))
  }
  
  axiom {
    (forall t: ADT$BYTree_da3e1031_T ::
      { ADT$BYTree_da3e1031_T_leftA(t) }
      { ADT$BYTree_da3e1031_T_rightA(t) }
      ADT$BYTree_da3e1031_T_tag(t) ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() ==>
      t ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F(ADT$BYTree_da3e1031_T_leftA(t),
      ADT$BYTree_da3e1031_T_rightA(t)))
  }
  
  axiom {
    (forall t: ADT$BYTree_da3e1031_T ::
      { ADT$BYTree_da3e1031_T_tag(t) }
      t == ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F() ||
      t == ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F() ||
      t ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F(ADT$BYTree_da3e1031_T_leftA(t),
      ADT$BYTree_da3e1031_T_rightA(t)))
  }
  
  axiom {
    (forall x: ADT$BYTree_da3e1031_T ::
      { rank$ADT$BYTree_da3e1031_T(x) }
      0 <= rank$ADT$BYTree_da3e1031_T(x))
  }
  
  axiom {
    ADT$BYTree_da3e1031_T_tag(ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F()) ==
    ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag()
  }
  
  axiom {
    ADT$BYTree_da3e1031_T_tag(ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F()) ==
    ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag()
  }
}

domain ADT$Color_da3e1031_T  {
  
  function ADT$Color_da3e1031_T_Blue_da3e1031_F(): ADT$Color_da3e1031_T 
  
  unique function ADT$Color_da3e1031_T_Blue_da3e1031_F_tag(): Int 
  
  function ADT$Color_da3e1031_T_Green_da3e1031_F(): ADT$Color_da3e1031_T 
  
  unique function ADT$Color_da3e1031_T_Green_da3e1031_F_tag(): Int 
  
  function ADT$Color_da3e1031_T_Red_da3e1031_F(): ADT$Color_da3e1031_T 
  
  unique function ADT$Color_da3e1031_T_Red_da3e1031_F_tag(): Int 
  
  function ADT$Color_da3e1031_T_Yellow_da3e1031_F(): ADT$Color_da3e1031_T 
  
  unique function ADT$Color_da3e1031_T_Yellow_da3e1031_F_tag(): Int 
  
  function ADT$Color_da3e1031_T_dflt(): ADT$Color_da3e1031_T 
  
  function ADT$Color_da3e1031_T_tag(t: ADT$Color_da3e1031_T): Int 
  
  function rank$ADT$Color_da3e1031_T(x: ADT$Color_da3e1031_T): Int 
  
  axiom {
    (forall t: ADT$Color_da3e1031_T ::
      { ADT$Color_da3e1031_T_tag(t) }
      t == ADT$Color_da3e1031_T_Blue_da3e1031_F() ||
      t == ADT$Color_da3e1031_T_Yellow_da3e1031_F() ||
      t == ADT$Color_da3e1031_T_Green_da3e1031_F() ||
      t == ADT$Color_da3e1031_T_Red_da3e1031_F())
  }
  
  axiom {
    (forall x: ADT$Color_da3e1031_T ::
      { rank$ADT$Color_da3e1031_T(x) }
      0 <= rank$ADT$Color_da3e1031_T(x))
  }
  
  axiom {
    ADT$Color_da3e1031_T_tag(ADT$Color_da3e1031_T_Blue_da3e1031_F()) ==
    ADT$Color_da3e1031_T_Blue_da3e1031_F_tag()
  }
  
  axiom {
    ADT$Color_da3e1031_T_tag(ADT$Color_da3e1031_T_Green_da3e1031_F()) ==
    ADT$Color_da3e1031_T_Green_da3e1031_F_tag()
  }
  
  axiom {
    ADT$Color_da3e1031_T_tag(ADT$Color_da3e1031_T_Red_da3e1031_F()) ==
    ADT$Color_da3e1031_T_Red_da3e1031_F_tag()
  }
  
  axiom {
    ADT$Color_da3e1031_T_tag(ADT$Color_da3e1031_T_Yellow_da3e1031_F()) ==
    ADT$Color_da3e1031_T_Yellow_da3e1031_F_tag()
  }
}

domain ADT$Expr_da3e1031_T  {
  
  function ADT$Expr_da3e1031_T_Const_da3e1031_F(numA: Int): ADT$Expr_da3e1031_T 
  
  unique function ADT$Expr_da3e1031_T_Const_da3e1031_F_tag(): Int 
  
  function ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA: ADT$Op_da3e1031_T, argsA: ADT$List_da3e1031_T): ADT$Expr_da3e1031_T 
  
  unique function ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag(): Int 
  
  function ADT$Expr_da3e1031_T_Var_da3e1031_F(nameA: Int): ADT$Expr_da3e1031_T 
  
  unique function ADT$Expr_da3e1031_T_Var_da3e1031_F_tag(): Int 
  
  function ADT$Expr_da3e1031_T_argsA(t: ADT$Expr_da3e1031_T): ADT$List_da3e1031_T 
  
  function ADT$Expr_da3e1031_T_dflt(): ADT$Expr_da3e1031_T 
  
  function ADT$Expr_da3e1031_T_nameA(t: ADT$Expr_da3e1031_T): Int 
  
  function ADT$Expr_da3e1031_T_numA(t: ADT$Expr_da3e1031_T): Int 
  
  function ADT$Expr_da3e1031_T_opA(t: ADT$Expr_da3e1031_T): ADT$Op_da3e1031_T 
  
  function ADT$Expr_da3e1031_T_tag(t: ADT$Expr_da3e1031_T): Int 
  
  function rank$ADT$Expr_da3e1031_T(x: ADT$Expr_da3e1031_T): Int 
  
  axiom {
    (forall nameA: Int ::
      { ADT$Expr_da3e1031_T_Var_da3e1031_F(nameA) }
      ADT$Expr_da3e1031_T_tag(ADT$Expr_da3e1031_T_Var_da3e1031_F(nameA)) ==
      ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
      ADT$Expr_da3e1031_T_nameA(ADT$Expr_da3e1031_T_Var_da3e1031_F(nameA)) ==
      nameA)
  }
  
  axiom {
    (forall numA: Int ::
      { ADT$Expr_da3e1031_T_Const_da3e1031_F(numA) }
      ADT$Expr_da3e1031_T_tag(ADT$Expr_da3e1031_T_Const_da3e1031_F(numA)) ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
      ADT$Expr_da3e1031_T_numA(ADT$Expr_da3e1031_T_Const_da3e1031_F(numA)) ==
      numA)
  }
  
  axiom {
    (forall opA: ADT$Op_da3e1031_T, argsA: ADT$List_da3e1031_T ::
      { ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA) }
      ADT$Expr_da3e1031_T_tag(ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA)) ==
      ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
      ADT$Expr_da3e1031_T_opA(ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA)) ==
      opA &&
      ADT$Expr_da3e1031_T_argsA(ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA)) ==
      argsA)
  }
  
  axiom {
    (forall opA: ADT$Op_da3e1031_T, argsA: ADT$List_da3e1031_T ::
      { rank$ADT$Expr_da3e1031_T(ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA)) }
      rank$ADT$List_da3e1031_T(argsA) <
      rank$ADT$Expr_da3e1031_T(ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA)))
  }
  
  axiom {
    (forall opA: ADT$Op_da3e1031_T, argsA: ADT$List_da3e1031_T ::
      { rank$ADT$Expr_da3e1031_T(ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA)) }
      rank$ADT$Op_da3e1031_T(opA) <
      rank$ADT$Expr_da3e1031_T(ADT$Expr_da3e1031_T_ENode_da3e1031_F(opA, argsA)))
  }
  
  axiom {
    (forall t: ADT$Expr_da3e1031_T ::
      { ADT$Expr_da3e1031_T_nameA(t) }
      ADT$Expr_da3e1031_T_tag(t) ==
      ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() ==>
      t == ADT$Expr_da3e1031_T_Var_da3e1031_F(ADT$Expr_da3e1031_T_nameA(t)))
  }
  
  axiom {
    (forall t: ADT$Expr_da3e1031_T ::
      { ADT$Expr_da3e1031_T_numA(t) }
      ADT$Expr_da3e1031_T_tag(t) ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() ==>
      t ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F(ADT$Expr_da3e1031_T_numA(t)))
  }
  
  axiom {
    (forall t: ADT$Expr_da3e1031_T ::
      { ADT$Expr_da3e1031_T_opA(t) }
      { ADT$Expr_da3e1031_T_argsA(t) }
      ADT$Expr_da3e1031_T_tag(t) ==
      ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() ==>
      t ==
      ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Expr_da3e1031_T_opA(t), ADT$Expr_da3e1031_T_argsA(t)))
  }
  
  axiom {
    (forall t: ADT$Expr_da3e1031_T ::
      { ADT$Expr_da3e1031_T_tag(t) }
      t ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F(ADT$Expr_da3e1031_T_numA(t)) ||
      t == ADT$Expr_da3e1031_T_Var_da3e1031_F(ADT$Expr_da3e1031_T_nameA(t)) ||
      t ==
      ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Expr_da3e1031_T_opA(t), ADT$Expr_da3e1031_T_argsA(t)))
  }
  
  axiom {
    (forall x: ADT$Expr_da3e1031_T ::
      { rank$ADT$Expr_da3e1031_T(x) }
      0 <= rank$ADT$Expr_da3e1031_T(x))
  }
}

domain ADT$List_da3e1031_T  {
  
  function ADT$List_da3e1031_T_Cons_da3e1031_F(headA: ADT$Expr_da3e1031_T, tailA: ADT$List_da3e1031_T): ADT$List_da3e1031_T 
  
  unique function ADT$List_da3e1031_T_Cons_da3e1031_F_tag(): Int 
  
  function ADT$List_da3e1031_T_Nil_da3e1031_F(): ADT$List_da3e1031_T 
  
  unique function ADT$List_da3e1031_T_Nil_da3e1031_F_tag(): Int 
  
  function ADT$List_da3e1031_T_dflt(): ADT$List_da3e1031_T 
  
  function ADT$List_da3e1031_T_headA(t: ADT$List_da3e1031_T): ADT$Expr_da3e1031_T 
  
  function ADT$List_da3e1031_T_tag(t: ADT$List_da3e1031_T): Int 
  
  function ADT$List_da3e1031_T_tailA(t: ADT$List_da3e1031_T): ADT$List_da3e1031_T 
  
  function rank$ADT$List_da3e1031_T(x: ADT$List_da3e1031_T): Int 
  
  axiom {
    (forall headA: ADT$Expr_da3e1031_T, tailA: ADT$List_da3e1031_T ::
      { ADT$List_da3e1031_T_Cons_da3e1031_F(headA, tailA) }
      ADT$List_da3e1031_T_tag(ADT$List_da3e1031_T_Cons_da3e1031_F(headA, tailA)) ==
      ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
      ADT$List_da3e1031_T_headA(ADT$List_da3e1031_T_Cons_da3e1031_F(headA, tailA)) ==
      headA &&
      ADT$List_da3e1031_T_tailA(ADT$List_da3e1031_T_Cons_da3e1031_F(headA, tailA)) ==
      tailA)
  }
  
  axiom {
    (forall headA: ADT$Expr_da3e1031_T, tailA: ADT$List_da3e1031_T ::
      { rank$ADT$List_da3e1031_T(ADT$List_da3e1031_T_Cons_da3e1031_F(headA,
      tailA)) }
      rank$ADT$Expr_da3e1031_T(headA) <
      rank$ADT$List_da3e1031_T(ADT$List_da3e1031_T_Cons_da3e1031_F(headA, tailA)))
  }
  
  axiom {
    (forall headA: ADT$Expr_da3e1031_T, tailA: ADT$List_da3e1031_T ::
      { rank$ADT$List_da3e1031_T(ADT$List_da3e1031_T_Cons_da3e1031_F(headA,
      tailA)) }
      rank$ADT$List_da3e1031_T(tailA) <
      rank$ADT$List_da3e1031_T(ADT$List_da3e1031_T_Cons_da3e1031_F(headA, tailA)))
  }
  
  axiom {
    (forall t: ADT$List_da3e1031_T ::
      { ADT$List_da3e1031_T_headA(t) }
      { ADT$List_da3e1031_T_tailA(t) }
      ADT$List_da3e1031_T_tag(t) ==
      ADT$List_da3e1031_T_Cons_da3e1031_F_tag() ==>
      t ==
      ADT$List_da3e1031_T_Cons_da3e1031_F(ADT$List_da3e1031_T_headA(t), ADT$List_da3e1031_T_tailA(t)))
  }
  
  axiom {
    (forall t: ADT$List_da3e1031_T ::
      { ADT$List_da3e1031_T_tag(t) }
      t == ADT$List_da3e1031_T_Nil_da3e1031_F() ||
      t ==
      ADT$List_da3e1031_T_Cons_da3e1031_F(ADT$List_da3e1031_T_headA(t), ADT$List_da3e1031_T_tailA(t)))
  }
  
  axiom {
    (forall x: ADT$List_da3e1031_T ::
      { rank$ADT$List_da3e1031_T(x) }
      0 <= rank$ADT$List_da3e1031_T(x))
  }
  
  axiom {
    ADT$List_da3e1031_T_tag(ADT$List_da3e1031_T_Nil_da3e1031_F()) ==
    ADT$List_da3e1031_T_Nil_da3e1031_F_tag()
  }
}

domain ADT$Op_da3e1031_T  {
  
  function ADT$Op_da3e1031_T_Add_da3e1031_F(): ADT$Op_da3e1031_T 
  
  unique function ADT$Op_da3e1031_T_Add_da3e1031_F_tag(): Int 
  
  function ADT$Op_da3e1031_T_Mul_da3e1031_F(): ADT$Op_da3e1031_T 
  
  unique function ADT$Op_da3e1031_T_Mul_da3e1031_F_tag(): Int 
  
  function ADT$Op_da3e1031_T_dflt(): ADT$Op_da3e1031_T 
  
  function ADT$Op_da3e1031_T_tag(t: ADT$Op_da3e1031_T): Int 
  
  function rank$ADT$Op_da3e1031_T(x: ADT$Op_da3e1031_T): Int 
  
  axiom {
    (forall t: ADT$Op_da3e1031_T ::
      { ADT$Op_da3e1031_T_tag(t) }
      t == ADT$Op_da3e1031_T_Add_da3e1031_F() ||
      t == ADT$Op_da3e1031_T_Mul_da3e1031_F())
  }
  
  axiom {
    (forall x: ADT$Op_da3e1031_T ::
      { rank$ADT$Op_da3e1031_T(x) }
      0 <= rank$ADT$Op_da3e1031_T(x))
  }
  
  axiom {
    ADT$Op_da3e1031_T_tag(ADT$Op_da3e1031_T_Add_da3e1031_F()) ==
    ADT$Op_da3e1031_T_Add_da3e1031_F_tag()
  }
  
  axiom {
    ADT$Op_da3e1031_T_tag(ADT$Op_da3e1031_T_Mul_da3e1031_F()) ==
    ADT$Op_da3e1031_T_Mul_da3e1031_F_tag()
  }
}

domain ADT$Tree_da3e1031_T  {
  
  function ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(dataA: ADT$Color_da3e1031_T): ADT$Tree_da3e1031_T 
  
  unique function ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag(): Int 
  
  function ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA: ADT$Tree_da3e1031_T,
  rightA: ADT$Tree_da3e1031_T): ADT$Tree_da3e1031_T 
  
  unique function ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag(): Int 
  
  function ADT$Tree_da3e1031_T_dataA(t: ADT$Tree_da3e1031_T): ADT$Color_da3e1031_T 
  
  function ADT$Tree_da3e1031_T_dflt(): ADT$Tree_da3e1031_T 
  
  function ADT$Tree_da3e1031_T_leftA(t: ADT$Tree_da3e1031_T): ADT$Tree_da3e1031_T 
  
  function ADT$Tree_da3e1031_T_rightA(t: ADT$Tree_da3e1031_T): ADT$Tree_da3e1031_T 
  
  function ADT$Tree_da3e1031_T_tag(t: ADT$Tree_da3e1031_T): Int 
  
  function rank$ADT$Tree_da3e1031_T(x: ADT$Tree_da3e1031_T): Int 
  
  axiom {
    (forall dataA: ADT$Color_da3e1031_T ::
      { ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(dataA) }
      ADT$Tree_da3e1031_T_tag(ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(dataA)) ==
      ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() &&
      ADT$Tree_da3e1031_T_dataA(ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(dataA)) ==
      dataA)
  }
  
  axiom {
    (forall dataA: ADT$Color_da3e1031_T ::
      { rank$ADT$Tree_da3e1031_T(ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(dataA)) }
      rank$ADT$Color_da3e1031_T(dataA) <
      rank$ADT$Tree_da3e1031_T(ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(dataA)))
  }
  
  axiom {
    (forall leftA: ADT$Tree_da3e1031_T, rightA: ADT$Tree_da3e1031_T ::
      { ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA, rightA) }
      ADT$Tree_da3e1031_T_tag(ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA, rightA)) ==
      ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() &&
      ADT$Tree_da3e1031_T_leftA(ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA,
      rightA)) ==
      leftA &&
      ADT$Tree_da3e1031_T_rightA(ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA,
      rightA)) ==
      rightA)
  }
  
  axiom {
    (forall leftA: ADT$Tree_da3e1031_T, rightA: ADT$Tree_da3e1031_T ::
      { rank$ADT$Tree_da3e1031_T(ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA,
      rightA)) }
      rank$ADT$Tree_da3e1031_T(leftA) <
      rank$ADT$Tree_da3e1031_T(ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA, rightA)))
  }
  
  axiom {
    (forall leftA: ADT$Tree_da3e1031_T, rightA: ADT$Tree_da3e1031_T ::
      { rank$ADT$Tree_da3e1031_T(ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA,
      rightA)) }
      rank$ADT$Tree_da3e1031_T(rightA) <
      rank$ADT$Tree_da3e1031_T(ADT$Tree_da3e1031_T_TNode_da3e1031_F(leftA, rightA)))
  }
  
  axiom {
    (forall t: ADT$Tree_da3e1031_T ::
      { ADT$Tree_da3e1031_T_dataA(t) }
      ADT$Tree_da3e1031_T_tag(t) ==
      ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() ==>
      t ==
      ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(ADT$Tree_da3e1031_T_dataA(t)))
  }
  
  axiom {
    (forall t: ADT$Tree_da3e1031_T ::
      { ADT$Tree_da3e1031_T_leftA(t) }
      { ADT$Tree_da3e1031_T_rightA(t) }
      ADT$Tree_da3e1031_T_tag(t) ==
      ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() ==>
      t ==
      ADT$Tree_da3e1031_T_TNode_da3e1031_F(ADT$Tree_da3e1031_T_leftA(t), ADT$Tree_da3e1031_T_rightA(t)))
  }
  
  axiom {
    (forall t: ADT$Tree_da3e1031_T ::
      { ADT$Tree_da3e1031_T_tag(t) }
      t ==
      ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(ADT$Tree_da3e1031_T_dataA(t)) ||
      t ==
      ADT$Tree_da3e1031_T_TNode_da3e1031_F(ADT$Tree_da3e1031_T_leftA(t), ADT$Tree_da3e1031_T_rightA(t)))
  }
  
  axiom {
    (forall x: ADT$Tree_da3e1031_T ::
      { rank$ADT$Tree_da3e1031_T(x) }
      0 <= rank$ADT$Tree_da3e1031_T(x))
  }
}

domain IntWellFoundedOrder  {
  
  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
}

domain PredicateInstance  {
  
  
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
}

domain String  {
  
  function strConcat(l: Int, r: Int): Int 
  
  function strLen(id: Int): Int 
  
  unique function stringLit(): Int 
  
  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
}

domain Tuple2[T0, T1]  {
  
  function get0of2(p: Tuple2[T0, T1]): T0 
  
  function get1of2(p: Tuple2[T0, T1]): T1 
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1] 
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Types  {
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool 
  
  function comparableType_Types(t: Types): Bool 
  
  function empty_interface_Types(): Types 
  
  unique function empty_interface_Types_tag(): Int 
  
  function nil_Types(): Types 
  
  unique function nil_Types_tag(): Int 
  
  function tag_Types(t: Types): Int 
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain WellFoundedOrder[T]  {
  
  function bounded(arg1: T): Bool 
  
  function decreasing(arg1: T, arg2: T): Bool 
}

// decreases m_V0, n_V0
function Ack_da3e1031_F(m_V0: Int, n_V0: Int): Int
  requires 0 <= m_V0
  requires 0 <= n_V0
  ensures 0 <= result
{
  (m_V0 == 0 ?
    n_V0 + 1 :
    (n_V0 == 0 ?
      Ack_da3e1031_F(m_V0 - 1, 1) :
      Ack_da3e1031_F(m_V0 - 1, Ack_da3e1031_F(m_V0, n_V0 - 1))))
}

function BlueCount_da3e1031_MBYTree(t_V0: ADT$BYTree_da3e1031_T): Int
  ensures 0 <= result
{
  assertArg2_Int(ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
  true &&
  true, (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ?
    1 :
    (ADT$BYTree_da3e1031_T_tag(t_V0) ==
    ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ?
      0 :
      (ADT$BYTree_da3e1031_T_tag(t_V0) ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
      true &&
      true ?
        (let left_V1 ==
          (ADT$BYTree_da3e1031_T_leftA(t_V0)) in
          (let right_V1 ==
            (ADT$BYTree_da3e1031_T_rightA(t_V0)) in
            BlueCount_da3e1031_MBYTree(left_V1) +
            BlueCount_da3e1031_MBYTree(right_V1))) :
        0))))
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
function EvalList_da3e1031_F(args_V0: ADT$List_da3e1031_T, op_V0: ADT$Op_da3e1031_T,
  env_V0: Map[Int,Int]): Int
{
  assertArg2_Int(ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ||
  ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
  true &&
  true, (ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ?
    assertArg2_Int(ADT$Op_da3e1031_T_tag(op_V0) ==
    ADT$Op_da3e1031_T_Add_da3e1031_F_tag() ||
    ADT$Op_da3e1031_T_tag(op_V0) == ADT$Op_da3e1031_T_Mul_da3e1031_F_tag(),
    (ADT$Op_da3e1031_T_tag(op_V0) == ADT$Op_da3e1031_T_Add_da3e1031_F_tag() ?
      0 :
      (ADT$Op_da3e1031_T_tag(op_V0) ==
      ADT$Op_da3e1031_T_Mul_da3e1031_F_tag() ?
        1 :
        0))) :
    (ADT$List_da3e1031_T_tag(args_V0) ==
    ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
    true &&
    true ?
      (let e_V1 ==
        (ADT$List_da3e1031_T_headA(args_V0)) in
        (let tail_V1 ==
          (ADT$List_da3e1031_T_tailA(args_V0)) in
          (let v0_V2 ==
            (Eval_da3e1031_F(e_V1, env_V0)) in
            (let v1_V3 ==
              (EvalList_da3e1031_F(tail_V1, op_V0, env_V0)) in
              assertArg2_Int(ADT$Op_da3e1031_T_tag(op_V0) ==
              ADT$Op_da3e1031_T_Add_da3e1031_F_tag() ||
              ADT$Op_da3e1031_T_tag(op_V0) ==
              ADT$Op_da3e1031_T_Mul_da3e1031_F_tag(), (ADT$Op_da3e1031_T_tag(op_V0) ==
              ADT$Op_da3e1031_T_Add_da3e1031_F_tag() ?
                v0_V2 + v1_V3 :
                (ADT$Op_da3e1031_T_tag(op_V0) ==
                ADT$Op_da3e1031_T_Mul_da3e1031_F_tag() ?
                  v0_V2 * v1_V3 :
                  0))))))) :
      0)))
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
function Eval_da3e1031_F(e_V0: ADT$Expr_da3e1031_T, env_V0: Map[Int,Int]): Int
{
  assertArg2_Int(ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
  true ||
  ADT$Expr_da3e1031_T_tag(e_V0) == ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
  true ||
  ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
  true &&
  true, (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
  true ?
    (let c_V1 ==
      (ADT$Expr_da3e1031_T_numA(e_V0)) in
      c_V1) :
    (ADT$Expr_da3e1031_T_tag(e_V0) ==
    ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
    true ?
      (let s_V2 ==
        (ADT$Expr_da3e1031_T_nameA(e_V0)) in
        ((s_V2 in domain(env_V0)) ? env_V0[s_V2] : 0)) :
      (ADT$Expr_da3e1031_T_tag(e_V0) ==
      ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
      true &&
      true ?
        (let op_V3 ==
          (ADT$Expr_da3e1031_T_opA(e_V0)) in
          (let args_V3 ==
            (ADT$Expr_da3e1031_T_argsA(e_V0)) in
            EvalList_da3e1031_F(args_V3, op_V3, env_V0))) :
        0))))
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
function IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)


// decreases rank$ADT$BYTree_da3e1031_T(t_V0)
function LeafCount_da3e1031_MBYTree(t_V0: ADT$BYTree_da3e1031_T): Int
{
  assertArg2_Int(ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
  true &&
  true, (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ?
    1 :
    (ADT$BYTree_da3e1031_T_tag(t_V0) ==
    ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ?
      1 :
      (ADT$BYTree_da3e1031_T_tag(t_V0) ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
      true &&
      true ?
        (let l_V1 ==
          (ADT$BYTree_da3e1031_T_leftA(t_V0)) in
          (let r_V1 ==
            (ADT$BYTree_da3e1031_T_rightA(t_V0)) in
            LeafCount_da3e1031_MBYTree(l_V1) +
            LeafCount_da3e1031_MBYTree(r_V1))) :
        0))))
}

// decreases rank$ADT$Tree_da3e1031_T(t_V0)
function Mirror_da3e1031_MTree(t_V0: ADT$Tree_da3e1031_T): ADT$Tree_da3e1031_T
{
  assertArg2_ADT$Tree_da3e1031_T(ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() &&
  true &&
  true ||
  ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() &&
  true, (ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() &&
  true &&
  true ?
    (let l_V1 ==
      (ADT$Tree_da3e1031_T_leftA(t_V0)) in
      (let r_V1 ==
        (ADT$Tree_da3e1031_T_rightA(t_V0)) in
        ADT$Tree_da3e1031_T_TNode_da3e1031_F(Mirror_da3e1031_MTree(r_V1), Mirror_da3e1031_MTree(l_V1)))) :
    (ADT$Tree_da3e1031_T_tag(t_V0) ==
    ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() &&
    true ?
      (let l_V2 ==
        (ADT$Tree_da3e1031_T_dataA(t_V0)) in
        ADT$Tree_da3e1031_T_TLeaf_da3e1031_F(l_V2)) :
      ADT$Tree_da3e1031_T_dflt())))
}

// decreases x_V0
function More_da3e1031_F(x_V0: Int): Int
{
  (x_V0 <= 0 ? 1 : More_da3e1031_F(x_V0 - 2) + 3)
}

function Mult_da3e1031_F(x_V0: Int, y_V0: Int): Int
  requires 0 <= x_V0 && 0 <= y_V0
  ensures 0 <= result
{
  (y_V0 == 0 ? 0 : x_V0 + Mult_da3e1031_F(x_V0, y_V0 - 1))
}

// decreases rank$ADT$BYTree_da3e1031_T(t_V0)
function Oceanize_da3e1031_MBYTree(t_V0: ADT$BYTree_da3e1031_T): ADT$BYTree_da3e1031_T
{
  assertArg2_ADT$BYTree_da3e1031_T(ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
  true &&
  true, (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ?
    ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F() :
    (ADT$BYTree_da3e1031_T_tag(t_V0) ==
    ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ?
      ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F() :
      (ADT$BYTree_da3e1031_T_tag(t_V0) ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
      true &&
      true ?
        (let l_V1 ==
          (ADT$BYTree_da3e1031_T_leftA(t_V0)) in
          (let r_V1 ==
            (ADT$BYTree_da3e1031_T_rightA(t_V0)) in
            ADT$BYTree_da3e1031_T_Node_da3e1031_F(Oceanize_da3e1031_MBYTree(l_V1),
            Oceanize_da3e1031_MBYTree(r_V1)))) :
        ADT$BYTree_da3e1031_T_dflt()))))
}

// decreases rank$ADT$List_da3e1031_T(es_V0)
function OptimizeAndFilter_da3e1031_F(es_V0: ADT$List_da3e1031_T, unit_V0: Int): ADT$List_da3e1031_T
{
  assertArg2_ADT$List_da3e1031_T(ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ||
  ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
  true &&
  true, (ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ?
    ADT$List_da3e1031_T_Nil_da3e1031_F() :
    (ADT$List_da3e1031_T_tag(es_V0) ==
    ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
    true &&
    true ?
      (let e_V1 ==
        (ADT$List_da3e1031_T_headA(es_V0)) in
        (let tail_V1 ==
          (ADT$List_da3e1031_T_tailA(es_V0)) in
          (let ePrime_V2 ==
            (Optimize_da3e1031_MExpr(e_V1)) in
            (let tailPrime_V3 ==
              (OptimizeAndFilter_da3e1031_F(tail_V1, unit_V0)) in
              (ePrime_V2 == ADT$Expr_da3e1031_T_Const_da3e1031_F(unit_V0) ?
                tailPrime_V3 :
                ADT$List_da3e1031_T_Cons_da3e1031_F(ePrime_V2, tailPrime_V3)))))) :
      ADT$List_da3e1031_T_dflt())))
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
function Optimize_da3e1031_MExpr(e_V0: ADT$Expr_da3e1031_T): ADT$Expr_da3e1031_T
{
  (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() ?
    (let args_V1 ==
      (OptimizeAndFilter_da3e1031_F(ADT$Expr_da3e1031_T_argsA(e_V0), Unit_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0)))) in
      Shorten_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0), args_V1)) :
    e_V0)
}

// decreases m_V0
function Reduce_da3e1031_F(m_V0: Int, x_V0: Int): Int
  requires 0 <= m_V0
{
  (m_V0 == 0 ? x_V0 : Reduce_da3e1031_F(m_V0 / 2, x_V0 + 1) - m_V0)
}

// decreases rank$ADT$BYTree_da3e1031_T(t_V0)
function ReverseColors_da3e1031_MBYTree(t_V0: ADT$BYTree_da3e1031_T): ADT$BYTree_da3e1031_T
{
  assertArg2_ADT$BYTree_da3e1031_T(ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ||
  ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
  true &&
  true, (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() ?
    ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F() :
    (ADT$BYTree_da3e1031_T_tag(t_V0) ==
    ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() ?
      ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F() :
      (ADT$BYTree_da3e1031_T_tag(t_V0) ==
      ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
      true &&
      true ?
        (let l_V1 ==
          (ADT$BYTree_da3e1031_T_leftA(t_V0)) in
          (let r_V1 ==
            (ADT$BYTree_da3e1031_T_rightA(t_V0)) in
            (let lr_V2 ==
              (ReverseColors_da3e1031_MBYTree(l_V1)) in
              (let rr_V3 ==
                (ReverseColors_da3e1031_MBYTree(r_V1)) in
                ADT$BYTree_da3e1031_T_Node_da3e1031_F(lr_V2, rr_V3))))) :
        ADT$BYTree_da3e1031_T_dflt()))))
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
function Shorten_da3e1031_F(op_V0: ADT$Op_da3e1031_T, args_V0: ADT$List_da3e1031_T): ADT$Expr_da3e1031_T
{
  (ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ?
    ADT$Expr_da3e1031_T_Const_da3e1031_F(Unit_da3e1031_F(op_V0)) :
    (ADT$List_da3e1031_T_tag(args_V0) ==
    ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
    true &&
    ADT$List_da3e1031_T_tag(ADT$List_da3e1031_T_tailA(args_V0)) ==
    ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ?
      (let e_V1 ==
        (ADT$List_da3e1031_T_headA(args_V0)) in
        e_V1) :
      ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0, args_V0)))
}

// decreases rank$ADT$Tree_da3e1031_T(t_V0)
function Size_da3e1031_MTree(t_V0: ADT$Tree_da3e1031_T): Int
  ensures 0 <= result
{
  assertArg2_Int(ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() &&
  true ||
  ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() &&
  true &&
  true, (ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() &&
  true ?
    1 :
    (ADT$Tree_da3e1031_T_tag(t_V0) ==
    ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() &&
    true &&
    true ?
      (let l_V1 ==
        (ADT$Tree_da3e1031_T_leftA(t_V0)) in
        (let r_V1 ==
          (ADT$Tree_da3e1031_T_rightA(t_V0)) in
          Size_da3e1031_MTree(l_V1) + Size_da3e1031_MTree(r_V1))) :
      0)))
}

// decreases rank$ADT$List_da3e1031_T(es_V0)
function SubstituteList_da3e1031_F(es_V0: ADT$List_da3e1031_T, n_V0: Int, c_V0: Int): ADT$List_da3e1031_T
{
  assertArg2_ADT$List_da3e1031_T(ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ||
  ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
  true &&
  true, (ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag() ?
    ADT$List_da3e1031_T_Nil_da3e1031_F() :
    (ADT$List_da3e1031_T_tag(es_V0) ==
    ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
    true &&
    true ?
      (let e_V1 ==
        (ADT$List_da3e1031_T_headA(es_V0)) in
        (let tail_V1 ==
          (ADT$List_da3e1031_T_tailA(es_V0)) in
          ADT$List_da3e1031_T_Cons_da3e1031_F(Substitute_da3e1031_F(e_V1, n_V0,
          c_V0), SubstituteList_da3e1031_F(tail_V1, n_V0, c_V0)))) :
      ADT$List_da3e1031_T_dflt())))
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
function Substitute_da3e1031_F(e_V0: ADT$Expr_da3e1031_T, n_V0: Int, c_V0: Int): ADT$Expr_da3e1031_T
{
  assertArg2_ADT$Expr_da3e1031_T(ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
  true ||
  ADT$Expr_da3e1031_T_tag(e_V0) == ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
  true ||
  ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
  true &&
  true, (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
  true ?
    e_V0 :
    (ADT$Expr_da3e1031_T_tag(e_V0) ==
    ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
    true ?
      (let s_V1 ==
        (ADT$Expr_da3e1031_T_nameA(e_V0)) in
        (s_V1 == n_V0 ? ADT$Expr_da3e1031_T_Const_da3e1031_F(c_V0) : e_V0)) :
      (ADT$Expr_da3e1031_T_tag(e_V0) ==
      ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
      true &&
      true ?
        (let op_V2 ==
          (ADT$Expr_da3e1031_T_opA(e_V0)) in
          (let args_V2 ==
            (ADT$Expr_da3e1031_T_argsA(e_V0)) in
            ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V2, SubstituteList_da3e1031_F(args_V2,
            n_V0, c_V0)))) :
        ADT$Expr_da3e1031_T_dflt()))))
}

// decreases 
function Unit_da3e1031_F(op_V0: ADT$Op_da3e1031_T): Int
  ensures 0 <= result
{
  assertArg2_Int(ADT$Op_da3e1031_T_tag(op_V0) ==
  ADT$Op_da3e1031_T_Add_da3e1031_F_tag() ||
  ADT$Op_da3e1031_T_tag(op_V0) == ADT$Op_da3e1031_T_Mul_da3e1031_F_tag(), (ADT$Op_da3e1031_T_tag(op_V0) ==
  ADT$Op_da3e1031_T_Add_da3e1031_F_tag() ?
    0 :
    (ADT$Op_da3e1031_T_tag(op_V0) == ADT$Op_da3e1031_T_Mul_da3e1031_F_tag() ?
      1 :
      0)))
}

// decreases 
function assertArg2_ADT$BYTree_da3e1031_T(b: Bool, y: ADT$BYTree_da3e1031_T): ADT$BYTree_da3e1031_T
  requires b
{
  y
}

// decreases 
function assertArg2_ADT$Expr_da3e1031_T(b: Bool, y: ADT$Expr_da3e1031_T): ADT$Expr_da3e1031_T
  requires b
{
  y
}

// decreases 
function assertArg2_ADT$List_da3e1031_T(b: Bool, y: ADT$List_da3e1031_T): ADT$List_da3e1031_T
  requires b
{
  y
}

// decreases 
function assertArg2_ADT$Tree_da3e1031_T(b: Bool, y: ADT$Tree_da3e1031_T): ADT$Tree_da3e1031_T
  requires b
{
  y
}

// decreases 
function assertArg2_Int(b: Bool, y: Int): Int
  requires b
{
  y
}

predicate ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]) 

method $IMPORTS_da3e1031_a4af0e5e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method $IMPORTS_da3e1031_da3e1031()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_1a39513e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_1cb8aaba()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_2a95bd95()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_3838788d()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_38d1d94d()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_562d179e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_62670745()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_9c20b77c()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_9ce0a51e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_a371eb46()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_b5412269()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_d2426f7b()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_da3e1031_db8de691()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases m_V0, n_V0
method Ack_da3e1031_F_termination_proof(m_V0: Int, n_V0: Int)
  requires 0 <= m_V0
  requires 0 <= n_V0
{
  if (m_V0 == 0) {
  } elseif (n_V0 == 0) {
    assert (decreasing(m_V0 - 1, old(m_V0)): Bool) &&
      (bounded(old(m_V0)): Bool) ||
      m_V0 - 1 == old(m_V0) &&
      ((decreasing(1, old(n_V0)): Bool) && (bounded(old(n_V0)): Bool))
  } else {
    assert (decreasing(m_V0, old(m_V0)): Bool) &&
      (bounded(old(m_V0)): Bool) ||
      m_V0 == old(m_V0) &&
      ((decreasing(n_V0 - 1, old(n_V0)): Bool) &&
      (bounded(old(n_V0)): Bool))
    assert (decreasing(m_V0 - 1, old(m_V0)): Bool) &&
      (bounded(old(m_V0)): Bool) ||
      m_V0 - 1 == old(m_V0) &&
      ((decreasing(Ack_da3e1031_F(m_V0, n_V0 - 1), old(n_V0)): Bool) &&
      (bounded(old(n_V0)): Bool))
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Duplicate_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==>
    acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)


// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Error_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))


// decreases rank$ADT$Expr_da3e1031_T(e_V0)
method EvalEnvDefault_da3e1031_F(e_V0: ADT$Expr_da3e1031_T, n_V0: Int, env_V0: Map[Int,Int])
  requires !((n_V0 in domain(env_V0)))
  ensures Eval_da3e1031_F(e_V0, env_V0) ==
    Eval_da3e1031_F(Substitute_da3e1031_F(e_V0, n_V0, 0), env_V0)
{
  
  // decl e_V0_CN0: Expr_da3e1031_T°°, n_V0_CN1: string°°, env_V0_CN2: dict[string°]int°°°
  {
    var e_V0_CN0: ADT$Expr_da3e1031_T
    var n_V0_CN1: Int
    var env_V0_CN2: Map[Int,Int]
    
    
    
    // init e_V0_CN0
    inhale e_V0_CN0 == ADT$Expr_da3e1031_T_dflt()
    
    // init n_V0_CN1
    inhale n_V0_CN1 == stringLit()
    
    // init env_V0_CN2
    inhale env_V0_CN2 == Map[Int,Int]()
    
    // e_V0_CN0 = e_V0
    e_V0_CN0 := e_V0
    
    // n_V0_CN1 = n_V0
    n_V0_CN1 := n_V0
    
    // env_V0_CN2 = env_V0
    env_V0_CN2 := env_V0
    
    // decl 
    
    // !match e_V0_CN0 {
//   case Const_da3e1031_F {_}: 
//   case Var_da3e1031_F {_}: 
//   case ENode_da3e1031_F {op_V1,args_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      {
        var op_V1: ADT$Op_da3e1031_T
        var args_V1: ADT$List_da3e1031_T
        if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
        ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          op_V1 := ADT$Expr_da3e1031_T_opA(e_V0_CN0)
          args_V1 := ADT$Expr_da3e1031_T_argsA(e_V0_CN0)
          
          // EvalListEnvDefault_da3e1031_F(args_V1, op_V1, n_V0_CN1, env_V0_CN2)
          assert (decreasing(rank$ADT$List_da3e1031_T(args_V1), old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) &&
            (bounded(old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) ||
            rank$ADT$List_da3e1031_T(args_V1) ==
            old(rank$ADT$Expr_da3e1031_T(e_V0)) &&
            false
          EvalListEnvDefault_da3e1031_F(args_V1, op_V1, n_V0_CN1, env_V0_CN2)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases 
method EvalEnv_da3e1031_F(e_V0: ADT$Expr_da3e1031_T, n_V0: Int, env_V0: Map[Int,Int])
  requires (n_V0 in domain(env_V0))
  ensures Eval_da3e1031_F(e_V0, env_V0) ==
    Eval_da3e1031_F(Substitute_da3e1031_F(e_V0, n_V0, env_V0[n_V0]), env_V0)
{
  
  // decl e_V0_CN0: Expr_da3e1031_T°°, n_V0_CN1: string°°, env_V0_CN2: dict[string°]int°°°
  {
    var e_V0_CN0: ADT$Expr_da3e1031_T
    var n_V0_CN1: Int
    var env_V0_CN2: Map[Int,Int]
    
    
    
    // init e_V0_CN0
    inhale e_V0_CN0 == ADT$Expr_da3e1031_T_dflt()
    
    // init n_V0_CN1
    inhale n_V0_CN1 == stringLit()
    
    // init env_V0_CN2
    inhale env_V0_CN2 == Map[Int,Int]()
    
    // e_V0_CN0 = e_V0
    e_V0_CN0 := e_V0
    
    // n_V0_CN1 = n_V0
    n_V0_CN1 := n_V0
    
    // env_V0_CN2 = env_V0
    env_V0_CN2 := env_V0
    
    // decl 
    
    // !match e_V0_CN0 {
//   case Const_da3e1031_F {_}: 
//   case Var_da3e1031_F {_}: 
//   case ENode_da3e1031_F {op_V1,args_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      {
        var op_V1: ADT$Op_da3e1031_T
        var args_V1: ADT$List_da3e1031_T
        if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
        ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          op_V1 := ADT$Expr_da3e1031_T_opA(e_V0_CN0)
          args_V1 := ADT$Expr_da3e1031_T_argsA(e_V0_CN0)
          
          // EvalSubstitute_da3e1031_F(e_V0_CN0, n_V0_CN1, env_V0_CN2[n_V0_CN1], env_V0_CN2)
          EvalSubstitute_da3e1031_F(e_V0_CN0, n_V0_CN1, env_V0_CN2[n_V0_CN1],
            env_V0_CN2)
          
          // assert Eval_da3e1031_F(Substitute_da3e1031_F(e_V0_CN0, n_V0_CN1, env_V0_CN2[n_V0_CN1]), env_V0_CN2) == Eval_da3e1031_F(e_V0_CN0, env_V0_CN2[n_V0_CN1 = env_V0_CN2[n_V0_CN1]])
          assert Eval_da3e1031_F(Substitute_da3e1031_F(e_V0_CN0, n_V0_CN1, env_V0_CN2[n_V0_CN1]),
            env_V0_CN2) ==
            Eval_da3e1031_F(e_V0_CN0, env_V0_CN2[n_V0_CN1 :=
            env_V0_CN2[n_V0_CN1]])
          
          // assert env_V0_CN2 == env_V0_CN2[n_V0_CN1 = env_V0_CN2[n_V0_CN1]]
          assert env_V0_CN2 == env_V0_CN2[n_V0_CN1 := env_V0_CN2[n_V0_CN1]]
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
method EvalListEnvDefault_da3e1031_F(args_V0: ADT$List_da3e1031_T, op_V0: ADT$Op_da3e1031_T,
  n_V0: Int, env_V0: Map[Int,Int])
  requires !((n_V0 in domain(env_V0)))
  ensures EvalList_da3e1031_F(args_V0, op_V0, env_V0) ==
    EvalList_da3e1031_F(SubstituteList_da3e1031_F(args_V0, n_V0, 0), op_V0,
    env_V0)
{
  
  // decl args_V0_CN0: List_da3e1031_T°°, op_V0_CN1: Op_da3e1031_T°°, n_V0_CN2: string°°, env_V0_CN3: dict[string°]int°°°
  {
    var args_V0_CN0: ADT$List_da3e1031_T
    var op_V0_CN1: ADT$Op_da3e1031_T
    var n_V0_CN2: Int
    var env_V0_CN3: Map[Int,Int]
    
    
    
    // init args_V0_CN0
    inhale args_V0_CN0 == ADT$List_da3e1031_T_dflt()
    
    // init op_V0_CN1
    inhale op_V0_CN1 == ADT$Op_da3e1031_T_dflt()
    
    // init n_V0_CN2
    inhale n_V0_CN2 == stringLit()
    
    // init env_V0_CN3
    inhale env_V0_CN3 == Map[Int,Int]()
    
    // args_V0_CN0 = args_V0
    args_V0_CN0 := args_V0
    
    // op_V0_CN1 = op_V0
    op_V0_CN1 := op_V0
    
    // n_V0_CN2 = n_V0
    n_V0_CN2 := n_V0
    
    // env_V0_CN3 = env_V0
    env_V0_CN3 := env_V0
    
    // decl 
    
    // !match args_V0_CN0 {
//   case Nil_da3e1031_F {}: 
//   case Cons_da3e1031_F {h_V1,t_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$List_da3e1031_T_tag(args_V0_CN0) ==
      ADT$List_da3e1031_T_Nil_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      {
        var h_V1: ADT$Expr_da3e1031_T
        var t_V1: ADT$List_da3e1031_T
        if (ADT$List_da3e1031_T_tag(args_V0_CN0) ==
        ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          h_V1 := ADT$List_da3e1031_T_headA(args_V0_CN0)
          t_V1 := ADT$List_da3e1031_T_tailA(args_V0_CN0)
          
          // EvalEnvDefault_da3e1031_F(h_V1, n_V0_CN2, env_V0_CN3)
          assert (decreasing(rank$ADT$Expr_da3e1031_T(h_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool) ||
            rank$ADT$Expr_da3e1031_T(h_V1) ==
            old(rank$ADT$List_da3e1031_T(args_V0)) &&
            false
          EvalEnvDefault_da3e1031_F(h_V1, n_V0_CN2, env_V0_CN3)
          
          // EvalListEnvDefault_da3e1031_F(t_V1, op_V0_CN1, n_V0_CN2, env_V0_CN3)
          assert (decreasing(rank$ADT$List_da3e1031_T(t_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool) ||
            rank$ADT$List_da3e1031_T(t_V1) ==
            old(rank$ADT$List_da3e1031_T(args_V0)) &&
            false
          EvalListEnvDefault_da3e1031_F(t_V1, op_V0_CN1, n_V0_CN2, env_V0_CN3)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
method EvalList_da3e1031_F_termination_proof(args_V0: ADT$List_da3e1031_T, op_V0: ADT$Op_da3e1031_T,
  env_V0: Map[Int,Int])
{
  if (ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag()) {
  } elseif (ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Cons_da3e1031_F_tag()) {
    {
      var e_V1: ADT$Expr_da3e1031_T
      inhale e_V1 == ADT$List_da3e1031_T_headA(args_V0)
      {
        var tail_V1: ADT$List_da3e1031_T
        inhale tail_V1 == ADT$List_da3e1031_T_tailA(args_V0)
        {
          var v0_V2: Int
          assert (decreasing(rank$ADT$Expr_da3e1031_T(e_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool)
          inhale v0_V2 == Eval_da3e1031_F(e_V1, env_V0)
          {
            var v1_V3: Int
            assert (decreasing(rank$ADT$List_da3e1031_T(tail_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
              (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool)
            inhale v1_V3 == EvalList_da3e1031_F(tail_V1, op_V0, env_V0)
          }
        }
      }
    }
  }
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
method EvalSubstituteList_da3e1031_F(args_V0: ADT$List_da3e1031_T, op_V0: ADT$Op_da3e1031_T,
  n_V0: Int, c_V0: Int, env_V0: Map[Int,Int])
  ensures EvalList_da3e1031_F(SubstituteList_da3e1031_F(args_V0, n_V0, c_V0),
    op_V0, env_V0) ==
    EvalList_da3e1031_F(args_V0, op_V0, env_V0[n_V0 := c_V0])
{
  
  // decl args_V0_CN0: List_da3e1031_T°°, op_V0_CN1: Op_da3e1031_T°°, n_V0_CN2: string°°, c_V0_CN3: int°°, env_V0_CN4: dict[string°]int°°°
  {
    var args_V0_CN0: ADT$List_da3e1031_T
    var op_V0_CN1: ADT$Op_da3e1031_T
    var n_V0_CN2: Int
    var c_V0_CN3: Int
    var env_V0_CN4: Map[Int,Int]
    
    
    
    // init args_V0_CN0
    inhale args_V0_CN0 == ADT$List_da3e1031_T_dflt()
    
    // init op_V0_CN1
    inhale op_V0_CN1 == ADT$Op_da3e1031_T_dflt()
    
    // init n_V0_CN2
    inhale n_V0_CN2 == stringLit()
    
    // init c_V0_CN3
    inhale c_V0_CN3 == 0
    
    // init env_V0_CN4
    inhale env_V0_CN4 == Map[Int,Int]()
    
    // args_V0_CN0 = args_V0
    args_V0_CN0 := args_V0
    
    // op_V0_CN1 = op_V0
    op_V0_CN1 := op_V0
    
    // n_V0_CN2 = n_V0
    n_V0_CN2 := n_V0
    
    // c_V0_CN3 = c_V0
    c_V0_CN3 := c_V0
    
    // env_V0_CN4 = env_V0
    env_V0_CN4 := env_V0
    
    // decl 
    
    // !match args_V0_CN0 {
//   case Nil_da3e1031_F {}: 
//   case Cons_da3e1031_F {e_V1,tail_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$List_da3e1031_T_tag(args_V0_CN0) ==
      ADT$List_da3e1031_T_Nil_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      {
        var e_V1: ADT$Expr_da3e1031_T
        var tail_V1: ADT$List_da3e1031_T
        if (ADT$List_da3e1031_T_tag(args_V0_CN0) ==
        ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          e_V1 := ADT$List_da3e1031_T_headA(args_V0_CN0)
          tail_V1 := ADT$List_da3e1031_T_tailA(args_V0_CN0)
          
          // EvalSubstitute_da3e1031_F(e_V1, n_V0_CN2, c_V0_CN3, env_V0_CN4)
          assert (decreasing(rank$ADT$Expr_da3e1031_T(e_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool) ||
            rank$ADT$Expr_da3e1031_T(e_V1) ==
            old(rank$ADT$List_da3e1031_T(args_V0)) &&
            false
          EvalSubstitute_da3e1031_F(e_V1, n_V0_CN2, c_V0_CN3, env_V0_CN4)
          
          // EvalSubstituteList_da3e1031_F(tail_V1, op_V0_CN1, n_V0_CN2, c_V0_CN3, env_V0_CN4)
          assert (decreasing(rank$ADT$List_da3e1031_T(tail_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool) ||
            rank$ADT$List_da3e1031_T(tail_V1) ==
            old(rank$ADT$List_da3e1031_T(args_V0)) &&
            false
          EvalSubstituteList_da3e1031_F(tail_V1, op_V0_CN1, n_V0_CN2, c_V0_CN3,
            env_V0_CN4)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
method EvalSubstitute_da3e1031_F(e_V0: ADT$Expr_da3e1031_T, n_V0: Int, c_V0: Int,
  env_V0: Map[Int,Int])
  ensures Eval_da3e1031_F(Substitute_da3e1031_F(e_V0, n_V0, c_V0), env_V0) ==
    Eval_da3e1031_F(e_V0, env_V0[n_V0 := c_V0])
{
  
  // decl e_V0_CN0: Expr_da3e1031_T°°, n_V0_CN1: string°°, c_V0_CN2: int°°, env_V0_CN3: dict[string°]int°°°
  {
    var e_V0_CN0: ADT$Expr_da3e1031_T
    var n_V0_CN1: Int
    var c_V0_CN2: Int
    var env_V0_CN3: Map[Int,Int]
    
    
    
    // init e_V0_CN0
    inhale e_V0_CN0 == ADT$Expr_da3e1031_T_dflt()
    
    // init n_V0_CN1
    inhale n_V0_CN1 == stringLit()
    
    // init c_V0_CN2
    inhale c_V0_CN2 == 0
    
    // init env_V0_CN3
    inhale env_V0_CN3 == Map[Int,Int]()
    
    // e_V0_CN0 = e_V0
    e_V0_CN0 := e_V0
    
    // n_V0_CN1 = n_V0
    n_V0_CN1 := n_V0
    
    // c_V0_CN2 = c_V0
    c_V0_CN2 := c_V0
    
    // env_V0_CN3 = env_V0
    env_V0_CN3 := env_V0
    
    // decl 
    
    // !match e_V0_CN0 {
//   case Const_da3e1031_F {_}: 
//   case Var_da3e1031_F {_}: 
//   case ENode_da3e1031_F {op_V1,args_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      {
        var op_V1: ADT$Op_da3e1031_T
        var args_V1: ADT$List_da3e1031_T
        if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
        ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          op_V1 := ADT$Expr_da3e1031_T_opA(e_V0_CN0)
          args_V1 := ADT$Expr_da3e1031_T_argsA(e_V0_CN0)
          
          // EvalSubstituteList_da3e1031_F(args_V1, op_V1, n_V0_CN1, c_V0_CN2, env_V0_CN3)
          assert (decreasing(rank$ADT$List_da3e1031_T(args_V1), old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) &&
            (bounded(old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) ||
            rank$ADT$List_da3e1031_T(args_V1) ==
            old(rank$ADT$Expr_da3e1031_T(e_V0)) &&
            false
          EvalSubstituteList_da3e1031_F(args_V1, op_V1, n_V0_CN1, c_V0_CN2,
            env_V0_CN3)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
method Eval_da3e1031_F_termination_proof(e_V0: ADT$Expr_da3e1031_T, env_V0: Map[Int,Int])
{
  if (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Const_da3e1031_F_tag()) {
    {
      var c_V1: Int
      inhale c_V1 == ADT$Expr_da3e1031_T_numA(e_V0)
    }
  } elseif (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Var_da3e1031_F_tag()) {
    {
      var s_V2: Int
      inhale s_V2 == ADT$Expr_da3e1031_T_nameA(e_V0)
    }
  } elseif (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag()) {
    {
      var op_V3: ADT$Op_da3e1031_T
      inhale op_V3 == ADT$Expr_da3e1031_T_opA(e_V0)
      {
        var args_V3: ADT$List_da3e1031_T
        inhale args_V3 == ADT$Expr_da3e1031_T_argsA(e_V0)
        assert (decreasing(rank$ADT$List_da3e1031_T(args_V3), old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) &&
          (bounded(old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool)
      }
    }
  }
}

// decreases 
method ExampleLemmaUse_da3e1031_F(a_V0: Int)
{
  
  // decl a_V0_CN0: int°°
  {
    var a_V0_CN0: Int
    
    
    
    // init a_V0_CN0
    inhale a_V0_CN0 == 0
    
    // a_V0_CN0 = a_V0
    a_V0_CN0 := a_V0
    
    // decl b_V1: int°°, c_V1: int°°
    {
      var b_V1: Int
      var c_V1: Int
      
      // init b_V1
      inhale b_V1 == 0
      
      // b_V1 = More_da3e1031_F(a_V0_CN0)
      b_V1 := More_da3e1031_F(a_V0_CN0)
      
      // Increasing_da3e1031_F(a_V0_CN0)
      Increasing_da3e1031_F(a_V0_CN0)
      
      // Increasing_da3e1031_F(b_V1)
      Increasing_da3e1031_F(b_V1)
      
      // init c_V1
      inhale c_V1 == 0
      
      // c_V1 = More_da3e1031_F(b_V1)
      c_V1 := More_da3e1031_F(b_V1)
      
      // assert 2 <= c_V1 - a_V0_CN0
      assert 2 <= c_V1 - a_V0_CN0
    }
    label returnLabel
  }
}

// decreases 
method ExampleLemmaUse_v2_da3e1031_F(a_V0: Int)
{
  
  // decl a_V0_CN0: int°°
  {
    var a_V0_CN0: Int
    
    
    
    // init a_V0_CN0
    inhale a_V0_CN0 == 0
    
    // a_V0_CN0 = a_V0
    a_V0_CN0 := a_V0
    
    // decl b_V1: int°°
    {
      var b_V1: Int
      
      // init b_V1
      inhale b_V1 == 0
      
      // b_V1 = More_da3e1031_F(a_V0_CN0)
      b_V1 := More_da3e1031_F(a_V0_CN0)
      
      // Increasing_da3e1031_F(a_V0_CN0)
      Increasing_da3e1031_F(a_V0_CN0)
      
      // Increasing_da3e1031_F(b_V1)
      Increasing_da3e1031_F(b_V1)
      
      // b_V1 = More_da3e1031_F(b_V1)
      b_V1 := More_da3e1031_F(b_V1)
      
      // assert 2 <= b_V1 - a_V0_CN0
      assert 2 <= b_V1 - a_V0_CN0
    }
    label returnLabel
  }
}

// decreases x_V0
method IncreasingProof_da3e1031_F(x_V0: Int)
  ensures x_V0 < More_da3e1031_F(x_V0)
{
  
  // decl x_V0_CN0: int°°
  {
    var x_V0_CN0: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl 
    
    // if(x_V0_CN0 > 0) {...} else {...}
    if (x_V0_CN0 > 0) {
      
      // decl 
      
      // IncreasingProof_da3e1031_F(x_V0_CN0 - 2)
      assert (decreasing(x_V0_CN0 - 2, old(x_V0)): Bool) &&
        (bounded(old(x_V0)): Bool) ||
        x_V0_CN0 - 2 == old(x_V0) && false
      IncreasingProof_da3e1031_F(x_V0_CN0 - 2)
    }
    label returnLabel
  }
}

// decreases 
method Increasing_da3e1031_F(x_V0: Int)
  ensures x_V0 < More_da3e1031_F(x_V0)


// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)
  }
}

// decreases rank$ADT$BYTree_da3e1031_T(t_V0)
method LeafCount_da3e1031_MBYTree_termination_proof(t_V0: ADT$BYTree_da3e1031_T)
{
  if (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag()) {
  } elseif (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag()) {
  } elseif (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag()) {
    {
      var l_V1: ADT$BYTree_da3e1031_T
      inhale l_V1 == ADT$BYTree_da3e1031_T_leftA(t_V0)
      {
        var r_V1: ADT$BYTree_da3e1031_T
        inhale r_V1 == ADT$BYTree_da3e1031_T_rightA(t_V0)
        assert (decreasing(rank$ADT$BYTree_da3e1031_T(l_V1), old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool)
        assert (decreasing(rank$ADT$BYTree_da3e1031_T(r_V1), old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool)
      }
    }
  }
}

// decreases n_V0
method LemmaAckOne_da3e1031_F(n_V0: Int)
  requires 0 <= n_V0
  ensures Ack_da3e1031_F(1, n_V0) == n_V0 + 2
{
  
  // decl n_V0_CN0: int°°
  {
    var n_V0_CN0: Int
    
    
    
    // init n_V0_CN0
    inhale n_V0_CN0 == 0
    
    // n_V0_CN0 = n_V0
    n_V0_CN0 := n_V0
    
    // decl 
    
    // if(n_V0_CN0 == 0) {...} else {...}
    if (n_V0_CN0 == 0) {
      
      // decl 
      
      // assert Ack_da3e1031_F(1, n_V0_CN0) == Ack_da3e1031_F(0, 1)
      assert Ack_da3e1031_F(1, n_V0_CN0) == Ack_da3e1031_F(0, 1)
      
      // assert Ack_da3e1031_F(0, 1) == 2
      assert Ack_da3e1031_F(0, 1) == 2
    } else {
      
      // decl 
      
      // assert Ack_da3e1031_F(1, n_V0_CN0) == Ack_da3e1031_F(0, Ack_da3e1031_F(1, n_V0_CN0 - 1))
      assert Ack_da3e1031_F(1, n_V0_CN0) ==
        Ack_da3e1031_F(0, Ack_da3e1031_F(1, n_V0_CN0 - 1))
      
      // LemmaAckOne_da3e1031_F(n_V0_CN0 - 1)
      assert (decreasing(n_V0_CN0 - 1, old(n_V0)): Bool) &&
        (bounded(old(n_V0)): Bool) ||
        n_V0_CN0 - 1 == old(n_V0) && false
      LemmaAckOne_da3e1031_F(n_V0_CN0 - 1)
      
      // assert Ack_da3e1031_F(0, Ack_da3e1031_F(1, n_V0_CN0 - 1)) == Ack_da3e1031_F(0, n_V0_CN0 + 1)
      assert Ack_da3e1031_F(0, Ack_da3e1031_F(1, n_V0_CN0 - 1)) ==
        Ack_da3e1031_F(0, n_V0_CN0 + 1)
      
      // assert Ack_da3e1031_F(0, n_V0_CN0 + 1) == n_V0_CN0 + 2
      assert Ack_da3e1031_F(0, n_V0_CN0 + 1) == n_V0_CN0 + 2
    }
    label returnLabel
  }
}

// decreases rank$ADT$Tree_da3e1031_T(t_V0)
method MirrorMirror_da3e1031_F(t_V0: ADT$Tree_da3e1031_T)
  ensures Mirror_da3e1031_MTree(Mirror_da3e1031_MTree(t_V0)) == t_V0
{
  
  // decl t_V0_CN0: Tree_da3e1031_T°°
  {
    var t_V0_CN0: ADT$Tree_da3e1031_T
    
    
    
    // init t_V0_CN0
    inhale t_V0_CN0 == ADT$Tree_da3e1031_T_dflt()
    
    // t_V0_CN0 = t_V0
    t_V0_CN0 := t_V0
    
    // decl 
    
    // !match t_V0_CN0 {
//   case TLeaf_da3e1031_F {l_V1}: 
//   case TNode_da3e1031_F {l_V2,r_V2}: decl n_V2: Tree_da3e1031_T°°
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      {
        var l_V1: ADT$Color_da3e1031_T
        if (ADT$Tree_da3e1031_T_tag(t_V0_CN0) ==
        ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() &&
        true &&
        !fn$$0) {
          fn$$0 := true
          l_V1 := ADT$Tree_da3e1031_T_dataA(t_V0_CN0)
        }
      }
      {
        var l_V2: ADT$Tree_da3e1031_T
        var r_V2: ADT$Tree_da3e1031_T
        if (ADT$Tree_da3e1031_T_tag(t_V0_CN0) ==
        ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          l_V2 := ADT$Tree_da3e1031_T_leftA(t_V0_CN0)
          r_V2 := ADT$Tree_da3e1031_T_rightA(t_V0_CN0)
          
          // decl n_V2: Tree_da3e1031_T°°
          {
            var n_V2: ADT$Tree_da3e1031_T
            
            // init n_V2
            inhale n_V2 == ADT$Tree_da3e1031_T_dflt()
            
            // n_V2 = TNode_da3e1031_F{l_V2, r_V2}
            n_V2 := ADT$Tree_da3e1031_T_TNode_da3e1031_F(l_V2, r_V2)
            
            // assert n_V2.Mirror().Mirror() == Tree_da3e1031_T°(TNode_da3e1031_F{r_V2.Mirror(), l_V2.Mirror()}).Mirror()
            assert Mirror_da3e1031_MTree(Mirror_da3e1031_MTree(n_V2)) ==
              Mirror_da3e1031_MTree(ADT$Tree_da3e1031_T_TNode_da3e1031_F(Mirror_da3e1031_MTree(r_V2),
              Mirror_da3e1031_MTree(l_V2)))
            
            // MirrorMirror_da3e1031_F(l_V2)
            assert (decreasing(rank$ADT$Tree_da3e1031_T(l_V2), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
              (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) ||
              rank$ADT$Tree_da3e1031_T(l_V2) ==
              old(rank$ADT$Tree_da3e1031_T(t_V0)) &&
              false
            MirrorMirror_da3e1031_F(l_V2)
            
            // assert l_V2.Mirror().Mirror() == l_V2
            assert Mirror_da3e1031_MTree(Mirror_da3e1031_MTree(l_V2)) ==
              l_V2
            
            // MirrorMirror_da3e1031_F(r_V2)
            assert (decreasing(rank$ADT$Tree_da3e1031_T(r_V2), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
              (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) ||
              rank$ADT$Tree_da3e1031_T(r_V2) ==
              old(rank$ADT$Tree_da3e1031_T(t_V0)) &&
              false
            MirrorMirror_da3e1031_F(r_V2)
            
            // assert r_V2.Mirror().Mirror() == r_V2
            assert Mirror_da3e1031_MTree(Mirror_da3e1031_MTree(r_V2)) ==
              r_V2
            
            // assert Tree_da3e1031_T°(TNode_da3e1031_F{r_V2.Mirror(), l_V2.Mirror()}).Mirror() == Tree_da3e1031_T°(TNode_da3e1031_F{l_V2.Mirror().Mirror(), r_V2.Mirror().Mirror()})
            assert Mirror_da3e1031_MTree(ADT$Tree_da3e1031_T_TNode_da3e1031_F(Mirror_da3e1031_MTree(r_V2),
              Mirror_da3e1031_MTree(l_V2))) ==
              ADT$Tree_da3e1031_T_TNode_da3e1031_F(Mirror_da3e1031_MTree(Mirror_da3e1031_MTree(l_V2)),
              Mirror_da3e1031_MTree(Mirror_da3e1031_MTree(r_V2)))
          }
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$Tree_da3e1031_T(t_V0)
method MirrorSize_da3e1031_F(t_V0: ADT$Tree_da3e1031_T)
  ensures Size_da3e1031_MTree(Mirror_da3e1031_MTree(t_V0)) ==
    Size_da3e1031_MTree(t_V0)
{
  
  // decl t_V0_CN0: Tree_da3e1031_T°°
  {
    var t_V0_CN0: ADT$Tree_da3e1031_T
    
    
    
    // init t_V0_CN0
    inhale t_V0_CN0 == ADT$Tree_da3e1031_T_dflt()
    
    // t_V0_CN0 = t_V0
    t_V0_CN0 := t_V0
    
    // decl 
    
    // !match t_V0_CN0 {
//   case TLeaf_da3e1031_F {_}: 
//   case TNode_da3e1031_F {l_V1,r_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$Tree_da3e1031_T_tag(t_V0_CN0) ==
      ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      {
        var l_V1: ADT$Tree_da3e1031_T
        var r_V1: ADT$Tree_da3e1031_T
        if (ADT$Tree_da3e1031_T_tag(t_V0_CN0) ==
        ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          l_V1 := ADT$Tree_da3e1031_T_leftA(t_V0_CN0)
          r_V1 := ADT$Tree_da3e1031_T_rightA(t_V0_CN0)
          
          // MirrorSize_da3e1031_F(l_V1)
          assert (decreasing(rank$ADT$Tree_da3e1031_T(l_V1), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
            (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) ||
            rank$ADT$Tree_da3e1031_T(l_V1) ==
            old(rank$ADT$Tree_da3e1031_T(t_V0)) &&
            false
          MirrorSize_da3e1031_F(l_V1)
          
          // MirrorSize_da3e1031_F(r_V1)
          assert (decreasing(rank$ADT$Tree_da3e1031_T(r_V1), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
            (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) ||
            rank$ADT$Tree_da3e1031_T(r_V1) ==
            old(rank$ADT$Tree_da3e1031_T(t_V0)) &&
            false
          MirrorSize_da3e1031_F(r_V1)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$Tree_da3e1031_T(t_V0)
method Mirror_da3e1031_MTree_termination_proof(t_V0: ADT$Tree_da3e1031_T)
{
  if (ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag()) {
    {
      var l_V1: ADT$Tree_da3e1031_T
      inhale l_V1 == ADT$Tree_da3e1031_T_leftA(t_V0)
      {
        var r_V1: ADT$Tree_da3e1031_T
        inhale r_V1 == ADT$Tree_da3e1031_T_rightA(t_V0)
        assert (decreasing(rank$ADT$Tree_da3e1031_T(r_V1), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool)
        assert (decreasing(rank$ADT$Tree_da3e1031_T(l_V1), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool)
      }
    }
  } elseif (ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag()) {
    {
      var l_V2: ADT$Color_da3e1031_T
      inhale l_V2 == ADT$Tree_da3e1031_T_dataA(t_V0)
    }
  }
}

// decreases x_V0
method More_da3e1031_F_termination_proof(x_V0: Int)
{
  if (x_V0 <= 0) {
  } else {
    assert (decreasing(x_V0 - 2, old(x_V0)): Bool) &&
      (bounded(old(x_V0)): Bool)}
}

// decreases x_V0
method MultByZeroIsZero_da3e1031_F(x_V0: Int)
  requires 0 <= x_V0
  ensures Mult_da3e1031_F(x_V0, 0) == 0
  ensures Mult_da3e1031_F(0, x_V0) == 0
{
  
  // decl x_V0_CN0: int°°
  {
    var x_V0_CN0: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // decl 
    
    // if(x_V0_CN0 != 0) {...} else {...}
    if (!(x_V0_CN0 == 0)) {
      
      // decl 
      
      // assert Mult_da3e1031_F(0, x_V0_CN0) == 0 + Mult_da3e1031_F(0, x_V0_CN0 - 1)
      assert Mult_da3e1031_F(0, x_V0_CN0) ==
        0 + Mult_da3e1031_F(0, x_V0_CN0 - 1)
      
      // MultByZeroIsZero_da3e1031_F(x_V0_CN0 - 1)
      assert (decreasing(x_V0_CN0 - 1, old(x_V0)): Bool) &&
        (bounded(old(x_V0)): Bool) ||
        x_V0_CN0 - 1 == old(x_V0) && false
      MultByZeroIsZero_da3e1031_F(x_V0_CN0 - 1)
      
      // assert Mult_da3e1031_F(0, x_V0_CN0 - 1) == 0
      assert Mult_da3e1031_F(0, x_V0_CN0 - 1) == 0
    }
    label returnLabel
  }
}

// decreases x_V0 + y_V0
method MultCommutative_da3e1031_F(x_V0: Int, y_V0: Int)
  requires 0 <= x_V0 && 0 <= y_V0
  ensures Mult_da3e1031_F(x_V0, y_V0) == Mult_da3e1031_F(y_V0, x_V0)


// decreases x_V0 + y_V0
method MultCommutative_v2_da3e1031_F(x_V0: Int, y_V0: Int)
  requires 0 <= x_V0 && 0 <= y_V0
  ensures Mult_da3e1031_F(x_V0, y_V0) == Mult_da3e1031_F(y_V0, x_V0)
{
  
  // decl x_V0_CN0: int°°, y_V0_CN1: int°°
  {
    var x_V0_CN0: Int
    var y_V0_CN1: Int
    
    
    
    // init x_V0_CN0
    inhale x_V0_CN0 == 0
    
    // init y_V0_CN1
    inhale y_V0_CN1 == 0
    
    // x_V0_CN0 = x_V0
    x_V0_CN0 := x_V0
    
    // y_V0_CN1 = y_V0
    y_V0_CN1 := y_V0
    
    // decl 
    
    // if(y_V0_CN1 != 0 && x_V0_CN0 != 0) {...} else {...}
    if (!(y_V0_CN1 == 0) && !(x_V0_CN0 == 0)) {
      
      // decl 
      
      // MultCommutative_v2_da3e1031_F(x_V0_CN0, y_V0_CN1 - 1)
      assert (decreasing(x_V0_CN0 + (y_V0_CN1 - 1), old(x_V0 + y_V0)): Bool) &&
        (bounded(old(x_V0 + y_V0)): Bool) ||
        x_V0_CN0 + (y_V0_CN1 - 1) == old(x_V0 + y_V0) && false
      MultCommutative_v2_da3e1031_F(x_V0_CN0, y_V0_CN1 - 1)
      
      // MultCommutative_v2_da3e1031_F(y_V0_CN1, x_V0_CN0 - 1)
      assert (decreasing(y_V0_CN1 + (x_V0_CN0 - 1), old(x_V0 + y_V0)): Bool) &&
        (bounded(old(x_V0 + y_V0)): Bool) ||
        y_V0_CN1 + (x_V0_CN0 - 1) == old(x_V0 + y_V0) && false
      MultCommutative_v2_da3e1031_F(y_V0_CN1, x_V0_CN0 - 1)
      
      // if(x_V0_CN0 == 1) {...} else {...}
      if (x_V0_CN0 == 1) {
        
        // decl 
        
        // assert Mult_da3e1031_F(1, y_V0_CN1) == 1 + Mult_da3e1031_F(1, y_V0_CN1 - 1)
        assert Mult_da3e1031_F(1, y_V0_CN1) ==
          1 + Mult_da3e1031_F(1, y_V0_CN1 - 1)
        
        // MultCommutative_v2_da3e1031_F(1, y_V0_CN1 - 1)
        assert (decreasing(1 + (y_V0_CN1 - 1), old(x_V0 + y_V0)): Bool) &&
          (bounded(old(x_V0 + y_V0)): Bool) ||
          1 + (y_V0_CN1 - 1) == old(x_V0 + y_V0) && false
        MultCommutative_v2_da3e1031_F(1, y_V0_CN1 - 1)
        
        // assert Mult_da3e1031_F(1, y_V0_CN1) == 1 + Mult_da3e1031_F(y_V0_CN1 - 1, 1)
        assert Mult_da3e1031_F(1, y_V0_CN1) ==
          1 + Mult_da3e1031_F(y_V0_CN1 - 1, 1)
        
        // assert Mult_da3e1031_F(1, y_V0_CN1) == 1 + y_V0_CN1 - 1 + Mult_da3e1031_F(y_V0_CN1 - 1, 0)
        assert Mult_da3e1031_F(1, y_V0_CN1) ==
          1 + y_V0_CN1 - 1 + Mult_da3e1031_F(y_V0_CN1 - 1, 0)
        
        // MultByZeroIsZero_da3e1031_F(y_V0_CN1 - 1)
        MultByZeroIsZero_da3e1031_F(y_V0_CN1 - 1)
        
        // assert Mult_da3e1031_F(1, y_V0_CN1) == Mult_da3e1031_F(y_V0_CN1, 1)
        assert Mult_da3e1031_F(1, y_V0_CN1) == Mult_da3e1031_F(y_V0_CN1, 1)
      } else {
        
        // if(y_V0_CN1 == 1) {...} else {...}
        if (y_V0_CN1 == 1) {
          
          // decl 
          
          // assert Mult_da3e1031_F(1, x_V0_CN0) == 1 + Mult_da3e1031_F(1, x_V0_CN0 - 1)
          assert Mult_da3e1031_F(1, x_V0_CN0) ==
            1 + Mult_da3e1031_F(1, x_V0_CN0 - 1)
          
          // MultCommutative_v2_da3e1031_F(1, x_V0_CN0 - 1)
          assert (decreasing(1 + (x_V0_CN0 - 1), old(x_V0 + y_V0)): Bool) &&
            (bounded(old(x_V0 + y_V0)): Bool) ||
            1 + (x_V0_CN0 - 1) == old(x_V0 + y_V0) && false
          MultCommutative_v2_da3e1031_F(1, x_V0_CN0 - 1)
          
          // assert Mult_da3e1031_F(1, x_V0_CN0) == 1 + Mult_da3e1031_F(x_V0_CN0 - 1, 1)
          assert Mult_da3e1031_F(1, x_V0_CN0) ==
            1 + Mult_da3e1031_F(x_V0_CN0 - 1, 1)
          
          // assert Mult_da3e1031_F(1, x_V0_CN0) == 1 + x_V0_CN0 - 1 + Mult_da3e1031_F(x_V0_CN0 - 1, 0)
          assert Mult_da3e1031_F(1, x_V0_CN0) ==
            1 + x_V0_CN0 - 1 + Mult_da3e1031_F(x_V0_CN0 - 1, 0)
          
          // MultByZeroIsZero_da3e1031_F(x_V0_CN0 - 1)
          MultByZeroIsZero_da3e1031_F(x_V0_CN0 - 1)
          
          // assert Mult_da3e1031_F(1, x_V0_CN0) == Mult_da3e1031_F(x_V0_CN0, 1)
          assert Mult_da3e1031_F(1, x_V0_CN0) ==
            Mult_da3e1031_F(x_V0_CN0, 1)
        } else {
          
          // decl 
          
          // assert Mult_da3e1031_F(x_V0_CN0, y_V0_CN1) == x_V0_CN0 + Mult_da3e1031_F(x_V0_CN0, y_V0_CN1 - 1)
          assert Mult_da3e1031_F(x_V0_CN0, y_V0_CN1) ==
            x_V0_CN0 + Mult_da3e1031_F(x_V0_CN0, y_V0_CN1 - 1)
          
          // assert Mult_da3e1031_F(x_V0_CN0, y_V0_CN1) == x_V0_CN0 + Mult_da3e1031_F(y_V0_CN1 - 1, x_V0_CN0)
          assert Mult_da3e1031_F(x_V0_CN0, y_V0_CN1) ==
            x_V0_CN0 + Mult_da3e1031_F(y_V0_CN1 - 1, x_V0_CN0)
          
          // assert Mult_da3e1031_F(x_V0_CN0, y_V0_CN1) == x_V0_CN0 + y_V0_CN1 - 1 + Mult_da3e1031_F(y_V0_CN1 - 1, x_V0_CN0 - 1)
          assert Mult_da3e1031_F(x_V0_CN0, y_V0_CN1) ==
            x_V0_CN0 + y_V0_CN1 - 1 +
            Mult_da3e1031_F(y_V0_CN1 - 1, x_V0_CN0 - 1)
          
          // assert Mult_da3e1031_F(y_V0_CN1, x_V0_CN0) == y_V0_CN1 + Mult_da3e1031_F(y_V0_CN1, x_V0_CN0 - 1)
          assert Mult_da3e1031_F(y_V0_CN1, x_V0_CN0) ==
            y_V0_CN1 + Mult_da3e1031_F(y_V0_CN1, x_V0_CN0 - 1)
          
          // assert Mult_da3e1031_F(y_V0_CN1, x_V0_CN0) == y_V0_CN1 + Mult_da3e1031_F(x_V0_CN0 - 1, y_V0_CN1)
          assert Mult_da3e1031_F(y_V0_CN1, x_V0_CN0) ==
            y_V0_CN1 + Mult_da3e1031_F(x_V0_CN0 - 1, y_V0_CN1)
          
          // assert Mult_da3e1031_F(y_V0_CN1, x_V0_CN0) == y_V0_CN1 + x_V0_CN0 - 1 + Mult_da3e1031_F(x_V0_CN0 - 1, y_V0_CN1 - 1)
          assert Mult_da3e1031_F(y_V0_CN1, x_V0_CN0) ==
            y_V0_CN1 + x_V0_CN0 - 1 +
            Mult_da3e1031_F(x_V0_CN0 - 1, y_V0_CN1 - 1)
          
          // MultCommutative_v2_da3e1031_F(x_V0_CN0 - 1, y_V0_CN1 - 1)
          assert (decreasing(x_V0_CN0 - 1 + (y_V0_CN1 - 1), old(x_V0 + y_V0)): Bool) &&
            (bounded(old(x_V0 + y_V0)): Bool) ||
            x_V0_CN0 - 1 + (y_V0_CN1 - 1) == old(x_V0 + y_V0) && false
          MultCommutative_v2_da3e1031_F(x_V0_CN0 - 1, y_V0_CN1 - 1)
        }
      }
    } else {
      
      // decl 
      
      // MultByZeroIsZero_da3e1031_F(x_V0_CN0)
      MultByZeroIsZero_da3e1031_F(x_V0_CN0)
      
      // MultByZeroIsZero_da3e1031_F(y_V0_CN1)
      MultByZeroIsZero_da3e1031_F(y_V0_CN1)
    }
    label returnLabel
  }
}

// decreases rank$ADT$BYTree_da3e1031_T(b_V0)
method OceanizeIdempotent_da3e1031_F(b_V0: ADT$BYTree_da3e1031_T)
  ensures Oceanize_da3e1031_MBYTree(b_V0) ==
    Oceanize_da3e1031_MBYTree(Oceanize_da3e1031_MBYTree(b_V0))
{
  
  // decl b_V0_CN0: BYTree_da3e1031_T°°
  {
    var b_V0_CN0: ADT$BYTree_da3e1031_T
    
    
    
    // init b_V0_CN0
    inhale b_V0_CN0 == ADT$BYTree_da3e1031_T_dflt()
    
    // b_V0_CN0 = b_V0
    b_V0_CN0 := b_V0
    
    // decl 
    
    // !match b_V0_CN0 {
//   case BlueLeaf_da3e1031_F {}: 
//   case YellowLeaf_da3e1031_F {}: 
//   case Node_da3e1031_F {l_V1,r_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      {
        var l_V1: ADT$BYTree_da3e1031_T
        var r_V1: ADT$BYTree_da3e1031_T
        if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
        ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          l_V1 := ADT$BYTree_da3e1031_T_leftA(b_V0_CN0)
          r_V1 := ADT$BYTree_da3e1031_T_rightA(b_V0_CN0)
          
          // OceanizeIdempotent_da3e1031_F(l_V1)
          assert (decreasing(rank$ADT$BYTree_da3e1031_T(l_V1), old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) ||
            rank$ADT$BYTree_da3e1031_T(l_V1) ==
            old(rank$ADT$BYTree_da3e1031_T(b_V0)) &&
            false
          OceanizeIdempotent_da3e1031_F(l_V1)
          
          // OceanizeIdempotent_da3e1031_F(r_V1)
          assert (decreasing(rank$ADT$BYTree_da3e1031_T(r_V1), old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) ||
            rank$ADT$BYTree_da3e1031_T(r_V1) ==
            old(rank$ADT$BYTree_da3e1031_T(b_V0)) &&
            false
          OceanizeIdempotent_da3e1031_F(r_V1)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$BYTree_da3e1031_T(b_V0)
method OceanizeMonoticBlueCount_da3e1031_F(b_V0: ADT$BYTree_da3e1031_T)
  ensures BlueCount_da3e1031_MBYTree(b_V0) <=
    BlueCount_da3e1031_MBYTree(Oceanize_da3e1031_MBYTree(b_V0))
{
  
  // decl b_V0_CN0: BYTree_da3e1031_T°°
  {
    var b_V0_CN0: ADT$BYTree_da3e1031_T
    
    
    
    // init b_V0_CN0
    inhale b_V0_CN0 == ADT$BYTree_da3e1031_T_dflt()
    
    // b_V0_CN0 = b_V0
    b_V0_CN0 := b_V0
    
    // decl 
    
    // !match b_V0_CN0 {
//   case BlueLeaf_da3e1031_F {}: 
//   case YellowLeaf_da3e1031_F {}: 
//   case Node_da3e1031_F {l_V1,r_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      {
        var l_V1: ADT$BYTree_da3e1031_T
        var r_V1: ADT$BYTree_da3e1031_T
        if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
        ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          l_V1 := ADT$BYTree_da3e1031_T_leftA(b_V0_CN0)
          r_V1 := ADT$BYTree_da3e1031_T_rightA(b_V0_CN0)
          
          // OceanizeMonoticBlueCount_da3e1031_F(l_V1)
          assert (decreasing(rank$ADT$BYTree_da3e1031_T(l_V1), old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) ||
            rank$ADT$BYTree_da3e1031_T(l_V1) ==
            old(rank$ADT$BYTree_da3e1031_T(b_V0)) &&
            false
          OceanizeMonoticBlueCount_da3e1031_F(l_V1)
          
          // OceanizeMonoticBlueCount_da3e1031_F(r_V1)
          assert (decreasing(rank$ADT$BYTree_da3e1031_T(r_V1), old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) ||
            rank$ADT$BYTree_da3e1031_T(r_V1) ==
            old(rank$ADT$BYTree_da3e1031_T(b_V0)) &&
            false
          OceanizeMonoticBlueCount_da3e1031_F(r_V1)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$BYTree_da3e1031_T(t_V0)
method Oceanize_da3e1031_MBYTree_termination_proof(t_V0: ADT$BYTree_da3e1031_T)
{
  if (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag()) {
  } elseif (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag()) {
  } elseif (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag()) {
    {
      var l_V1: ADT$BYTree_da3e1031_T
      inhale l_V1 == ADT$BYTree_da3e1031_T_leftA(t_V0)
      {
        var r_V1: ADT$BYTree_da3e1031_T
        inhale r_V1 == ADT$BYTree_da3e1031_T_rightA(t_V0)
        assert (decreasing(rank$ADT$BYTree_da3e1031_T(l_V1), old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool)
        assert (decreasing(rank$ADT$BYTree_da3e1031_T(r_V1), old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool)
      }
    }
  }
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
method OptimizeAndFilterCorrect_da3e1031_F(args_V0: ADT$List_da3e1031_T, op_V0: ADT$Op_da3e1031_T,
  env_V0: Map[Int,Int])
  ensures Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0, OptimizeAndFilter_da3e1031_F(args_V0,
    Unit_da3e1031_F(op_V0))), env_V0) ==
    Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0, args_V0), env_V0)
{
  
  // decl args_V0_CN0: List_da3e1031_T°°, op_V0_CN1: Op_da3e1031_T°°, env_V0_CN2: dict[string°]int°°°
  {
    var args_V0_CN0: ADT$List_da3e1031_T
    var op_V0_CN1: ADT$Op_da3e1031_T
    var env_V0_CN2: Map[Int,Int]
    
    
    
    // init args_V0_CN0
    inhale args_V0_CN0 == ADT$List_da3e1031_T_dflt()
    
    // init op_V0_CN1
    inhale op_V0_CN1 == ADT$Op_da3e1031_T_dflt()
    
    // init env_V0_CN2
    inhale env_V0_CN2 == Map[Int,Int]()
    
    // args_V0_CN0 = args_V0
    args_V0_CN0 := args_V0
    
    // op_V0_CN1 = op_V0
    op_V0_CN1 := op_V0
    
    // env_V0_CN2 = env_V0
    env_V0_CN2 := env_V0
    
    // decl 
    
    // if(args_V0_CN0.Cons_da3e1031_F) {...} else {...}
    if (ADT$List_da3e1031_T_tag(args_V0_CN0) ==
    ADT$List_da3e1031_T_Cons_da3e1031_F_tag()) {
      
      // decl h_V1: Expr_da3e1031_T°°, t_V1: List_da3e1031_T°°
      {
        var h_V1: ADT$Expr_da3e1031_T
        var t_V1: ADT$List_da3e1031_T
        
        // init h_V1
        inhale h_V1 == ADT$Expr_da3e1031_T_dflt()
        
        // init t_V1
        inhale t_V1 == ADT$List_da3e1031_T_dflt()
        
        // h_V1 = args_V0_CN0.fieldheadA: Expr_da3e1031_T°
        h_V1 := ADT$List_da3e1031_T_headA(args_V0_CN0)
        
        // t_V1 = args_V0_CN0.fieldtailA: List_da3e1031_T°
        t_V1 := ADT$List_da3e1031_T_tailA(args_V0_CN0)
        
        // OptimizeCorrect_da3e1031_F(h_V1, env_V0_CN2)
        assert (decreasing(rank$ADT$Expr_da3e1031_T(h_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
          (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool) ||
          rank$ADT$Expr_da3e1031_T(h_V1) ==
          old(rank$ADT$List_da3e1031_T(args_V0)) &&
          false
        OptimizeCorrect_da3e1031_F(h_V1, env_V0_CN2)
        
        // assert Eval_da3e1031_F(h_V1, env_V0_CN2) == Eval_da3e1031_F(h_V1.Optimize(), env_V0_CN2)
        assert Eval_da3e1031_F(h_V1, env_V0_CN2) ==
          Eval_da3e1031_F(Optimize_da3e1031_MExpr(h_V1), env_V0_CN2)
        
        // OptimizeAndFilterCorrect_da3e1031_F(t_V1, op_V0_CN1, env_V0_CN2)
        assert (decreasing(rank$ADT$List_da3e1031_T(t_V1), old(rank$ADT$List_da3e1031_T(args_V0))): Bool) &&
          (bounded(old(rank$ADT$List_da3e1031_T(args_V0))): Bool) ||
          rank$ADT$List_da3e1031_T(t_V1) ==
          old(rank$ADT$List_da3e1031_T(args_V0)) &&
          false
        OptimizeAndFilterCorrect_da3e1031_F(t_V1, op_V0_CN1, env_V0_CN2)
        
        // assert EvalList_da3e1031_F(OptimizeAndFilter_da3e1031_F(args_V0_CN0, Unit_da3e1031_F(op_V0_CN1)), op_V0_CN1, env_V0_CN2) == EvalList_da3e1031_F(args_V0_CN0, op_V0_CN1, env_V0_CN2)
        assert EvalList_da3e1031_F(OptimizeAndFilter_da3e1031_F(args_V0_CN0,
          Unit_da3e1031_F(op_V0_CN1)), op_V0_CN1, env_V0_CN2) ==
          EvalList_da3e1031_F(args_V0_CN0, op_V0_CN1, env_V0_CN2)
      }
    }
    label returnLabel
  }
}

// decreases rank$ADT$List_da3e1031_T(es_V0)
method OptimizeAndFilter_da3e1031_F_termination_proof(es_V0: ADT$List_da3e1031_T,
  unit_V0: Int)
{
  if (ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag()) {
  } elseif (ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Cons_da3e1031_F_tag()) {
    {
      var e_V1: ADT$Expr_da3e1031_T
      inhale e_V1 == ADT$List_da3e1031_T_headA(es_V0)
      {
        var tail_V1: ADT$List_da3e1031_T
        inhale tail_V1 == ADT$List_da3e1031_T_tailA(es_V0)
        {
          var ePrime_V2: ADT$Expr_da3e1031_T
          assert (decreasing(rank$ADT$Expr_da3e1031_T(e_V1), old(rank$ADT$List_da3e1031_T(es_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(es_V0))): Bool)
          inhale ePrime_V2 == Optimize_da3e1031_MExpr(e_V1)
          {
            var tailPrime_V3: ADT$List_da3e1031_T
            assert (decreasing(rank$ADT$List_da3e1031_T(tail_V1), old(rank$ADT$List_da3e1031_T(es_V0))): Bool) &&
              (bounded(old(rank$ADT$List_da3e1031_T(es_V0))): Bool)
            inhale tailPrime_V3 ==
              OptimizeAndFilter_da3e1031_F(tail_V1, unit_V0)
          }
        }
      }
    }
  }
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
method OptimizeCorrect_da3e1031_F(e_V0: ADT$Expr_da3e1031_T, env_V0: Map[Int,Int])
  ensures Eval_da3e1031_F(Optimize_da3e1031_MExpr(e_V0), env_V0) ==
    Eval_da3e1031_F(e_V0, env_V0)
{
  
  // decl e_V0_CN0: Expr_da3e1031_T°°, env_V0_CN1: dict[string°]int°°°
  {
    var e_V0_CN0: ADT$Expr_da3e1031_T
    var env_V0_CN1: Map[Int,Int]
    
    
    
    // init e_V0_CN0
    inhale e_V0_CN0 == ADT$Expr_da3e1031_T_dflt()
    
    // init env_V0_CN1
    inhale env_V0_CN1 == Map[Int,Int]()
    
    // e_V0_CN0 = e_V0
    e_V0_CN0 := e_V0
    
    // env_V0_CN1 = env_V0
    env_V0_CN1 := env_V0
    
    // decl 
    
    // if(e_V0_CN0.ENode_da3e1031_F) {...} else {...}
    if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
    ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag()) {
      
      // decl args_V1: List_da3e1031_T°°
      {
        var args_V1: ADT$List_da3e1031_T
        
        // init args_V1
        inhale args_V1 == ADT$List_da3e1031_T_dflt()
        
        // args_V1 = OptimizeAndFilter_da3e1031_F(e_V0_CN0.fieldargsA: List_da3e1031_T°, Unit_da3e1031_F(e_V0_CN0.fieldopA: Op_da3e1031_T°))
        args_V1 := OptimizeAndFilter_da3e1031_F(ADT$Expr_da3e1031_T_argsA(e_V0_CN0),
          Unit_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0_CN0)))
        
        // assert Eval_da3e1031_F(e_V0_CN0.Optimize(), env_V0_CN1) == Eval_da3e1031_F(Shorten_da3e1031_F(e_V0_CN0.fieldopA: Op_da3e1031_T°, args_V1), env_V0_CN1)
        assert Eval_da3e1031_F(Optimize_da3e1031_MExpr(e_V0_CN0), env_V0_CN1) ==
          Eval_da3e1031_F(Shorten_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0_CN0),
          args_V1), env_V0_CN1)
        
        // ShortenCorrect_da3e1031_F(e_V0_CN0.fieldopA: Op_da3e1031_T°, args_V1, env_V0_CN1)
        ShortenCorrect_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0_CN0), args_V1,
          env_V0_CN1)
        
        // assert Eval_da3e1031_F(Shorten_da3e1031_F(e_V0_CN0.fieldopA: Op_da3e1031_T°, args_V1), env_V0_CN1) == Eval_da3e1031_F(ENode_da3e1031_F{e_V0_CN0.fieldopA: Op_da3e1031_T°, args_V1}, env_V0_CN1)
        assert Eval_da3e1031_F(Shorten_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0_CN0),
          args_V1), env_V0_CN1) ==
          Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0_CN0),
          args_V1), env_V0_CN1)
        
        // OptimizeAndFilterCorrect_da3e1031_F(e_V0_CN0.fieldargsA: List_da3e1031_T°, e_V0_CN0.fieldopA: Op_da3e1031_T°, env_V0_CN1)
        assert (decreasing(rank$ADT$List_da3e1031_T(ADT$Expr_da3e1031_T_argsA(e_V0_CN0)),
          old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) &&
          (bounded(old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) ||
          rank$ADT$List_da3e1031_T(ADT$Expr_da3e1031_T_argsA(e_V0_CN0)) ==
          old(rank$ADT$Expr_da3e1031_T(e_V0)) &&
          false
        OptimizeAndFilterCorrect_da3e1031_F(ADT$Expr_da3e1031_T_argsA(e_V0_CN0),
          ADT$Expr_da3e1031_T_opA(e_V0_CN0), env_V0_CN1)
        
        // assert Eval_da3e1031_F(ENode_da3e1031_F{e_V0_CN0.fieldopA: Op_da3e1031_T°, args_V1}, env_V0_CN1) == Eval_da3e1031_F(ENode_da3e1031_F{e_V0_CN0.fieldopA: Op_da3e1031_T°, e_V0_CN0.fieldargsA: List_da3e1031_T°}, env_V0_CN1)
        assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0_CN0),
          args_V1), env_V0_CN1) ==
          Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0_CN0),
          ADT$Expr_da3e1031_T_argsA(e_V0_CN0)), env_V0_CN1)
      }
    }
    label returnLabel
  }
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
method Optimize_da3e1031_MExpr_termination_proof(e_V0: ADT$Expr_da3e1031_T)
{
  if (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag()) {
    {
      var args_V1: ADT$List_da3e1031_T
      assert (decreasing(rank$ADT$List_da3e1031_T(ADT$Expr_da3e1031_T_argsA(e_V0)),
        old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) &&
        (bounded(old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool)
      inhale args_V1 ==
        OptimizeAndFilter_da3e1031_F(ADT$Expr_da3e1031_T_argsA(e_V0), Unit_da3e1031_F(ADT$Expr_da3e1031_T_opA(e_V0)))
    }
  }
}

// decreases rank$ADT$BYTree_da3e1031_T(b_V0)
method PreservesLeafCount_da3e1031_F(b_V0: ADT$BYTree_da3e1031_T)
  ensures LeafCount_da3e1031_MBYTree(b_V0) ==
    LeafCount_da3e1031_MBYTree(ReverseColors_da3e1031_MBYTree(b_V0))
{
  
  // decl b_V0_CN0: BYTree_da3e1031_T°°
  {
    var b_V0_CN0: ADT$BYTree_da3e1031_T
    
    
    
    // init b_V0_CN0
    inhale b_V0_CN0 == ADT$BYTree_da3e1031_T_dflt()
    
    // b_V0_CN0 = b_V0
    b_V0_CN0 := b_V0
    
    // decl 
    
    // !match b_V0_CN0 {
//   case BlueLeaf_da3e1031_F {}: 
//   case YellowLeaf_da3e1031_F {}: 
//   case Node_da3e1031_F {l_V1,r_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      {
        var l_V1: ADT$BYTree_da3e1031_T
        var r_V1: ADT$BYTree_da3e1031_T
        if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
        ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          l_V1 := ADT$BYTree_da3e1031_T_leftA(b_V0_CN0)
          r_V1 := ADT$BYTree_da3e1031_T_rightA(b_V0_CN0)
          
          // PreservesLeafCount_da3e1031_F(l_V1)
          assert (decreasing(rank$ADT$BYTree_da3e1031_T(l_V1), old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) ||
            rank$ADT$BYTree_da3e1031_T(l_V1) ==
            old(rank$ADT$BYTree_da3e1031_T(b_V0)) &&
            false
          PreservesLeafCount_da3e1031_F(l_V1)
          
          // PreservesLeafCount_da3e1031_F(r_V1)
          assert (decreasing(rank$ADT$BYTree_da3e1031_T(r_V1), old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_da3e1031_T(b_V0))): Bool) ||
            rank$ADT$BYTree_da3e1031_T(r_V1) ==
            old(rank$ADT$BYTree_da3e1031_T(b_V0)) &&
            false
          PreservesLeafCount_da3e1031_F(r_V1)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

method ReduceLowerBound_da3e1031_F(m_V0: Int, x_V0: Int)
  requires 0 <= m_V0
  ensures x_V0 - 2 * m_V0 <= Reduce_da3e1031_F(m_V0, x_V0)
{
  
  // decl m_V0_CN0: int°°, x_V0_CN1: int°°
  {
    var m_V0_CN0: Int
    var x_V0_CN1: Int
    
    
    
    // init m_V0_CN0
    inhale m_V0_CN0 == 0
    
    // init x_V0_CN1
    inhale x_V0_CN1 == 0
    
    // m_V0_CN0 = m_V0
    m_V0_CN0 := m_V0
    
    // x_V0_CN1 = x_V0
    x_V0_CN1 := x_V0
    
    // decl 
    
    // if(m_V0_CN0 > 0) {...} else {...}
    if (m_V0_CN0 > 0) {
      
      // decl 
      
      // assert Reduce_da3e1031_F(m_V0_CN0, x_V0_CN1) == Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0
      assert Reduce_da3e1031_F(m_V0_CN0, x_V0_CN1) ==
        Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0
      
      // ReduceLowerBound_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1)
      ReduceLowerBound_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1)
      
      // assert Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0 >= x_V0_CN1 + 1 - 2 * m_V0_CN0 / 2 - m_V0_CN0
      assert Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0 >=
        x_V0_CN1 + 1 - 2 * (m_V0_CN0 / 2) - m_V0_CN0
      
      // assert x_V0_CN1 + 1 - 2 * m_V0_CN0 / 2 - m_V0_CN0 >= x_V0_CN1 + 1 - m_V0_CN0 - m_V0_CN0
      assert x_V0_CN1 + 1 - 2 * (m_V0_CN0 / 2) - m_V0_CN0 >=
        x_V0_CN1 + 1 - m_V0_CN0 - m_V0_CN0
      
      // assert x_V0_CN1 + 1 - m_V0_CN0 - m_V0_CN0 > x_V0_CN1 - 2 * m_V0_CN0
      assert x_V0_CN1 + 1 - m_V0_CN0 - m_V0_CN0 > x_V0_CN1 - 2 * m_V0_CN0
    }
    label returnLabel
  }
}

method ReduceUpperBound_da3e1031_F(m_V0: Int, x_V0: Int)
  requires 0 <= m_V0
  ensures Reduce_da3e1031_F(m_V0, x_V0) <= x_V0
{
  
  // decl m_V0_CN0: int°°, x_V0_CN1: int°°
  {
    var m_V0_CN0: Int
    var x_V0_CN1: Int
    
    
    
    // init m_V0_CN0
    inhale m_V0_CN0 == 0
    
    // init x_V0_CN1
    inhale x_V0_CN1 == 0
    
    // m_V0_CN0 = m_V0
    m_V0_CN0 := m_V0
    
    // x_V0_CN1 = x_V0
    x_V0_CN1 := x_V0
    
    // decl 
    
    // if(m_V0_CN0 == 0) {...} else {...}
    if (m_V0_CN0 == 0) {
      
      // decl 
      
    } else {
      
      // decl 
      
      // assert Reduce_da3e1031_F(m_V0_CN0, x_V0_CN1) == Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0
      assert Reduce_da3e1031_F(m_V0_CN0, x_V0_CN1) ==
        Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0
      
      // ReduceUpperBound_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1)
      ReduceUpperBound_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1)
      
      // assert Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0 <= x_V0_CN1 + 1 - m_V0_CN0
      assert Reduce_da3e1031_F(m_V0_CN0 / 2, x_V0_CN1 + 1) - m_V0_CN0 <=
        x_V0_CN1 + 1 - m_V0_CN0
      
      // assert x_V0_CN1 + 1 - m_V0_CN0 <= x_V0_CN1
      assert x_V0_CN1 + 1 - m_V0_CN0 <= x_V0_CN1
    }
    label returnLabel
  }
}

// decreases m_V0
method Reduce_da3e1031_F_termination_proof(m_V0: Int, x_V0: Int)
  requires 0 <= m_V0
{
  if (m_V0 == 0) {
  } else {
    assert (decreasing(m_V0 / 2, old(m_V0)): Bool) &&
      (bounded(old(m_V0)): Bool)}
}

method ReverseColorsInvolution_da3e1031_F(b_V0: ADT$BYTree_da3e1031_T)
  ensures ReverseColors_da3e1031_MBYTree(ReverseColors_da3e1031_MBYTree(b_V0)) ==
    b_V0
{
  
  // decl b_V0_CN0: BYTree_da3e1031_T°°
  {
    var b_V0_CN0: ADT$BYTree_da3e1031_T
    
    
    
    // init b_V0_CN0
    inhale b_V0_CN0 == ADT$BYTree_da3e1031_T_dflt()
    
    // b_V0_CN0 = b_V0
    b_V0_CN0 := b_V0
    
    // decl 
    
    // !match b_V0_CN0 {
//   case BlueLeaf_da3e1031_F {}: 
//   case YellowLeaf_da3e1031_F {}: 
//   case Node_da3e1031_F {l_V1,r_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
      ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      {
        var l_V1: ADT$BYTree_da3e1031_T
        var r_V1: ADT$BYTree_da3e1031_T
        if (ADT$BYTree_da3e1031_T_tag(b_V0_CN0) ==
        ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          l_V1 := ADT$BYTree_da3e1031_T_leftA(b_V0_CN0)
          r_V1 := ADT$BYTree_da3e1031_T_rightA(b_V0_CN0)
          
          // ReverseColorsInvolution_da3e1031_F(l_V1)
          ReverseColorsInvolution_da3e1031_F(l_V1)
          
          // ReverseColorsInvolution_da3e1031_F(r_V1)
          ReverseColorsInvolution_da3e1031_F(r_V1)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$BYTree_da3e1031_T(t_V0)
method ReverseColors_da3e1031_MBYTree_termination_proof(t_V0: ADT$BYTree_da3e1031_T)
{
  if (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_BlueLeaf_da3e1031_F_tag()) {
  } elseif (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_YellowLeaf_da3e1031_F_tag()) {
  } elseif (ADT$BYTree_da3e1031_T_tag(t_V0) ==
  ADT$BYTree_da3e1031_T_Node_da3e1031_F_tag()) {
    {
      var l_V1: ADT$BYTree_da3e1031_T
      inhale l_V1 == ADT$BYTree_da3e1031_T_leftA(t_V0)
      {
        var r_V1: ADT$BYTree_da3e1031_T
        inhale r_V1 == ADT$BYTree_da3e1031_T_rightA(t_V0)
        {
          var lr_V2: ADT$BYTree_da3e1031_T
          assert (decreasing(rank$ADT$BYTree_da3e1031_T(l_V1), old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool)
          inhale lr_V2 == ReverseColors_da3e1031_MBYTree(l_V1)
          {
            var rr_V3: ADT$BYTree_da3e1031_T
            assert (decreasing(rank$ADT$BYTree_da3e1031_T(r_V1), old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool) &&
              (bounded(old(rank$ADT$BYTree_da3e1031_T(t_V0))): Bool)
            inhale rr_V3 == ReverseColors_da3e1031_MBYTree(r_V1)
          }
        }
      }
    }
  }
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
method ShortenCorrect_da3e1031_F(op_V0: ADT$Op_da3e1031_T, args_V0: ADT$List_da3e1031_T,
  env_V0: Map[Int,Int])
  ensures Eval_da3e1031_F(Shorten_da3e1031_F(op_V0, args_V0), env_V0) ==
    Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0, args_V0), env_V0)
{
  
  // decl op_V0_CN0: Op_da3e1031_T°°, args_V0_CN1: List_da3e1031_T°°, env_V0_CN2: dict[string°]int°°°
  {
    var op_V0_CN0: ADT$Op_da3e1031_T
    var args_V0_CN1: ADT$List_da3e1031_T
    var env_V0_CN2: Map[Int,Int]
    
    
    
    // init op_V0_CN0
    inhale op_V0_CN0 == ADT$Op_da3e1031_T_dflt()
    
    // init args_V0_CN1
    inhale args_V0_CN1 == ADT$List_da3e1031_T_dflt()
    
    // init env_V0_CN2
    inhale env_V0_CN2 == Map[Int,Int]()
    
    // op_V0_CN0 = op_V0
    op_V0_CN0 := op_V0
    
    // args_V0_CN1 = args_V0
    args_V0_CN1 := args_V0
    
    // env_V0_CN2 = env_V0
    env_V0_CN2 := env_V0
    
    // decl 
    
    // if(args_V0_CN1.Nil_da3e1031_F) {...} else {...}
    if (ADT$List_da3e1031_T_tag(args_V0_CN1) ==
    ADT$List_da3e1031_T_Nil_da3e1031_F_tag()) {
      
      // decl 
      
      // if(op_V0_CN0.Add_da3e1031_F) {...} else {...}
      if (ADT$Op_da3e1031_T_tag(op_V0_CN0) ==
      ADT$Op_da3e1031_T_Add_da3e1031_F_tag()) {
        
        // decl 
        
        // assert Eval_da3e1031_F(Shorten_da3e1031_F(op_V0_CN0, args_V0_CN1), env_V0_CN2) == Eval_da3e1031_F(Const_da3e1031_F{0}, env_V0_CN2)
        assert Eval_da3e1031_F(Shorten_da3e1031_F(op_V0_CN0, args_V0_CN1), env_V0_CN2) ==
          Eval_da3e1031_F(ADT$Expr_da3e1031_T_Const_da3e1031_F(0), env_V0_CN2)
        
        // assert Eval_da3e1031_F(ENode_da3e1031_F{Add_da3e1031_F{}, args_V0_CN1}, env_V0_CN2) == EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2)
        assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Op_da3e1031_T_Add_da3e1031_F(),
          args_V0_CN1), env_V0_CN2) ==
          EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2)
        
        // assert EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2) == Unit_da3e1031_F(Add_da3e1031_F{})
        assert EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2) ==
          Unit_da3e1031_F(ADT$Op_da3e1031_T_Add_da3e1031_F())
        
        // assert Eval_da3e1031_F(Const_da3e1031_F{0}, env_V0_CN2) == Eval_da3e1031_F(ENode_da3e1031_F{Add_da3e1031_F{}, args_V0_CN1}, env_V0_CN2)
        assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_Const_da3e1031_F(0), env_V0_CN2) ==
          Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Op_da3e1031_T_Add_da3e1031_F(),
          args_V0_CN1), env_V0_CN2)
      } else {
        
        // decl 
        
        // assert Eval_da3e1031_F(Shorten_da3e1031_F(op_V0_CN0, args_V0_CN1), env_V0_CN2) == Eval_da3e1031_F(Const_da3e1031_F{1}, env_V0_CN2)
        assert Eval_da3e1031_F(Shorten_da3e1031_F(op_V0_CN0, args_V0_CN1), env_V0_CN2) ==
          Eval_da3e1031_F(ADT$Expr_da3e1031_T_Const_da3e1031_F(1), env_V0_CN2)
        
        // assert Eval_da3e1031_F(ENode_da3e1031_F{Mul_da3e1031_F{}, args_V0_CN1}, env_V0_CN2) == EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2)
        assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Op_da3e1031_T_Mul_da3e1031_F(),
          args_V0_CN1), env_V0_CN2) ==
          EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2)
        
        // assert EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2) == Unit_da3e1031_F(Mul_da3e1031_F{})
        assert EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2) ==
          Unit_da3e1031_F(ADT$Op_da3e1031_T_Mul_da3e1031_F())
        
        // assert Eval_da3e1031_F(Const_da3e1031_F{1}, env_V0_CN2) == Eval_da3e1031_F(ENode_da3e1031_F{Mul_da3e1031_F{}, args_V0_CN1}, env_V0_CN2)
        assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_Const_da3e1031_F(1), env_V0_CN2) ==
          Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(ADT$Op_da3e1031_T_Mul_da3e1031_F(),
          args_V0_CN1), env_V0_CN2)
      }
    } else {
      
      // decl 
      
      // if(args_V0_CN1.fieldtailA: List_da3e1031_T°.Nil_da3e1031_F) {...} else {...}
      if (ADT$List_da3e1031_T_tag(ADT$List_da3e1031_T_tailA(args_V0_CN1)) ==
      ADT$List_da3e1031_T_Nil_da3e1031_F_tag()) {
        
        // decl v0_V1: int°°, v1_V1: int°°
        {
          var v0_V1: Int
          var v1_V1: Int
          
          // assert Eval_da3e1031_F(ENode_da3e1031_F{op_V0_CN0, args_V0_CN1}, env_V0_CN2) == EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2)
          assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0_CN0,
            args_V0_CN1), env_V0_CN2) ==
            EvalList_da3e1031_F(args_V0_CN1, op_V0_CN0, env_V0_CN2)
          
          // init v0_V1
          inhale v0_V1 == 0
          
          // v0_V1 = Eval_da3e1031_F(args_V0_CN1.fieldheadA: Expr_da3e1031_T°, env_V0_CN2)
          v0_V1 := Eval_da3e1031_F(ADT$List_da3e1031_T_headA(args_V0_CN1), env_V0_CN2)
          
          // init v1_V1
          inhale v1_V1 == 0
          
          // v1_V1 = EvalList_da3e1031_F(args_V0_CN1.fieldtailA: List_da3e1031_T°, op_V0_CN0, env_V0_CN2)
          v1_V1 := EvalList_da3e1031_F(ADT$List_da3e1031_T_tailA(args_V0_CN1),
            op_V0_CN0, env_V0_CN2)
          
          // if(op_V0_CN0.Add_da3e1031_F) {...} else {...}
          if (ADT$Op_da3e1031_T_tag(op_V0_CN0) ==
          ADT$Op_da3e1031_T_Add_da3e1031_F_tag()) {
            
            // decl 
            
            // assert v1_V1 == 0
            assert v1_V1 == 0
            
            // assert Eval_da3e1031_F(ENode_da3e1031_F{op_V0_CN0, args_V0_CN1}, env_V0_CN2) == v0_V1 + v1_V1
            assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0_CN0,
              args_V0_CN1), env_V0_CN2) ==
              v0_V1 + v1_V1
          } else {
            
            // decl 
            
            // assert v1_V1 == 1
            assert v1_V1 == 1
            
            // assert Eval_da3e1031_F(ENode_da3e1031_F{op_V0_CN0, args_V0_CN1}, env_V0_CN2) == v0_V1 * v1_V1
            assert Eval_da3e1031_F(ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0_CN0,
              args_V0_CN1), env_V0_CN2) ==
              v0_V1 * v1_V1
          }
        }
      } else {
        
        // decl 
        
        // assert Shorten_da3e1031_F(op_V0_CN0, args_V0_CN1) == ENode_da3e1031_F{op_V0_CN0, args_V0_CN1}
        assert Shorten_da3e1031_F(op_V0_CN0, args_V0_CN1) ==
          ADT$Expr_da3e1031_T_ENode_da3e1031_F(op_V0_CN0, args_V0_CN1)
      }
    }
    label returnLabel
  }
}

// decreases rank$ADT$List_da3e1031_T(args_V0)
method Shorten_da3e1031_F_termination_proof(op_V0: ADT$Op_da3e1031_T, args_V0: ADT$List_da3e1031_T)
{
  if (ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag()) {
  } elseif (ADT$List_da3e1031_T_tag(args_V0) ==
  ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
  ADT$List_da3e1031_T_tag(ADT$List_da3e1031_T_tailA(args_V0)) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag()) {
    {
      var e_V1: ADT$Expr_da3e1031_T
      inhale e_V1 == ADT$List_da3e1031_T_headA(args_V0)
    }
  }
}

// decreases rank$ADT$Tree_da3e1031_T(t_V0)
method Size_da3e1031_MTree_termination_proof(t_V0: ADT$Tree_da3e1031_T)
{
  if (ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TLeaf_da3e1031_F_tag()) {
  } elseif (ADT$Tree_da3e1031_T_tag(t_V0) ==
  ADT$Tree_da3e1031_T_TNode_da3e1031_F_tag()) {
    {
      var l_V1: ADT$Tree_da3e1031_T
      inhale l_V1 == ADT$Tree_da3e1031_T_leftA(t_V0)
      {
        var r_V1: ADT$Tree_da3e1031_T
        inhale r_V1 == ADT$Tree_da3e1031_T_rightA(t_V0)
        assert (decreasing(rank$ADT$Tree_da3e1031_T(l_V1), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool)
        assert (decreasing(rank$ADT$Tree_da3e1031_T(r_V1), old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_da3e1031_T(t_V0))): Bool)
      }
    }
  }
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
method SubstituteIdempotent_da3e1031_F(e_V0: ADT$Expr_da3e1031_T, n_V0: Int,
  c_V0: Int)
  ensures Substitute_da3e1031_F(Substitute_da3e1031_F(e_V0, n_V0, c_V0), n_V0,
    c_V0) ==
    Substitute_da3e1031_F(e_V0, n_V0, c_V0)
{
  
  // decl e_V0_CN0: Expr_da3e1031_T°°, n_V0_CN1: string°°, c_V0_CN2: int°°
  {
    var e_V0_CN0: ADT$Expr_da3e1031_T
    var n_V0_CN1: Int
    var c_V0_CN2: Int
    
    
    
    // init e_V0_CN0
    inhale e_V0_CN0 == ADT$Expr_da3e1031_T_dflt()
    
    // init n_V0_CN1
    inhale n_V0_CN1 == stringLit()
    
    // init c_V0_CN2
    inhale c_V0_CN2 == 0
    
    // e_V0_CN0 = e_V0
    e_V0_CN0 := e_V0
    
    // n_V0_CN1 = n_V0
    n_V0_CN1 := n_V0
    
    // c_V0_CN2 = c_V0
    c_V0_CN2 := c_V0
    
    // decl 
    
    // !match e_V0_CN0 {
//   case Const_da3e1031_F {_}: 
//   case Var_da3e1031_F {_}: 
//   case ENode_da3e1031_F {_,args_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Const_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
      ADT$Expr_da3e1031_T_Var_da3e1031_F_tag() &&
      true &&
      !fn$$0) {
        fn$$0 := true
        
      }
      {
        var args_V1: ADT$List_da3e1031_T
        if (ADT$Expr_da3e1031_T_tag(e_V0_CN0) ==
        ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          args_V1 := ADT$Expr_da3e1031_T_argsA(e_V0_CN0)
          
          // SubstituteListIdempotent_da3e1031_F(args_V1, n_V0_CN1, c_V0_CN2)
          assert (decreasing(rank$ADT$List_da3e1031_T(args_V1), old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) &&
            (bounded(old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) ||
            rank$ADT$List_da3e1031_T(args_V1) ==
            old(rank$ADT$Expr_da3e1031_T(e_V0)) &&
            false
          SubstituteListIdempotent_da3e1031_F(args_V1, n_V0_CN1, c_V0_CN2)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$List_da3e1031_T(es_V0)
method SubstituteListIdempotent_da3e1031_F(es_V0: ADT$List_da3e1031_T, n_V0: Int,
  c_V0: Int)
  ensures SubstituteList_da3e1031_F(SubstituteList_da3e1031_F(es_V0, n_V0, c_V0),
    n_V0, c_V0) ==
    SubstituteList_da3e1031_F(es_V0, n_V0, c_V0)
{
  
  // decl es_V0_CN0: List_da3e1031_T°°, n_V0_CN1: string°°, c_V0_CN2: int°°
  {
    var es_V0_CN0: ADT$List_da3e1031_T
    var n_V0_CN1: Int
    var c_V0_CN2: Int
    
    
    
    // init es_V0_CN0
    inhale es_V0_CN0 == ADT$List_da3e1031_T_dflt()
    
    // init n_V0_CN1
    inhale n_V0_CN1 == stringLit()
    
    // init c_V0_CN2
    inhale c_V0_CN2 == 0
    
    // es_V0_CN0 = es_V0
    es_V0_CN0 := es_V0
    
    // n_V0_CN1 = n_V0
    n_V0_CN1 := n_V0
    
    // c_V0_CN2 = c_V0
    c_V0_CN2 := c_V0
    
    // decl 
    
    // !match es_V0_CN0 {
//   case Nil_da3e1031_F {}: 
//   case Cons_da3e1031_F {h_V1,t_V1}: 
// }
    {
      var fn$$0: Bool
      fn$$0 := false
      if (ADT$List_da3e1031_T_tag(es_V0_CN0) ==
      ADT$List_da3e1031_T_Nil_da3e1031_F_tag() &&
      !fn$$0) {
        fn$$0 := true
      }
      {
        var h_V1: ADT$Expr_da3e1031_T
        var t_V1: ADT$List_da3e1031_T
        if (ADT$List_da3e1031_T_tag(es_V0_CN0) ==
        ADT$List_da3e1031_T_Cons_da3e1031_F_tag() &&
        true &&
        true &&
        !fn$$0) {
          fn$$0 := true
          h_V1 := ADT$List_da3e1031_T_headA(es_V0_CN0)
          t_V1 := ADT$List_da3e1031_T_tailA(es_V0_CN0)
          
          // SubstituteIdempotent_da3e1031_F(h_V1, n_V0_CN1, c_V0_CN2)
          assert (decreasing(rank$ADT$Expr_da3e1031_T(h_V1), old(rank$ADT$List_da3e1031_T(es_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(es_V0))): Bool) ||
            rank$ADT$Expr_da3e1031_T(h_V1) ==
            old(rank$ADT$List_da3e1031_T(es_V0)) &&
            false
          SubstituteIdempotent_da3e1031_F(h_V1, n_V0_CN1, c_V0_CN2)
          
          // SubstituteListIdempotent_da3e1031_F(t_V1, n_V0_CN1, c_V0_CN2)
          assert (decreasing(rank$ADT$List_da3e1031_T(t_V1), old(rank$ADT$List_da3e1031_T(es_V0))): Bool) &&
            (bounded(old(rank$ADT$List_da3e1031_T(es_V0))): Bool) ||
            rank$ADT$List_da3e1031_T(t_V1) ==
            old(rank$ADT$List_da3e1031_T(es_V0)) &&
            false
          SubstituteListIdempotent_da3e1031_F(t_V1, n_V0_CN1, c_V0_CN2)
        }
      }
      assert fn$$0
    }
    label returnLabel
  }
}

// decreases rank$ADT$List_da3e1031_T(es_V0)
method SubstituteList_da3e1031_F_termination_proof(es_V0: ADT$List_da3e1031_T,
  n_V0: Int, c_V0: Int)
{
  if (ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Nil_da3e1031_F_tag()) {
  } elseif (ADT$List_da3e1031_T_tag(es_V0) ==
  ADT$List_da3e1031_T_Cons_da3e1031_F_tag()) {
    {
      var e_V1: ADT$Expr_da3e1031_T
      inhale e_V1 == ADT$List_da3e1031_T_headA(es_V0)
      {
        var tail_V1: ADT$List_da3e1031_T
        inhale tail_V1 == ADT$List_da3e1031_T_tailA(es_V0)
        assert (decreasing(rank$ADT$Expr_da3e1031_T(e_V1), old(rank$ADT$List_da3e1031_T(es_V0))): Bool) &&
          (bounded(old(rank$ADT$List_da3e1031_T(es_V0))): Bool)
        assert (decreasing(rank$ADT$List_da3e1031_T(tail_V1), old(rank$ADT$List_da3e1031_T(es_V0))): Bool) &&
          (bounded(old(rank$ADT$List_da3e1031_T(es_V0))): Bool)
      }
    }
  }
}

// decreases rank$ADT$Expr_da3e1031_T(e_V0)
method Substitute_da3e1031_F_termination_proof(e_V0: ADT$Expr_da3e1031_T, n_V0: Int,
  c_V0: Int)
{
  if (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Const_da3e1031_F_tag()) {
  } elseif (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_Var_da3e1031_F_tag()) {
    {
      var s_V1: Int
      inhale s_V1 == ADT$Expr_da3e1031_T_nameA(e_V0)
    }
  } elseif (ADT$Expr_da3e1031_T_tag(e_V0) ==
  ADT$Expr_da3e1031_T_ENode_da3e1031_F_tag()) {
    {
      var op_V2: ADT$Op_da3e1031_T
      inhale op_V2 == ADT$Expr_da3e1031_T_opA(e_V0)
      {
        var args_V2: ADT$List_da3e1031_T
        inhale args_V2 == ADT$Expr_da3e1031_T_argsA(e_V0)
        assert (decreasing(rank$ADT$List_da3e1031_T(args_V2), old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool) &&
          (bounded(old(rank$ADT$Expr_da3e1031_T(e_V0))): Bool)
      }
    }
  }
}

method panic_a4af0e5e_F(v_V0: Tuple2[Ref, Types])
  requires false
