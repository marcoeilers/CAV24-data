domain ADT$BYTree_724ba10a_T  {
  
  function ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F(): ADT$BYTree_724ba10a_T 
  
  unique function ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag(): Int 
  
  function ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA: ADT$BYTree_724ba10a_T,
  rightA: ADT$BYTree_724ba10a_T): ADT$BYTree_724ba10a_T 
  
  unique function ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag(): Int 
  
  function ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F(): ADT$BYTree_724ba10a_T 
  
  unique function ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag(): Int 
  
  function ADT$BYTree_724ba10a_T_dflt(): ADT$BYTree_724ba10a_T 
  
  function ADT$BYTree_724ba10a_T_leftA(t: ADT$BYTree_724ba10a_T): ADT$BYTree_724ba10a_T 
  
  function ADT$BYTree_724ba10a_T_rightA(t: ADT$BYTree_724ba10a_T): ADT$BYTree_724ba10a_T 
  
  function ADT$BYTree_724ba10a_T_tag(t: ADT$BYTree_724ba10a_T): Int 
  
  function rank$ADT$BYTree_724ba10a_T(x: ADT$BYTree_724ba10a_T): Int 
  
  axiom {
    (forall leftA: ADT$BYTree_724ba10a_T, rightA: ADT$BYTree_724ba10a_T ::
      { ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA, rightA) }
      ADT$BYTree_724ba10a_T_tag(ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA,
      rightA)) ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
      ADT$BYTree_724ba10a_T_leftA(ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA,
      rightA)) ==
      leftA &&
      ADT$BYTree_724ba10a_T_rightA(ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA,
      rightA)) ==
      rightA)
  }
  
  axiom {
    (forall leftA: ADT$BYTree_724ba10a_T, rightA: ADT$BYTree_724ba10a_T ::
      { rank$ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA,
      rightA)) }
      rank$ADT$BYTree_724ba10a_T(leftA) <
      rank$ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA,
      rightA)))
  }
  
  axiom {
    (forall leftA: ADT$BYTree_724ba10a_T, rightA: ADT$BYTree_724ba10a_T ::
      { rank$ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA,
      rightA)) }
      rank$ADT$BYTree_724ba10a_T(rightA) <
      rank$ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_Node_724ba10a_F(leftA,
      rightA)))
  }
  
  axiom {
    (forall t: ADT$BYTree_724ba10a_T ::
      { ADT$BYTree_724ba10a_T_leftA(t) }
      { ADT$BYTree_724ba10a_T_rightA(t) }
      ADT$BYTree_724ba10a_T_tag(t) ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() ==>
      t ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F(ADT$BYTree_724ba10a_T_leftA(t),
      ADT$BYTree_724ba10a_T_rightA(t)))
  }
  
  axiom {
    (forall t: ADT$BYTree_724ba10a_T ::
      { ADT$BYTree_724ba10a_T_tag(t) }
      t == ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F() ||
      t == ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F() ||
      t ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F(ADT$BYTree_724ba10a_T_leftA(t),
      ADT$BYTree_724ba10a_T_rightA(t)))
  }
  
  axiom {
    (forall x: ADT$BYTree_724ba10a_T ::
      { rank$ADT$BYTree_724ba10a_T(x) }
      0 <= rank$ADT$BYTree_724ba10a_T(x))
  }
  
  axiom {
    ADT$BYTree_724ba10a_T_tag(ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F()) ==
    ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag()
  }
  
  axiom {
    ADT$BYTree_724ba10a_T_tag(ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F()) ==
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag()
  }
}

domain ADT$Color_724ba10a_T  {
  
  function ADT$Color_724ba10a_T_Blue_724ba10a_F(): ADT$Color_724ba10a_T 
  
  unique function ADT$Color_724ba10a_T_Blue_724ba10a_F_tag(): Int 
  
  function ADT$Color_724ba10a_T_Green_724ba10a_F(): ADT$Color_724ba10a_T 
  
  unique function ADT$Color_724ba10a_T_Green_724ba10a_F_tag(): Int 
  
  function ADT$Color_724ba10a_T_Red_724ba10a_F(): ADT$Color_724ba10a_T 
  
  unique function ADT$Color_724ba10a_T_Red_724ba10a_F_tag(): Int 
  
  function ADT$Color_724ba10a_T_Yellow_724ba10a_F(): ADT$Color_724ba10a_T 
  
  unique function ADT$Color_724ba10a_T_Yellow_724ba10a_F_tag(): Int 
  
  function ADT$Color_724ba10a_T_dflt(): ADT$Color_724ba10a_T 
  
  function ADT$Color_724ba10a_T_tag(t: ADT$Color_724ba10a_T): Int 
  
  function rank$ADT$Color_724ba10a_T(x: ADT$Color_724ba10a_T): Int 
  
  axiom {
    (forall t: ADT$Color_724ba10a_T ::
      { ADT$Color_724ba10a_T_tag(t) }
      t == ADT$Color_724ba10a_T_Blue_724ba10a_F() ||
      t == ADT$Color_724ba10a_T_Yellow_724ba10a_F() ||
      t == ADT$Color_724ba10a_T_Green_724ba10a_F() ||
      t == ADT$Color_724ba10a_T_Red_724ba10a_F())
  }
  
  axiom {
    (forall x: ADT$Color_724ba10a_T ::
      { rank$ADT$Color_724ba10a_T(x) }
      0 <= rank$ADT$Color_724ba10a_T(x))
  }
  
  axiom {
    ADT$Color_724ba10a_T_tag(ADT$Color_724ba10a_T_Blue_724ba10a_F()) ==
    ADT$Color_724ba10a_T_Blue_724ba10a_F_tag()
  }
  
  axiom {
    ADT$Color_724ba10a_T_tag(ADT$Color_724ba10a_T_Green_724ba10a_F()) ==
    ADT$Color_724ba10a_T_Green_724ba10a_F_tag()
  }
  
  axiom {
    ADT$Color_724ba10a_T_tag(ADT$Color_724ba10a_T_Red_724ba10a_F()) ==
    ADT$Color_724ba10a_T_Red_724ba10a_F_tag()
  }
  
  axiom {
    ADT$Color_724ba10a_T_tag(ADT$Color_724ba10a_T_Yellow_724ba10a_F()) ==
    ADT$Color_724ba10a_T_Yellow_724ba10a_F_tag()
  }
}

domain ADT$ColoredTree_724ba10a_T  {
  
  function ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(colorA: ADT$Color_724ba10a_T): ADT$ColoredTree_724ba10a_T 
  
  unique function ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F_tag(): Int 
  
  function ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A: ADT$ColoredTree_724ba10a_T,
  color2A: ADT$ColoredTree_724ba10a_T): ADT$ColoredTree_724ba10a_T 
  
  unique function ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F_tag(): Int 
  
  function ADT$ColoredTree_724ba10a_T_color1A(t: ADT$ColoredTree_724ba10a_T): ADT$ColoredTree_724ba10a_T 
  
  function ADT$ColoredTree_724ba10a_T_color2A(t: ADT$ColoredTree_724ba10a_T): ADT$ColoredTree_724ba10a_T 
  
  function ADT$ColoredTree_724ba10a_T_colorA(t: ADT$ColoredTree_724ba10a_T): ADT$Color_724ba10a_T 
  
  function ADT$ColoredTree_724ba10a_T_dflt(): ADT$ColoredTree_724ba10a_T 
  
  function ADT$ColoredTree_724ba10a_T_tag(t: ADT$ColoredTree_724ba10a_T): Int 
  
  function rank$ADT$ColoredTree_724ba10a_T(x: ADT$ColoredTree_724ba10a_T): Int 
  
  axiom {
    (forall color1A: ADT$ColoredTree_724ba10a_T, color2A: ADT$ColoredTree_724ba10a_T ::
      { ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A, color2A) }
      ADT$ColoredTree_724ba10a_T_tag(ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A,
      color2A)) ==
      ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F_tag() &&
      ADT$ColoredTree_724ba10a_T_color1A(ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A,
      color2A)) ==
      color1A &&
      ADT$ColoredTree_724ba10a_T_color2A(ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A,
      color2A)) ==
      color2A)
  }
  
  axiom {
    (forall color1A: ADT$ColoredTree_724ba10a_T, color2A: ADT$ColoredTree_724ba10a_T ::
      { rank$ADT$ColoredTree_724ba10a_T(ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A,
      color2A)) }
      rank$ADT$ColoredTree_724ba10a_T(color1A) <
      rank$ADT$ColoredTree_724ba10a_T(ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A,
      color2A)))
  }
  
  axiom {
    (forall color1A: ADT$ColoredTree_724ba10a_T, color2A: ADT$ColoredTree_724ba10a_T ::
      { rank$ADT$ColoredTree_724ba10a_T(ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A,
      color2A)) }
      rank$ADT$ColoredTree_724ba10a_T(color2A) <
      rank$ADT$ColoredTree_724ba10a_T(ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(color1A,
      color2A)))
  }
  
  axiom {
    (forall colorA: ADT$Color_724ba10a_T ::
      { ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(colorA) }
      ADT$ColoredTree_724ba10a_T_tag(ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(colorA)) ==
      ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F_tag() &&
      ADT$ColoredTree_724ba10a_T_colorA(ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(colorA)) ==
      colorA)
  }
  
  axiom {
    (forall colorA: ADT$Color_724ba10a_T ::
      { rank$ADT$ColoredTree_724ba10a_T(ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(colorA)) }
      rank$ADT$Color_724ba10a_T(colorA) <
      rank$ADT$ColoredTree_724ba10a_T(ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(colorA)))
  }
  
  axiom {
    (forall t: ADT$ColoredTree_724ba10a_T ::
      { ADT$ColoredTree_724ba10a_T_color1A(t) }
      { ADT$ColoredTree_724ba10a_T_color2A(t) }
      ADT$ColoredTree_724ba10a_T_tag(t) ==
      ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F_tag() ==>
      t ==
      ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(ADT$ColoredTree_724ba10a_T_color1A(t),
      ADT$ColoredTree_724ba10a_T_color2A(t)))
  }
  
  axiom {
    (forall t: ADT$ColoredTree_724ba10a_T ::
      { ADT$ColoredTree_724ba10a_T_colorA(t) }
      ADT$ColoredTree_724ba10a_T_tag(t) ==
      ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F_tag() ==>
      t ==
      ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(ADT$ColoredTree_724ba10a_T_colorA(t)))
  }
  
  axiom {
    (forall t: ADT$ColoredTree_724ba10a_T ::
      { ADT$ColoredTree_724ba10a_T_tag(t) }
      t ==
      ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F(ADT$ColoredTree_724ba10a_T_colorA(t)) ||
      t ==
      ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F(ADT$ColoredTree_724ba10a_T_color1A(t),
      ADT$ColoredTree_724ba10a_T_color2A(t)))
  }
  
  axiom {
    (forall x: ADT$ColoredTree_724ba10a_T ::
      { rank$ADT$ColoredTree_724ba10a_T(x) }
      0 <= rank$ADT$ColoredTree_724ba10a_T(x))
  }
}

domain ADT$Expr_724ba10a_T  {
  
  function ADT$Expr_724ba10a_T_Const_724ba10a_F(numA: Int): ADT$Expr_724ba10a_T 
  
  unique function ADT$Expr_724ba10a_T_Const_724ba10a_F_tag(): Int 
  
  function ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA: ADT$Op_724ba10a_T, argsA: ADT$List_724ba10a_T): ADT$Expr_724ba10a_T 
  
  unique function ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag(): Int 
  
  function ADT$Expr_724ba10a_T_Var_724ba10a_F(nameA: Int): ADT$Expr_724ba10a_T 
  
  unique function ADT$Expr_724ba10a_T_Var_724ba10a_F_tag(): Int 
  
  function ADT$Expr_724ba10a_T_argsA(t: ADT$Expr_724ba10a_T): ADT$List_724ba10a_T 
  
  function ADT$Expr_724ba10a_T_dflt(): ADT$Expr_724ba10a_T 
  
  function ADT$Expr_724ba10a_T_nameA(t: ADT$Expr_724ba10a_T): Int 
  
  function ADT$Expr_724ba10a_T_numA(t: ADT$Expr_724ba10a_T): Int 
  
  function ADT$Expr_724ba10a_T_opA(t: ADT$Expr_724ba10a_T): ADT$Op_724ba10a_T 
  
  function ADT$Expr_724ba10a_T_tag(t: ADT$Expr_724ba10a_T): Int 
  
  function rank$ADT$Expr_724ba10a_T(x: ADT$Expr_724ba10a_T): Int 
  
  axiom {
    (forall nameA: Int ::
      { ADT$Expr_724ba10a_T_Var_724ba10a_F(nameA) }
      ADT$Expr_724ba10a_T_tag(ADT$Expr_724ba10a_T_Var_724ba10a_F(nameA)) ==
      ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() &&
      ADT$Expr_724ba10a_T_nameA(ADT$Expr_724ba10a_T_Var_724ba10a_F(nameA)) ==
      nameA)
  }
  
  axiom {
    (forall numA: Int ::
      { ADT$Expr_724ba10a_T_Const_724ba10a_F(numA) }
      ADT$Expr_724ba10a_T_tag(ADT$Expr_724ba10a_T_Const_724ba10a_F(numA)) ==
      ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() &&
      ADT$Expr_724ba10a_T_numA(ADT$Expr_724ba10a_T_Const_724ba10a_F(numA)) ==
      numA)
  }
  
  axiom {
    (forall opA: ADT$Op_724ba10a_T, argsA: ADT$List_724ba10a_T ::
      { ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA) }
      ADT$Expr_724ba10a_T_tag(ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA)) ==
      ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() &&
      ADT$Expr_724ba10a_T_opA(ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA)) ==
      opA &&
      ADT$Expr_724ba10a_T_argsA(ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA)) ==
      argsA)
  }
  
  axiom {
    (forall opA: ADT$Op_724ba10a_T, argsA: ADT$List_724ba10a_T ::
      { rank$ADT$Expr_724ba10a_T(ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA)) }
      rank$ADT$List_724ba10a_T(argsA) <
      rank$ADT$Expr_724ba10a_T(ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA)))
  }
  
  axiom {
    (forall opA: ADT$Op_724ba10a_T, argsA: ADT$List_724ba10a_T ::
      { rank$ADT$Expr_724ba10a_T(ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA)) }
      rank$ADT$Op_724ba10a_T(opA) <
      rank$ADT$Expr_724ba10a_T(ADT$Expr_724ba10a_T_ENode_724ba10a_F(opA, argsA)))
  }
  
  axiom {
    (forall t: ADT$Expr_724ba10a_T ::
      { ADT$Expr_724ba10a_T_nameA(t) }
      ADT$Expr_724ba10a_T_tag(t) ==
      ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() ==>
      t == ADT$Expr_724ba10a_T_Var_724ba10a_F(ADT$Expr_724ba10a_T_nameA(t)))
  }
  
  axiom {
    (forall t: ADT$Expr_724ba10a_T ::
      { ADT$Expr_724ba10a_T_numA(t) }
      ADT$Expr_724ba10a_T_tag(t) ==
      ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() ==>
      t ==
      ADT$Expr_724ba10a_T_Const_724ba10a_F(ADT$Expr_724ba10a_T_numA(t)))
  }
  
  axiom {
    (forall t: ADT$Expr_724ba10a_T ::
      { ADT$Expr_724ba10a_T_opA(t) }
      { ADT$Expr_724ba10a_T_argsA(t) }
      ADT$Expr_724ba10a_T_tag(t) ==
      ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() ==>
      t ==
      ADT$Expr_724ba10a_T_ENode_724ba10a_F(ADT$Expr_724ba10a_T_opA(t), ADT$Expr_724ba10a_T_argsA(t)))
  }
  
  axiom {
    (forall t: ADT$Expr_724ba10a_T ::
      { ADT$Expr_724ba10a_T_tag(t) }
      t ==
      ADT$Expr_724ba10a_T_Const_724ba10a_F(ADT$Expr_724ba10a_T_numA(t)) ||
      t == ADT$Expr_724ba10a_T_Var_724ba10a_F(ADT$Expr_724ba10a_T_nameA(t)) ||
      t ==
      ADT$Expr_724ba10a_T_ENode_724ba10a_F(ADT$Expr_724ba10a_T_opA(t), ADT$Expr_724ba10a_T_argsA(t)))
  }
  
  axiom {
    (forall x: ADT$Expr_724ba10a_T ::
      { rank$ADT$Expr_724ba10a_T(x) }
      0 <= rank$ADT$Expr_724ba10a_T(x))
  }
}

domain ADT$List_724ba10a_T  {
  
  function ADT$List_724ba10a_T_Cons_724ba10a_F(headA: ADT$Expr_724ba10a_T, tailA: ADT$List_724ba10a_T): ADT$List_724ba10a_T 
  
  unique function ADT$List_724ba10a_T_Cons_724ba10a_F_tag(): Int 
  
  function ADT$List_724ba10a_T_Nil_724ba10a_F(): ADT$List_724ba10a_T 
  
  unique function ADT$List_724ba10a_T_Nil_724ba10a_F_tag(): Int 
  
  function ADT$List_724ba10a_T_dflt(): ADT$List_724ba10a_T 
  
  function ADT$List_724ba10a_T_headA(t: ADT$List_724ba10a_T): ADT$Expr_724ba10a_T 
  
  function ADT$List_724ba10a_T_tag(t: ADT$List_724ba10a_T): Int 
  
  function ADT$List_724ba10a_T_tailA(t: ADT$List_724ba10a_T): ADT$List_724ba10a_T 
  
  function rank$ADT$List_724ba10a_T(x: ADT$List_724ba10a_T): Int 
  
  axiom {
    (forall headA: ADT$Expr_724ba10a_T, tailA: ADT$List_724ba10a_T ::
      { ADT$List_724ba10a_T_Cons_724ba10a_F(headA, tailA) }
      ADT$List_724ba10a_T_tag(ADT$List_724ba10a_T_Cons_724ba10a_F(headA, tailA)) ==
      ADT$List_724ba10a_T_Cons_724ba10a_F_tag() &&
      ADT$List_724ba10a_T_headA(ADT$List_724ba10a_T_Cons_724ba10a_F(headA, tailA)) ==
      headA &&
      ADT$List_724ba10a_T_tailA(ADT$List_724ba10a_T_Cons_724ba10a_F(headA, tailA)) ==
      tailA)
  }
  
  axiom {
    (forall headA: ADT$Expr_724ba10a_T, tailA: ADT$List_724ba10a_T ::
      { rank$ADT$List_724ba10a_T(ADT$List_724ba10a_T_Cons_724ba10a_F(headA,
      tailA)) }
      rank$ADT$Expr_724ba10a_T(headA) <
      rank$ADT$List_724ba10a_T(ADT$List_724ba10a_T_Cons_724ba10a_F(headA, tailA)))
  }
  
  axiom {
    (forall headA: ADT$Expr_724ba10a_T, tailA: ADT$List_724ba10a_T ::
      { rank$ADT$List_724ba10a_T(ADT$List_724ba10a_T_Cons_724ba10a_F(headA,
      tailA)) }
      rank$ADT$List_724ba10a_T(tailA) <
      rank$ADT$List_724ba10a_T(ADT$List_724ba10a_T_Cons_724ba10a_F(headA, tailA)))
  }
  
  axiom {
    (forall t: ADT$List_724ba10a_T ::
      { ADT$List_724ba10a_T_headA(t) }
      { ADT$List_724ba10a_T_tailA(t) }
      ADT$List_724ba10a_T_tag(t) ==
      ADT$List_724ba10a_T_Cons_724ba10a_F_tag() ==>
      t ==
      ADT$List_724ba10a_T_Cons_724ba10a_F(ADT$List_724ba10a_T_headA(t), ADT$List_724ba10a_T_tailA(t)))
  }
  
  axiom {
    (forall t: ADT$List_724ba10a_T ::
      { ADT$List_724ba10a_T_tag(t) }
      t == ADT$List_724ba10a_T_Nil_724ba10a_F() ||
      t ==
      ADT$List_724ba10a_T_Cons_724ba10a_F(ADT$List_724ba10a_T_headA(t), ADT$List_724ba10a_T_tailA(t)))
  }
  
  axiom {
    (forall x: ADT$List_724ba10a_T ::
      { rank$ADT$List_724ba10a_T(x) }
      0 <= rank$ADT$List_724ba10a_T(x))
  }
  
  axiom {
    ADT$List_724ba10a_T_tag(ADT$List_724ba10a_T_Nil_724ba10a_F()) ==
    ADT$List_724ba10a_T_Nil_724ba10a_F_tag()
  }
}

domain ADT$Op_724ba10a_T  {
  
  function ADT$Op_724ba10a_T_Add_724ba10a_F(): ADT$Op_724ba10a_T 
  
  unique function ADT$Op_724ba10a_T_Add_724ba10a_F_tag(): Int 
  
  function ADT$Op_724ba10a_T_Mul_724ba10a_F(): ADT$Op_724ba10a_T 
  
  unique function ADT$Op_724ba10a_T_Mul_724ba10a_F_tag(): Int 
  
  function ADT$Op_724ba10a_T_dflt(): ADT$Op_724ba10a_T 
  
  function ADT$Op_724ba10a_T_tag(t: ADT$Op_724ba10a_T): Int 
  
  function rank$ADT$Op_724ba10a_T(x: ADT$Op_724ba10a_T): Int 
  
  axiom {
    (forall t: ADT$Op_724ba10a_T ::
      { ADT$Op_724ba10a_T_tag(t) }
      t == ADT$Op_724ba10a_T_Add_724ba10a_F() ||
      t == ADT$Op_724ba10a_T_Mul_724ba10a_F())
  }
  
  axiom {
    (forall x: ADT$Op_724ba10a_T ::
      { rank$ADT$Op_724ba10a_T(x) }
      0 <= rank$ADT$Op_724ba10a_T(x))
  }
  
  axiom {
    ADT$Op_724ba10a_T_tag(ADT$Op_724ba10a_T_Add_724ba10a_F()) ==
    ADT$Op_724ba10a_T_Add_724ba10a_F_tag()
  }
  
  axiom {
    ADT$Op_724ba10a_T_tag(ADT$Op_724ba10a_T_Mul_724ba10a_F()) ==
    ADT$Op_724ba10a_T_Mul_724ba10a_F_tag()
  }
}

domain ADT$Tree_724ba10a_T  {
  
  function ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(dataA: ADT$Color_724ba10a_T): ADT$Tree_724ba10a_T 
  
  unique function ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag(): Int 
  
  function ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA: ADT$Tree_724ba10a_T,
  rightA: ADT$Tree_724ba10a_T): ADT$Tree_724ba10a_T 
  
  unique function ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag(): Int 
  
  function ADT$Tree_724ba10a_T_dataA(t: ADT$Tree_724ba10a_T): ADT$Color_724ba10a_T 
  
  function ADT$Tree_724ba10a_T_dflt(): ADT$Tree_724ba10a_T 
  
  function ADT$Tree_724ba10a_T_leftA(t: ADT$Tree_724ba10a_T): ADT$Tree_724ba10a_T 
  
  function ADT$Tree_724ba10a_T_rightA(t: ADT$Tree_724ba10a_T): ADT$Tree_724ba10a_T 
  
  function ADT$Tree_724ba10a_T_tag(t: ADT$Tree_724ba10a_T): Int 
  
  function rank$ADT$Tree_724ba10a_T(x: ADT$Tree_724ba10a_T): Int 
  
  axiom {
    (forall dataA: ADT$Color_724ba10a_T ::
      { ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(dataA) }
      ADT$Tree_724ba10a_T_tag(ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(dataA)) ==
      ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() &&
      ADT$Tree_724ba10a_T_dataA(ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(dataA)) ==
      dataA)
  }
  
  axiom {
    (forall dataA: ADT$Color_724ba10a_T ::
      { rank$ADT$Tree_724ba10a_T(ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(dataA)) }
      rank$ADT$Color_724ba10a_T(dataA) <
      rank$ADT$Tree_724ba10a_T(ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(dataA)))
  }
  
  axiom {
    (forall leftA: ADT$Tree_724ba10a_T, rightA: ADT$Tree_724ba10a_T ::
      { ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA, rightA) }
      ADT$Tree_724ba10a_T_tag(ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA, rightA)) ==
      ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() &&
      ADT$Tree_724ba10a_T_leftA(ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA,
      rightA)) ==
      leftA &&
      ADT$Tree_724ba10a_T_rightA(ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA,
      rightA)) ==
      rightA)
  }
  
  axiom {
    (forall leftA: ADT$Tree_724ba10a_T, rightA: ADT$Tree_724ba10a_T ::
      { rank$ADT$Tree_724ba10a_T(ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA,
      rightA)) }
      rank$ADT$Tree_724ba10a_T(leftA) <
      rank$ADT$Tree_724ba10a_T(ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA, rightA)))
  }
  
  axiom {
    (forall leftA: ADT$Tree_724ba10a_T, rightA: ADT$Tree_724ba10a_T ::
      { rank$ADT$Tree_724ba10a_T(ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA,
      rightA)) }
      rank$ADT$Tree_724ba10a_T(rightA) <
      rank$ADT$Tree_724ba10a_T(ADT$Tree_724ba10a_T_TNode_724ba10a_F(leftA, rightA)))
  }
  
  axiom {
    (forall t: ADT$Tree_724ba10a_T ::
      { ADT$Tree_724ba10a_T_dataA(t) }
      ADT$Tree_724ba10a_T_tag(t) ==
      ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() ==>
      t ==
      ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(ADT$Tree_724ba10a_T_dataA(t)))
  }
  
  axiom {
    (forall t: ADT$Tree_724ba10a_T ::
      { ADT$Tree_724ba10a_T_leftA(t) }
      { ADT$Tree_724ba10a_T_rightA(t) }
      ADT$Tree_724ba10a_T_tag(t) ==
      ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() ==>
      t ==
      ADT$Tree_724ba10a_T_TNode_724ba10a_F(ADT$Tree_724ba10a_T_leftA(t), ADT$Tree_724ba10a_T_rightA(t)))
  }
  
  axiom {
    (forall t: ADT$Tree_724ba10a_T ::
      { ADT$Tree_724ba10a_T_tag(t) }
      t ==
      ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(ADT$Tree_724ba10a_T_dataA(t)) ||
      t ==
      ADT$Tree_724ba10a_T_TNode_724ba10a_F(ADT$Tree_724ba10a_T_leftA(t), ADT$Tree_724ba10a_T_rightA(t)))
  }
  
  axiom {
    (forall x: ADT$Tree_724ba10a_T ::
      { rank$ADT$Tree_724ba10a_T(x) }
      0 <= rank$ADT$Tree_724ba10a_T(x))
  }
}

domain IntWellFoundedOrder  {
  
  axiom integer_ax_bound {
    (forall int1: Int ::
      { (bounded(int1): Bool) }
      int1 >= 0 ==> (bounded(int1): Bool))
  }
  
  axiom integer_ax_dec {
    (forall int1: Int, int2: Int ::
      { (decreasing(int1, int2): Bool) }
      int1 < int2 ==> (decreasing(int1, int2): Bool))
  }
}

domain PredicateInstance  {
  
  
}

domain PredicateInstancesNestedRelation  {
  
  function nestedPredicates(l1: PredicateInstance, l2: PredicateInstance): Bool 
  
  axiom nestedReflex {
    (forall l1: PredicateInstance ::!nestedPredicates(l1, l1))
  }
  
  axiom nestedTrans {
    (forall l1: PredicateInstance, l2: PredicateInstance, l3: PredicateInstance ::
      { nestedPredicates(l1, l2), nestedPredicates(l2, l3) }
      nestedPredicates(l1, l2) && nestedPredicates(l2, l3) ==>
      nestedPredicates(l1, l3))
  }
}

domain PredicateInstancesWellFoundedOrder  {
  
  axiom predicate_instances_ax_bound {
    (forall l1: PredicateInstance ::
      { (bounded(l1): Bool) }
      (bounded(l1): Bool))
  }
  
  axiom predicate_instances_ax_dec {
    (forall l1: PredicateInstance, l2: PredicateInstance ::
      { nestedPredicates(l1, l2) }
      (decreasing(l1, l2): Bool) == nestedPredicates(l1, l2))
  }
}

domain String  {
  
  function strConcat(l: Int, r: Int): Int 
  
  function strLen(id: Int): Int 
  
  unique function stringLit(): Int 
  
  axiom {
    (forall l: Int, r: Int ::
      { strLen(strConcat(l, r)) }
      strLen(strConcat(l, r)) == strLen(l) + strLen(r))
  }
  
  axiom {
    (forall str: Int :: { strLen(str) } 0 <= strLen(str))
  }
  
  axiom {
    strLen(stringLit()) == 0
  }
}

domain Tuple2[T0, T1]  {
  
  function get0of2(p: Tuple2[T0, T1]): T0 
  
  function get1of2(p: Tuple2[T0, T1]): T1 
  
  function tuple2(t0: T0, t1: T1): Tuple2[T0, T1] 
  
  axiom getter_over_tuple2 {
    (forall t0: T0, t1: T1 ::
      { (tuple2(t0, t1): Tuple2[T0, T1]) }
      (get0of2((tuple2(t0, t1): Tuple2[T0, T1])): T0) == t0 &&
      (get1of2((tuple2(t0, t1): Tuple2[T0, T1])): T1) == t1)
  }
  
  axiom tuple2_over_getter {
    (forall p: Tuple2[T0, T1] ::
      { (get0of2(p): T0) }
      { (get1of2(p): T1) }
      (tuple2((get0of2(p): T0), (get1of2(p): T1)): Tuple2[T0, T1]) == p)
  }
}

domain Types  {
  
  function behavioral_subtype_Types(l: Types, r: Types): Bool 
  
  function comparableType_Types(t: Types): Bool 
  
  function empty_interface_Types(): Types 
  
  unique function empty_interface_Types_tag(): Int 
  
  function nil_Types(): Types 
  
  unique function nil_Types_tag(): Int 
  
  function tag_Types(t: Types): Int 
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, a) }
      behavioral_subtype_Types(a, a))
  }
  
  axiom {
    (forall a: Types ::
      { behavioral_subtype_Types(a, empty_interface_Types()) }
      behavioral_subtype_Types(a, empty_interface_Types()))
  }
  
  axiom {
    (forall a: Types, b: Types, c: Types ::
      { behavioral_subtype_Types(a, b), behavioral_subtype_Types(b, c) }
      behavioral_subtype_Types(a, b) && behavioral_subtype_Types(b, c) ==>
      behavioral_subtype_Types(a, c))
  }
  
  axiom {
    comparableType_Types(empty_interface_Types()) == false
  }
  
  axiom {
    comparableType_Types(nil_Types()) == true
  }
  
  axiom {
    tag_Types(empty_interface_Types()) == empty_interface_Types_tag()
  }
  
  axiom {
    tag_Types(nil_Types()) == nil_Types_tag()
  }
}

domain WellFoundedOrder[T]  {
  
  function bounded(arg1: T): Bool 
  
  function decreasing(arg1: T, arg2: T): Bool 
}

// decreases rank$ADT$Tree_724ba10a_T(t_V0)
function AllBlue_724ba10a_MTree(t_V0: ADT$Tree_724ba10a_T): Bool
{
  assertArg2_Bool(ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() &&
  true ||
  ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() &&
  true &&
  true, (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() &&
  true ?
    (let c_V1 ==
      (ADT$Tree_724ba10a_T_dataA(t_V0)) in
      c_V1 == ADT$Color_724ba10a_T_Blue_724ba10a_F()) :
    (ADT$Tree_724ba10a_T_tag(t_V0) ==
    ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() &&
    true &&
    true ?
      (let left_V2 ==
        (ADT$Tree_724ba10a_T_leftA(t_V0)) in
        (let right_V2 ==
          (ADT$Tree_724ba10a_T_rightA(t_V0)) in
          AllBlue_724ba10a_MTree(left_V2) &&
          AllBlue_724ba10a_MTree(right_V2))) :
      false)))
}

function BlueCount_v1_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): Int
  ensures 0 <= result
{
  assertArg2_Int(ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true, (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ?
    1 :
    (ADT$BYTree_724ba10a_T_tag(t_V0) ==
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ?
      0 :
      (ADT$BYTree_724ba10a_T_tag(t_V0) ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
      true &&
      true ?
        (let left_V1 ==
          (ADT$BYTree_724ba10a_T_leftA(t_V0)) in
          (let right_V1 ==
            (ADT$BYTree_724ba10a_T_rightA(t_V0)) in
            BlueCount_v1_724ba10a_MBYTree(left_V1) +
            BlueCount_v1_724ba10a_MBYTree(right_V1))) :
        0))))
}

function BlueCount_v2_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): Int
  ensures 0 <= result
{
  (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ?
    1 :
    (ADT$BYTree_724ba10a_T_tag(t_V0) ==
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ?
      0 :
      BlueCount_v2_724ba10a_MBYTree(ADT$BYTree_724ba10a_T_leftA(t_V0)) +
      BlueCount_v2_724ba10a_MBYTree(ADT$BYTree_724ba10a_T_rightA(t_V0))))
}

// decreases rank$ADT$List_724ba10a_T(args_V0)
function EvalList_724ba10a_F(args_V0: ADT$List_724ba10a_T, op_V0: ADT$Op_724ba10a_T,
  env_V0: Map[Int,Int]): Int
{
  assertArg2_Int(ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag() ||
  ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Cons_724ba10a_F_tag() &&
  true &&
  true, (ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag() ?
    assertArg2_Int(ADT$Op_724ba10a_T_tag(op_V0) ==
    ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ||
    ADT$Op_724ba10a_T_tag(op_V0) == ADT$Op_724ba10a_T_Mul_724ba10a_F_tag(),
    (ADT$Op_724ba10a_T_tag(op_V0) == ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ?
      0 :
      (ADT$Op_724ba10a_T_tag(op_V0) ==
      ADT$Op_724ba10a_T_Mul_724ba10a_F_tag() ?
        1 :
        0))) :
    (ADT$List_724ba10a_T_tag(args_V0) ==
    ADT$List_724ba10a_T_Cons_724ba10a_F_tag() &&
    true &&
    true ?
      (let e_V1 ==
        (ADT$List_724ba10a_T_headA(args_V0)) in
        (let tail_V1 ==
          (ADT$List_724ba10a_T_tailA(args_V0)) in
          (let v0_V2 ==
            (Eval_724ba10a_F(e_V1, env_V0)) in
            (let v1_V3 ==
              (EvalList_724ba10a_F(tail_V1, op_V0, env_V0)) in
              assertArg2_Int(ADT$Op_724ba10a_T_tag(op_V0) ==
              ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ||
              ADT$Op_724ba10a_T_tag(op_V0) ==
              ADT$Op_724ba10a_T_Mul_724ba10a_F_tag(), (ADT$Op_724ba10a_T_tag(op_V0) ==
              ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ?
                v0_V2 + v1_V3 :
                (ADT$Op_724ba10a_T_tag(op_V0) ==
                ADT$Op_724ba10a_T_Mul_724ba10a_F_tag() ?
                  v0_V2 * v1_V3 :
                  0))))))) :
      0)))
}

// decreases rank$ADT$List_724ba10a_T(args_V0)
function EvalList_v2_724ba10a_F(args_V0: ADT$List_724ba10a_T, op_V0: ADT$Op_724ba10a_T,
  env_V0: Map[Int,Int]): Int
  requires GoodEnvList_724ba10a_F(args_V0, env_V0)
{
  assertArg2_Int(ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag() ||
  ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Cons_724ba10a_F_tag() &&
  true &&
  true, (ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag() ?
    assertArg2_Int(ADT$Op_724ba10a_T_tag(op_V0) ==
    ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ||
    ADT$Op_724ba10a_T_tag(op_V0) == ADT$Op_724ba10a_T_Mul_724ba10a_F_tag(),
    (ADT$Op_724ba10a_T_tag(op_V0) == ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ?
      0 :
      (ADT$Op_724ba10a_T_tag(op_V0) ==
      ADT$Op_724ba10a_T_Mul_724ba10a_F_tag() ?
        1 :
        0))) :
    (ADT$List_724ba10a_T_tag(args_V0) ==
    ADT$List_724ba10a_T_Cons_724ba10a_F_tag() &&
    true &&
    true ?
      (let e_V1 ==
        (ADT$List_724ba10a_T_headA(args_V0)) in
        (let tail_V1 ==
          (ADT$List_724ba10a_T_tailA(args_V0)) in
          (let v0_V2 ==
            (Eval_v2_724ba10a_F(e_V1, env_V0)) in
            (let v1_V3 ==
              (EvalList_v2_724ba10a_F(tail_V1, op_V0, env_V0)) in
              assertArg2_Int(ADT$Op_724ba10a_T_tag(op_V0) ==
              ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ||
              ADT$Op_724ba10a_T_tag(op_V0) ==
              ADT$Op_724ba10a_T_Mul_724ba10a_F_tag(), (ADT$Op_724ba10a_T_tag(op_V0) ==
              ADT$Op_724ba10a_T_Add_724ba10a_F_tag() ?
                v0_V2 + v1_V3 :
                (ADT$Op_724ba10a_T_tag(op_V0) ==
                ADT$Op_724ba10a_T_Mul_724ba10a_F_tag() ?
                  v0_V2 * v1_V3 :
                  0))))))) :
      0)))
}

// decreases rank$ADT$Expr_724ba10a_T(e_V0)
function Eval_724ba10a_F(e_V0: ADT$Expr_724ba10a_T, env_V0: Map[Int,Int]): Int
{
  assertArg2_Int(ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() &&
  true ||
  ADT$Expr_724ba10a_T_tag(e_V0) == ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() &&
  true ||
  ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() &&
  true &&
  true, (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() &&
  true ?
    (let c_V1 ==
      (ADT$Expr_724ba10a_T_numA(e_V0)) in
      c_V1) :
    (ADT$Expr_724ba10a_T_tag(e_V0) ==
    ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() &&
    true ?
      (let s_V1 ==
        (ADT$Expr_724ba10a_T_nameA(e_V0)) in
        ((s_V1 in domain(env_V0)) ? env_V0[s_V1] : 0)) :
      (ADT$Expr_724ba10a_T_tag(e_V0) ==
      ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() &&
      true &&
      true ?
        (let op_V2 ==
          (ADT$Expr_724ba10a_T_opA(e_V0)) in
          (let args_V2 ==
            (ADT$Expr_724ba10a_T_argsA(e_V0)) in
            EvalList_724ba10a_F(args_V2, op_V2, env_V0))) :
        0))))
}

// decreases rank$ADT$Expr_724ba10a_T(e_V0)
function Eval_v2_724ba10a_F(e_V0: ADT$Expr_724ba10a_T, env_V0: Map[Int,Int]): Int
  requires GoodEnv_724ba10a_F(e_V0, env_V0)
{
  assertArg2_Int(ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() &&
  true ||
  ADT$Expr_724ba10a_T_tag(e_V0) == ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() &&
  true ||
  ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() &&
  true &&
  true, (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() &&
  true ?
    (let c_V1 ==
      (ADT$Expr_724ba10a_T_numA(e_V0)) in
      c_V1) :
    (ADT$Expr_724ba10a_T_tag(e_V0) ==
    ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() &&
    true ?
      (let s_V2 ==
        (ADT$Expr_724ba10a_T_nameA(e_V0)) in
        env_V0[s_V2]) :
      (ADT$Expr_724ba10a_T_tag(e_V0) ==
      ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() &&
      true &&
      true ?
        (let op_V3 ==
          (ADT$Expr_724ba10a_T_opA(e_V0)) in
          (let args_V3 ==
            (ADT$Expr_724ba10a_T_argsA(e_V0)) in
            EvalList_v2_724ba10a_F(args_V3, op_V3, env_V0))) :
        0))))
}

function GetLeft_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): ADT$BYTree_724ba10a_T
  requires ADT$BYTree_724ba10a_T_tag(t_V0) ==
    ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag()
{
  assertArg2_ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true, (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true ?
    (let left_V1 ==
      (ADT$BYTree_724ba10a_T_leftA(t_V0)) in
      left_V1) :
    ADT$BYTree_724ba10a_T_dflt()))
}

// decreases rank$ADT$List_724ba10a_T(l_V0)
function GoodEnvList_724ba10a_F(l_V0: ADT$List_724ba10a_T, env_V0: Map[Int,Int]): Bool
{
  assertArg2_Bool(ADT$List_724ba10a_T_tag(l_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag() ||
  ADT$List_724ba10a_T_tag(l_V0) ==
  ADT$List_724ba10a_T_Cons_724ba10a_F_tag() &&
  true &&
  true, (ADT$List_724ba10a_T_tag(l_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag() ?
    true :
    (ADT$List_724ba10a_T_tag(l_V0) ==
    ADT$List_724ba10a_T_Cons_724ba10a_F_tag() &&
    true &&
    true ?
      (let e_V1 ==
        (ADT$List_724ba10a_T_headA(l_V0)) in
        (let tail_V1 ==
          (ADT$List_724ba10a_T_tailA(l_V0)) in
          GoodEnv_724ba10a_F(e_V1, env_V0) &&
          GoodEnvList_724ba10a_F(tail_V1, env_V0))) :
      false)))
}

// decreases rank$ADT$Expr_724ba10a_T(e_V0)
function GoodEnv_724ba10a_F(e_V0: ADT$Expr_724ba10a_T, env_V0: Map[Int,Int]): Bool
{
  assertArg2_Bool(ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() &&
  true ||
  ADT$Expr_724ba10a_T_tag(e_V0) == ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() &&
  true ||
  ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() &&
  true &&
  true, (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag() &&
  true ?
    true :
    (ADT$Expr_724ba10a_T_tag(e_V0) ==
    ADT$Expr_724ba10a_T_Var_724ba10a_F_tag() &&
    true ?
      (let s_V1 ==
        (ADT$Expr_724ba10a_T_nameA(e_V0)) in
        (s_V1 in domain(env_V0))) :
      (ADT$Expr_724ba10a_T_tag(e_V0) ==
      ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag() &&
      true &&
      true ?
        (let args_V2 ==
          (ADT$Expr_724ba10a_T_argsA(e_V0)) in
          GoodEnvList_724ba10a_F(args_V2, env_V0)) :
        false))))
}

// decreases 
function HasLeftTree_724ba10a_F(t_V0: ADT$BYTree_724ba10a_T, u_V0: ADT$BYTree_724ba10a_T): Bool
{
  (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true ?
    (let l_V1 ==
      (ADT$BYTree_724ba10a_T_leftA(t_V0)) in
      l_V1 == u_V0) :
    false)
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
function IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]): Bool
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)


// decreases 
function IsLithuanianFlagColor_724ba10a_MColor(c_V0: ADT$Color_724ba10a_T): Bool
{
  !(c_V0 == ADT$Color_724ba10a_T_Blue_724ba10a_F())
}

function IsNode_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): Bool
{
  assertArg2_Bool(ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true, (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ?
    false :
    (ADT$BYTree_724ba10a_T_tag(t_V0) ==
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ?
      false :
      (ADT$BYTree_724ba10a_T_tag(t_V0) ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
      true &&
      true ?
        true :
        false))))
}

// decreases rank$ADT$ColoredTree_724ba10a_T(t_V0)
function IsSwedishColoredTree_724ba10a_MColoredTree(t_V0: ADT$ColoredTree_724ba10a_T): Bool
{
  assertArg2_Bool(ADT$ColoredTree_724ba10a_T_tag(t_V0) ==
  ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F_tag() &&
  true ||
  ADT$ColoredTree_724ba10a_T_tag(t_V0) ==
  ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F_tag() &&
  true &&
  true, (ADT$ColoredTree_724ba10a_T_tag(t_V0) ==
  ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F_tag() &&
  true ?
    (let c_V1 ==
      (ADT$ColoredTree_724ba10a_T_colorA(t_V0)) in
      IsSwedishFlagColor_724ba10a_MColor(c_V1)) :
    (ADT$ColoredTree_724ba10a_T_tag(t_V0) ==
    ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F_tag() &&
    true &&
    true ?
      (let l_V2 ==
        (ADT$ColoredTree_724ba10a_T_color1A(t_V0)) in
        (let r_V2 ==
          (ADT$ColoredTree_724ba10a_T_color2A(t_V0)) in
          IsSwedishColoredTree_724ba10a_MColoredTree(l_V2) &&
          IsSwedishColoredTree_724ba10a_MColoredTree(r_V2))) :
      false)))
}

// decreases 
function IsSwedishFlagColor_724ba10a_MColor(c_V0: ADT$Color_724ba10a_T): Bool
{
  ADT$Color_724ba10a_T_tag(c_V0) ==
  ADT$Color_724ba10a_T_Blue_724ba10a_F_tag() ||
  ADT$Color_724ba10a_T_tag(c_V0) ==
  ADT$Color_724ba10a_T_Yellow_724ba10a_F_tag()
}

function LeftDepth_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): Int
  ensures 0 <= result
{
  assertArg2_Int(ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true, (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ?
    0 :
    (ADT$BYTree_724ba10a_T_tag(t_V0) ==
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ?
      0 :
      (ADT$BYTree_724ba10a_T_tag(t_V0) ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
      true &&
      true ?
        (let left_V1 ==
          (ADT$BYTree_724ba10a_T_leftA(t_V0)) in
          1 + LeftDepth_724ba10a_MBYTree(left_V1)) :
        0))))
}

// decreases rank$ADT$BYTree_724ba10a_T(t_V0)
function LeftDepth_v2_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): Int
  ensures 0 <= result
{
  (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() ?
    1 + LeftDepth_v2_724ba10a_MBYTree(ADT$BYTree_724ba10a_T_leftA(t_V0)) :
    0)
}

// decreases rank$ADT$Tree_724ba10a_T(t_V0)
function Mirror_724ba10a_MTree(t_V0: ADT$Tree_724ba10a_T): ADT$Tree_724ba10a_T
{
  assertArg2_ADT$Tree_724ba10a_T(ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() &&
  true &&
  true ||
  ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() &&
  true, (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() &&
  true &&
  true ?
    (let l_V1 ==
      (ADT$Tree_724ba10a_T_leftA(t_V0)) in
      (let r_V1 ==
        (ADT$Tree_724ba10a_T_rightA(t_V0)) in
        ADT$Tree_724ba10a_T_TNode_724ba10a_F(Mirror_724ba10a_MTree(r_V1), Mirror_724ba10a_MTree(l_V1)))) :
    (ADT$Tree_724ba10a_T_tag(t_V0) ==
    ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() &&
    true ?
      (let l_V2 ==
        (ADT$Tree_724ba10a_T_dataA(t_V0)) in
        ADT$Tree_724ba10a_T_TLeaf_724ba10a_F(l_V2)) :
      ADT$Tree_724ba10a_T_dflt())))
}

// decreases rank$ADT$BYTree_724ba10a_T(t_V0)
function Oceanize_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): ADT$BYTree_724ba10a_T
{
  assertArg2_ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true, (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ?
    ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F() :
    (ADT$BYTree_724ba10a_T_tag(t_V0) ==
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ?
      ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F() :
      (ADT$BYTree_724ba10a_T_tag(t_V0) ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
      true &&
      true ?
        (let l_V1 ==
          (ADT$BYTree_724ba10a_T_leftA(t_V0)) in
          (let r_V1 ==
            (ADT$BYTree_724ba10a_T_rightA(t_V0)) in
            ADT$BYTree_724ba10a_T_Node_724ba10a_F(Oceanize_724ba10a_MBYTree(l_V1),
            Oceanize_724ba10a_MBYTree(r_V1)))) :
        ADT$BYTree_724ba10a_T_dflt()))))
}

// decreases rank$ADT$BYTree_724ba10a_T(t_V0)
function ReverseColors_724ba10a_MBYTree(t_V0: ADT$BYTree_724ba10a_T): ADT$BYTree_724ba10a_T
{
  assertArg2_ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ||
  ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
  true &&
  true, (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag() ?
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F() :
    (ADT$BYTree_724ba10a_T_tag(t_V0) ==
    ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag() ?
      ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F() :
      (ADT$BYTree_724ba10a_T_tag(t_V0) ==
      ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag() &&
      true &&
      true ?
        (let l_V1 ==
          (ADT$BYTree_724ba10a_T_leftA(t_V0)) in
          (let r_V1 ==
            (ADT$BYTree_724ba10a_T_rightA(t_V0)) in
            (let lr_V2 ==
              (ReverseColors_724ba10a_MBYTree(l_V1)) in
              (let rr_V3 ==
                (ReverseColors_724ba10a_MBYTree(r_V1)) in
                ADT$BYTree_724ba10a_T_Node_724ba10a_F(lr_V2, rr_V3))))) :
        ADT$BYTree_724ba10a_T_dflt()))))
}

// decreases rank$ADT$Tree_724ba10a_T(t_V0)
function Size_724ba10a_MTree(t_V0: ADT$Tree_724ba10a_T): Int
  ensures 0 <= result
{
  assertArg2_Int(ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() &&
  true ||
  ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() &&
  true &&
  true, (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag() &&
  true ?
    1 :
    (ADT$Tree_724ba10a_T_tag(t_V0) ==
    ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag() &&
    true &&
    true ?
      (let left_V1 ==
        (ADT$Tree_724ba10a_T_leftA(t_V0)) in
        (let right_V1 ==
          (ADT$Tree_724ba10a_T_rightA(t_V0)) in
          Size_724ba10a_MTree(left_V1) + Size_724ba10a_MTree(right_V1))) :
      0)))
}

// decreases 
function assertArg2_ADT$BYTree_724ba10a_T(b: Bool, y: ADT$BYTree_724ba10a_T): ADT$BYTree_724ba10a_T
  requires b
{
  y
}

// decreases 
function assertArg2_ADT$Tree_724ba10a_T(b: Bool, y: ADT$Tree_724ba10a_T): ADT$Tree_724ba10a_T
  requires b
{
  y
}

// decreases 
function assertArg2_Bool(b: Bool, y: Bool): Bool
  requires b
{
  y
}

// decreases 
function assertArg2_Int(b: Bool, y: Int): Int
  requires b
{
  y
}

predicate ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types]) 

method $IMPORTS_724ba10a_724ba10a()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

method $IMPORTS_724ba10a_a4af0e5e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_1a7363e9()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_1ac68d3e()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_49c677c()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_53157331()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_6a32ca2a()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_6cdfcac6()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_8e3d0fed()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_c7ad8fb4()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_d3d1a34()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_dee3afc9()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases 
method $INIT_724ba10a_f9a3b9c3()
{
  
  // decl 
  {
    
    
    label returnLabel
  }
}

// decreases rank$ADT$Tree_724ba10a_T(t_V0)
method AllBlue_724ba10a_MTree_termination_proof(t_V0: ADT$Tree_724ba10a_T)
{
  if (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag()) {
    {
      var c_V1: ADT$Color_724ba10a_T
      inhale c_V1 == ADT$Tree_724ba10a_T_dataA(t_V0)
    }
  } elseif (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag()) {
    {
      var left_V2: ADT$Tree_724ba10a_T
      inhale left_V2 == ADT$Tree_724ba10a_T_leftA(t_V0)
      {
        var right_V2: ADT$Tree_724ba10a_T
        inhale right_V2 == ADT$Tree_724ba10a_T_rightA(t_V0)
        assert (decreasing(rank$ADT$Tree_724ba10a_T(left_V2), old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool)
        if (AllBlue_724ba10a_MTree(left_V2)) {
          assert (decreasing(rank$ADT$Tree_724ba10a_T(right_V2), old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool) &&
            (bounded(old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool)
        }
      }
    }
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Duplicate_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==>
    acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)


// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method Error_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf: Tuple2[Ref, Types])
  returns (P0_PO0: Int)
  requires !(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))
  requires acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), write)
  ensures IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf) ==
    old(IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf))


// decreases rank$ADT$List_724ba10a_T(args_V0)
method EvalList_724ba10a_F_termination_proof(args_V0: ADT$List_724ba10a_T, op_V0: ADT$Op_724ba10a_T,
  env_V0: Map[Int,Int])
{
  if (ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag()) {
  } elseif (ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Cons_724ba10a_F_tag()) {
    {
      var e_V1: ADT$Expr_724ba10a_T
      inhale e_V1 == ADT$List_724ba10a_T_headA(args_V0)
      {
        var tail_V1: ADT$List_724ba10a_T
        inhale tail_V1 == ADT$List_724ba10a_T_tailA(args_V0)
        {
          var v0_V2: Int
          assert (decreasing(rank$ADT$Expr_724ba10a_T(e_V1), old(rank$ADT$List_724ba10a_T(args_V0))): Bool) &&
            (bounded(old(rank$ADT$List_724ba10a_T(args_V0))): Bool)
          inhale v0_V2 == Eval_724ba10a_F(e_V1, env_V0)
          {
            var v1_V3: Int
            assert (decreasing(rank$ADT$List_724ba10a_T(tail_V1), old(rank$ADT$List_724ba10a_T(args_V0))): Bool) &&
              (bounded(old(rank$ADT$List_724ba10a_T(args_V0))): Bool)
            inhale v1_V3 == EvalList_724ba10a_F(tail_V1, op_V0, env_V0)
          }
        }
      }
    }
  }
}

// decreases rank$ADT$List_724ba10a_T(args_V0)
method EvalList_v2_724ba10a_F_termination_proof(args_V0: ADT$List_724ba10a_T,
  op_V0: ADT$Op_724ba10a_T, env_V0: Map[Int,Int])
  requires GoodEnvList_724ba10a_F(args_V0, env_V0)
{
  if (ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag()) {
  } elseif (ADT$List_724ba10a_T_tag(args_V0) ==
  ADT$List_724ba10a_T_Cons_724ba10a_F_tag()) {
    {
      var e_V1: ADT$Expr_724ba10a_T
      inhale e_V1 == ADT$List_724ba10a_T_headA(args_V0)
      {
        var tail_V1: ADT$List_724ba10a_T
        inhale tail_V1 == ADT$List_724ba10a_T_tailA(args_V0)
        {
          var v0_V2: Int
          assert (decreasing(rank$ADT$Expr_724ba10a_T(e_V1), old(rank$ADT$List_724ba10a_T(args_V0))): Bool) &&
            (bounded(old(rank$ADT$List_724ba10a_T(args_V0))): Bool)
          inhale v0_V2 == Eval_v2_724ba10a_F(e_V1, env_V0)
          {
            var v1_V3: Int
            assert (decreasing(rank$ADT$List_724ba10a_T(tail_V1), old(rank$ADT$List_724ba10a_T(args_V0))): Bool) &&
              (bounded(old(rank$ADT$List_724ba10a_T(args_V0))): Bool)
            inhale v1_V3 == EvalList_v2_724ba10a_F(tail_V1, op_V0, env_V0)
          }
        }
      }
    }
  }
}

// decreases rank$ADT$Expr_724ba10a_T(e_V0)
method Eval_724ba10a_F_termination_proof(e_V0: ADT$Expr_724ba10a_T, env_V0: Map[Int,Int])
{
  if (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag()) {
    {
      var c_V1: Int
      inhale c_V1 == ADT$Expr_724ba10a_T_numA(e_V0)
    }
  } elseif (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Var_724ba10a_F_tag()) {
    {
      var s_V1: Int
      inhale s_V1 == ADT$Expr_724ba10a_T_nameA(e_V0)
    }
  } elseif (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag()) {
    {
      var op_V2: ADT$Op_724ba10a_T
      inhale op_V2 == ADT$Expr_724ba10a_T_opA(e_V0)
      {
        var args_V2: ADT$List_724ba10a_T
        inhale args_V2 == ADT$Expr_724ba10a_T_argsA(e_V0)
        assert (decreasing(rank$ADT$List_724ba10a_T(args_V2), old(rank$ADT$Expr_724ba10a_T(e_V0))): Bool) &&
          (bounded(old(rank$ADT$Expr_724ba10a_T(e_V0))): Bool)
      }
    }
  }
}

// decreases rank$ADT$Expr_724ba10a_T(e_V0)
method Eval_v2_724ba10a_F_termination_proof(e_V0: ADT$Expr_724ba10a_T, env_V0: Map[Int,Int])
  requires GoodEnv_724ba10a_F(e_V0, env_V0)
{
  if (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag()) {
    {
      var c_V1: Int
      inhale c_V1 == ADT$Expr_724ba10a_T_numA(e_V0)
    }
  } elseif (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Var_724ba10a_F_tag()) {
    {
      var s_V2: Int
      inhale s_V2 == ADT$Expr_724ba10a_T_nameA(e_V0)
    }
  } elseif (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag()) {
    {
      var op_V3: ADT$Op_724ba10a_T
      inhale op_V3 == ADT$Expr_724ba10a_T_opA(e_V0)
      {
        var args_V3: ADT$List_724ba10a_T
        inhale args_V3 == ADT$Expr_724ba10a_T_argsA(e_V0)
        assert (decreasing(rank$ADT$List_724ba10a_T(args_V3), old(rank$ADT$Expr_724ba10a_T(e_V0))): Bool) &&
          (bounded(old(rank$ADT$Expr_724ba10a_T(e_V0))): Bool)
      }
    }
  }
}

// decreases rank$ADT$List_724ba10a_T(l_V0)
method GoodEnvList_724ba10a_F_termination_proof(l_V0: ADT$List_724ba10a_T, env_V0: Map[Int,Int])
{
  if (ADT$List_724ba10a_T_tag(l_V0) ==
  ADT$List_724ba10a_T_Nil_724ba10a_F_tag()) {
  } elseif (ADT$List_724ba10a_T_tag(l_V0) ==
  ADT$List_724ba10a_T_Cons_724ba10a_F_tag()) {
    {
      var e_V1: ADT$Expr_724ba10a_T
      inhale e_V1 == ADT$List_724ba10a_T_headA(l_V0)
      {
        var tail_V1: ADT$List_724ba10a_T
        inhale tail_V1 == ADT$List_724ba10a_T_tailA(l_V0)
        assert (decreasing(rank$ADT$Expr_724ba10a_T(e_V1), old(rank$ADT$List_724ba10a_T(l_V0))): Bool) &&
          (bounded(old(rank$ADT$List_724ba10a_T(l_V0))): Bool)
        if (GoodEnv_724ba10a_F(e_V1, env_V0)) {
          assert (decreasing(rank$ADT$List_724ba10a_T(tail_V1), old(rank$ADT$List_724ba10a_T(l_V0))): Bool) &&
            (bounded(old(rank$ADT$List_724ba10a_T(l_V0))): Bool)
        }
      }
    }
  }
}

// decreases rank$ADT$Expr_724ba10a_T(e_V0)
method GoodEnv_724ba10a_F_termination_proof(e_V0: ADT$Expr_724ba10a_T, env_V0: Map[Int,Int])
{
  if (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Const_724ba10a_F_tag()) {
  } elseif (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_Var_724ba10a_F_tag()) {
    {
      var s_V1: Int
      inhale s_V1 == ADT$Expr_724ba10a_T_nameA(e_V0)
    }
  } elseif (ADT$Expr_724ba10a_T_tag(e_V0) ==
  ADT$Expr_724ba10a_T_ENode_724ba10a_F_tag()) {
    {
      var args_V2: ADT$List_724ba10a_T
      inhale args_V2 == ADT$Expr_724ba10a_T_argsA(e_V0)
      assert (decreasing(rank$ADT$List_724ba10a_T(args_V2), old(rank$ADT$Expr_724ba10a_T(e_V0))): Bool) &&
        (bounded(old(rank$ADT$Expr_724ba10a_T(e_V0))): Bool)
    }
  }
}

// decreases 
method HasLeftTree_724ba10a_F_termination_proof(t_V0: ADT$BYTree_724ba10a_T,
  u_V0: ADT$BYTree_724ba10a_T)
{
  if (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag()) {
    {
      var l_V1: ADT$BYTree_724ba10a_T
      inhale l_V1 == ADT$BYTree_724ba10a_T_leftA(t_V0)
    }
  }
}

// decreases @ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf)
method IsDuplicableMem_a4af0e5e_SY$db8f20c_a4af0e5e__pres_termination_proof(thisItf: Tuple2[Ref, Types])
{
  var $condInEx: Bool
  if (!(thisItf == (tuple2(null, nil_Types()): Tuple2[Ref, Types]))) {
    inhale acc(ErrorMem_a4af0e5e_SY$db8f20c_a4af0e5e_(thisItf), wildcard)
  }
}

// decreases rank$ADT$ColoredTree_724ba10a_T(t_V0)
method IsSwedishColoredTree_724ba10a_MColoredTree_termination_proof(t_V0: ADT$ColoredTree_724ba10a_T)
{
  if (ADT$ColoredTree_724ba10a_T_tag(t_V0) ==
  ADT$ColoredTree_724ba10a_T_Leaf_724ba10a_F_tag()) {
    {
      var c_V1: ADT$Color_724ba10a_T
      inhale c_V1 == ADT$ColoredTree_724ba10a_T_colorA(t_V0)
    }
  } elseif (ADT$ColoredTree_724ba10a_T_tag(t_V0) ==
  ADT$ColoredTree_724ba10a_T_NodeColored_724ba10a_F_tag()) {
    {
      var l_V2: ADT$ColoredTree_724ba10a_T
      inhale l_V2 == ADT$ColoredTree_724ba10a_T_color1A(t_V0)
      {
        var r_V2: ADT$ColoredTree_724ba10a_T
        inhale r_V2 == ADT$ColoredTree_724ba10a_T_color2A(t_V0)
        assert (decreasing(rank$ADT$ColoredTree_724ba10a_T(l_V2), old(rank$ADT$ColoredTree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$ColoredTree_724ba10a_T(t_V0))): Bool)
        if (IsSwedishColoredTree_724ba10a_MColoredTree(l_V2)) {
          assert (decreasing(rank$ADT$ColoredTree_724ba10a_T(r_V2), old(rank$ADT$ColoredTree_724ba10a_T(t_V0))): Bool) &&
            (bounded(old(rank$ADT$ColoredTree_724ba10a_T(t_V0))): Bool)
        }
      }
    }
  }
}

// decreases rank$ADT$BYTree_724ba10a_T(t_V0)
method LeftDepth_v2_724ba10a_MBYTree_termination_proof(t_V0: ADT$BYTree_724ba10a_T)
{
  if (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag()) {
    assert (decreasing(rank$ADT$BYTree_724ba10a_T(ADT$BYTree_724ba10a_T_leftA(t_V0)),
      old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool) &&
      (bounded(old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool)
  }
}

// decreases rank$ADT$Tree_724ba10a_T(t_V0)
method Mirror_724ba10a_MTree_termination_proof(t_V0: ADT$Tree_724ba10a_T)
{
  if (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag()) {
    {
      var l_V1: ADT$Tree_724ba10a_T
      inhale l_V1 == ADT$Tree_724ba10a_T_leftA(t_V0)
      {
        var r_V1: ADT$Tree_724ba10a_T
        inhale r_V1 == ADT$Tree_724ba10a_T_rightA(t_V0)
        assert (decreasing(rank$ADT$Tree_724ba10a_T(r_V1), old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool)
        assert (decreasing(rank$ADT$Tree_724ba10a_T(l_V1), old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool)
      }
    }
  } elseif (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag()) {
    {
      var l_V2: ADT$Color_724ba10a_T
      inhale l_V2 == ADT$Tree_724ba10a_T_dataA(t_V0)
    }
  }
}

// decreases rank$ADT$BYTree_724ba10a_T(t_V0)
method Oceanize_724ba10a_MBYTree_termination_proof(t_V0: ADT$BYTree_724ba10a_T)
{
  if (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag()) {
  } elseif (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag()) {
  } elseif (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag()) {
    {
      var l_V1: ADT$BYTree_724ba10a_T
      inhale l_V1 == ADT$BYTree_724ba10a_T_leftA(t_V0)
      {
        var r_V1: ADT$BYTree_724ba10a_T
        inhale r_V1 == ADT$BYTree_724ba10a_T_rightA(t_V0)
        assert (decreasing(rank$ADT$BYTree_724ba10a_T(l_V1), old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool)
        assert (decreasing(rank$ADT$BYTree_724ba10a_T(r_V1), old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool)
      }
    }
  }
}

// decreases rank$ADT$BYTree_724ba10a_T(t_V0)
method ReverseColors_724ba10a_MBYTree_termination_proof(t_V0: ADT$BYTree_724ba10a_T)
{
  if (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F_tag()) {
  } elseif (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F_tag()) {
  } elseif (ADT$BYTree_724ba10a_T_tag(t_V0) ==
  ADT$BYTree_724ba10a_T_Node_724ba10a_F_tag()) {
    {
      var l_V1: ADT$BYTree_724ba10a_T
      inhale l_V1 == ADT$BYTree_724ba10a_T_leftA(t_V0)
      {
        var r_V1: ADT$BYTree_724ba10a_T
        inhale r_V1 == ADT$BYTree_724ba10a_T_rightA(t_V0)
        {
          var lr_V2: ADT$BYTree_724ba10a_T
          assert (decreasing(rank$ADT$BYTree_724ba10a_T(l_V1), old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool) &&
            (bounded(old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool)
          inhale lr_V2 == ReverseColors_724ba10a_MBYTree(l_V1)
          {
            var rr_V3: ADT$BYTree_724ba10a_T
            assert (decreasing(rank$ADT$BYTree_724ba10a_T(r_V1), old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool) &&
              (bounded(old(rank$ADT$BYTree_724ba10a_T(t_V0))): Bool)
            inhale rr_V3 == ReverseColors_724ba10a_MBYTree(r_V1)
          }
        }
      }
    }
  }
}

// decreases rank$ADT$Tree_724ba10a_T(t_V0)
method Size_724ba10a_MTree_termination_proof(t_V0: ADT$Tree_724ba10a_T)
{
  if (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TLeaf_724ba10a_F_tag()) {
  } elseif (ADT$Tree_724ba10a_T_tag(t_V0) ==
  ADT$Tree_724ba10a_T_TNode_724ba10a_F_tag()) {
    {
      var left_V1: ADT$Tree_724ba10a_T
      inhale left_V1 == ADT$Tree_724ba10a_T_leftA(t_V0)
      {
        var right_V1: ADT$Tree_724ba10a_T
        inhale right_V1 == ADT$Tree_724ba10a_T_rightA(t_V0)
        assert (decreasing(rank$ADT$Tree_724ba10a_T(left_V1), old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool)
        assert (decreasing(rank$ADT$Tree_724ba10a_T(right_V1), old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool) &&
          (bounded(old(rank$ADT$Tree_724ba10a_T(t_V0))): Bool)
      }
    }
  }
}

method TestReverseColors_724ba10a_F()
{
  
  // decl 
  {
    
    
    
    // decl a_V0: BYTree_724ba10a_T°°, b_V0: BYTree_724ba10a_T°°
    {
      var a_V0: ADT$BYTree_724ba10a_T
      var b_V0: ADT$BYTree_724ba10a_T
      
      // init a_V0
      inhale a_V0 == ADT$BYTree_724ba10a_T_dflt()
      
      // a_V0 = Node_724ba10a_F{BlueLeaf_724ba10a_F{}, Node_724ba10a_F{BlueLeaf_724ba10a_F{}, YellowLeaf_724ba10a_F{}}}
      a_V0 := ADT$BYTree_724ba10a_T_Node_724ba10a_F(ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F(),
        ADT$BYTree_724ba10a_T_Node_724ba10a_F(ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F(),
        ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F()))
      
      // init b_V0
      inhale b_V0 == ADT$BYTree_724ba10a_T_dflt()
      
      // b_V0 = Node_724ba10a_F{YellowLeaf_724ba10a_F{}, Node_724ba10a_F{YellowLeaf_724ba10a_F{}, BlueLeaf_724ba10a_F{}}}
      b_V0 := ADT$BYTree_724ba10a_T_Node_724ba10a_F(ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F(),
        ADT$BYTree_724ba10a_T_Node_724ba10a_F(ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F(),
        ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F()))
      
      // assert a_V0.fieldrightA: BYTree_724ba10a_T°.fieldrightA: BYTree_724ba10a_T°.ReverseColors() == b_V0.fieldrightA: BYTree_724ba10a_T°.fieldrightA: BYTree_724ba10a_T°
      assert ReverseColors_724ba10a_MBYTree(ADT$BYTree_724ba10a_T_rightA(ADT$BYTree_724ba10a_T_rightA(a_V0))) ==
        ADT$BYTree_724ba10a_T_rightA(ADT$BYTree_724ba10a_T_rightA(b_V0))
      
      // assert a_V0.fieldleftA: BYTree_724ba10a_T°.ReverseColors() == b_V0.fieldleftA: BYTree_724ba10a_T°
      assert ReverseColors_724ba10a_MBYTree(ADT$BYTree_724ba10a_T_leftA(a_V0)) ==
        ADT$BYTree_724ba10a_T_leftA(b_V0)
      
      // assert a_V0.fieldrightA: BYTree_724ba10a_T°.ReverseColors() == Node_724ba10a_F{YellowLeaf_724ba10a_F{}, BlueLeaf_724ba10a_F{}}
      assert ReverseColors_724ba10a_MBYTree(ADT$BYTree_724ba10a_T_rightA(a_V0)) ==
        ADT$BYTree_724ba10a_T_Node_724ba10a_F(ADT$BYTree_724ba10a_T_YellowLeaf_724ba10a_F(),
        ADT$BYTree_724ba10a_T_BlueLeaf_724ba10a_F())
      
      // assert a_V0.fieldrightA: BYTree_724ba10a_T° == b_V0.fieldrightA: BYTree_724ba10a_T°.ReverseColors()
      assert ADT$BYTree_724ba10a_T_rightA(a_V0) ==
        ReverseColors_724ba10a_MBYTree(ADT$BYTree_724ba10a_T_rightA(b_V0))
      
      // assert a_V0.ReverseColors() == b_V0
      assert ReverseColors_724ba10a_MBYTree(a_V0) == b_V0
      
      // assert b_V0.ReverseColors() == a_V0
      assert ReverseColors_724ba10a_MBYTree(b_V0) == a_V0
    }
    label returnLabel
  }
}

method panic_a4af0e5e_F(v_V0: Tuple2[Ref, Types])
  requires false
