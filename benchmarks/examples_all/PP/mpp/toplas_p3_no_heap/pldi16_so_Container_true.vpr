function departureTimeIsBefore(self: Ref, t: Int): Bool 


function departureTime(self: Ref): Int 


function departureMaxDuration(self: Ref): Int 


function departureTransportCompany(self: Ref): Int 


function departureTransportType(self: Ref): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  requires (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p2_0 ==> true) && ((p0_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && ((p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2)))
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3))
{
  var returned: Bool
  var rv: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var rv_0: Int
  var rv_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_0) {
    _cond0 := false
  }
  if (p1_0) {
    _cond0_0 := false
  }
  if (p2_0) {
    _cond0_1 := false
  }
  if (p0_0) {
    returned := false
  }
  if (p1_0) {
    returned_0 := false
  }
  if (p2_0) {
    returned_1 := false
  }
  var tmp0: Int
  var tmp1: Int
  var tmp2: Int
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (p0_0) {
    tmp0 := departureTime(o1)
  }
  if (p1_0) {
    tmp1 := departureTime(o1_2)
  }
  if (p2_0) {
    tmp2 := departureTime(o1_3)
  }
  if (p0_0) {
    tmp0_0 := departureTime(o2)
  }
  if (p1_0) {
    tmp1_0 := departureTime(o2_2)
  }
  if (p2_0) {
    tmp2_0 := departureTime(o2_3)
  }
  tmp0_1, tmp1_1, tmp2_1 := Int_compare(p0_0, p1_0, p2_0, tmp0, tmp1, tmp2, tmp0_0, tmp1_0, tmp2_0)
  if (p0_0) {
    rv := tmp0_1
  }
  if (p1_0) {
    rv_0 := tmp1_1
  }
  if (p2_0) {
    rv_1 := tmp2_1
  }
  assert (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> rv > 0 && (rv_0 > 0 && (o2 == o1_2 && (o1_3 == o1 && o2_3 == o2_2))) ==> rv_1 > 0) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> rv > 0 && (rv_0 > 0 && (o2 == o1_2 && (o1_3 == o1 && o2_3 == o2_2))) ==> rv_1 > 0) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> rv > 0 && (rv_0 > 0 && (o2 == o1_2 && (o1_3 == o1 && o2_3 == o2_2))) ==> rv_1 > 0)
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0_0 && rv == 0
  pt1 := p1_0 && rv_0 == 0
  pt2 := p2_0 && rv_1 == 0
  pf0 := p0_0 && !(rv == 0)
  pf1 := p1_0 && !(rv_0 == 0)
  pf2 := p2_0 && !(rv_1 == 0)
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pt0 && departureMaxDuration(o1) < departureMaxDuration(o2)
  pt1_0 := pt1 && departureMaxDuration(o1_2) < departureMaxDuration(o2_2)
  pt2_0 := pt2 && departureMaxDuration(o1_3) < departureMaxDuration(o2_3)
  pf0_0 := pt0 && !(departureMaxDuration(o1) < departureMaxDuration(o2))
  pf1_0 := pt1 && !(departureMaxDuration(o1_2) < departureMaxDuration(o2_2))
  pf2_0 := pt2 && !(departureMaxDuration(o1_3) < departureMaxDuration(o2_3))
  if (pt0_0) {
    rv := -1
  }
  if (pt1_0) {
    rv_0 := -1
  }
  if (pt2_0) {
    rv_1 := -1
  }
  var pt0_1: Bool
  var pt1_1: Bool
  var pt2_1: Bool
  var pf0_1: Bool
  var pf1_1: Bool
  var pf2_1: Bool
  pt0_1 := pf0_0 && departureMaxDuration(o1) > departureMaxDuration(o2)
  pt1_1 := pf1_0 && departureMaxDuration(o1_2) > departureMaxDuration(o2_2)
  pt2_1 := pf2_0 && departureMaxDuration(o1_3) > departureMaxDuration(o2_3)
  pf0_1 := pf0_0 && !(departureMaxDuration(o1) > departureMaxDuration(o2))
  pf1_1 := pf1_0 && !(departureMaxDuration(o1_2) > departureMaxDuration(o2_2))
  pf2_1 := pf2_0 && !(departureMaxDuration(o1_3) > departureMaxDuration(o2_3))
  if (pt0_1) {
    rv := 1
  }
  if (pt1_1) {
    rv_0 := 1
  }
  if (pt2_1) {
    rv_1 := 1
  }
  assert (p0_0 ==> !returned) && (p1_0 ==> !returned_0) && (p2_0 ==> !returned_1)
  if (p0_0) {
    returned := true
  }
  if (p1_0) {
    returned_0 := true
  }
  if (p2_0) {
    returned_1 := true
  }
  if (p0_0) {
    res := rv
  }
  if (p1_0) {
    res_2 := rv_0
  }
  if (p2_0) {
    res_3 := rv_1
  }
  assert (p0_0 ==> returned) && (p1_0 ==> returned_0) && (p2_0 ==> returned_1)
}

method Int_compare(p0: Bool, p1: Bool, p2: Bool, o1: Int, o1_0: Int, o1_1: Int, o2: Int, o2_0: Int, o2_1: Int) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
