function getHdopBPosGetTime(self: Ref): Int 


function getBPosGetTime(self: Ref): Int 


function getBPosGetStat(self: Ref): Int 


function getBPosIsVacation(self: Ref): Bool 


function getBPosIsDeparture(self: Ref): Bool 


function getBPosIsArrival(self: Ref): Bool 


function getHdopBPosGetTimeIsNotVoid(self: Ref): Bool 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  requires (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p2_0 ==> true) && ((p0_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && ((p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2)))
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3))
{
  var lCompare: Int
  var returned: Bool
  var _cond0: Bool
  var lCompare_0: Int
  var lCompare_1: Int
  var returned_0: Bool
  var returned_1: Bool
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_0) {
    _cond0 := false
  }
  if (p1_0) {
    _cond0_0 := false
  }
  if (p2_0) {
    _cond0_1 := false
  }
  if (p0_0) {
    returned := false
  }
  if (p1_0) {
    returned_0 := false
  }
  if (p2_0) {
    returned_1 := false
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0_0 && (getHdopBPosGetTimeIsNotVoid(o1) && getHdopBPosGetTimeIsNotVoid(o2))
  pt1 := p1_0 && (getHdopBPosGetTimeIsNotVoid(o1_2) && getHdopBPosGetTimeIsNotVoid(o2_2))
  pt2 := p2_0 && (getHdopBPosGetTimeIsNotVoid(o1_3) && getHdopBPosGetTimeIsNotVoid(o2_3))
  pf0 := p0_0 && !(getHdopBPosGetTimeIsNotVoid(o1) && getHdopBPosGetTimeIsNotVoid(o2))
  pf1 := p1_0 && !(getHdopBPosGetTimeIsNotVoid(o1_2) && getHdopBPosGetTimeIsNotVoid(o2_2))
  pf2 := p2_0 && !(getHdopBPosGetTimeIsNotVoid(o1_3) && getHdopBPosGetTimeIsNotVoid(o2_3))
  var tmp0: Int
  var tmp1: Int
  var tmp2: Int
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (pt0) {
    tmp0 := getHdopBPosGetTime(o1)
  }
  if (pt1) {
    tmp1 := getHdopBPosGetTime(o1_2)
  }
  if (pt2) {
    tmp2 := getHdopBPosGetTime(o1_3)
  }
  if (pt0) {
    tmp0_0 := getHdopBPosGetTime(o2)
  }
  if (pt1) {
    tmp1_0 := getHdopBPosGetTime(o2_2)
  }
  if (pt2) {
    tmp2_0 := getHdopBPosGetTime(o2_3)
  }
  tmp0_1, tmp1_1, tmp2_1 := Int_compare(pt0, pt1, pt2, tmp0, tmp1, tmp2, tmp0_0, tmp1_0, tmp2_0)
  if (pt0) {
    lCompare := tmp0_1
  }
  if (pt1) {
    lCompare_0 := tmp1_1
  }
  if (pt2) {
    lCompare_1 := tmp2_1
  }
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pt0 && lCompare != 0
  pt1_0 := pt1 && lCompare_0 != 0
  pt2_0 := pt2 && lCompare_1 != 0
  pf0_0 := pt0 && !(lCompare != 0)
  pf1_0 := pt1 && !(lCompare_0 != 0)
  pf2_0 := pt2 && !(lCompare_1 != 0)
  if (pt0_0) {
    res := lCompare
  }
  if (pt1_0) {
    res_2 := lCompare_0
  }
  if (pt2_0) {
    res_3 := lCompare_1
  }
  if (pt0_0) {
    returned := true
  }
  if (pt1_0) {
    returned_0 := true
  }
  if (pt2_0) {
    returned_1 := true
  }
  var pt0_1: Bool
  var pt1_1: Bool
  var pt2_1: Bool
  var pf0_1: Bool
  var pf1_1: Bool
  var pf2_1: Bool
  pt0_1 := p0_0 && !returned
  pt1_1 := p1_0 && !returned_0
  pt2_1 := p2_0 && !returned_1
  pf0_1 := p0_0 && !!returned
  pf1_1 := p1_0 && !!returned_0
  pf2_1 := p2_0 && !!returned_1
  var tmp0_2: Int
  var tmp1_2: Int
  var tmp2_2: Int
  var tmp0_3: Int
  var tmp1_3: Int
  var tmp2_3: Int
  var tmp0_4: Int
  var tmp1_4: Int
  var tmp2_4: Int
  if (pt0_1) {
    tmp0_2 := getBPosGetTime(o1)
  }
  if (pt1_1) {
    tmp1_2 := getBPosGetTime(o1_2)
  }
  if (pt2_1) {
    tmp2_2 := getBPosGetTime(o1_3)
  }
  if (pt0_1) {
    tmp0_3 := getBPosGetTime(o2)
  }
  if (pt1_1) {
    tmp1_3 := getBPosGetTime(o2_2)
  }
  if (pt2_1) {
    tmp2_3 := getBPosGetTime(o2_3)
  }
  tmp0_4, tmp1_4, tmp2_4 := Int_compare(pt0_1, pt1_1, pt2_1, tmp0_2, tmp1_2, tmp2_2, tmp0_3, tmp1_3, tmp2_3)
  if (pt0_1) {
    lCompare := tmp0_4
  }
  if (pt1_1) {
    lCompare_0 := tmp1_4
  }
  if (pt2_1) {
    lCompare_1 := tmp2_4
  }
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := pt0_1 && lCompare != 0
  pt1_2 := pt1_1 && lCompare_0 != 0
  pt2_2 := pt2_1 && lCompare_1 != 0
  pf0_2 := pt0_1 && !(lCompare != 0)
  pf1_2 := pt1_1 && !(lCompare_0 != 0)
  pf2_2 := pt2_1 && !(lCompare_1 != 0)
  if (pt0_2) {
    res := lCompare
  }
  if (pt1_2) {
    res_2 := lCompare_0
  }
  if (pt2_2) {
    res_3 := lCompare_1
  }
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  var pt0_3: Bool
  var pt1_3: Bool
  var pt2_3: Bool
  var pf0_3: Bool
  var pf1_3: Bool
  var pf2_3: Bool
  pt0_3 := pt0_1 && !returned
  pt1_3 := pt1_1 && !returned_0
  pt2_3 := pt2_1 && !returned_1
  pf0_3 := pt0_1 && !!returned
  pf1_3 := pt1_1 && !!returned_0
  pf2_3 := pt2_1 && !!returned_1
  var pt0_4: Bool
  var pt1_4: Bool
  var pt2_4: Bool
  var pf0_4: Bool
  var pf1_4: Bool
  var pf2_4: Bool
  pt0_4 := pt0_3 && (getBPosIsDeparture(o1) && getBPosIsVacation(o2))
  pt1_4 := pt1_3 && (getBPosIsDeparture(o1_2) && getBPosIsVacation(o2_2))
  pt2_4 := pt2_3 && (getBPosIsDeparture(o1_3) && getBPosIsVacation(o2_3))
  pf0_4 := pt0_3 && !(getBPosIsDeparture(o1) && getBPosIsVacation(o2))
  pf1_4 := pt1_3 && !(getBPosIsDeparture(o1_2) && getBPosIsVacation(o2_2))
  pf2_4 := pt2_3 && !(getBPosIsDeparture(o1_3) && getBPosIsVacation(o2_3))
  if (pt0_4) {
    res := 1
  }
  if (pt1_4) {
    res_2 := 1
  }
  if (pt2_4) {
    res_3 := 1
  }
  if (pt0_4) {
    returned := true
  }
  if (pt1_4) {
    returned_0 := true
  }
  if (pt2_4) {
    returned_1 := true
  }
  var pt0_5: Bool
  var pt1_5: Bool
  var pt2_5: Bool
  var pf0_5: Bool
  var pf1_5: Bool
  var pf2_5: Bool
  pt0_5 := pf0_4 && (getBPosIsVacation(o1) && getBPosIsArrival(o2))
  pt1_5 := pf1_4 && (getBPosIsVacation(o1_2) && getBPosIsArrival(o2_2))
  pt2_5 := pf2_4 && (getBPosIsVacation(o1_3) && getBPosIsArrival(o2_3))
  pf0_5 := pf0_4 && !(getBPosIsVacation(o1) && getBPosIsArrival(o2))
  pf1_5 := pf1_4 && !(getBPosIsVacation(o1_2) && getBPosIsArrival(o2_2))
  pf2_5 := pf2_4 && !(getBPosIsVacation(o1_3) && getBPosIsArrival(o2_3))
  if (pt0_5) {
    res := 1
  }
  if (pt1_5) {
    res_2 := 1
  }
  if (pt2_5) {
    res_3 := 1
  }
  if (pt0_5) {
    returned := true
  }
  if (pt1_5) {
    returned_0 := true
  }
  if (pt2_5) {
    returned_1 := true
  }
  var pt0_6: Bool
  var pt1_6: Bool
  var pt2_6: Bool
  var pf0_6: Bool
  var pf1_6: Bool
  var pf2_6: Bool
  pt0_6 := pt0_3 && (!returned && (getBPosIsDeparture(o1) && (getBPosIsArrival(o2) && getBPosGetStat(o1) == getBPosGetStat(o2))))
  pt1_6 := pt1_3 && (!returned_0 && (getBPosIsDeparture(o1_2) && (getBPosIsArrival(o2_2) && getBPosGetStat(o1_2) == getBPosGetStat(o2_2))))
  pt2_6 := pt2_3 && (!returned_1 && (getBPosIsDeparture(o1_3) && (getBPosIsArrival(o2_3) && getBPosGetStat(o1_3) == getBPosGetStat(o2_3))))
  pf0_6 := pt0_3 && !(!returned && (getBPosIsDeparture(o1) && (getBPosIsArrival(o2) && getBPosGetStat(o1) == getBPosGetStat(o2))))
  pf1_6 := pt1_3 && !(!returned_0 && (getBPosIsDeparture(o1_2) && (getBPosIsArrival(o2_2) && getBPosGetStat(o1_2) == getBPosGetStat(o2_2))))
  pf2_6 := pt2_3 && !(!returned_1 && (getBPosIsDeparture(o1_3) && (getBPosIsArrival(o2_3) && getBPosGetStat(o1_3) == getBPosGetStat(o2_3))))
  if (pt0_6) {
    res := 1
  }
  if (pt1_6) {
    res_2 := 1
  }
  if (pt2_6) {
    res_3 := 1
  }
  if (pt0_6) {
    returned := true
  }
  if (pt1_6) {
    returned_0 := true
  }
  if (pt2_6) {
    returned_1 := true
  }
  if (pf0_6) {
    res := 0
  }
  if (pf1_6) {
    res_2 := 0
  }
  if (pf2_6) {
    res_3 := 0
  }
  if (pf0_6) {
    returned := true
  }
  if (pf1_6) {
    returned_0 := true
  }
  if (pf2_6) {
    returned_1 := true
  }
  assert (p0_0 ==> returned) && (p1_0 ==> returned_0) && (p2_0 ==> returned_1)
}

method Int_compare(p0: Bool, p1: Bool, p2: Bool, o1: Int, o1_0: Int, o1_1: Int, o2: Int, o2_0: Int, o2_1: Int) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o2_0 && o2 == o1_0 ==> sgn(res) == -sgn(res_0)) && (p1 ==> true && p0 && p1 ==> o1 == o2_0 && o2 == o1_0 ==> sgn(res) == -sgn(res_0)) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o2_1 && o2 == o1_1 ==> sgn(res) == -sgn(res_1)) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o2_1 && o2 == o1_1 ==> sgn(res) == -sgn(res_1))
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o2_0 && o2_1 == o1_0 ==> sgn(res_1) == -sgn(res_0)) && (p2 ==> true && p2 && p1 ==> o1_1 == o2_0 && o2_1 == o1_0 ==> sgn(res_1) == -sgn(res_0))
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> res > 0 && (res_0 > 0 && (o2 == o1_0 && (o1_1 == o1 && o2_1 == o2_0))) ==> res_1 > 0) && (p1 ==> true && p0 && p1 && p2 ==> res > 0 && (res_0 > 0 && (o2 == o1_0 && (o1_1 == o1 && o2_1 == o2_0))) ==> res_1 > 0) && (p2 ==> true && p0 && p1 && p2 ==> res > 0 && (res_0 > 0 && (o2 == o1_0 && (o1_1 == o1 && o2_1 == o2_0))) ==> res_1 > 0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
  ensures (p0 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res_0 == 0)) ==> sgn(res) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res_0 == 0)) ==> sgn(res) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res_0 == 0)) ==> sgn(res) == sgn(res_1))
  ensures (p0 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res_1 == 0)) ==> sgn(res_0) == sgn(res)) && (p1 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res_1 == 0)) ==> sgn(res_0) == sgn(res)) && (p2 ==> true && p0 && p1 && p2 ==> o2 == o1_0 && (o1_1 == o1 && (o2_1 == o2_0 && res_1 == 0)) ==> sgn(res_0) == sgn(res))
