function fiscalQuarter(self: Ref): Int 


function sectorCode(self: Ref): Int 


function industryCode(self: Ref): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  requires (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p2_0 ==> true) && ((p0_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && ((p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2)))
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3))
{
  var returned: Bool
  var fiscalResult: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var fiscalResult_0: Int
  var fiscalResult_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_0) {
    _cond0 := false
  }
  if (p1_0) {
    _cond0_0 := false
  }
  if (p2_0) {
    _cond0_1 := false
  }
  if (p0_0) {
    returned := false
  }
  if (p1_0) {
    returned_0 := false
  }
  if (p2_0) {
    returned_1 := false
  }
  var tmp0: Int
  var tmp1: Int
  var tmp2: Int
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (p0_0) {
    tmp0 := fiscalQuarter(o1)
  }
  if (p1_0) {
    tmp1 := fiscalQuarter(o1_2)
  }
  if (p2_0) {
    tmp2 := fiscalQuarter(o1_3)
  }
  if (p0_0) {
    tmp0_0 := fiscalQuarter(o2)
  }
  if (p1_0) {
    tmp1_0 := fiscalQuarter(o2_2)
  }
  if (p2_0) {
    tmp2_0 := fiscalQuarter(o2_3)
  }
  tmp0_1, tmp1_1, tmp2_1 := Int_compare(p0_0, p1_0, p2_0, tmp0, tmp1, tmp2, tmp0_0, tmp1_0, tmp2_0)
  if (p0_0) {
    fiscalResult := tmp0_1
  }
  if (p1_0) {
    fiscalResult_0 := tmp1_1
  }
  if (p2_0) {
    fiscalResult_1 := tmp2_1
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0_0 && fiscalResult > 0
  pt1 := p1_0 && fiscalResult_0 > 0
  pt2 := p2_0 && fiscalResult_1 > 0
  pf0 := p0_0 && !(fiscalResult > 0)
  pf1 := p1_0 && !(fiscalResult_0 > 0)
  pf2 := p2_0 && !(fiscalResult_1 > 0)
  assert (pt0 ==> !returned) && (pt1 ==> !returned_0) && (pt2 ==> !returned_1)
  if (pt0) {
    returned := true
  }
  if (pt1) {
    returned_0 := true
  }
  if (pt2) {
    returned_1 := true
  }
  if (pt0) {
    res := fiscalResult
  }
  if (pt1) {
    res_2 := fiscalResult_0
  }
  if (pt2) {
    res_3 := fiscalResult_1
  }
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pf0 && fiscalResult < 0
  pt1_0 := pf1 && fiscalResult_0 < 0
  pt2_0 := pf2 && fiscalResult_1 < 0
  pf0_0 := pf0 && !(fiscalResult < 0)
  pf1_0 := pf1 && !(fiscalResult_0 < 0)
  pf2_0 := pf2 && !(fiscalResult_1 < 0)
  assert (pt0_0 ==> !returned) && (pt1_0 ==> !returned_0) && (pt2_0 ==> !returned_1)
  if (pt0_0) {
    returned := true
  }
  if (pt1_0) {
    returned_0 := true
  }
  if (pt2_0) {
    returned_1 := true
  }
  if (pt0_0) {
    res := fiscalResult
  }
  if (pt1_0) {
    res_2 := fiscalResult_0
  }
  if (pt2_0) {
    res_3 := fiscalResult_1
  }
  var pt0_1: Bool
  var pt1_1: Bool
  var pt2_1: Bool
  var pf0_1: Bool
  var pf1_1: Bool
  var pf2_1: Bool
  pt0_1 := pf0_0 && sectorCode(o1) > 0
  pt1_1 := pf1_0 && sectorCode(o1_2) > 0
  pt2_1 := pf2_0 && sectorCode(o1_3) > 0
  pf0_1 := pf0_0 && !(sectorCode(o1) > 0)
  pf1_1 := pf1_0 && !(sectorCode(o1_2) > 0)
  pf2_1 := pf2_0 && !(sectorCode(o1_3) > 0)
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := pt0_1 && sectorCode(o1) > sectorCode(o2)
  pt1_2 := pt1_1 && sectorCode(o1_2) > sectorCode(o2_2)
  pt2_2 := pt2_1 && sectorCode(o1_3) > sectorCode(o2_3)
  pf0_2 := pt0_1 && !(sectorCode(o1) > sectorCode(o2))
  pf1_2 := pt1_1 && !(sectorCode(o1_2) > sectorCode(o2_2))
  pf2_2 := pt2_1 && !(sectorCode(o1_3) > sectorCode(o2_3))
  assert (pt0_2 ==> !returned) && (pt1_2 ==> !returned_0) && (pt2_2 ==> !returned_1)
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  if (pt0_2) {
    res := sectorCode(o1) - sectorCode(o2)
  }
  if (pt1_2) {
    res_2 := sectorCode(o1_2) - sectorCode(o2_2)
  }
  if (pt2_2) {
    res_3 := sectorCode(o1_3) - sectorCode(o2_3)
  }
  var pt0_3: Bool
  var pt1_3: Bool
  var pt2_3: Bool
  var pf0_3: Bool
  var pf1_3: Bool
  var pf2_3: Bool
  pt0_3 := pf0_2 && sectorCode(o1) < sectorCode(o2)
  pt1_3 := pf1_2 && sectorCode(o1_2) < sectorCode(o2_2)
  pt2_3 := pf2_2 && sectorCode(o1_3) < sectorCode(o2_3)
  pf0_3 := pf0_2 && !(sectorCode(o1) < sectorCode(o2))
  pf1_3 := pf1_2 && !(sectorCode(o1_2) < sectorCode(o2_2))
  pf2_3 := pf2_2 && !(sectorCode(o1_3) < sectorCode(o2_3))
  assert (pt0_3 ==> !returned) && (pt1_3 ==> !returned_0) && (pt2_3 ==> !returned_1)
  if (pt0_3) {
    returned := true
  }
  if (pt1_3) {
    returned_0 := true
  }
  if (pt2_3) {
    returned_1 := true
  }
  if (pt0_3) {
    res := sectorCode(o2) - sectorCode(o1)
  }
  if (pt1_3) {
    res_2 := sectorCode(o2_2) - sectorCode(o1_2)
  }
  if (pt2_3) {
    res_3 := sectorCode(o2_3) - sectorCode(o1_3)
  }
  assert (pf0_3 ==> !returned) && (pf1_3 ==> !returned_0) && (pf2_3 ==> !returned_1)
  if (pf0_3) {
    returned := true
  }
  if (pf1_3) {
    returned_0 := true
  }
  if (pf2_3) {
    returned_1 := true
  }
  if (pf0_3) {
    res := 0
  }
  if (pf1_3) {
    res_2 := 0
  }
  if (pf2_3) {
    res_3 := 0
  }
  var pt0_4: Bool
  var pt1_4: Bool
  var pt2_4: Bool
  var pf0_4: Bool
  var pf1_4: Bool
  var pf2_4: Bool
  pt0_4 := pf0_1 && industryCode(o1) > 0
  pt1_4 := pf1_1 && industryCode(o1_2) > 0
  pt2_4 := pf2_1 && industryCode(o1_3) > 0
  pf0_4 := pf0_1 && !(industryCode(o1) > 0)
  pf1_4 := pf1_1 && !(industryCode(o1_2) > 0)
  pf2_4 := pf2_1 && !(industryCode(o1_3) > 0)
  var pt0_5: Bool
  var pt1_5: Bool
  var pt2_5: Bool
  var pf0_5: Bool
  var pf1_5: Bool
  var pf2_5: Bool
  pt0_5 := pt0_4 && industryCode(o1) > industryCode(o2)
  pt1_5 := pt1_4 && industryCode(o1_2) > industryCode(o2_2)
  pt2_5 := pt2_4 && industryCode(o1_3) > industryCode(o2_3)
  pf0_5 := pt0_4 && !(industryCode(o1) > industryCode(o2))
  pf1_5 := pt1_4 && !(industryCode(o1_2) > industryCode(o2_2))
  pf2_5 := pt2_4 && !(industryCode(o1_3) > industryCode(o2_3))
  assert (pt0_5 ==> !returned) && (pt1_5 ==> !returned_0) && (pt2_5 ==> !returned_1)
  if (pt0_5) {
    returned := true
  }
  if (pt1_5) {
    returned_0 := true
  }
  if (pt2_5) {
    returned_1 := true
  }
  if (pt0_5) {
    res := industryCode(o1) - industryCode(o2)
  }
  if (pt1_5) {
    res_2 := industryCode(o1_2) - industryCode(o2_2)
  }
  if (pt2_5) {
    res_3 := industryCode(o1_3) - industryCode(o2_3)
  }
  var pt0_6: Bool
  var pt1_6: Bool
  var pt2_6: Bool
  var pf0_6: Bool
  var pf1_6: Bool
  var pf2_6: Bool
  pt0_6 := pf0_5 && industryCode(o1) < industryCode(o2)
  pt1_6 := pf1_5 && industryCode(o1_2) < industryCode(o2_2)
  pt2_6 := pf2_5 && industryCode(o1_3) < industryCode(o2_3)
  pf0_6 := pf0_5 && !(industryCode(o1) < industryCode(o2))
  pf1_6 := pf1_5 && !(industryCode(o1_2) < industryCode(o2_2))
  pf2_6 := pf2_5 && !(industryCode(o1_3) < industryCode(o2_3))
  assert (pt0_6 ==> !returned) && (pt1_6 ==> !returned_0) && (pt2_6 ==> !returned_1)
  if (pt0_6) {
    returned := true
  }
  if (pt1_6) {
    returned_0 := true
  }
  if (pt2_6) {
    returned_1 := true
  }
  if (pt0_6) {
    res := industryCode(o2) - industryCode(o1)
  }
  if (pt1_6) {
    res_2 := industryCode(o2_2) - industryCode(o1_2)
  }
  if (pt2_6) {
    res_3 := industryCode(o2_3) - industryCode(o1_3)
  }
  assert (pf0_6 ==> !returned) && (pf1_6 ==> !returned_0) && (pf2_6 ==> !returned_1)
  if (pf0_6) {
    returned := true
  }
  if (pf1_6) {
    returned_0 := true
  }
  if (pf2_6) {
    returned_1 := true
  }
  if (pf0_6) {
    res := 0
  }
  if (pf1_6) {
    res_2 := 0
  }
  if (pf2_6) {
    res_3 := 0
  }
  var pt0_7: Bool
  var pt1_7: Bool
  var pt2_7: Bool
  var pf0_7: Bool
  var pf1_7: Bool
  var pf2_7: Bool
  pt0_7 := pf0_4 && sectorCode(o1) > 0
  pt1_7 := pf1_4 && sectorCode(o1_2) > 0
  pt2_7 := pf2_4 && sectorCode(o1_3) > 0
  pf0_7 := pf0_4 && !(sectorCode(o1) > 0)
  pf1_7 := pf1_4 && !(sectorCode(o1_2) > 0)
  pf2_7 := pf2_4 && !(sectorCode(o1_3) > 0)
  assert (pt0_7 ==> !returned) && (pt1_7 ==> !returned_0) && (pt2_7 ==> !returned_1)
  if (pt0_7) {
    returned := true
  }
  if (pt1_7) {
    returned_0 := true
  }
  if (pt2_7) {
    returned_1 := true
  }
  if (pt0_7) {
    res := -1
  }
  if (pt1_7) {
    res_2 := -1
  }
  if (pt2_7) {
    res_3 := -1
  }
  var pt0_8: Bool
  var pt1_8: Bool
  var pt2_8: Bool
  var pf0_8: Bool
  var pf1_8: Bool
  var pf2_8: Bool
  pt0_8 := pf0_7 && industryCode(o2) > 0
  pt1_8 := pf1_7 && industryCode(o2_2) > 0
  pt2_8 := pf2_7 && industryCode(o2_3) > 0
  pf0_8 := pf0_7 && !(industryCode(o2) > 0)
  pf1_8 := pf1_7 && !(industryCode(o2_2) > 0)
  pf2_8 := pf2_7 && !(industryCode(o2_3) > 0)
  assert (pt0_8 ==> !returned) && (pt1_8 ==> !returned_0) && (pt2_8 ==> !returned_1)
  if (pt0_8) {
    returned := true
  }
  if (pt1_8) {
    returned_0 := true
  }
  if (pt2_8) {
    returned_1 := true
  }
  if (pt0_8) {
    res := -1
  }
  if (pt1_8) {
    res_2 := -1
  }
  if (pt2_8) {
    res_3 := -1
  }
  assert (pf0_8 ==> !returned) && (pf1_8 ==> !returned_0) && (pf2_8 ==> !returned_1)
  if (pf0_8) {
    returned := true
  }
  if (pf1_8) {
    returned_0 := true
  }
  if (pf2_8) {
    returned_1 := true
  }
  if (pf0_8) {
    res := 0
  }
  if (pf1_8) {
    res_2 := 0
  }
  if (pf2_8) {
    res_3 := 0
  }
  assert (p0_0 ==> returned) && (p1_0 ==> returned_0) && (p2_0 ==> returned_1)
}

method Int_compare(p0: Bool, p1: Bool, p2: Bool, o1: Int, o1_0: Int, o1_1: Int, o2: Int, o2_0: Int, o2_1: Int) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
