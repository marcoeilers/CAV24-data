function getFileName(self: Ref): Ref 


function sectorCode(self: Ref): Int 


function industryCode(self: Ref): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_1: Bool, p1_1: Bool, p2_1: Bool, o1: Ref, o1_4: Ref, o1_5: Ref, o2: Ref, o2_4: Ref, o2_5: Ref) returns (res: Int, res_4: Int, res_5: Int)
  requires (p0_1 ==> true && p0_1 && p1_1 ==> o1 == o1_4) && (p1_1 ==> true && p0_1 && p1_1 ==> o1 == o1_4) && (p2_1 ==> true) && ((p0_1 ==> true && p0_1 && p2_1 ==> o2 == o1_5) && (p1_1 ==> true) && (p2_1 ==> true && p0_1 && p2_1 ==> o2 == o1_5) && ((p0_1 ==> true) && (p1_1 ==> true && p2_1 && p1_1 ==> o2_5 == o2_4) && (p2_1 ==> true && p2_1 && p1_1 ==> o2_5 == o2_4)))
  ensures (p0_1 ==> true && p0_1 && p1_1 && p2_1 ==> res == 0 ==> sgn(res_4) == sgn(res_5)) && (p1_1 ==> true && p0_1 && p1_1 && p2_1 ==> res == 0 ==> sgn(res_4) == sgn(res_5)) && (p2_1 ==> true && p0_1 && p1_1 && p2_1 ==> res == 0 ==> sgn(res_4) == sgn(res_5))
{
  var returned: Bool
  var restmp: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var restmp_0: Int
  var restmp_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_1) {
    _cond0 := false
  }
  if (p1_1) {
    _cond0_0 := false
  }
  if (p2_1) {
    _cond0_1 := false
  }
  if (p0_1) {
    returned := false
  }
  if (p1_1) {
    returned_0 := false
  }
  if (p2_1) {
    returned_1 := false
  }
  if (p0_1) {
    restmp := 0
  }
  if (p1_1) {
    restmp_0 := 0
  }
  if (p2_1) {
    restmp_1 := 0
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0_1 && (o1 != null && o2 != null)
  pt1 := p1_1 && (o1_4 != null && o2_4 != null)
  pt2 := p2_1 && (o1_5 != null && o2_5 != null)
  pf0 := p0_1 && !(o1 != null && o2 != null)
  pf1 := p1_1 && !(o1_4 != null && o2_4 != null)
  pf2 := p2_1 && !(o1_5 != null && o2_5 != null)
  var n1: Ref
  var n2: Ref
  var n1_0: Ref
  var n1_1: Ref
  var n2_0: Ref
  var n2_1: Ref
  if (pt0) {
    n1 := getFileName(o1)
  }
  if (pt1) {
    n1_0 := getFileName(o1_4)
  }
  if (pt2) {
    n1_1 := getFileName(o1_5)
  }
  if (pt0) {
    n2 := getFileName(o2)
  }
  if (pt1) {
    n2_0 := getFileName(o2_4)
  }
  if (pt2) {
    n2_1 := getFileName(o2_5)
  }
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pt0 && (n1 != null && n2 != null)
  pt1_0 := pt1 && (n1_0 != null && n2_0 != null)
  pt2_0 := pt2 && (n1_1 != null && n2_1 != null)
  pf0_0 := pt0 && !(n1 != null && n2 != null)
  pf1_0 := pt1 && !(n1_0 != null && n2_0 != null)
  pf2_0 := pt2 && !(n1_1 != null && n2_1 != null)
  var tmp0: Ref
  var tmp1: Ref
  var tmp2: Ref
  var tmp0_0: Ref
  var tmp1_0: Ref
  var tmp2_0: Ref
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (pt0_0) {
    tmp0 := n1
  }
  if (pt1_0) {
    tmp1 := n1_0
  }
  if (pt2_0) {
    tmp2 := n1_1
  }
  if (pt0_0) {
    tmp0_0 := n2
  }
  if (pt1_0) {
    tmp1_0 := n2_0
  }
  if (pt2_0) {
    tmp2_0 := n2_1
  }
  tmp0_1, tmp1_1, tmp2_1 := String_compare(pt0_0, pt1_0, pt2_0, tmp0, tmp1, tmp2, tmp0_0, tmp1_0, tmp2_0)
  if (pt0_0) {
    restmp := tmp0_1
  }
  if (pt1_0) {
    restmp_0 := tmp1_1
  }
  if (pt2_0) {
    restmp_1 := tmp2_1
  }
  assert (p0_1 ==> !returned) && (p1_1 ==> !returned_0) && (p2_1 ==> !returned_1)
  if (p0_1) {
    returned := true
  }
  if (p1_1) {
    returned_0 := true
  }
  if (p2_1) {
    returned_1 := true
  }
  if (p0_1) {
    res := restmp
  }
  if (p1_1) {
    res_4 := restmp_0
  }
  if (p2_1) {
    res_5 := restmp_1
  }
  assert (p0_1 ==> returned) && (p1_1 ==> returned_0) && (p2_1 ==> returned_1)
}

method FileItem_compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  ensures (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2 && o2 == o2_2 ==> res == res_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2 && o2 == o2_2 ==> res == res_2) && (p2_0 ==> true)
  ensures (p0_0 ==> true && p0_0 && p2_0 ==> o1 == o1_3 && o2 == o2_3 ==> res == res_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o1 == o1_3 && o2 == o2_3 ==> res == res_3)
  ensures (p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o1_3 == o1_2 && o2_3 == o2_2 ==> res_3 == res_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o1_3 == o1_2 && o2_3 == o2_2 ==> res_3 == res_2)
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> o1 == o1_2 && (o2 == o1_3 && (o2_3 == o2_2 && res == 0)) ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> o1 == o1_2 && (o2 == o1_3 && (o2_3 == o2_2 && res == 0)) ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> o1 == o1_2 && (o2 == o1_3 && (o2_3 == o2_2 && res == 0)) ==> sgn(res_2) == sgn(res_3))


method String_compare(p0: Bool, p1: Bool, p2: Bool, o1: Ref, o1_0: Ref, o1_1: Ref, o2: Ref, o2_0: Ref, o2_1: Ref) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
