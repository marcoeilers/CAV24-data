function indexOf(self: Ref, pos: Int): Int 


function charAt(self: Ref, i: Int): Int 


function countOccurrencesOf(self: Ref, i: Int): Int 


function lastIndexOf(self: Ref, i: Int): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0: Bool, p1: Bool, p2: Bool, o1: Ref, o1_0: Ref, o1_1: Ref, o2: Ref, o2_0: Ref, o2_1: Ref) returns (res: Int, res_0: Int, res_1: Int)
  requires (p0 ==> true && p0 && p1 ==> o1 == o1_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0) && (p2 ==> true) && ((p0 ==> true && p0 && p2 ==> o2 == o1_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o2 == o1_1) && ((p0 ==> true) && (p1 ==> true && p2 && p1 ==> o2_1 == o2_0) && (p2 ==> true && p2 && p1 ==> o2_1 == o2_0)))
  ensures (p0 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1))
{
  var returned: Bool
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p2) {
    _cond0_1 := false
  }
  if (p0) {
    returned := false
  }
  if (p1) {
    returned_0 := false
  }
  if (p2) {
    returned_1 := false
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0 && (indexOf(o1, 4) != -1 || indexOf(o2, 4) != -1)
  pt1 := p1 && (indexOf(o1_0, 4) != -1 || indexOf(o2_0, 4) != -1)
  pt2 := p2 && (indexOf(o1_1, 4) != -1 || indexOf(o2_1, 4) != -1)
  pf0 := p0 && !(indexOf(o1, 4) != -1 || indexOf(o2, 4) != -1)
  pf1 := p1 && !(indexOf(o1_0, 4) != -1 || indexOf(o2_0, 4) != -1)
  pf2 := p2 && !(indexOf(o1_1, 4) != -1 || indexOf(o2_1, 4) != -1)
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pt0 && indexOf(o1, 4) == indexOf(o2, 4)
  pt1_0 := pt1 && indexOf(o1_0, 4) == indexOf(o2_0, 4)
  pt2_0 := pt2 && indexOf(o1_1, 4) == indexOf(o2_1, 4)
  pf0_0 := pt0 && !(indexOf(o1, 4) == indexOf(o2, 4))
  pf1_0 := pt1 && !(indexOf(o1_0, 4) == indexOf(o2_0, 4))
  pf2_0 := pt2 && !(indexOf(o1_1, 4) == indexOf(o2_1, 4))
  var i1: Int
  var i1_0: Int
  var i1_1: Int
  if (pt0_0) {
    i1 := 0
  }
  if (pt1_0) {
    i1_0 := 0
  }
  if (pt2_0) {
    i1_1 := 0
  }
  var tmp0: Bool
  var tmp1: Bool
  var tmp2: Bool
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (!pt0_0) {
    tmp0 := returned
  }
  if (!pt1_0) {
    tmp1 := returned_0
  }
  if (!pt2_0) {
    tmp2 := returned_1
  }
  if (!pt0_0) {
    tmp0_0 := res
  }
  if (!pt1_0) {
    tmp1_0 := res_0
  }
  if (!pt2_0) {
    tmp2_0 := res_1
  }
  if (!pt0_0) {
    tmp0_1 := i1
  }
  if (!pt1_0) {
    tmp1_1 := i1_0
  }
  if (!pt2_0) {
    tmp2_1 := i1_1
  }
  while (pt0_0 && (i1 <= 12 && !returned) || pt1_0 && (i1_0 <= 12 && !returned_0) || pt2_0 && (i1_1 <= 12 && !returned_1))
    invariant (pt0_0 ==> i1 >= 0) && (pt1_0 ==> i1_0 >= 0) && (pt2_0 ==> i1_1 >= 0) && ((pt0_0 ==> i1 <= 13) && (pt1_0 ==> i1_0 <= 13) && (pt2_0 ==> i1_1 <= 13))
    invariant (forall j: Int :: { charAt(o1, j) } { charAt(o2, j) } { charAt(o1_0, j) } { charAt(o2_0, j) } { charAt(o1_1, j) } { charAt(o2_1, j) } (pt0_0 ==> j >= 0 && j < i1 ==> !(charAt(o1, j) != 0 && charAt(o1, j) != 4) && !(charAt(o2, j) != 0 && charAt(o2, j) != 4)) && (pt1_0 ==> j >= 0 && j < i1_0 ==> !(charAt(o1_0, j) != 0 && charAt(o1_0, j) != 4) && !(charAt(o2_0, j) != 0 && charAt(o2_0, j) != 4)) && (pt2_0 ==> j >= 0 && j < i1_1 ==> !(charAt(o1_1, j) != 0 && charAt(o1_1, j) != 4) && !(charAt(o2_1, j) != 0 && charAt(o2_1, j) != 4)))
    invariant (pt0_0 ==> returned && res > 0 ==> i1 <= 12 && (charAt(o2, i1) != 0 && charAt(o2, i1) != 4 && !(charAt(o1, i1) != 0 && charAt(o1, i1) != 4))) && (pt1_0 ==> returned_0 && res_0 > 0 ==> i1_0 <= 12 && (charAt(o2_0, i1_0) != 0 && charAt(o2_0, i1_0) != 4 && !(charAt(o1_0, i1_0) != 0 && charAt(o1_0, i1_0) != 4))) && (pt2_0 ==> returned_1 && res_1 > 0 ==> i1_1 <= 12 && (charAt(o2_1, i1_1) != 0 && charAt(o2_1, i1_1) != 4 && !(charAt(o1_1, i1_1) != 0 && charAt(o1_1, i1_1) != 4)))
    invariant (pt0_0 ==> returned && res < 0 ==> i1 <= 12 && (!(charAt(o2, i1) != 0 && charAt(o2, i1) != 4) && (charAt(o1, i1) != 0 && charAt(o1, i1) != 4))) && (pt1_0 ==> returned_0 && res_0 < 0 ==> i1_0 <= 12 && (!(charAt(o2_0, i1_0) != 0 && charAt(o2_0, i1_0) != 4) && (charAt(o1_0, i1_0) != 0 && charAt(o1_0, i1_0) != 4))) && (pt2_0 ==> returned_1 && res_1 < 0 ==> i1_1 <= 12 && (!(charAt(o2_1, i1_1) != 0 && charAt(o2_1, i1_1) != 4) && (charAt(o1_1, i1_1) != 0 && charAt(o1_1, i1_1) != 4)))
    invariant (pt0_0 ==> returned && res == 0 ==> i1 <= 12 && (charAt(o2, i1) != 0 && charAt(o2, i1) != 4 && (charAt(o1, i1) != 0 && charAt(o1, i1) != 4))) && (pt1_0 ==> returned_0 && res_0 == 0 ==> i1_0 <= 12 && (charAt(o2_0, i1_0) != 0 && charAt(o2_0, i1_0) != 4 && (charAt(o1_0, i1_0) != 0 && charAt(o1_0, i1_0) != 4))) && (pt2_0 ==> returned_1 && res_1 == 0 ==> i1_1 <= 12 && (charAt(o2_1, i1_1) != 0 && charAt(o2_1, i1_1) != 4 && (charAt(o1_1, i1_1) != 0 && charAt(o1_1, i1_1) != 4)))
    invariant !pt0_0 ==> tmp0_0 == res
    invariant !pt0_0 ==> tmp0_1 == i1
    invariant !pt0_0 ==> tmp0 == returned
    invariant !pt1_0 ==> tmp1_1 == i1_0
    invariant !pt1_0 ==> tmp1_0 == res_0
    invariant !pt1_0 ==> tmp1 == returned_0
    invariant !pt2_0 ==> tmp2_0 == res_1
    invariant !pt2_0 ==> tmp2_1 == i1_1
    invariant !pt2_0 ==> tmp2 == returned_1 
  {
    var p0_0: Bool
    var p1_0: Bool
    var p2_0: Bool
    p0_0 := pt0_0 && (i1 <= 12 && !returned)
    p1_0 := pt1_0 && (i1_0 <= 12 && !returned_0)
    p2_0 := pt2_0 && (i1_1 <= 12 && !returned_1)
    var pt0_1: Bool
    var pt1_1: Bool
    var pt2_1: Bool
    var pf0_1: Bool
    var pf1_1: Bool
    var pf2_1: Bool
    pt0_1 := p0_0 && (charAt(o1, i1) != 0 && (charAt(o1, i1) != 4 && (charAt(o2, i1) != 0 && charAt(o2, i1) != 4)))
    pt1_1 := p1_0 && (charAt(o1_0, i1_0) != 0 && (charAt(o1_0, i1_0) != 4 && (charAt(o2_0, i1_0) != 0 && charAt(o2_0, i1_0) != 4)))
    pt2_1 := p2_0 && (charAt(o1_1, i1_1) != 0 && (charAt(o1_1, i1_1) != 4 && (charAt(o2_1, i1_1) != 0 && charAt(o2_1, i1_1) != 4)))
    pf0_1 := p0_0 && !(charAt(o1, i1) != 0 && (charAt(o1, i1) != 4 && (charAt(o2, i1) != 0 && charAt(o2, i1) != 4)))
    pf1_1 := p1_0 && !(charAt(o1_0, i1_0) != 0 && (charAt(o1_0, i1_0) != 4 && (charAt(o2_0, i1_0) != 0 && charAt(o2_0, i1_0) != 4)))
    pf2_1 := p2_0 && !(charAt(o1_1, i1_1) != 0 && (charAt(o1_1, i1_1) != 4 && (charAt(o2_1, i1_1) != 0 && charAt(o2_1, i1_1) != 4)))
    assert (pt0_1 ==> !returned) && (pt1_1 ==> !returned_0) && (pt2_1 ==> !returned_1)
    if (pt0_1) {
      returned := true
    }
    if (pt1_1) {
      returned_0 := true
    }
    if (pt2_1) {
      returned_1 := true
    }
    if (pt0_1) {
      res := 0
    }
    if (pt1_1) {
      res_0 := 0
    }
    if (pt2_1) {
      res_1 := 0
    }
    var pt0_2: Bool
    var pt1_2: Bool
    var pt2_2: Bool
    var pf0_2: Bool
    var pf1_2: Bool
    var pf2_2: Bool
    pt0_2 := pf0_1 && (charAt(o1, i1) != 0 && charAt(o1, i1) != 4)
    pt1_2 := pf1_1 && (charAt(o1_0, i1_0) != 0 && charAt(o1_0, i1_0) != 4)
    pt2_2 := pf2_1 && (charAt(o1_1, i1_1) != 0 && charAt(o1_1, i1_1) != 4)
    pf0_2 := pf0_1 && !(charAt(o1, i1) != 0 && charAt(o1, i1) != 4)
    pf1_2 := pf1_1 && !(charAt(o1_0, i1_0) != 0 && charAt(o1_0, i1_0) != 4)
    pf2_2 := pf2_1 && !(charAt(o1_1, i1_1) != 0 && charAt(o1_1, i1_1) != 4)
    assert (pt0_2 ==> !returned) && (pt1_2 ==> !returned_0) && (pt2_2 ==> !returned_1)
    if (pt0_2) {
      returned := true
    }
    if (pt1_2) {
      returned_0 := true
    }
    if (pt2_2) {
      returned_1 := true
    }
    if (pt0_2) {
      res := -1
    }
    if (pt1_2) {
      res_0 := -1
    }
    if (pt2_2) {
      res_1 := -1
    }
    var pt0_3: Bool
    var pt1_3: Bool
    var pt2_3: Bool
    var pf0_3: Bool
    var pf1_3: Bool
    var pf2_3: Bool
    pt0_3 := pf0_2 && (charAt(o2, i1) != 0 && charAt(o2, i1) != 4)
    pt1_3 := pf1_2 && (charAt(o2_0, i1_0) != 0 && charAt(o2_0, i1_0) != 4)
    pt2_3 := pf2_2 && (charAt(o2_1, i1_1) != 0 && charAt(o2_1, i1_1) != 4)
    pf0_3 := pf0_2 && !(charAt(o2, i1) != 0 && charAt(o2, i1) != 4)
    pf1_3 := pf1_2 && !(charAt(o2_0, i1_0) != 0 && charAt(o2_0, i1_0) != 4)
    pf2_3 := pf2_2 && !(charAt(o2_1, i1_1) != 0 && charAt(o2_1, i1_1) != 4)
    assert (pt0_3 ==> !returned) && (pt1_3 ==> !returned_0) && (pt2_3 ==> !returned_1)
    if (pt0_3) {
      returned := true
    }
    if (pt1_3) {
      returned_0 := true
    }
    if (pt2_3) {
      returned_1 := true
    }
    if (pt0_3) {
      res := 1
    }
    if (pt1_3) {
      res_0 := 1
    }
    if (pt2_3) {
      res_1 := 1
    }
    if (pf0_3) {
      i1 := i1 + 1
    }
    if (pf1_3) {
      i1_0 := i1_0 + 1
    }
    if (pf2_3) {
      i1_1 := i1_1 + 1
    }
  }
  var pt0_4: Bool
  var pt1_4: Bool
  var pt2_4: Bool
  var pf0_4: Bool
  var pf1_4: Bool
  var pf2_4: Bool
  pt0_4 := pt0 && !returned
  pt1_4 := pt1 && !returned_0
  pt2_4 := pt2 && !returned_1
  pf0_4 := pt0 && !!returned
  pf1_4 := pt1 && !!returned_0
  pf2_4 := pt2 && !!returned_1
  assert (pt0_4 ==> !returned) && (pt1_4 ==> !returned_0) && (pt2_4 ==> !returned_1)
  if (pt0_4) {
    returned := true
  }
  if (pt1_4) {
    returned_0 := true
  }
  if (pt2_4) {
    returned_1 := true
  }
  if (pt0_4) {
    res := indexOf(o1, 4) - indexOf(o2, 4)
  }
  if (pt1_4) {
    res_0 := indexOf(o1_0, 4) - indexOf(o2_0, 4)
  }
  if (pt2_4) {
    res_1 := indexOf(o1_1, 4) - indexOf(o2_1, 4)
  }
  var tripleCount1: Int
  var tripleCount2: Int
  var tripleCount1_0: Int
  var tripleCount1_1: Int
  var tripleCount2_0: Int
  var tripleCount2_1: Int
  if (pf0) {
    tripleCount1 := countOccurrencesOf(o1, 3)
  }
  if (pf1) {
    tripleCount1_0 := countOccurrencesOf(o1_0, 3)
  }
  if (pf2) {
    tripleCount1_1 := countOccurrencesOf(o1_1, 3)
  }
  if (pf0) {
    tripleCount2 := countOccurrencesOf(o2, 3)
  }
  if (pf1) {
    tripleCount2_0 := countOccurrencesOf(o2_0, 3)
  }
  if (pf2) {
    tripleCount2_1 := countOccurrencesOf(o2_1, 3)
  }
  var pt0_5: Bool
  var pt1_5: Bool
  var pt2_5: Bool
  var pf0_5: Bool
  var pf1_5: Bool
  var pf2_5: Bool
  pt0_5 := pf0 && (tripleCount1 > 1 || (tripleCount1 == 1 && indexOf(o1, 2) != -1 || (tripleCount2 > 1 || tripleCount2 == 1 && indexOf(o2, 2) != -1)))
  pt1_5 := pf1 && (tripleCount1_0 > 1 || (tripleCount1_0 == 1 && indexOf(o1_0, 2) != -1 || (tripleCount2_0 > 1 || tripleCount2_0 == 1 && indexOf(o2_0, 2) != -1)))
  pt2_5 := pf2 && (tripleCount1_1 > 1 || (tripleCount1_1 == 1 && indexOf(o1_1, 2) != -1 || (tripleCount2_1 > 1 || tripleCount2_1 == 1 && indexOf(o2_1, 2) != -1)))
  pf0_5 := pf0 && !(tripleCount1 > 1 || (tripleCount1 == 1 && indexOf(o1, 2) != -1 || (tripleCount2 > 1 || tripleCount2 == 1 && indexOf(o2, 2) != -1)))
  pf1_5 := pf1 && !(tripleCount1_0 > 1 || (tripleCount1_0 == 1 && indexOf(o1_0, 2) != -1 || (tripleCount2_0 > 1 || tripleCount2_0 == 1 && indexOf(o2_0, 2) != -1)))
  pf2_5 := pf2 && !(tripleCount1_1 > 1 || (tripleCount1_1 == 1 && indexOf(o1_1, 2) != -1 || (tripleCount2_1 > 1 || tripleCount2_1 == 1 && indexOf(o2_1, 2) != -1)))
  var higherTriple: Int
  var higherTriple_0: Int
  var higherTriple_1: Int
  if (pt0_5) {
    higherTriple := lastIndexOf(o1, 3)
  }
  if (pt1_5) {
    higherTriple_0 := lastIndexOf(o1_0, 3)
  }
  if (pt2_5) {
    higherTriple_1 := lastIndexOf(o1_1, 3)
  }
  var pt0_6: Bool
  var pt1_6: Bool
  var pt2_6: Bool
  var pf0_6: Bool
  var pf1_6: Bool
  var pf2_6: Bool
  pt0_6 := pt0_5 && higherTriple == lastIndexOf(o2, 3)
  pt1_6 := pt1_5 && higherTriple_0 == lastIndexOf(o2_0, 3)
  pt2_6 := pt2_5 && higherTriple_1 == lastIndexOf(o2_1, 3)
  pf0_6 := pt0_5 && !(higherTriple == lastIndexOf(o2, 3))
  pf1_6 := pt1_5 && !(higherTriple_0 == lastIndexOf(o2_0, 3))
  pf2_6 := pt2_5 && !(higherTriple_1 == lastIndexOf(o2_1, 3))
  var i2: Int
  var i2_0: Int
  var i2_1: Int
  if (pt0_6) {
    i2 := 0
  }
  if (pt1_6) {
    i2_0 := 0
  }
  if (pt2_6) {
    i2_1 := 0
  }
  var tmp0_2: Bool
  var tmp1_2: Bool
  var tmp2_2: Bool
  var tmp0_3: Int
  var tmp1_3: Int
  var tmp2_3: Int
  var tmp0_4: Int
  var tmp1_4: Int
  var tmp2_4: Int
  if (!pt0_6) {
    tmp0_2 := returned
  }
  if (!pt1_6) {
    tmp1_2 := returned_0
  }
  if (!pt2_6) {
    tmp2_2 := returned_1
  }
  if (!pt0_6) {
    tmp0_3 := res
  }
  if (!pt1_6) {
    tmp1_3 := res_0
  }
  if (!pt2_6) {
    tmp2_3 := res_1
  }
  if (!pt0_6) {
    tmp0_4 := i2
  }
  if (!pt1_6) {
    tmp1_4 := i2_0
  }
  if (!pt2_6) {
    tmp2_4 := i2_1
  }
  while (pt0_6 && (i2 <= 12 && !returned) || pt1_6 && (i2_0 <= 12 && !returned_0) || pt2_6 && (i2_1 <= 12 && !returned_1))
    invariant (pt0_6 ==> i2 >= 0) && (pt1_6 ==> i2_0 >= 0) && (pt2_6 ==> i2_1 >= 0) && ((pt0_6 ==> i2 <= 13) && (pt1_6 ==> i2_0 <= 13) && (pt2_6 ==> i2_1 <= 13))
    invariant (forall j: Int :: { charAt(o2, j) } { charAt(o1, j) } { charAt(o2_0, j) } { charAt(o1_0, j) } { charAt(o2_1, j) } { charAt(o1_1, j) } (pt0_6 ==> j >= 0 && j < i2 ==> !(j != higherTriple && (charAt(o2, j) == 2 || charAt(o2, j) == 3)) && !(j != higherTriple && (charAt(o1, j) == 2 || charAt(o1, j) == 3))) && (pt1_6 ==> j >= 0 && j < i2_0 ==> !(j != higherTriple_0 && (charAt(o2_0, j) == 2 || charAt(o2_0, j) == 3)) && !(j != higherTriple_0 && (charAt(o1_0, j) == 2 || charAt(o1_0, j) == 3))) && (pt2_6 ==> j >= 0 && j < i2_1 ==> !(j != higherTriple_1 && (charAt(o2_1, j) == 2 || charAt(o2_1, j) == 3)) && !(j != higherTriple_1 && (charAt(o1_1, j) == 2 || charAt(o1_1, j) == 3))))
    invariant (pt0_6 ==> returned && res > 0 ==> i2 <= 12 && (i2 != higherTriple && (charAt(o2, i2) == 2 || charAt(o2, i2) == 3) && !(i2 != higherTriple && (charAt(o1, i2) == 2 || charAt(o1, i2) == 3)))) && (pt1_6 ==> returned_0 && res_0 > 0 ==> i2_0 <= 12 && (i2_0 != higherTriple_0 && (charAt(o2_0, i2_0) == 2 || charAt(o2_0, i2_0) == 3) && !(i2_0 != higherTriple_0 && (charAt(o1_0, i2_0) == 2 || charAt(o1_0, i2_0) == 3)))) && (pt2_6 ==> returned_1 && res_1 > 0 ==> i2_1 <= 12 && (i2_1 != higherTriple_1 && (charAt(o2_1, i2_1) == 2 || charAt(o2_1, i2_1) == 3) && !(i2_1 != higherTriple_1 && (charAt(o1_1, i2_1) == 2 || charAt(o1_1, i2_1) == 3))))
    invariant (pt0_6 ==> returned && res < 0 ==> i2 <= 12 && (!(i2 != higherTriple && (charAt(o2, i2) == 2 || charAt(o2, i2) == 3)) && (i2 != higherTriple && (charAt(o1, i2) == 2 || charAt(o1, i2) == 3)))) && (pt1_6 ==> returned_0 && res_0 < 0 ==> i2_0 <= 12 && (!(i2_0 != higherTriple_0 && (charAt(o2_0, i2_0) == 2 || charAt(o2_0, i2_0) == 3)) && (i2_0 != higherTriple_0 && (charAt(o1_0, i2_0) == 2 || charAt(o1_0, i2_0) == 3)))) && (pt2_6 ==> returned_1 && res_1 < 0 ==> i2_1 <= 12 && (!(i2_1 != higherTriple_1 && (charAt(o2_1, i2_1) == 2 || charAt(o2_1, i2_1) == 3)) && (i2_1 != higherTriple_1 && (charAt(o1_1, i2_1) == 2 || charAt(o1_1, i2_1) == 3))))
    invariant (pt0_6 ==> returned && res == 0 ==> i2 <= 12 && (i2 != higherTriple && (charAt(o2, i2) == 2 || charAt(o2, i2) == 3) && (i2 != higherTriple && (charAt(o1, i2) == 2 || charAt(o1, i2) == 3)))) && (pt1_6 ==> returned_0 && res_0 == 0 ==> i2_0 <= 12 && (i2_0 != higherTriple_0 && (charAt(o2_0, i2_0) == 2 || charAt(o2_0, i2_0) == 3) && (i2_0 != higherTriple_0 && (charAt(o1_0, i2_0) == 2 || charAt(o1_0, i2_0) == 3)))) && (pt2_6 ==> returned_1 && res_1 == 0 ==> i2_1 <= 12 && (i2_1 != higherTriple_1 && (charAt(o2_1, i2_1) == 2 || charAt(o2_1, i2_1) == 3) && (i2_1 != higherTriple_1 && (charAt(o1_1, i2_1) == 2 || charAt(o1_1, i2_1) == 3))))
    invariant !pt0_6 ==> tmp0_3 == res
    invariant !pt0_6 ==> tmp0_4 == i2
    invariant !pt0_6 ==> tmp0_2 == returned
    invariant !pt1_6 ==> tmp1_4 == i2_0
    invariant !pt1_6 ==> tmp1_2 == returned_0
    invariant !pt1_6 ==> tmp1_3 == res_0
    invariant !pt2_6 ==> tmp2_3 == res_1
    invariant !pt2_6 ==> tmp2_4 == i2_1
    invariant !pt2_6 ==> tmp2_2 == returned_1 
  {
    var p0_1: Bool
    var p1_1: Bool
    var p2_1: Bool
    p0_1 := pt0_6 && (i2 <= 12 && !returned)
    p1_1 := pt1_6 && (i2_0 <= 12 && !returned_0)
    p2_1 := pt2_6 && (i2_1 <= 12 && !returned_1)
    var pt0_7: Bool
    var pt1_7: Bool
    var pt2_7: Bool
    var pf0_7: Bool
    var pf1_7: Bool
    var pf2_7: Bool
    pt0_7 := p0_1 && (i2 != higherTriple && ((charAt(o1, i2) == 2 || charAt(o1, i2) == 3) && (charAt(o2, i2) == 2 || charAt(o2, i2) == 3)))
    pt1_7 := p1_1 && (i2_0 != higherTriple_0 && ((charAt(o1_0, i2_0) == 2 || charAt(o1_0, i2_0) == 3) && (charAt(o2_0, i2_0) == 2 || charAt(o2_0, i2_0) == 3)))
    pt2_7 := p2_1 && (i2_1 != higherTriple_1 && ((charAt(o1_1, i2_1) == 2 || charAt(o1_1, i2_1) == 3) && (charAt(o2_1, i2_1) == 2 || charAt(o2_1, i2_1) == 3)))
    pf0_7 := p0_1 && !(i2 != higherTriple && ((charAt(o1, i2) == 2 || charAt(o1, i2) == 3) && (charAt(o2, i2) == 2 || charAt(o2, i2) == 3)))
    pf1_7 := p1_1 && !(i2_0 != higherTriple_0 && ((charAt(o1_0, i2_0) == 2 || charAt(o1_0, i2_0) == 3) && (charAt(o2_0, i2_0) == 2 || charAt(o2_0, i2_0) == 3)))
    pf2_7 := p2_1 && !(i2_1 != higherTriple_1 && ((charAt(o1_1, i2_1) == 2 || charAt(o1_1, i2_1) == 3) && (charAt(o2_1, i2_1) == 2 || charAt(o2_1, i2_1) == 3)))
    assert (pt0_7 ==> !returned) && (pt1_7 ==> !returned_0) && (pt2_7 ==> !returned_1)
    if (pt0_7) {
      returned := true
    }
    if (pt1_7) {
      returned_0 := true
    }
    if (pt2_7) {
      returned_1 := true
    }
    if (pt0_7) {
      res := 0
    }
    if (pt1_7) {
      res_0 := 0
    }
    if (pt2_7) {
      res_1 := 0
    }
    var pt0_8: Bool
    var pt1_8: Bool
    var pt2_8: Bool
    var pf0_8: Bool
    var pf1_8: Bool
    var pf2_8: Bool
    pt0_8 := pf0_7 && (i2 != higherTriple && (charAt(o1, i2) == 2 || charAt(o1, i2) == 3))
    pt1_8 := pf1_7 && (i2_0 != higherTriple_0 && (charAt(o1_0, i2_0) == 2 || charAt(o1_0, i2_0) == 3))
    pt2_8 := pf2_7 && (i2_1 != higherTriple_1 && (charAt(o1_1, i2_1) == 2 || charAt(o1_1, i2_1) == 3))
    pf0_8 := pf0_7 && !(i2 != higherTriple && (charAt(o1, i2) == 2 || charAt(o1, i2) == 3))
    pf1_8 := pf1_7 && !(i2_0 != higherTriple_0 && (charAt(o1_0, i2_0) == 2 || charAt(o1_0, i2_0) == 3))
    pf2_8 := pf2_7 && !(i2_1 != higherTriple_1 && (charAt(o1_1, i2_1) == 2 || charAt(o1_1, i2_1) == 3))
    assert (pt0_8 ==> !returned) && (pt1_8 ==> !returned_0) && (pt2_8 ==> !returned_1)
    if (pt0_8) {
      returned := true
    }
    if (pt1_8) {
      returned_0 := true
    }
    if (pt2_8) {
      returned_1 := true
    }
    if (pt0_8) {
      res := -1
    }
    if (pt1_8) {
      res_0 := -1
    }
    if (pt2_8) {
      res_1 := -1
    }
    var pt0_9: Bool
    var pt1_9: Bool
    var pt2_9: Bool
    var pf0_9: Bool
    var pf1_9: Bool
    var pf2_9: Bool
    pt0_9 := pf0_8 && (i2 != higherTriple && (charAt(o2, i2) == 2 || charAt(o2, i2) == 3))
    pt1_9 := pf1_8 && (i2_0 != higherTriple_0 && (charAt(o2_0, i2_0) == 2 || charAt(o2_0, i2_0) == 3))
    pt2_9 := pf2_8 && (i2_1 != higherTriple_1 && (charAt(o2_1, i2_1) == 2 || charAt(o2_1, i2_1) == 3))
    pf0_9 := pf0_8 && !(i2 != higherTriple && (charAt(o2, i2) == 2 || charAt(o2, i2) == 3))
    pf1_9 := pf1_8 && !(i2_0 != higherTriple_0 && (charAt(o2_0, i2_0) == 2 || charAt(o2_0, i2_0) == 3))
    pf2_9 := pf2_8 && !(i2_1 != higherTriple_1 && (charAt(o2_1, i2_1) == 2 || charAt(o2_1, i2_1) == 3))
    assert (pt0_9 ==> !returned) && (pt1_9 ==> !returned_0) && (pt2_9 ==> !returned_1)
    if (pt0_9) {
      returned := true
    }
    if (pt1_9) {
      returned_0 := true
    }
    if (pt2_9) {
      returned_1 := true
    }
    if (pt0_9) {
      res := 1
    }
    if (pt1_9) {
      res_0 := 1
    }
    if (pt2_9) {
      res_1 := 1
    }
    if (pf0_9) {
      i2 := i2 + 1
    }
    if (pf1_9) {
      i2_0 := i2_0 + 1
    }
    if (pf2_9) {
      i2_1 := i2_1 + 1
    }
  }
  var pt0_10: Bool
  var pt1_10: Bool
  var pt2_10: Bool
  var pf0_10: Bool
  var pf1_10: Bool
  var pf2_10: Bool
  pt0_10 := pt0_5 && !returned
  pt1_10 := pt1_5 && !returned_0
  pt2_10 := pt2_5 && !returned_1
  pf0_10 := pt0_5 && !!returned
  pf1_10 := pt1_5 && !!returned_0
  pf2_10 := pt2_5 && !!returned_1
  assert (pt0_10 ==> !returned) && (pt1_10 ==> !returned_0) && (pt2_10 ==> !returned_1)
  if (pt0_10) {
    returned := true
  }
  if (pt1_10) {
    returned_0 := true
  }
  if (pt2_10) {
    returned_1 := true
  }
  if (pt0_10) {
    res := higherTriple - lastIndexOf(o2, 3)
  }
  if (pt1_10) {
    res_0 := higherTriple_0 - lastIndexOf(o2_0, 3)
  }
  if (pt2_10) {
    res_1 := higherTriple_1 - lastIndexOf(o2_1, 3)
  }
  var pt0_11: Bool
  var pt1_11: Bool
  var pt2_11: Bool
  var pf0_11: Bool
  var pf1_11: Bool
  var pf2_11: Bool
  pt0_11 := pf0 && !returned
  pt1_11 := pf1 && !returned_0
  pt2_11 := pf2 && !returned_1
  pf0_11 := pf0 && !!returned
  pf1_11 := pf1 && !!returned_0
  pf2_11 := pf2 && !!returned_1
  assert (pt0_11 ==> !returned) && (pt1_11 ==> !returned_0) && (pt2_11 ==> !returned_1)
  if (pt0_11) {
    returned := true
  }
  if (pt1_11) {
    returned_0 := true
  }
  if (pt2_11) {
    returned_1 := true
  }
  if (pt0_11) {
    res := 0
  }
  if (pt1_11) {
    res_0 := 0
  }
  if (pt2_11) {
    res_1 := 0
  }
  assert (p0 ==> returned) && (p1 ==> returned_0) && (p2 ==> returned_1)
}