function getID(self: Ref): Int 


function containsKey(self: Ref, id: Int): Bool 


function get(self: Ref, id: Int): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0: Bool, p1: Bool, p2: Bool, o1: Ref, o1_0: Ref, o1_1: Ref, o2: Ref, o2_0: Ref, o2_1: Ref) returns (res: Int, res_0: Int, res_1: Int)
  requires (p0 ==> true && p0 && p1 ==> o1 == o1_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0) && (p2 ==> true) && ((p0 ==> true && p0 && p2 ==> o2 == o1_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o2 == o1_1) && ((p0 ==> true) && (p1 ==> true && p2 && p1 ==> o2_1 == o2_0) && (p2 ==> true && p2 && p1 ==> o2_1 == o2_0)))
  ensures (p0 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1))
{
  var returned: Bool
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p2) {
    _cond0_1 := false
  }
  if (p0) {
    returned := false
  }
  if (p1) {
    returned_0 := false
  }
  if (p2) {
    returned_1 := false
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0 && (containsKey(o1, getID(o1)) && containsKey(o2, getID(o2)))
  pt1 := p1 && (containsKey(o1_0, getID(o1_0)) && containsKey(o2_0, getID(o2_0)))
  pt2 := p2 && (containsKey(o1_1, getID(o1_1)) && containsKey(o2_1, getID(o2_1)))
  pf0 := p0 && !(containsKey(o1, getID(o1)) && containsKey(o2, getID(o2)))
  pf1 := p1 && !(containsKey(o1_0, getID(o1_0)) && containsKey(o2_0, getID(o2_0)))
  pf2 := p2 && !(containsKey(o1_1, getID(o1_1)) && containsKey(o2_1, getID(o2_1)))
  var order1: Int
  var order2: Int
  var order1_0: Int
  var order1_1: Int
  var order2_0: Int
  var order2_1: Int
  if (pt0) {
    order1 := get(o1, getID(o1))
  }
  if (pt1) {
    order1_0 := get(o1_0, getID(o1_0))
  }
  if (pt2) {
    order1_1 := get(o1_1, getID(o1_1))
  }
  if (pt0) {
    order2 := get(o2, getID(o2))
  }
  if (pt1) {
    order2_0 := get(o2_0, getID(o2_0))
  }
  if (pt2) {
    order2_1 := get(o2_1, getID(o2_1))
  }
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pt0 && order1 < order2
  pt1_0 := pt1 && order1_0 < order2_0
  pt2_0 := pt2 && order1_1 < order2_1
  pf0_0 := pt0 && !(order1 < order2)
  pf1_0 := pt1 && !(order1_0 < order2_0)
  pf2_0 := pt2 && !(order1_1 < order2_1)
  assert (pt0_0 ==> !returned) && (pt1_0 ==> !returned_0) && (pt2_0 ==> !returned_1)
  if (pt0_0) {
    returned := true
  }
  if (pt1_0) {
    returned_0 := true
  }
  if (pt2_0) {
    returned_1 := true
  }
  if (pt0_0) {
    res := -1
  }
  if (pt1_0) {
    res_0 := -1
  }
  if (pt2_0) {
    res_1 := -1
  }
  var pt0_1: Bool
  var pt1_1: Bool
  var pt2_1: Bool
  var pf0_1: Bool
  var pf1_1: Bool
  var pf2_1: Bool
  pt0_1 := pf0_0 && order1 > order2
  pt1_1 := pf1_0 && order1_0 > order2_0
  pt2_1 := pf2_0 && order1_1 > order2_1
  pf0_1 := pf0_0 && !(order1 > order2)
  pf1_1 := pf1_0 && !(order1_0 > order2_0)
  pf2_1 := pf2_0 && !(order1_1 > order2_1)
  assert (pt0_1 ==> !returned) && (pt1_1 ==> !returned_0) && (pt2_1 ==> !returned_1)
  if (pt0_1) {
    returned := true
  }
  if (pt1_1) {
    returned_0 := true
  }
  if (pt2_1) {
    returned_1 := true
  }
  if (pt0_1) {
    res := 1
  }
  if (pt1_1) {
    res_0 := 1
  }
  if (pt2_1) {
    res_1 := 1
  }
  assert (pf0_1 ==> !returned) && (pf1_1 ==> !returned_0) && (pf2_1 ==> !returned_1)
  if (pf0_1) {
    returned := true
  }
  if (pf1_1) {
    returned_0 := true
  }
  if (pf2_1) {
    returned_1 := true
  }
  if (pf0_1) {
    res := 0
  }
  if (pf1_1) {
    res_0 := 0
  }
  if (pf2_1) {
    res_1 := 0
  }
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := p0 && !returned
  pt1_2 := p1 && !returned_0
  pt2_2 := p2 && !returned_1
  pf0_2 := p0 && !!returned
  pf1_2 := p1 && !!returned_0
  pf2_2 := p2 && !!returned_1
  assert (pt0_2 ==> !returned) && (pt1_2 ==> !returned_0) && (pt2_2 ==> !returned_1)
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  if (pt0_2) {
    res := get(o1, getID(o1)) - get(o2, getID(o2))
  }
  if (pt1_2) {
    res_0 := get(o1_0, getID(o1_0)) - get(o2_0, getID(o2_0))
  }
  if (pt2_2) {
    res_1 := get(o1_1, getID(o1_1)) - get(o2_1, getID(o2_1))
  }
  assert (p0 ==> returned) && (p1 ==> returned_0) && (p2 ==> returned_1)
}