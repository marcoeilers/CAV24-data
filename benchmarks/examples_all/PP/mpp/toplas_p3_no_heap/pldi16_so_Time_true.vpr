function ora(self: Ref): Int 


function volume_totale(self: Ref): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  requires (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p2_0 ==> true) && ((p0_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && ((p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2)))
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3))
{
  var returned: Bool
  var time1: Int
  var time2: Int
  var cmp: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var time1_0: Int
  var time1_1: Int
  var time2_0: Int
  var time2_1: Int
  var cmp_0: Int
  var cmp_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_0) {
    _cond0 := false
  }
  if (p1_0) {
    _cond0_0 := false
  }
  if (p2_0) {
    _cond0_1 := false
  }
  if (p0_0) {
    returned := false
  }
  if (p1_0) {
    returned_0 := false
  }
  if (p2_0) {
    returned_1 := false
  }
  if (p0_0) {
    time1 := ora(o1)
  }
  if (p1_0) {
    time1_0 := ora(o1_2)
  }
  if (p2_0) {
    time1_1 := ora(o1_3)
  }
  if (p0_0) {
    time2 := ora(o2)
  }
  if (p1_0) {
    time2_0 := ora(o2_2)
  }
  if (p2_0) {
    time2_1 := ora(o2_3)
  }
  var tmp0: Int
  var tmp1: Int
  var tmp2: Int
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (p0_0) {
    tmp0 := time1
  }
  if (p1_0) {
    tmp1 := time1_0
  }
  if (p2_0) {
    tmp2 := time1_1
  }
  if (p0_0) {
    tmp0_0 := time2
  }
  if (p1_0) {
    tmp1_0 := time2_0
  }
  if (p2_0) {
    tmp2_0 := time2_1
  }
  tmp0_1, tmp1_1, tmp2_1 := Int_compare(p0_0, p1_0, p2_0, tmp0, tmp1, tmp2, tmp0_0, tmp1_0, tmp2_0)
  if (p0_0) {
    cmp := tmp0_1
  }
  if (p1_0) {
    cmp_0 := tmp1_1
  }
  if (p2_0) {
    cmp_1 := tmp2_1
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0_0 && cmp == 0
  pt1 := p1_0 && cmp_0 == 0
  pt2 := p2_0 && cmp_1 == 0
  pf0 := p0_0 && !(cmp == 0)
  pf1 := p1_0 && !(cmp_0 == 0)
  pf2 := p2_0 && !(cmp_1 == 0)
  var tmp0_2: Int
  var tmp1_2: Int
  var tmp2_2: Int
  var tmp0_3: Int
  var tmp1_3: Int
  var tmp2_3: Int
  var tmp0_4: Int
  var tmp1_4: Int
  var tmp2_4: Int
  if (pt0) {
    tmp0_2 := volume_totale(o1)
  }
  if (pt1) {
    tmp1_2 := volume_totale(o1_2)
  }
  if (pt2) {
    tmp2_2 := volume_totale(o1_3)
  }
  if (pt0) {
    tmp0_3 := volume_totale(o2)
  }
  if (pt1) {
    tmp1_3 := volume_totale(o2_2)
  }
  if (pt2) {
    tmp2_3 := volume_totale(o2_3)
  }
  tmp0_4, tmp1_4, tmp2_4 := Int_compare(pt0, pt1, pt2, tmp0_2, tmp1_2, tmp2_2, tmp0_3, tmp1_3, tmp2_3)
  if (pt0) {
    cmp := tmp0_4
  }
  if (pt1) {
    cmp_0 := tmp1_4
  }
  if (pt2) {
    cmp_1 := tmp2_4
  }
  assert (p0_0 ==> !returned) && (p1_0 ==> !returned_0) && (p2_0 ==> !returned_1)
  if (p0_0) {
    returned := true
  }
  if (p1_0) {
    returned_0 := true
  }
  if (p2_0) {
    returned_1 := true
  }
  if (p0_0) {
    res := cmp
  }
  if (p1_0) {
    res_2 := cmp_0
  }
  if (p2_0) {
    res_3 := cmp_1
  }
  assert (p0_0 ==> returned) && (p1_0 ==> returned_0) && (p2_0 ==> returned_1)
}

method Int_compare(p0: Bool, p1: Bool, p2: Bool, o1: Int, o1_0: Int, o1_1: Int, o2: Int, o2_0: Int, o2_1: Int) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
