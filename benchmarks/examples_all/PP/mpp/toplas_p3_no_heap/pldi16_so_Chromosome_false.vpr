function getScore(self: Ref, num: Int): Int 


function isNull(self: Ref): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0: Bool, p1: Bool, p2: Bool, o1: Ref, o1_0: Ref, o1_1: Ref, o2: Ref, o2_0: Ref, o2_1: Ref) returns (res: Int, res_0: Int, res_1: Int)
  requires (p0 ==> isNull(o1) != 0) && (p1 ==> isNull(o1_0) != 0) && (p2 ==> isNull(o1_1) != 0)
  requires (p0 ==> true && p0 && p1 ==> o1 == o1_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0) && (p2 ==> true) && ((p0 ==> true && p0 && p2 ==> o2 == o1_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o2 == o1_1) && ((p0 ==> true) && (p1 ==> true && p2 && p1 ==> o2_1 == o2_0) && (p2 ==> true && p2 && p1 ==> o2_1 == o2_0)))
  ensures (p0 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1))
{
  var returned: Bool
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p2) {
    _cond0_1 := false
  }
  if (p0) {
    returned := false
  }
  if (p1) {
    returned_0 := false
  }
  if (p2) {
    returned_1 := false
  }
  if (p0) {
    res := 0
  }
  if (p1) {
    res_0 := 0
  }
  if (p2) {
    res_1 := 0
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0 && isNull(o2) == 0
  pt1 := p1 && isNull(o2_0) == 0
  pt2 := p2 && isNull(o2_1) == 0
  pf0 := p0 && !(isNull(o2) == 0)
  pf1 := p1 && !(isNull(o2_0) == 0)
  pf2 := p2 && !(isNull(o2_1) == 0)
  if (pt0) {
    returned := true
  }
  if (pt1) {
    returned_0 := true
  }
  if (pt2) {
    returned_1 := true
  }
  if (pt0) {
    res := 1
  }
  if (pt1) {
    res_0 := 1
  }
  if (pt2) {
    res_1 := 1
  }
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := p0 && !returned
  pt1_0 := p1 && !returned_0
  pt2_0 := p2 && !returned_1
  pf0_0 := p0 && !!returned
  pf1_0 := p1 && !!returned_0
  pf2_0 := p2 && !!returned_1
  var comp: Int
  var comp_0: Int
  var comp_1: Int
  if (pt0_0) {
    comp := 0
  }
  if (pt1_0) {
    comp_0 := 0
  }
  if (pt2_0) {
    comp_1 := 0
  }
  if (pt0_0) {
    comp := comp + (getScore(o1, 1) == getScore(o2, 1) ? 0 : (getScore(o1, 1) > getScore(o2, 1) ? 1 : -1))
  }
  if (pt1_0) {
    comp_0 := comp_0 + (getScore(o1_0, 1) == getScore(o2_0, 1) ? 0 : (getScore(o1_0, 1) > getScore(o2_0, 1) ? 1 : -1))
  }
  if (pt2_0) {
    comp_1 := comp_1 + (getScore(o1_1, 1) == getScore(o2_1, 1) ? 0 : (getScore(o1_1, 1) > getScore(o2_1, 1) ? 1 : -1))
  }
  if (pt0_0) {
    comp := comp + (getScore(o1, 2) == getScore(o2, 2) ? 0 : (getScore(o1, 2) > getScore(o2, 2) ? 1 : -1))
  }
  if (pt1_0) {
    comp_0 := comp_0 + (getScore(o1_0, 2) == getScore(o2_0, 2) ? 0 : (getScore(o1_0, 2) > getScore(o2_0, 2) ? 1 : -1))
  }
  if (pt2_0) {
    comp_1 := comp_1 + (getScore(o1_1, 2) == getScore(o2_1, 2) ? 0 : (getScore(o1_1, 2) > getScore(o2_1, 2) ? 1 : -1))
  }
  if (pt0_0) {
    comp := comp + (getScore(o1, 3) == getScore(o2, 3) ? 0 : (getScore(o1, 3) > getScore(o2, 3) ? 1 : -1))
  }
  if (pt1_0) {
    comp_0 := comp_0 + (getScore(o1_0, 3) == getScore(o2_0, 3) ? 0 : (getScore(o1_0, 3) > getScore(o2_0, 3) ? 1 : -1))
  }
  if (pt2_0) {
    comp_1 := comp_1 + (getScore(o1_1, 3) == getScore(o2_1, 3) ? 0 : (getScore(o1_1, 3) > getScore(o2_1, 3) ? 1 : -1))
  }
  if (pt0_0) {
    comp := comp + (getScore(o1, 5) == getScore(o2, 5) ? 0 : (getScore(o1, 5) > getScore(o2, 5) ? 1 : -1))
  }
  if (pt1_0) {
    comp_0 := comp_0 + (getScore(o1_0, 5) == getScore(o2_0, 5) ? 0 : (getScore(o1_0, 5) > getScore(o2_0, 5) ? 1 : -1))
  }
  if (pt2_0) {
    comp_1 := comp_1 + (getScore(o1_1, 5) == getScore(o2_1, 5) ? 0 : (getScore(o1_1, 5) > getScore(o2_1, 5) ? 1 : -1))
  }
  if (pt0_0) {
    comp := comp + (getScore(o1, 7) == getScore(o2, 7) ? 0 : (getScore(o1, 7) > getScore(o2, 7) ? 1 : -1))
  }
  if (pt1_0) {
    comp_0 := comp_0 + (getScore(o1_0, 7) == getScore(o2_0, 7) ? 0 : (getScore(o1_0, 7) > getScore(o2_0, 7) ? 1 : -1))
  }
  if (pt2_0) {
    comp_1 := comp_1 + (getScore(o1_1, 7) == getScore(o2_1, 7) ? 0 : (getScore(o1_1, 7) > getScore(o2_1, 7) ? 1 : -1))
  }
  var pt0_1: Bool
  var pt1_1: Bool
  var pt2_1: Bool
  var pf0_1: Bool
  var pf1_1: Bool
  var pf2_1: Bool
  pt0_1 := pt0_0 && comp == 0
  pt1_1 := pt1_0 && comp_0 == 0
  pt2_1 := pt2_0 && comp_1 == 0
  pf0_1 := pt0_0 && !(comp == 0)
  pf1_1 := pt1_0 && !(comp_0 == 0)
  pf2_1 := pt2_0 && !(comp_1 == 0)
  if (pt0_1) {
    returned := true
  }
  if (pt1_1) {
    returned_0 := true
  }
  if (pt2_1) {
    returned_1 := true
  }
  if (pt0_1) {
    res := 0
  }
  if (pt1_1) {
    res_0 := 0
  }
  if (pt2_1) {
    res_1 := 0
  }
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := pf0_1 && comp > 0
  pt1_2 := pf1_1 && comp_0 > 0
  pt2_2 := pf2_1 && comp_1 > 0
  pf0_2 := pf0_1 && !(comp > 0)
  pf1_2 := pf1_1 && !(comp_0 > 0)
  pf2_2 := pf2_1 && !(comp_1 > 0)
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  if (pt0_2) {
    res := 1
  }
  if (pt1_2) {
    res_0 := 1
  }
  if (pt2_2) {
    res_1 := 1
  }
  if (pf0_2) {
    returned := true
  }
  if (pf1_2) {
    returned_0 := true
  }
  if (pf2_2) {
    returned_1 := true
  }
  if (pf0_2) {
    res := -1
  }
  if (pf1_2) {
    res_0 := -1
  }
  if (pf2_2) {
    res_1 := -1
  }
  assert (p0 ==> returned) && (p1 ==> returned_0) && (p2 ==> returned_1)
}