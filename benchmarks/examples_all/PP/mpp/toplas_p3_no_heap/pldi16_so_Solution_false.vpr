function getValue(self: Ref): Int 


function solutionCost(self: Ref): Int 


function target(): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


function abs(i: Int): Int 
{
  (i < 0 ? -i : i)
}

method compare(p0: Bool, p1: Bool, p2: Bool, o1: Ref, o1_0: Ref, o1_1: Ref, o2: Ref, o2_0: Ref, o2_1: Ref) returns (res: Int, res_0: Int, res_1: Int)
  requires (p0 ==> true && p0 && p1 ==> o1 == o1_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0) && (p2 ==> true) && ((p0 ==> true && p0 && p2 ==> o2 == o1_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o2 == o1_1) && ((p0 ==> true) && (p1 ==> true && p2 && p1 ==> o2_1 == o2_0) && (p2 ==> true && p2 && p1 ==> o2_1 == o2_0)))
  ensures (p0 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1))
{
  var returned: Bool
  var v1: Int
  var v2: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var v1_0: Int
  var v1_1: Int
  var v2_0: Int
  var v2_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p2) {
    _cond0_1 := false
  }
  if (p0) {
    returned := false
  }
  if (p1) {
    returned_0 := false
  }
  if (p2) {
    returned_1 := false
  }
  if (p0) {
    v1 := getValue(o1)
  }
  if (p1) {
    v1_0 := getValue(o1_0)
  }
  if (p2) {
    v1_1 := getValue(o1_1)
  }
  if (p0) {
    v2 := getValue(o2)
  }
  if (p1) {
    v2_0 := getValue(o2_0)
  }
  if (p2) {
    v2_1 := getValue(o2_1)
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0 && (v1 == -1 && v2 == -1)
  pt1 := p1 && (v1_0 == -1 && v2_0 == -1)
  pt2 := p2 && (v1_1 == -1 && v2_1 == -1)
  pf0 := p0 && !(v1 == -1 && v2 == -1)
  pf1 := p1 && !(v1_0 == -1 && v2_0 == -1)
  pf2 := p2 && !(v1_1 == -1 && v2_1 == -1)
  assert (pt0 ==> !returned) && (pt1 ==> !returned_0) && (pt2 ==> !returned_1)
  if (pt0) {
    returned := true
  }
  if (pt1) {
    returned_0 := true
  }
  if (pt2) {
    returned_1 := true
  }
  if (pt0) {
    res := 0
  }
  if (pt1) {
    res_0 := 0
  }
  if (pt2) {
    res_1 := 0
  }
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pf0 && v1 == -1
  pt1_0 := pf1 && v1_0 == -1
  pt2_0 := pf2 && v1_1 == -1
  pf0_0 := pf0 && !(v1 == -1)
  pf1_0 := pf1 && !(v1_0 == -1)
  pf2_0 := pf2 && !(v1_1 == -1)
  assert (pt0_0 ==> !returned) && (pt1_0 ==> !returned_0) && (pt2_0 ==> !returned_1)
  if (pt0_0) {
    returned := true
  }
  if (pt1_0) {
    returned_0 := true
  }
  if (pt2_0) {
    returned_1 := true
  }
  if (pt0_0) {
    res := 1
  }
  if (pt1_0) {
    res_0 := 1
  }
  if (pt2_0) {
    res_1 := 1
  }
  var pt0_1: Bool
  var pt1_1: Bool
  var pt2_1: Bool
  var pf0_1: Bool
  var pf1_1: Bool
  var pf2_1: Bool
  pt0_1 := pf0_0 && v2 == -1
  pt1_1 := pf1_0 && v2_0 == -1
  pt2_1 := pf2_0 && v2_1 == -1
  pf0_1 := pf0_0 && !(v2 == -1)
  pf1_1 := pf1_0 && !(v2_0 == -1)
  pf2_1 := pf2_0 && !(v2_1 == -1)
  assert (pt0_1 ==> !returned) && (pt1_1 ==> !returned_0) && (pt2_1 ==> !returned_1)
  if (pt0_1) {
    returned := true
  }
  if (pt1_1) {
    returned_0 := true
  }
  if (pt2_1) {
    returned_1 := true
  }
  if (pt0_1) {
    res := -1
  }
  if (pt1_1) {
    res_0 := -1
  }
  if (pt2_1) {
    res_1 := -1
  }
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := pf0_1 && v1 == v2
  pt1_2 := pf1_1 && v1_0 == v2_0
  pt2_2 := pf2_1 && v1_1 == v2_1
  pf0_2 := pf0_1 && !(v1 == v2)
  pf1_2 := pf1_1 && !(v1_0 == v2_0)
  pf2_2 := pf2_1 && !(v1_1 == v2_1)
  assert (pt0_2 ==> !returned) && (pt1_2 ==> !returned_0) && (pt2_2 ==> !returned_1)
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  if (pt0_2) {
    res := sgn(solutionCost(o1) - solutionCost(o2))
  }
  if (pt1_2) {
    res_0 := sgn(solutionCost(o1_0) - solutionCost(o2_0))
  }
  if (pt2_2) {
    res_1 := sgn(solutionCost(o1_1) - solutionCost(o2_1))
  }
  assert (pf0_2 ==> !returned) && (pf1_2 ==> !returned_0) && (pf2_2 ==> !returned_1)
  if (pf0_2) {
    returned := true
  }
  if (pf1_2) {
    returned_0 := true
  }
  if (pf2_2) {
    returned_1 := true
  }
  if (pf0_2) {
    res := sgn(abs(target() - v1) - abs(target() - v2))
  }
  if (pf1_2) {
    res_0 := sgn(abs(target() - v1_0) - abs(target() - v2_0))
  }
  if (pf2_2) {
    res_1 := sgn(abs(target() - v1_1) - abs(target() - v2_1))
  }
  assert (p0 ==> returned) && (p1 ==> returned_0) && (p2 ==> returned_1)
}