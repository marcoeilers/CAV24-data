function count(self: Ref): Int 


function length(self: Ref): Int 


function get(self: Ref, i: Int): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  requires (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p2_0 ==> true) && ((p0_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && ((p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2)))
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3))
{
  var returned: Bool
  var tmp: Int
  var left: Int
  var right: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var tmp_0: Int
  var tmp_1: Int
  var left_0: Int
  var left_1: Int
  var right_0: Int
  var right_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_0) {
    _cond0 := false
  }
  if (p1_0) {
    _cond0_0 := false
  }
  if (p2_0) {
    _cond0_1 := false
  }
  if (p0_0) {
    returned := false
  }
  if (p1_0) {
    returned_0 := false
  }
  if (p2_0) {
    returned_1 := false
  }
  if (p0_0) {
    left := count(o1)
  }
  if (p1_0) {
    left_0 := count(o1_2)
  }
  if (p2_0) {
    left_1 := count(o1_3)
  }
  if (p0_0) {
    right := count(o2)
  }
  if (p1_0) {
    right_0 := count(o2_2)
  }
  if (p2_0) {
    right_1 := count(o2_3)
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0_0 && left == right
  pt1 := p1_0 && left_0 == right_0
  pt2 := p2_0 && left_1 == right_1
  pf0 := p0_0 && !(left == right)
  pf1 := p1_0 && !(left_0 == right_0)
  pf2 := p2_0 && !(left_1 == right_1)
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pt0 && length(o1) > length(o2)
  pt1_0 := pt1 && length(o1_2) > length(o2_2)
  pt2_0 := pt2 && length(o1_3) > length(o2_3)
  pf0_0 := pt0 && !(length(o1) > length(o2))
  pf1_0 := pt1 && !(length(o1_2) > length(o2_2))
  pf2_0 := pt2 && !(length(o1_3) > length(o2_3))
  var i1: Int
  var i1_0: Int
  var i1_1: Int
  if (pt0_0) {
    i1 := 0
  }
  if (pt1_0) {
    i1_0 := 0
  }
  if (pt2_0) {
    i1_1 := 0
  }
  var tmp0: Int
  var tmp1: Int
  var tmp2: Int
  var tmp0_0: Bool
  var tmp1_0: Bool
  var tmp2_0: Bool
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  var tmp0_2: Int
  var tmp1_2: Int
  var tmp2_2: Int
  if (!pt0_0) {
    tmp0 := tmp
  }
  if (!pt1_0) {
    tmp1 := tmp_0
  }
  if (!pt2_0) {
    tmp2 := tmp_1
  }
  if (!pt0_0) {
    tmp0_0 := returned
  }
  if (!pt1_0) {
    tmp1_0 := returned_0
  }
  if (!pt2_0) {
    tmp2_0 := returned_1
  }
  if (!pt0_0) {
    tmp0_1 := res
  }
  if (!pt1_0) {
    tmp1_1 := res_2
  }
  if (!pt2_0) {
    tmp2_1 := res_3
  }
  if (!pt0_0) {
    tmp0_2 := i1
  }
  if (!pt1_0) {
    tmp1_2 := i1_0
  }
  if (!pt2_0) {
    tmp2_2 := i1_1
  }
  while (pt0_0 && (i1 < length(o1) && !returned) || pt1_0 && (i1_0 < length(o1_2) && !returned_0) || pt2_0 && (i1_1 < length(o1_3) && !returned_1))
    invariant (pt0_0 ==> returned ==> res > 0) && (pt1_0 ==> returned_0 ==> res_2 > 0) && (pt2_0 ==> returned_1 ==> res_3 > 0)
    invariant !pt0_0 ==> tmp0_2 == i1
    invariant !pt0_0 ==> tmp0_1 == res
    invariant !pt0_0 ==> tmp0_0 == returned
    invariant !pt0_0 ==> tmp0 == tmp
    invariant !pt1_0 ==> tmp1_1 == res_2
    invariant !pt1_0 ==> tmp1 == tmp_0
    invariant !pt1_0 ==> tmp1_0 == returned_0
    invariant !pt1_0 ==> tmp1_2 == i1_0
    invariant !pt2_0 ==> tmp2 == tmp_1
    invariant !pt2_0 ==> tmp2_1 == res_3
    invariant !pt2_0 ==> tmp2_0 == returned_1
    invariant !pt2_0 ==> tmp2_2 == i1_1 
  {
    var p0_1: Bool
    var p1_1: Bool
    var p2_1: Bool
    p0_1 := pt0_0 && (i1 < length(o1) && !returned)
    p1_1 := pt1_0 && (i1_0 < length(o1_2) && !returned_0)
    p2_1 := pt2_0 && (i1_1 < length(o1_3) && !returned_1)
    var tmp0_3: Int
    var tmp1_3: Int
    var tmp2_3: Int
    var tmp0_4: Int
    var tmp1_4: Int
    var tmp2_4: Int
    var tmp0_5: Int
    var tmp1_5: Int
    var tmp2_5: Int
    if (p0_1) {
      tmp0_3 := get(o1, i1)
    }
    if (p1_1) {
      tmp1_3 := get(o1_2, i1_0)
    }
    if (p2_1) {
      tmp2_3 := get(o1_3, i1_1)
    }
    if (p0_1) {
      tmp0_4 := get(o2, i1)
    }
    if (p1_1) {
      tmp1_4 := get(o2_2, i1_0)
    }
    if (p2_1) {
      tmp2_4 := get(o2_3, i1_1)
    }
    tmp0_5, tmp1_5, tmp2_5 := Int_compare(p0_1, p1_1, p2_1, tmp0_3, tmp1_3, tmp2_3, tmp0_4, tmp1_4, tmp2_4)
    if (p0_1) {
      tmp := tmp0_5
    }
    if (p1_1) {
      tmp_0 := tmp1_5
    }
    if (p2_1) {
      tmp_1 := tmp2_5
    }
    var pt0_1: Bool
    var pt1_1: Bool
    var pt2_1: Bool
    var pf0_1: Bool
    var pf1_1: Bool
    var pf2_1: Bool
    pt0_1 := p0_1 && tmp < 0
    pt1_1 := p1_1 && tmp_0 < 0
    pt2_1 := p2_1 && tmp_1 < 0
    pf0_1 := p0_1 && !(tmp < 0)
    pf1_1 := p1_1 && !(tmp_0 < 0)
    pf2_1 := p2_1 && !(tmp_1 < 0)
    assert (pt0_1 ==> !returned) && (pt1_1 ==> !returned_0) && (pt2_1 ==> !returned_1)
    if (pt0_1) {
      returned := true
    }
    if (pt1_1) {
      returned_0 := true
    }
    if (pt2_1) {
      returned_1 := true
    }
    if (pt0_1) {
      res := 1
    }
    if (pt1_1) {
      res_2 := 1
    }
    if (pt2_1) {
      res_3 := 1
    }
    if (pf0_1) {
      i1 := i1 + 1
    }
    if (pf1_1) {
      i1_0 := i1_0 + 1
    }
    if (pf2_1) {
      i1_1 := i1_1 + 1
    }
  }
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := pt0_0 && !returned
  pt1_2 := pt1_0 && !returned_0
  pt2_2 := pt2_0 && !returned_1
  pf0_2 := pt0_0 && !!returned
  pf1_2 := pt1_0 && !!returned_0
  pf2_2 := pt2_0 && !!returned_1
  assert (pt0_2 ==> !returned) && (pt1_2 ==> !returned_0) && (pt2_2 ==> !returned_1)
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  if (pt0_2) {
    res := -1
  }
  if (pt1_2) {
    res_2 := -1
  }
  if (pt2_2) {
    res_3 := -1
  }
  var i2: Int
  var i2_0: Int
  var i2_1: Int
  if (pf0_0) {
    i2 := 0
  }
  if (pf1_0) {
    i2_0 := 0
  }
  if (pf2_0) {
    i2_1 := 0
  }
  var tmp0_6: Int
  var tmp1_6: Int
  var tmp2_6: Int
  var tmp0_7: Bool
  var tmp1_7: Bool
  var tmp2_7: Bool
  var tmp0_8: Int
  var tmp1_8: Int
  var tmp2_8: Int
  var tmp0_9: Int
  var tmp1_9: Int
  var tmp2_9: Int
  if (!pf0_0) {
    tmp0_6 := tmp
  }
  if (!pf1_0) {
    tmp1_6 := tmp_0
  }
  if (!pf2_0) {
    tmp2_6 := tmp_1
  }
  if (!pf0_0) {
    tmp0_7 := returned
  }
  if (!pf1_0) {
    tmp1_7 := returned_0
  }
  if (!pf2_0) {
    tmp2_7 := returned_1
  }
  if (!pf0_0) {
    tmp0_8 := res
  }
  if (!pf1_0) {
    tmp1_8 := res_2
  }
  if (!pf2_0) {
    tmp2_8 := res_3
  }
  if (!pf0_0) {
    tmp0_9 := i2
  }
  if (!pf1_0) {
    tmp1_9 := i2_0
  }
  if (!pf2_0) {
    tmp2_9 := i2_1
  }
  while (pf0_0 && (i2 < length(o2) && !returned) || pf1_0 && (i2_0 < length(o2_2) && !returned_0) || pf2_0 && (i2_1 < length(o2_3) && !returned_1))
    invariant (pf0_0 ==> returned ==> res < 0) && (pf1_0 ==> returned_0 ==> res_2 < 0) && (pf2_0 ==> returned_1 ==> res_3 < 0)
    invariant !pf0_0 ==> tmp0_8 == res
    invariant !pf0_0 ==> tmp0_7 == returned
    invariant !pf0_0 ==> tmp0_6 == tmp
    invariant !pf0_0 ==> tmp0_9 == i2
    invariant !pf1_0 ==> tmp1_7 == returned_0
    invariant !pf1_0 ==> tmp1_8 == res_2
    invariant !pf1_0 ==> tmp1_6 == tmp_0
    invariant !pf1_0 ==> tmp1_9 == i2_0
    invariant !pf2_0 ==> tmp2_7 == returned_1
    invariant !pf2_0 ==> tmp2_6 == tmp_1
    invariant !pf2_0 ==> tmp2_9 == i2_1
    invariant !pf2_0 ==> tmp2_8 == res_3 
  {
    var p0_2: Bool
    var p1_2: Bool
    var p2_2: Bool
    p0_2 := pf0_0 && (i2 < length(o2) && !returned)
    p1_2 := pf1_0 && (i2_0 < length(o2_2) && !returned_0)
    p2_2 := pf2_0 && (i2_1 < length(o2_3) && !returned_1)
    var tmp0_10: Int
    var tmp1_10: Int
    var tmp2_10: Int
    var tmp0_11: Int
    var tmp1_11: Int
    var tmp2_11: Int
    var tmp0_12: Int
    var tmp1_12: Int
    var tmp2_12: Int
    if (p0_2) {
      tmp0_10 := get(o1, i2)
    }
    if (p1_2) {
      tmp1_10 := get(o1_2, i2_0)
    }
    if (p2_2) {
      tmp2_10 := get(o1_3, i2_1)
    }
    if (p0_2) {
      tmp0_11 := get(o2, i2)
    }
    if (p1_2) {
      tmp1_11 := get(o2_2, i2_0)
    }
    if (p2_2) {
      tmp2_11 := get(o2_3, i2_1)
    }
    tmp0_12, tmp1_12, tmp2_12 := Int_compare(p0_2, p1_2, p2_2, tmp0_10, tmp1_10, tmp2_10, tmp0_11, tmp1_11, tmp2_11)
    if (p0_2) {
      tmp := tmp0_12
    }
    if (p1_2) {
      tmp_0 := tmp1_12
    }
    if (p2_2) {
      tmp_1 := tmp2_12
    }
    var pt0_3: Bool
    var pt1_3: Bool
    var pt2_3: Bool
    var pf0_3: Bool
    var pf1_3: Bool
    var pf2_3: Bool
    pt0_3 := p0_2 && tmp < 0
    pt1_3 := p1_2 && tmp_0 < 0
    pt2_3 := p2_2 && tmp_1 < 0
    pf0_3 := p0_2 && !(tmp < 0)
    pf1_3 := p1_2 && !(tmp_0 < 0)
    pf2_3 := p2_2 && !(tmp_1 < 0)
    assert (pt0_3 ==> !returned) && (pt1_3 ==> !returned_0) && (pt2_3 ==> !returned_1)
    if (pt0_3) {
      returned := true
    }
    if (pt1_3) {
      returned_0 := true
    }
    if (pt2_3) {
      returned_1 := true
    }
    if (pt0_3) {
      res := -1
    }
    if (pt1_3) {
      res_2 := -1
    }
    if (pt2_3) {
      res_3 := -1
    }
    if (pf0_3) {
      i2 := i2 + 1
    }
    if (pf1_3) {
      i2_0 := i2_0 + 1
    }
    if (pf2_3) {
      i2_1 := i2_1 + 1
    }
  }
  var pt0_4: Bool
  var pt1_4: Bool
  var pt2_4: Bool
  var pf0_4: Bool
  var pf1_4: Bool
  var pf2_4: Bool
  pt0_4 := pf0_0 && !returned
  pt1_4 := pf1_0 && !returned_0
  pt2_4 := pf2_0 && !returned_1
  pf0_4 := pf0_0 && !!returned
  pf1_4 := pf1_0 && !!returned_0
  pf2_4 := pf2_0 && !!returned_1
  assert (pt0_4 ==> !returned) && (pt1_4 ==> !returned_0) && (pt2_4 ==> !returned_1)
  if (pt0_4) {
    returned := true
  }
  if (pt1_4) {
    returned_0 := true
  }
  if (pt2_4) {
    returned_1 := true
  }
  if (pt0_4) {
    res := 1
  }
  if (pt1_4) {
    res_2 := 1
  }
  if (pt2_4) {
    res_3 := 1
  }
  assert (pf0 ==> !returned) && (pf1 ==> !returned_0) && (pf2 ==> !returned_1)
  if (pf0) {
    returned := true
  }
  if (pf1) {
    returned_0 := true
  }
  if (pf2) {
    returned_1 := true
  }
  if (pf0) {
    res := (left > right ? 1 : -1)
  }
  if (pf1) {
    res_2 := (left_0 > right_0 ? 1 : -1)
  }
  if (pf2) {
    res_3 := (left_1 > right_1 ? 1 : -1)
  }
  assert (p0_0 ==> returned) && (p1_0 ==> returned_0) && (p2_0 ==> returned_1)
}

method Int_compare(p0: Bool, p1: Bool, p2: Bool, o1: Int, o1_0: Int, o1_1: Int, o2: Int, o2_0: Int, o2_1: Int) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o2_0 && o2 == o1_0 ==> sgn(res) == -sgn(res_0)) && (p1 ==> true && p0 && p1 ==> o1 == o2_0 && o2 == o1_0 ==> sgn(res) == -sgn(res_0)) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o2_1 && o2 == o1_1 ==> sgn(res) == -sgn(res_1)) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o2_1 && o2 == o1_1 ==> sgn(res) == -sgn(res_1))
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o2_0 && o2_1 == o1_0 ==> sgn(res_1) == -sgn(res_0)) && (p2 ==> true && p2 && p1 ==> o1_1 == o2_0 && o2_1 == o1_0 ==> sgn(res_1) == -sgn(res_0))
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
