function get(self: Ref, pos: Int): Int 


function length(self: Ref): Int
  ensures result >= 0 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0: Bool, p1: Bool, p2: Bool, o1: Ref, o1_0: Ref, o1_1: Ref, o2: Ref, o2_0: Ref, o2_1: Ref) returns (res: Int, res_0: Int, res_1: Int)
  requires (p0 ==> true && p0 && p1 ==> o1 == o1_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0) && (p2 ==> true) && ((p0 ==> true && p0 && p2 ==> o2 == o1_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o2 == o1_1) && ((p0 ==> true) && (p1 ==> true && p2 && p1 ==> o2_1 == o2_0) && (p2 ==> true && p2 && p1 ==> o2_1 == o2_0)))
  ensures (p0 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1))
{
  var returned: Bool
  var index: Int
  var aentry: Int
  var bentry: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var index_0: Int
  var index_1: Int
  var aentry_0: Int
  var aentry_1: Int
  var bentry_0: Int
  var bentry_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p2) {
    _cond0_1 := false
  }
  if (p0) {
    returned := false
  }
  if (p1) {
    returned_0 := false
  }
  if (p2) {
    returned_1 := false
  }
  if (p0) {
    index := 0
  }
  if (p1) {
    index_0 := 0
  }
  if (p2) {
    index_1 := 0
  }
  var tmp0: Int
  var tmp1: Int
  var tmp2: Int
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Bool
  var tmp1_1: Bool
  var tmp2_1: Bool
  var tmp0_2: Int
  var tmp1_2: Int
  var tmp2_2: Int
  var tmp0_3: Int
  var tmp1_3: Int
  var tmp2_3: Int
  if (!p0) {
    tmp0 := aentry
  }
  if (!p1) {
    tmp1 := aentry_0
  }
  if (!p2) {
    tmp2 := aentry_1
  }
  if (!p0) {
    tmp0_0 := bentry
  }
  if (!p1) {
    tmp1_0 := bentry_0
  }
  if (!p2) {
    tmp2_0 := bentry_1
  }
  if (!p0) {
    tmp0_1 := returned
  }
  if (!p1) {
    tmp1_1 := returned_0
  }
  if (!p2) {
    tmp2_1 := returned_1
  }
  if (!p0) {
    tmp0_2 := res
  }
  if (!p1) {
    tmp1_2 := res_0
  }
  if (!p2) {
    tmp2_2 := res_1
  }
  if (!p0) {
    tmp0_3 := index
  }
  if (!p1) {
    tmp1_3 := index_0
  }
  if (!p2) {
    tmp2_3 := index_1
  }
  while (p0 && (index < length(o1) && (index < length(o2) && !returned)) || p1 && (index_0 < length(o1_0) && (index_0 < length(o2_0) && !returned_0)) || p2 && (index_1 < length(o1_1) && (index_1 < length(o2_1) && !returned_1)))
    invariant (p0 ==> index >= 0) && (p1 ==> index_0 >= 0) && (p2 ==> index_1 >= 0) && ((p0 ==> index <= length(o1)) && (p1 ==> index_0 <= length(o1_0)) && (p2 ==> index_1 <= length(o1_1)) && ((p0 ==> index <= length(o2)) && (p1 ==> index_0 <= length(o2_0)) && (p2 ==> index_1 <= length(o2_1))))
    invariant (p0 ==> returned ==> res != 0) && (p1 ==> returned_0 ==> res_0 != 0) && (p2 ==> returned_1 ==> res_1 != 0)
    invariant (forall j: Int :: { get(o1, j) } { get(o2, j) } { get(o1_0, j) } { get(o2_0, j) } { get(o1_1, j) } { get(o2_1, j) } (p0 ==> j >= 0 && j < index ==> get(o1, j) == get(o2, j)) && (p1 ==> j >= 0 && j < index_0 ==> get(o1_0, j) == get(o2_0, j)) && (p2 ==> j >= 0 && j < index_1 ==> get(o1_1, j) == get(o2_1, j)))
    invariant (p0 ==> returned && res > 0 ==> index < length(o1) && (index < length(o2) && get(o1, index) > get(o2, index))) && (p1 ==> returned_0 && res_0 > 0 ==> index_0 < length(o1_0) && (index_0 < length(o2_0) && get(o1_0, index_0) > get(o2_0, index_0))) && (p2 ==> returned_1 && res_1 > 0 ==> index_1 < length(o1_1) && (index_1 < length(o2_1) && get(o1_1, index_1) > get(o2_1, index_1)))
    invariant (p0 ==> returned && res < 0 ==> index < length(o1) && (index < length(o2) && get(o1, index) < get(o2, index))) && (p1 ==> returned_0 && res_0 < 0 ==> index_0 < length(o1_0) && (index_0 < length(o2_0) && get(o1_0, index_0) < get(o2_0, index_0))) && (p2 ==> returned_1 && res_1 < 0 ==> index_1 < length(o1_1) && (index_1 < length(o2_1) && get(o1_1, index_1) < get(o2_1, index_1)))
    invariant !p0 ==> tmp0_2 == res
    invariant !p0 ==> tmp0_0 == bentry
    invariant !p0 ==> tmp0_1 == returned
    invariant !p0 ==> tmp0_3 == index
    invariant !p0 ==> tmp0 == aentry
    invariant !p1 ==> tmp1_3 == index_0
    invariant !p1 ==> tmp1_0 == bentry_0
    invariant !p1 ==> tmp1_1 == returned_0
    invariant !p1 ==> tmp1 == aentry_0
    invariant !p1 ==> tmp1_2 == res_0
    invariant !p2 ==> tmp2_3 == index_1
    invariant !p2 ==> tmp2 == aentry_1
    invariant !p2 ==> tmp2_1 == returned_1
    invariant !p2 ==> tmp2_0 == bentry_1
    invariant !p2 ==> tmp2_2 == res_1 
  {
    var p0_0: Bool
    var p1_0: Bool
    var p2_0: Bool
    p0_0 := p0 && (index < length(o1) && (index < length(o2) && !returned))
    p1_0 := p1 && (index_0 < length(o1_0) && (index_0 < length(o2_0) && !returned_0))
    p2_0 := p2 && (index_1 < length(o1_1) && (index_1 < length(o2_1) && !returned_1))
    if (p0_0) {
      aentry := get(o1, index)
    }
    if (p1_0) {
      aentry_0 := get(o1_0, index_0)
    }
    if (p2_0) {
      aentry_1 := get(o1_1, index_1)
    }
    if (p0_0) {
      bentry := get(o2, index)
    }
    if (p1_0) {
      bentry_0 := get(o2_0, index_0)
    }
    if (p2_0) {
      bentry_1 := get(o2_1, index_1)
    }
    var pt0: Bool
    var pt1: Bool
    var pt2: Bool
    var pf0: Bool
    var pf1: Bool
    var pf2: Bool
    pt0 := p0_0 && aentry < bentry
    pt1 := p1_0 && aentry_0 < bentry_0
    pt2 := p2_0 && aentry_1 < bentry_1
    pf0 := p0_0 && !(aentry < bentry)
    pf1 := p1_0 && !(aentry_0 < bentry_0)
    pf2 := p2_0 && !(aentry_1 < bentry_1)
    if (pt0) {
      returned := true
    }
    if (pt1) {
      returned_0 := true
    }
    if (pt2) {
      returned_1 := true
    }
    if (pt0) {
      res := -1
    }
    if (pt1) {
      res_0 := -1
    }
    if (pt2) {
      res_1 := -1
    }
    var pt0_0: Bool
    var pt1_0: Bool
    var pt2_0: Bool
    var pf0_0: Bool
    var pf1_0: Bool
    var pf2_0: Bool
    pt0_0 := p0_0 && (!returned && aentry > bentry)
    pt1_0 := p1_0 && (!returned_0 && aentry_0 > bentry_0)
    pt2_0 := p2_0 && (!returned_1 && aentry_1 > bentry_1)
    pf0_0 := p0_0 && !(!returned && aentry > bentry)
    pf1_0 := p1_0 && !(!returned_0 && aentry_0 > bentry_0)
    pf2_0 := p2_0 && !(!returned_1 && aentry_1 > bentry_1)
    if (pt0_0) {
      returned := true
    }
    if (pt1_0) {
      returned_0 := true
    }
    if (pt2_0) {
      returned_1 := true
    }
    if (pt0_0) {
      res := 1
    }
    if (pt1_0) {
      res_0 := 1
    }
    if (pt2_0) {
      res_1 := 1
    }
    var pt0_1: Bool
    var pt1_1: Bool
    var pt2_1: Bool
    var pf0_1: Bool
    var pf1_1: Bool
    var pf2_1: Bool
    pt0_1 := p0_0 && !returned
    pt1_1 := p1_0 && !returned_0
    pt2_1 := p2_0 && !returned_1
    pf0_1 := p0_0 && !!returned
    pf1_1 := p1_0 && !!returned_0
    pf2_1 := p2_0 && !!returned_1
    if (pt0_1) {
      index := index + 1
    }
    if (pt1_1) {
      index_0 := index_0 + 1
    }
    if (pt2_1) {
      index_1 := index_1 + 1
    }
  }
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := p0 && !returned
  pt1_2 := p1 && !returned_0
  pt2_2 := p2 && !returned_1
  pf0_2 := p0 && !!returned
  pf1_2 := p1 && !!returned_0
  pf2_2 := p2 && !!returned_1
  if (pt0_2) {
    res := 0
  }
  if (pt1_2) {
    res_0 := 0
  }
  if (pt2_2) {
    res_1 := 0
  }
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  assert (p0 ==> returned) && (p1 ==> returned_0) && (p2 ==> returned_1)
}