function getFileName(self: Ref): Ref 


function getFileName_toLowerCase_endsWith(self: Ref, str: Int): Bool 


function getSubject(self: Ref): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_1: Bool, p1_1: Bool, p2_1: Bool, o1: Ref, o1_4: Ref, o1_5: Ref, o2: Ref, o2_4: Ref, o2_5: Ref) returns (res: Int, res_4: Int, res_5: Int)
  requires (p0_1 ==> true && p0_1 && p1_1 ==> o1 == o1_4) && (p1_1 ==> true && p0_1 && p1_1 ==> o1 == o1_4) && (p2_1 ==> true) && ((p0_1 ==> true && p0_1 && p2_1 ==> o2 == o1_5) && (p1_1 ==> true) && (p2_1 ==> true && p0_1 && p2_1 ==> o2 == o1_5) && ((p0_1 ==> true) && (p1_1 ==> true && p2_1 && p1_1 ==> o2_5 == o2_4) && (p2_1 ==> true && p2_1 && p1_1 ==> o2_5 == o2_4)))
  ensures (p0_1 ==> true && p0_1 && p1_1 && p2_1 ==> res == 0 ==> sgn(res_4) == sgn(res_5)) && (p1_1 ==> true && p0_1 && p1_1 && p2_1 ==> res == 0 ==> sgn(res_4) == sgn(res_5)) && (p2_1 ==> true && p0_1 && p1_1 && p2_1 ==> res == 0 ==> sgn(res_4) == sgn(res_5))
{
  var returned: Bool
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_1) {
    _cond0 := false
  }
  if (p1_1) {
    _cond0_0 := false
  }
  if (p2_1) {
    _cond0_1 := false
  }
  if (p0_1) {
    returned := false
  }
  if (p1_1) {
    returned_0 := false
  }
  if (p2_1) {
    returned_1 := false
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0_1 && o1 == o2
  pt1 := p1_1 && o1_4 == o2_4
  pt2 := p2_1 && o1_5 == o2_5
  pf0 := p0_1 && !(o1 == o2)
  pf1 := p1_1 && !(o1_4 == o2_4)
  pf2 := p2_1 && !(o1_5 == o2_5)
  assert (pt0 ==> !returned) && (pt1 ==> !returned_0) && (pt2 ==> !returned_1)
  if (pt0) {
    returned := true
  }
  if (pt1) {
    returned_0 := true
  }
  if (pt2) {
    returned_1 := true
  }
  if (pt0) {
    res := 0
  }
  if (pt1) {
    res_4 := 0
  }
  if (pt2) {
    res_5 := 0
  }
  var pt0_0: Bool
  var pt1_0: Bool
  var pt2_0: Bool
  var pf0_0: Bool
  var pf1_0: Bool
  var pf2_0: Bool
  pt0_0 := pf0 && (getFileName(o1) != null && getFileName(o2) != null)
  pt1_0 := pf1 && (getFileName(o1_4) != null && getFileName(o2_4) != null)
  pt2_0 := pf2 && (getFileName(o1_5) != null && getFileName(o2_5) != null)
  pf0_0 := pf0 && !(getFileName(o1) != null && getFileName(o2) != null)
  pf1_0 := pf1 && !(getFileName(o1_4) != null && getFileName(o2_4) != null)
  pf2_0 := pf2 && !(getFileName(o1_5) != null && getFileName(o2_5) != null)
  var i: Int
  var i_0: Int
  var i_1: Int
  if (pt0_0) {
    i := 0
  }
  if (pt1_0) {
    i_0 := 0
  }
  if (pt2_0) {
    i_1 := 0
  }
  var tmp0: Bool
  var tmp1: Bool
  var tmp2: Bool
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (!pt0_0) {
    tmp0 := returned
  }
  if (!pt1_0) {
    tmp1 := returned_0
  }
  if (!pt2_0) {
    tmp2 := returned_1
  }
  if (!pt0_0) {
    tmp0_0 := res
  }
  if (!pt1_0) {
    tmp1_0 := res_4
  }
  if (!pt2_0) {
    tmp2_0 := res_5
  }
  if (!pt0_0) {
    tmp0_1 := i
  }
  if (!pt1_0) {
    tmp1_1 := i_0
  }
  if (!pt2_0) {
    tmp2_1 := i_1
  }
  while (pt0_0 && (i < 5 && !returned) || pt1_0 && (i_0 < 5 && !returned_0) || pt2_0 && (i_1 < 5 && !returned_1))
    invariant (pt0_0 ==> i >= 0) && (pt1_0 ==> i_0 >= 0) && (pt2_0 ==> i_1 >= 0) && ((pt0_0 ==> i <= 5) && (pt1_0 ==> i_0 <= 5) && (pt2_0 ==> i_1 <= 5))
    invariant (forall j: Int :: { getFileName_toLowerCase_endsWith(o1, j) } { getFileName_toLowerCase_endsWith(o2, j) } { getFileName_toLowerCase_endsWith(o1_4, j) } { getFileName_toLowerCase_endsWith(o2_4, j) } { getFileName_toLowerCase_endsWith(o1_5, j) } { getFileName_toLowerCase_endsWith(o2_5, j) } (pt0_0 ==> j >= 0 && j < i ==> !getFileName_toLowerCase_endsWith(o1, j) && !getFileName_toLowerCase_endsWith(o2, j)) && (pt1_0 ==> j >= 0 && j < i_0 ==> !getFileName_toLowerCase_endsWith(o1_4, j) && !getFileName_toLowerCase_endsWith(o2_4, j)) && (pt2_0 ==> j >= 0 && j < i_1 ==> !getFileName_toLowerCase_endsWith(o1_5, j) && !getFileName_toLowerCase_endsWith(o2_5, j)))
    invariant (pt0_0 ==> returned && res > 0 ==> i < 5 && (getFileName_toLowerCase_endsWith(o2, i) && !getFileName_toLowerCase_endsWith(o1, i))) && (pt1_0 ==> returned_0 && res_4 > 0 ==> i_0 < 5 && (getFileName_toLowerCase_endsWith(o2_4, i_0) && !getFileName_toLowerCase_endsWith(o1_4, i_0))) && (pt2_0 ==> returned_1 && res_5 > 0 ==> i_1 < 5 && (getFileName_toLowerCase_endsWith(o2_5, i_1) && !getFileName_toLowerCase_endsWith(o1_5, i_1)))
    invariant (pt0_0 ==> returned && res < 0 ==> i < 5 && (!getFileName_toLowerCase_endsWith(o2, i) && getFileName_toLowerCase_endsWith(o1, i))) && (pt1_0 ==> returned_0 && res_4 < 0 ==> i_0 < 5 && (!getFileName_toLowerCase_endsWith(o2_4, i_0) && getFileName_toLowerCase_endsWith(o1_4, i_0))) && (pt2_0 ==> returned_1 && res_5 < 0 ==> i_1 < 5 && (!getFileName_toLowerCase_endsWith(o2_5, i_1) && getFileName_toLowerCase_endsWith(o1_5, i_1)))
    invariant (pt0_0 ==> returned && res == 0 ==> i < 5 && (getFileName_toLowerCase_endsWith(o2, i) && getFileName_toLowerCase_endsWith(o1, i))) && (pt1_0 ==> returned_0 && res_4 == 0 ==> i_0 < 5 && (getFileName_toLowerCase_endsWith(o2_4, i_0) && getFileName_toLowerCase_endsWith(o1_4, i_0))) && (pt2_0 ==> returned_1 && res_5 == 0 ==> i_1 < 5 && (getFileName_toLowerCase_endsWith(o2_5, i_1) && getFileName_toLowerCase_endsWith(o1_5, i_1)))
    invariant !pt0_0 ==> tmp0_1 == i
    invariant !pt0_0 ==> tmp0_0 == res
    invariant !pt0_0 ==> tmp0 == returned
    invariant !pt1_0 ==> tmp1_1 == i_0
    invariant !pt1_0 ==> tmp1_0 == res_4
    invariant !pt1_0 ==> tmp1 == returned_0
    invariant !pt2_0 ==> tmp2_0 == res_5
    invariant !pt2_0 ==> tmp2_1 == i_1
    invariant !pt2_0 ==> tmp2 == returned_1 
  {
    var p0_2: Bool
    var p1_2: Bool
    var p2_2: Bool
    p0_2 := pt0_0 && (i < 5 && !returned)
    p1_2 := pt1_0 && (i_0 < 5 && !returned_0)
    p2_2 := pt2_0 && (i_1 < 5 && !returned_1)
    var pt0_1: Bool
    var pt1_1: Bool
    var pt2_1: Bool
    var pf0_1: Bool
    var pf1_1: Bool
    var pf2_1: Bool
    pt0_1 := p0_2 && (getFileName_toLowerCase_endsWith(o1, i) && getFileName_toLowerCase_endsWith(o2, i))
    pt1_1 := p1_2 && (getFileName_toLowerCase_endsWith(o1_4, i_0) && getFileName_toLowerCase_endsWith(o2_4, i_0))
    pt2_1 := p2_2 && (getFileName_toLowerCase_endsWith(o1_5, i_1) && getFileName_toLowerCase_endsWith(o2_5, i_1))
    pf0_1 := p0_2 && !(getFileName_toLowerCase_endsWith(o1, i) && getFileName_toLowerCase_endsWith(o2, i))
    pf1_1 := p1_2 && !(getFileName_toLowerCase_endsWith(o1_4, i_0) && getFileName_toLowerCase_endsWith(o2_4, i_0))
    pf2_1 := p2_2 && !(getFileName_toLowerCase_endsWith(o1_5, i_1) && getFileName_toLowerCase_endsWith(o2_5, i_1))
    assert (pt0_1 ==> !returned) && (pt1_1 ==> !returned_0) && (pt2_1 ==> !returned_1)
    if (pt0_1) {
      returned := true
    }
    if (pt1_1) {
      returned_0 := true
    }
    if (pt2_1) {
      returned_1 := true
    }
    if (pt0_1) {
      res := 0
    }
    if (pt1_1) {
      res_4 := 0
    }
    if (pt2_1) {
      res_5 := 0
    }
    var pt0_2: Bool
    var pt1_2: Bool
    var pt2_2: Bool
    var pf0_2: Bool
    var pf1_2: Bool
    var pf2_2: Bool
    pt0_2 := pf0_1 && getFileName_toLowerCase_endsWith(o1, i)
    pt1_2 := pf1_1 && getFileName_toLowerCase_endsWith(o1_4, i_0)
    pt2_2 := pf2_1 && getFileName_toLowerCase_endsWith(o1_5, i_1)
    pf0_2 := pf0_1 && !getFileName_toLowerCase_endsWith(o1, i)
    pf1_2 := pf1_1 && !getFileName_toLowerCase_endsWith(o1_4, i_0)
    pf2_2 := pf2_1 && !getFileName_toLowerCase_endsWith(o1_5, i_1)
    assert (pt0_2 ==> !returned) && (pt1_2 ==> !returned_0) && (pt2_2 ==> !returned_1)
    if (pt0_2) {
      returned := true
    }
    if (pt1_2) {
      returned_0 := true
    }
    if (pt2_2) {
      returned_1 := true
    }
    if (pt0_2) {
      res := -1000 + i
    }
    if (pt1_2) {
      res_4 := -1000 + i_0
    }
    if (pt2_2) {
      res_5 := -1000 + i_1
    }
    var pt0_3: Bool
    var pt1_3: Bool
    var pt2_3: Bool
    var pf0_3: Bool
    var pf1_3: Bool
    var pf2_3: Bool
    pt0_3 := pf0_2 && getFileName_toLowerCase_endsWith(o2, i)
    pt1_3 := pf1_2 && getFileName_toLowerCase_endsWith(o2_4, i_0)
    pt2_3 := pf2_2 && getFileName_toLowerCase_endsWith(o2_5, i_1)
    pf0_3 := pf0_2 && !getFileName_toLowerCase_endsWith(o2, i)
    pf1_3 := pf1_2 && !getFileName_toLowerCase_endsWith(o2_4, i_0)
    pf2_3 := pf2_2 && !getFileName_toLowerCase_endsWith(o2_5, i_1)
    assert (pt0_3 ==> !returned) && (pt1_3 ==> !returned_0) && (pt2_3 ==> !returned_1)
    if (pt0_3) {
      returned := true
    }
    if (pt1_3) {
      returned_0 := true
    }
    if (pt2_3) {
      returned_1 := true
    }
    if (pt0_3) {
      res := 1000 + i
    }
    if (pt1_3) {
      res_4 := 1000 + i_0
    }
    if (pt2_3) {
      res_5 := 1000 + i_1
    }
    if (pf0_3) {
      i := i + 1
    }
    if (pf1_3) {
      i_0 := i_0 + 1
    }
    if (pf2_3) {
      i_1 := i_1 + 1
    }
  }
  var pt0_4: Bool
  var pt1_4: Bool
  var pt2_4: Bool
  var pf0_4: Bool
  var pf1_4: Bool
  var pf2_4: Bool
  pt0_4 := pt0_0 && !returned
  pt1_4 := pt1_0 && !returned_0
  pt2_4 := pt2_0 && !returned_1
  pf0_4 := pt0_0 && !!returned
  pf1_4 := pt1_0 && !!returned_0
  pf2_4 := pt2_0 && !!returned_1
  var tmp: Int
  var tmp_0: Int
  var tmp_1: Int
  var tmp0_2: Ref
  var tmp1_2: Ref
  var tmp2_2: Ref
  var tmp0_3: Ref
  var tmp1_3: Ref
  var tmp2_3: Ref
  var tmp0_4: Int
  var tmp1_4: Int
  var tmp2_4: Int
  if (pt0_4) {
    tmp0_2 := getFileName(o1)
  }
  if (pt1_4) {
    tmp1_2 := getFileName(o1_4)
  }
  if (pt2_4) {
    tmp2_2 := getFileName(o1_5)
  }
  if (pt0_4) {
    tmp0_3 := getFileName(o2)
  }
  if (pt1_4) {
    tmp1_3 := getFileName(o2_4)
  }
  if (pt2_4) {
    tmp2_3 := getFileName(o2_5)
  }
  tmp0_4, tmp1_4, tmp2_4 := String_compare(pt0_4, pt1_4, pt2_4, tmp0_2, tmp1_2, tmp2_2, tmp0_3, tmp1_3, tmp2_3)
  if (pt0_4) {
    tmp := tmp0_4
  }
  if (pt1_4) {
    tmp_0 := tmp1_4
  }
  if (pt2_4) {
    tmp_1 := tmp2_4
  }
  assert (pt0_4 ==> !returned) && (pt1_4 ==> !returned_0) && (pt2_4 ==> !returned_1)
  if (pt0_4) {
    returned := true
  }
  if (pt1_4) {
    returned_0 := true
  }
  if (pt2_4) {
    returned_1 := true
  }
  if (pt0_4) {
    res := tmp
  }
  if (pt1_4) {
    res_4 := tmp_0
  }
  if (pt2_4) {
    res_5 := tmp_1
  }
  var pt0_5: Bool
  var pt1_5: Bool
  var pt2_5: Bool
  var pf0_5: Bool
  var pf1_5: Bool
  var pf2_5: Bool
  pt0_5 := pf0_0 && (getFileName(o1) != null && getFileName(o2) == null)
  pt1_5 := pf1_0 && (getFileName(o1_4) != null && getFileName(o2_4) == null)
  pt2_5 := pf2_0 && (getFileName(o1_5) != null && getFileName(o2_5) == null)
  pf0_5 := pf0_0 && !(getFileName(o1) != null && getFileName(o2) == null)
  pf1_5 := pf1_0 && !(getFileName(o1_4) != null && getFileName(o2_4) == null)
  pf2_5 := pf2_0 && !(getFileName(o1_5) != null && getFileName(o2_5) == null)
  assert (pt0_5 ==> !returned) && (pt1_5 ==> !returned_0) && (pt2_5 ==> !returned_1)
  if (pt0_5) {
    returned := true
  }
  if (pt1_5) {
    returned_0 := true
  }
  if (pt2_5) {
    returned_1 := true
  }
  if (pt0_5) {
    res := -995
  }
  if (pt1_5) {
    res_4 := -995
  }
  if (pt2_5) {
    res_5 := -995
  }
  var pt0_6: Bool
  var pt1_6: Bool
  var pt2_6: Bool
  var pf0_6: Bool
  var pf1_6: Bool
  var pf2_6: Bool
  pt0_6 := pf0_5 && (getFileName(o1) == null && getFileName(o2) != null)
  pt1_6 := pf1_5 && (getFileName(o1_4) == null && getFileName(o2_4) != null)
  pt2_6 := pf2_5 && (getFileName(o1_5) == null && getFileName(o2_5) != null)
  pf0_6 := pf0_5 && !(getFileName(o1) == null && getFileName(o2) != null)
  pf1_6 := pf1_5 && !(getFileName(o1_4) == null && getFileName(o2_4) != null)
  pf2_6 := pf2_5 && !(getFileName(o1_5) == null && getFileName(o2_5) != null)
  assert (pt0_6 ==> !returned) && (pt1_6 ==> !returned_0) && (pt2_6 ==> !returned_1)
  if (pt0_6) {
    returned := true
  }
  if (pt1_6) {
    returned_0 := true
  }
  if (pt2_6) {
    returned_1 := true
  }
  if (pt0_6) {
    res := 1005
  }
  if (pt1_6) {
    res_4 := 1005
  }
  if (pt2_6) {
    res_5 := 1005
  }
  //var tmp: Int
  var tmp_2: Int
  var tmp_3: Int
  var tmp0_5: Int
  var tmp1_5: Int
  var tmp2_5: Int
  var tmp0_6: Int
  var tmp1_6: Int
  var tmp2_6: Int
  var tmp0_7: Int
  var tmp1_7: Int
  var tmp2_7: Int
  if (pf0_6) {
    tmp0_5 := getSubject(o1)
  }
  if (pf1_6) {
    tmp1_5 := getSubject(o1_4)
  }
  if (pf2_6) {
    tmp2_5 := getSubject(o1_5)
  }
  if (pf0_6) {
    tmp0_6 := getSubject(o2)
  }
  if (pf1_6) {
    tmp1_6 := getSubject(o2_4)
  }
  if (pf2_6) {
    tmp2_6 := getSubject(o2_5)
  }
  tmp0_7, tmp1_7, tmp2_7 := Int_compare(pf0_6, pf1_6, pf2_6, tmp0_5, tmp1_5, tmp2_5, tmp0_6, tmp1_6, tmp2_6)
  if (pf0_6) {
    tmp := tmp0_7
  }
  if (pf1_6) {
    tmp_2 := tmp1_7
  }
  if (pf2_6) {
    tmp_3 := tmp2_7
  }
  assert (pf0_6 ==> !returned) && (pf1_6 ==> !returned_0) && (pf2_6 ==> !returned_1)
  if (pf0_6) {
    returned := true
  }
  if (pf1_6) {
    returned_0 := true
  }
  if (pf2_6) {
    returned_1 := true
  }
  if (pf0_6) {
    res := tmp
  }
  if (pf1_6) {
    res_4 := tmp_2
  }
  if (pf2_6) {
    res_5 := tmp_3
  }
  assert (p0_1 ==> returned) && (p1_1 ==> returned_0) && (p2_1 ==> returned_1)
}

method String_compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  ensures (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o2_2 && o2 == o1_2 ==> sgn(res) == -sgn(res_2)) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o2_2 && o2 == o1_2 ==> sgn(res) == -sgn(res_2)) && (p2_0 ==> true)
  ensures (p0_0 ==> true && p0_0 && p2_0 ==> o1 == o2_3 && o2 == o1_3 ==> sgn(res) == -sgn(res_3)) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o1 == o2_3 && o2 == o1_3 ==> sgn(res) == -sgn(res_3))
  ensures (p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o1_3 == o2_2 && o2_3 == o1_2 ==> sgn(res_3) == -sgn(res_2)) && (p2_0 ==> true && p2_0 && p1_0 ==> o1_3 == o2_2 && o2_3 == o1_2 ==> sgn(res_3) == -sgn(res_2))
  ensures (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2 && o2 == o2_2 ==> res == res_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2 && o2 == o2_2 ==> res == res_2) && (p2_0 ==> true)
  ensures (p0_0 ==> true && p0_0 && p2_0 ==> o1 == o1_3 && o2 == o2_3 ==> res == res_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o1 == o1_3 && o2 == o2_3 ==> res == res_3)
  ensures (p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o1_3 == o1_2 && o2_3 == o2_2 ==> res_3 == res_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o1_3 == o1_2 && o2_3 == o2_2 ==> res_3 == res_2)
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> o1 == o1_2 && (o2 == o1_3 && (o2_3 == o2_2 && res == 0)) ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> o1 == o1_2 && (o2 == o1_3 && (o2_3 == o2_2 && res == 0)) ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> o1 == o1_2 && (o2 == o1_3 && (o2_3 == o2_2 && res == 0)) ==> sgn(res_2) == sgn(res_3))


method Int_compare(p0: Bool, p1: Bool, p2: Bool, o1: Int, o1_0: Int, o1_1: Int, o2: Int, o2_0: Int, o2_1: Int) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o2_0 && o2 == o1_0 ==> sgn(res) == -sgn(res_0)) && (p1 ==> true && p0 && p1 ==> o1 == o2_0 && o2 == o1_0 ==> sgn(res) == -sgn(res_0)) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o2_1 && o2 == o1_1 ==> sgn(res) == -sgn(res_1)) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o2_1 && o2 == o1_1 ==> sgn(res) == -sgn(res_1))
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o2_0 && o2_1 == o1_0 ==> sgn(res_1) == -sgn(res_0)) && (p2 ==> true && p2 && p1 ==> o1_1 == o2_0 && o2_1 == o1_0 ==> sgn(res_1) == -sgn(res_0))
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
