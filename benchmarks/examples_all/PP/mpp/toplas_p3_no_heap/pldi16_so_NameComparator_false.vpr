function Name(self: Ref): Int 


function strNames(): Seq[Int] 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0_0: Bool, p1_0: Bool, p2_0: Bool, o1: Ref, o1_2: Ref, o1_3: Ref, o2: Ref, o2_2: Ref, o2_3: Ref) returns (res: Int, res_2: Int, res_3: Int)
  requires (p0_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p1_0 ==> true && p0_0 && p1_0 ==> o1 == o1_2) && (p2_0 ==> true) && ((p0_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && (p1_0 ==> true) && (p2_0 ==> true && p0_0 && p2_0 ==> o2 == o1_3) && ((p0_0 ==> true) && (p1_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2) && (p2_0 ==> true && p2_0 && p1_0 ==> o2_3 == o2_2)))
  ensures (p0_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p1_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3)) && (p2_0 ==> true && p0_0 && p1_0 && p2_0 ==> res == 0 ==> sgn(res_2) == sgn(res_3))
{
  var returned: Bool
  var x: Int
  var y: Int
  var i: Int
  var currentName: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var x_0: Int
  var x_1: Int
  var y_0: Int
  var y_1: Int
  var i_0: Int
  var i_1: Int
  var currentName_0: Int
  var currentName_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0_0) {
    _cond0 := false
  }
  if (p1_0) {
    _cond0_0 := false
  }
  if (p2_0) {
    _cond0_1 := false
  }
  if (p0_0) {
    returned := false
  }
  if (p1_0) {
    returned_0 := false
  }
  if (p2_0) {
    returned_1 := false
  }
  if (p0_0) {
    x := Name(o1)
  }
  if (p1_0) {
    x_0 := Name(o1_2)
  }
  if (p2_0) {
    x_1 := Name(o1_3)
  }
  if (p0_0) {
    y := Name(o2)
  }
  if (p1_0) {
    y_0 := Name(o2_2)
  }
  if (p2_0) {
    y_1 := Name(o2_3)
  }
  if (p0_0) {
    i := 0
  }
  if (p1_0) {
    i_0 := 0
  }
  if (p2_0) {
    i_1 := 0
  }
  var tmp0: Int
  var tmp1: Int
  var tmp2: Int
  var tmp0_0: Bool
  var tmp1_0: Bool
  var tmp2_0: Bool
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  var tmp0_2: Int
  var tmp1_2: Int
  var tmp2_2: Int
  if (!p0_0) {
    tmp0 := currentName
  }
  if (!p1_0) {
    tmp1 := currentName_0
  }
  if (!p2_0) {
    tmp2 := currentName_1
  }
  if (!p0_0) {
    tmp0_0 := returned
  }
  if (!p1_0) {
    tmp1_0 := returned_0
  }
  if (!p2_0) {
    tmp2_0 := returned_1
  }
  if (!p0_0) {
    tmp0_1 := res
  }
  if (!p1_0) {
    tmp1_1 := res_2
  }
  if (!p2_0) {
    tmp2_1 := res_3
  }
  if (!p0_0) {
    tmp0_2 := i
  }
  if (!p1_0) {
    tmp1_2 := i_0
  }
  if (!p2_0) {
    tmp2_2 := i_1
  }
  while (p0_0 && (i < |strNames()| && !returned) || p1_0 && (i_0 < |strNames()| && !returned_0) || p2_0 && (i_1 < |strNames()| && !returned_1))
    invariant (p0_0 ==> i >= 0) && (p1_0 ==> i_0 >= 0) && (p2_0 ==> i_1 >= 0) && ((p0_0 ==> i <= |strNames()|) && (p1_0 ==> i_0 <= |strNames()|) && (p2_0 ==> i_1 <= |strNames()|))
    invariant (p0_0 ==> returned ==> res != 0) && (p1_0 ==> returned_0 ==> res_2 != 0) && (p2_0 ==> returned_1 ==> res_3 != 0)
    invariant (forall j: Int :: { strNames()[j] } (p0_0 ==> j >= 0 && j < i ==> strNames()[j] != x && strNames()[j] != y) && (p1_0 ==> j >= 0 && j < i_0 ==> strNames()[j] != x_0 && strNames()[j] != y_0) && (p2_0 ==> j >= 0 && j < i_1 ==> strNames()[j] != x_1 && strNames()[j] != y_1))
    invariant (p0_0 ==> returned && res > 0 ==> i < |strNames()| && strNames()[i] == x) && (p1_0 ==> returned_0 && res_2 > 0 ==> i_0 < |strNames()| && strNames()[i_0] == x_0) && (p2_0 ==> returned_1 && res_3 > 0 ==> i_1 < |strNames()| && strNames()[i_1] == x_1)
    invariant (p0_0 ==> returned && res < 0 ==> i < |strNames()| && (strNames()[i] == y && strNames()[i] != x)) && (p1_0 ==> returned_0 && res_2 < 0 ==> i_0 < |strNames()| && (strNames()[i_0] == y_0 && strNames()[i_0] != x_0)) && (p2_0 ==> returned_1 && res_3 < 0 ==> i_1 < |strNames()| && (strNames()[i_1] == y_1 && strNames()[i_1] != x_1))
    invariant !p0_0 ==> tmp0_2 == i
    invariant !p0_0 ==> tmp0_0 == returned
    invariant !p0_0 ==> tmp0 == currentName
    invariant !p0_0 ==> tmp0_1 == res
    invariant !p1_0 ==> tmp1 == currentName_0
    invariant !p1_0 ==> tmp1_1 == res_2
    invariant !p1_0 ==> tmp1_2 == i_0
    invariant !p1_0 ==> tmp1_0 == returned_0
    invariant !p2_0 ==> tmp2_1 == res_3
    invariant !p2_0 ==> tmp2 == currentName_1
    invariant !p2_0 ==> tmp2_2 == i_1
    invariant !p2_0 ==> tmp2_0 == returned_1 
  {
    var p0_1: Bool
    var p1_1: Bool
    var p2_1: Bool
    p0_1 := p0_0 && (i < |strNames()| && !returned)
    p1_1 := p1_0 && (i_0 < |strNames()| && !returned_0)
    p2_1 := p2_0 && (i_1 < |strNames()| && !returned_1)
    if (p0_1) {
      currentName := strNames()[i]
    }
    if (p1_1) {
      currentName_0 := strNames()[i_0]
    }
    if (p2_1) {
      currentName_1 := strNames()[i_1]
    }
    var pt0: Bool
    var pt1: Bool
    var pt2: Bool
    var pf0: Bool
    var pf1: Bool
    var pf2: Bool
    pt0 := p0_1 && currentName == x
    pt1 := p1_1 && currentName_0 == x_0
    pt2 := p2_1 && currentName_1 == x_1
    pf0 := p0_1 && !(currentName == x)
    pf1 := p1_1 && !(currentName_0 == x_0)
    pf2 := p2_1 && !(currentName_1 == x_1)
    assert (pt0 ==> !returned) && (pt1 ==> !returned_0) && (pt2 ==> !returned_1)
    if (pt0) {
      returned := true
    }
    if (pt1) {
      returned_0 := true
    }
    if (pt2) {
      returned_1 := true
    }
    if (pt0) {
      res := 1
    }
    if (pt1) {
      res_2 := 1
    }
    if (pt2) {
      res_3 := 1
    }
    var pt0_0: Bool
    var pt1_0: Bool
    var pt2_0: Bool
    var pf0_0: Bool
    var pf1_0: Bool
    var pf2_0: Bool
    pt0_0 := pf0 && currentName == y
    pt1_0 := pf1 && currentName_0 == y_0
    pt2_0 := pf2 && currentName_1 == y_1
    pf0_0 := pf0 && !(currentName == y)
    pf1_0 := pf1 && !(currentName_0 == y_0)
    pf2_0 := pf2 && !(currentName_1 == y_1)
    assert (pt0_0 ==> !returned) && (pt1_0 ==> !returned_0) && (pt2_0 ==> !returned_1)
    if (pt0_0) {
      returned := true
    }
    if (pt1_0) {
      returned_0 := true
    }
    if (pt2_0) {
      returned_1 := true
    }
    if (pt0_0) {
      res := -1
    }
    if (pt1_0) {
      res_2 := -1
    }
    if (pt2_0) {
      res_3 := -1
    }
    if (pf0_0) {
      i := i + 1
    }
    if (pf1_0) {
      i_0 := i_0 + 1
    }
    if (pf2_0) {
      i_1 := i_1 + 1
    }
  }
  var pt0_1: Bool
  var pt1_1: Bool
  var pt2_1: Bool
  var pf0_1: Bool
  var pf1_1: Bool
  var pf2_1: Bool
  pt0_1 := p0_0 && !returned
  pt1_1 := p1_0 && !returned_0
  pt2_1 := p2_0 && !returned_1
  pf0_1 := p0_0 && !!returned
  pf1_1 := p1_0 && !!returned_0
  pf2_1 := p2_0 && !!returned_1
  var tmp: Int
  var tmp_0: Int
  var tmp_1: Int
  var tmp0_3: Int
  var tmp1_3: Int
  var tmp2_3: Int
  var tmp0_4: Int
  var tmp1_4: Int
  var tmp2_4: Int
  var tmp0_5: Int
  var tmp1_5: Int
  var tmp2_5: Int
  if (pt0_1) {
    tmp0_3 := x
  }
  if (pt1_1) {
    tmp1_3 := x_0
  }
  if (pt2_1) {
    tmp2_3 := x_1
  }
  if (pt0_1) {
    tmp0_4 := y
  }
  if (pt1_1) {
    tmp1_4 := y_0
  }
  if (pt2_1) {
    tmp2_4 := y_1
  }
  tmp0_5, tmp1_5, tmp2_5 := Int_compare(pt0_1, pt1_1, pt2_1, tmp0_3, tmp1_3, tmp2_3, tmp0_4, tmp1_4, tmp2_4)
  if (pt0_1) {
    tmp := tmp0_5
  }
  if (pt1_1) {
    tmp_0 := tmp1_5
  }
  if (pt2_1) {
    tmp_1 := tmp2_5
  }
  assert (pt0_1 ==> !returned) && (pt1_1 ==> !returned_0) && (pt2_1 ==> !returned_1)
  if (pt0_1) {
    returned := true
  }
  if (pt1_1) {
    returned_0 := true
  }
  if (pt2_1) {
    returned_1 := true
  }
  if (pt0_1) {
    res := tmp
  }
  if (pt1_1) {
    res_2 := tmp_0
  }
  if (pt2_1) {
    res_3 := tmp_1
  }
  assert (p0_0 ==> returned) && (p1_0 ==> returned_0) && (p2_0 ==> returned_1)
}

method Int_compare(p0: Bool, p1: Bool, p2: Bool, o1: Int, o1_0: Int, o1_1: Int, o2: Int, o2_0: Int, o2_1: Int) returns (res: Int, res_0: Int, res_1: Int)
  ensures (p0 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0 && o2 == o2_0 ==> res == res_0) && (p2 ==> true)
  ensures (p0 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o1 == o1_1 && o2 == o2_1 ==> res == res_1)
  ensures (p0 ==> true) && (p1 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0) && (p2 ==> true && p2 && p1 ==> o1_1 == o1_0 && o2_1 == o2_0 ==> res_1 == res_0)
  ensures (p0 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> o1 == o1_0 && (o2 == o1_1 && (o2_1 == o2_0 && res == 0)) ==> sgn(res_0) == sgn(res_1))
