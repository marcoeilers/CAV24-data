function count(self: Ref): Int 


function length(self: Ref): Int
  ensures result >= 0 


function get(self: Ref, i: Int): Int 


function sgn(i: Int): Int
  ensures i > 0 ==> result == 1
  ensures i == 0 ==> result == 0
  ensures i < 0 ==> result == -1 


method compare(p0: Bool, p1: Bool, p2: Bool, o1: Ref, o1_0: Ref, o1_1: Ref, o2: Ref, o2_0: Ref, o2_1: Ref) returns (res: Int, res_0: Int, res_1: Int)
  requires (p0 ==> true && p0 && p1 ==> o1 == o1_0) && (p1 ==> true && p0 && p1 ==> o1 == o1_0) && (p2 ==> true) && ((p0 ==> true && p0 && p2 ==> o2 == o1_1) && (p1 ==> true) && (p2 ==> true && p0 && p2 ==> o2 == o1_1) && ((p0 ==> true) && (p1 ==> true && p2 && p1 ==> o2_1 == o2_0) && (p2 ==> true && p2 && p1 ==> o2_1 == o2_0)))
  ensures (p0 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p1 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1)) && (p2 ==> true && p0 && p1 && p2 ==> res == 0 ==> sgn(res_0) == sgn(res_1))
{
  var returned: Bool
  var left: Int
  var right: Int
  var _cond0: Bool
  var returned_0: Bool
  var returned_1: Bool
  var left_0: Int
  var left_1: Int
  var right_0: Int
  var right_1: Int
  var _cond0_0: Bool
  var _cond0_1: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p2) {
    _cond0_1 := false
  }
  if (p0) {
    returned := false
  }
  if (p1) {
    returned_0 := false
  }
  if (p2) {
    returned_1 := false
  }
  if (p0) {
    left := count(o1)
  }
  if (p1) {
    left_0 := count(o1_0)
  }
  if (p2) {
    left_1 := count(o1_1)
  }
  if (p0) {
    right := count(o2)
  }
  if (p1) {
    right_0 := count(o2_0)
  }
  if (p2) {
    right_1 := count(o2_1)
  }
  var pt0: Bool
  var pt1: Bool
  var pt2: Bool
  var pf0: Bool
  var pf1: Bool
  var pf2: Bool
  pt0 := p0 && left == right
  pt1 := p1 && left_0 == right_0
  pt2 := p2 && left_1 == right_1
  pf0 := p0 && !(left == right)
  pf1 := p1 && !(left_0 == right_0)
  pf2 := p2 && !(left_1 == right_1)
  var i: Int
  var i_0: Int
  var i_1: Int
  if (pt0) {
    i := 0
  }
  if (pt1) {
    i_0 := 0
  }
  if (pt2) {
    i_1 := 0
  }
  var tmp0: Bool
  var tmp1: Bool
  var tmp2: Bool
  var tmp0_0: Int
  var tmp1_0: Int
  var tmp2_0: Int
  var tmp0_1: Int
  var tmp1_1: Int
  var tmp2_1: Int
  if (!pt0) {
    tmp0 := returned
  }
  if (!pt1) {
    tmp1 := returned_0
  }
  if (!pt2) {
    tmp2 := returned_1
  }
  if (!pt0) {
    tmp0_0 := res
  }
  if (!pt1) {
    tmp1_0 := res_0
  }
  if (!pt2) {
    tmp2_0 := res_1
  }
  if (!pt0) {
    tmp0_1 := i
  }
  if (!pt1) {
    tmp1_1 := i_0
  }
  if (!pt2) {
    tmp2_1 := i_1
  }
  while (pt0 && (i < length(o1) && (i < length(o2) && !returned)) || pt1 && (i_0 < length(o1_0) && (i_0 < length(o2_0) && !returned_0)) || pt2 && (i_1 < length(o1_1) && (i_1 < length(o2_1) && !returned_1)))
    invariant (pt0 ==> i >= 0) && (pt1 ==> i_0 >= 0) && (pt2 ==> i_1 >= 0) && ((pt0 ==> i <= length(o1)) && (pt1 ==> i_0 <= length(o1_0)) && (pt2 ==> i_1 <= length(o1_1)) && ((pt0 ==> i <= length(o2)) && (pt1 ==> i_0 <= length(o2_0)) && (pt2 ==> i_1 <= length(o2_1))))
    invariant (pt0 ==> returned ==> res != 0) && (pt1 ==> returned_0 ==> res_0 != 0) && (pt2 ==> returned_1 ==> res_1 != 0)
    invariant (forall j: Int :: { get(o1, j) } { get(o2, j) } { get(o1_0, j) } { get(o2_0, j) } { get(o1_1, j) } { get(o2_1, j) } (pt0 ==> j >= 0 && j < i ==> get(o1, j) == get(o2, j)) && (pt1 ==> j >= 0 && j < i_0 ==> get(o1_0, j) == get(o2_0, j)) && (pt2 ==> j >= 0 && j < i_1 ==> get(o1_1, j) == get(o2_1, j)))
    invariant (pt0 ==> returned && res > 0 ==> i < length(o1) && (i < length(o2) && get(o1, i) > get(o2, i))) && (pt1 ==> returned_0 && res_0 > 0 ==> i_0 < length(o1_0) && (i_0 < length(o2_0) && get(o1_0, i_0) > get(o2_0, i_0))) && (pt2 ==> returned_1 && res_1 > 0 ==> i_1 < length(o1_1) && (i_1 < length(o2_1) && get(o1_1, i_1) > get(o2_1, i_1)))
    invariant (pt0 ==> returned && res < 0 ==> i < length(o1) && (i < length(o2) && get(o1, i) < get(o2, i))) && (pt1 ==> returned_0 && res_0 < 0 ==> i_0 < length(o1_0) && (i_0 < length(o2_0) && get(o1_0, i_0) < get(o2_0, i_0))) && (pt2 ==> returned_1 && res_1 < 0 ==> i_1 < length(o1_1) && (i_1 < length(o2_1) && get(o1_1, i_1) < get(o2_1, i_1)))
    invariant !pt0 ==> tmp0_1 == i
    invariant !pt0 ==> tmp0_0 == res
    invariant !pt0 ==> tmp0 == returned
    invariant !pt1 ==> tmp1_0 == res_0
    invariant !pt1 ==> tmp1_1 == i_0
    invariant !pt1 ==> tmp1 == returned_0
    invariant !pt2 ==> tmp2_1 == i_1
    invariant !pt2 ==> tmp2_0 == res_1
    invariant !pt2 ==> tmp2 == returned_1 
  {
    var p0_0: Bool
    var p1_0: Bool
    var p2_0: Bool
    p0_0 := pt0 && (i < length(o1) && (i < length(o2) && !returned))
    p1_0 := pt1 && (i_0 < length(o1_0) && (i_0 < length(o2_0) && !returned_0))
    p2_0 := pt2 && (i_1 < length(o1_1) && (i_1 < length(o2_1) && !returned_1))
    var pt0_0: Bool
    var pt1_0: Bool
    var pt2_0: Bool
    var pf0_0: Bool
    var pf1_0: Bool
    var pf2_0: Bool
    pt0_0 := p0_0 && get(o1, i) - get(o2, i) < 0
    pt1_0 := p1_0 && get(o1_0, i_0) - get(o2_0, i_0) < 0
    pt2_0 := p2_0 && get(o1_1, i_1) - get(o2_1, i_1) < 0
    pf0_0 := p0_0 && !(get(o1, i) - get(o2, i) < 0)
    pf1_0 := p1_0 && !(get(o1_0, i_0) - get(o2_0, i_0) < 0)
    pf2_0 := p2_0 && !(get(o1_1, i_1) - get(o2_1, i_1) < 0)
    assert (pt0_0 ==> !returned) && (pt1_0 ==> !returned_0) && (pt2_0 ==> !returned_1)
    if (pt0_0) {
      returned := true
    }
    if (pt1_0) {
      returned_0 := true
    }
    if (pt2_0) {
      returned_1 := true
    }
    if (pt0_0) {
      res := -1
    }
    if (pt1_0) {
      res_0 := -1
    }
    if (pt2_0) {
      res_1 := -1
    }
    var pt0_1: Bool
    var pt1_1: Bool
    var pt2_1: Bool
    var pf0_1: Bool
    var pf1_1: Bool
    var pf2_1: Bool
    pt0_1 := pf0_0 && get(o1, i) - get(o2, i) > 0
    pt1_1 := pf1_0 && get(o1_0, i_0) - get(o2_0, i_0) > 0
    pt2_1 := pf2_0 && get(o1_1, i_1) - get(o2_1, i_1) > 0
    pf0_1 := pf0_0 && !(get(o1, i) - get(o2, i) > 0)
    pf1_1 := pf1_0 && !(get(o1_0, i_0) - get(o2_0, i_0) > 0)
    pf2_1 := pf2_0 && !(get(o1_1, i_1) - get(o2_1, i_1) > 0)
    assert (pt0_1 ==> !returned) && (pt1_1 ==> !returned_0) && (pt2_1 ==> !returned_1)
    if (pt0_1) {
      returned := true
    }
    if (pt1_1) {
      returned_0 := true
    }
    if (pt2_1) {
      returned_1 := true
    }
    if (pt0_1) {
      res := 1
    }
    if (pt1_1) {
      res_0 := 1
    }
    if (pt2_1) {
      res_1 := 1
    }
    if (pf0_1) {
      i := i + 1
    }
    if (pf1_1) {
      i_0 := i_0 + 1
    }
    if (pf2_1) {
      i_1 := i_1 + 1
    }
  }
  var pt0_2: Bool
  var pt1_2: Bool
  var pt2_2: Bool
  var pf0_2: Bool
  var pf1_2: Bool
  var pf2_2: Bool
  pt0_2 := pt0 && !returned
  pt1_2 := pt1 && !returned_0
  pt2_2 := pt2 && !returned_1
  pf0_2 := pt0 && !!returned
  pf1_2 := pt1 && !!returned_0
  pf2_2 := pt2 && !!returned_1
  assert (pt0_2 ==> !returned) && (pt1_2 ==> !returned_0) && (pt2_2 ==> !returned_1)
  if (pt0_2) {
    returned := true
  }
  if (pt1_2) {
    returned_0 := true
  }
  if (pt2_2) {
    returned_1 := true
  }
  if (pt0_2) {
    res := length(o1) - length(o2)
  }
  if (pt1_2) {
    res_0 := length(o1_0) - length(o2_0)
  }
  if (pt2_2) {
    res_1 := length(o1_1) - length(o2_1)
  }
  assert (pf0 ==> !returned) && (pf1 ==> !returned_0) && (pf2 ==> !returned_1)
  if (pf0) {
    returned := true
  }
  if (pf1) {
    returned_0 := true
  }
  if (pf2) {
    returned_1 := true
  }
  if (pf0) {
    res := (left > right ? 1 : -1)
  }
  if (pf1) {
    res_0 := (left_0 > right_0 ? 1 : -1)
  }
  if (pf2) {
    res_1 := (left_1 > right_1 ? 1 : -1)
  }
  assert (p0 ==> returned) && (p1 ==> returned_0) && (p2 ==> returned_1)
}