field val: Int

field val1: Int

method m(p0: Bool, p1: Bool, x: Int, x_0: Int, secret: Int, secret_0: Int) returns (res: Seq[Ref], res_0: Seq[Ref])
  requires (p0 ==> p0 && p1 ==> x == x_0) && (p1 ==> true)
  ensures (p0 ==> p0 && p1 ==> res == res_0) && (p1 ==> true)
  ensures (p0 ==> (forall e: Ref :: (e in res) ==> acc(e.val, write))) && (p1 ==> (forall e: Ref :: (e in res_0) ==> acc(e.val1, write))) && (forall e: Ref :: (p0 ==> true) && (p1 ==> true))
{
  var i: Int
  var _cond0: Bool
  var i_0: Int
  var _cond0_0: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p0) {
    res := Seq[Ref]()
  }
  if (p1) {
    res_0 := Seq[Ref]()
  }
  if (p0) {
    i := 0
  }
  if (p1) {
    i_0 := 0
  }
  var tmp0: Seq[Ref]
  var tmp1: Seq[Ref]
  var tmp0_0: Int
  var tmp1_0: Int
  if (!p0) {
    tmp0 := res
  }
  if (!p1) {
    tmp1 := res_0
  }
  if (!p0) {
    tmp0_0 := i
  }
  if (!p1) {
    tmp1_0 := i_0
  }
  while (p0 && i < 10 || p1 && i_0 < 10)
    invariant (p0 ==> p0 && p1 ==> res == res_0) && (p1 ==> true)
    invariant (p0 ==> (forall e: Ref :: (e in res) ==> acc(e.val, write))) && (p1 ==> (forall e: Ref :: (e in res_0) ==> acc(e.val1, write))) && (forall e: Ref :: (p0 ==> true) && (p1 ==> true))
    invariant (p0 ==> i >= 0) && (p1 ==> i_0 >= 0) && ((p0 ==> i == |res|) && (p1 ==> i_0 == |res_0|) && ((p0 ==> p0 && p1 ==> i == i_0) && (p1 ==> true)))
    invariant !p0 ==> tmp0 == res
    invariant !p0 ==> tmp0_0 == i
    invariant !p1 ==> tmp1 == res_0
    invariant !p1 ==> tmp1_0 == i_0 
  {
    var p0_0: Bool
    var p1_0: Bool
    p0_0 := p0 && i < 10
    p1_0 := p1 && i_0 < 10
    var current: Ref
    var current_0: Ref
    var tmp: Ref
    tmp := new(val, val1)
    if (p0_0) {
      current := tmp
    }
    if (p1_0) {
      current_0 := tmp
    }
    if (p0_0) {
      res := res ++ Seq(current)
    }
    if (p1_0) {
      res_0 := res_0 ++ Seq(current_0)
    }
    if (p0_0) {
      res[i].val := x
    }
    if (p1_0) {
      res_0[i_0].val1 := x_0
    }
    if (p0_0) {
      i := i + 1
    }
    if (p1_0) {
      i_0 := i_0 + 1
    }
  }
}