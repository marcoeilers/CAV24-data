field employee: Ref

field employee1: Ref

field payroll: Ref

field payroll1: Ref

field EID: Int

field EID1: Int

field salary: Int

field salary1: Int

field PID: Int

field PID1: Int

field joinInd: Bool

field joinInd1: Bool

method joinSalaries(p0_1: Bool, p1_1: Bool, ps: Seq[Ref], ps_0: Seq[Ref], es: Seq[Ref], es_1: Seq[Ref]) returns (tab: Seq[Ref], tab_0: Seq[Ref])
  requires (p0_1 ==> p0_1 && p1_1 ==> es == es_1) && (p1_1 ==> true)
  requires (p0_1 ==> p0_1 && p1_1 ==> |ps| == |ps_0|) && (p1_1 ==> true)
  requires (forall i: Int :: (p0_1 ==> true) && (p1_1 ==> true)) && ((p0_1 ==> (forall i: Int :: i >= 0 && i < |ps| ==> acc(ps[i].joinInd, write))) && (p1_1 ==> (forall i: Int :: i >= 0 && i < |ps_0| ==> acc(ps_0[i].joinInd1, write)))) && (forall i: Int :: (p0_1 ==> true) && (p1_1 ==> true)) && ((p0_1 ==> (forall i: Int :: i >= 0 && i < |ps| ==> acc(ps[i].salary, write))) && (p1_1 ==> (forall i: Int :: i >= 0 && i < |ps_0| ==> acc(ps_0[i].salary1, write)))) && ((p0_1 ==> (forall i: Int :: i >= 0 && i < |ps| ==> acc(ps[i].PID, write))) && (p1_1 ==> (forall i: Int :: i >= 0 && i < |ps_0| ==> acc(ps_0[i].PID1, write)))) && (forall i: Int :: (p0_1 ==> true) && (p1_1 ==> true))
  requires (forall i: Int :: (p0_1 ==> true) && (p1_1 ==> true))
  requires (p0_1 ==> (forall k: Int :: k >= 0 && k < |es| ==> acc(es[k].EID, write))) && (p1_1 ==> (forall k: Int :: k >= 0 && k < |es_1| ==> acc(es_1[k].EID1, write))) && (forall k: Int :: (p0_1 ==> true) && (p1_1 ==> true))
  ensures (p0_1 ==> |ps| == |tab|) && (p1_1 ==> |ps_0| == |tab_0|)
  ensures (p0_1 ==> (forall i: Int :: i >= 0 && i < |ps| ==> acc(ps[i].joinInd, write))) && (p1_1 ==> (forall i: Int :: i >= 0 && i < |ps_0| ==> acc(ps_0[i].joinInd1, write))) && ((p0_1 ==> (forall i: Int :: i >= 0 && i < |ps| ==> acc(ps[i].salary, write))) && (p1_1 ==> (forall i: Int :: i >= 0 && i < |ps_0| ==> acc(ps_0[i].salary1, write))))
  ensures (forall i: Int :: (p0_1 ==> true) && (p1_1 ==> true))
  ensures (p0_1 ==> (forall e: Ref :: (e in es) ==> acc(e.EID, write))) && (p1_1 ==> (forall e: Ref :: (e in es_1) ==> acc(e.EID1, write)))
{
  var i: Int
  var _cond0: Bool
  var i_0: Int
  var _cond0_1: Bool
  if (p0_1) {
    _cond0 := false
  }
  if (p1_1) {
    _cond0_1 := false
  }
  if (p0_1) {
    tab := Seq[Ref]()
  }
  if (p1_1) {
    tab_0 := Seq[Ref]()
  }
  if (p0_1) {
    i := 0
  }
  if (p1_1) {
    i_0 := 0
  }
  var tmp0_1: Seq[Ref]
  var tmp1_1: Seq[Ref]
  var tmp0_2: Int
  var tmp1_2: Int
  if (!p0_1) {
    tmp0_1 := tab
  }
  if (!p1_1) {
    tmp1_1 := tab_0
  }
  if (!p0_1) {
    tmp0_2 := i
  }
  if (!p1_1) {
    tmp1_2 := i_0
  }
  while (p0_1 && i < |ps| || p1_1 && i_0 < |ps_0|)
    invariant (p0_1 ==> i >= 0) && (p1_1 ==> i_0 >= 0) && ((p0_1 ==> i <= |ps|) && (p1_1 ==> i_0 <= |ps_0|) && ((p0_1 ==> p0_1 && p1_1 ==> i == i_0) && (p1_1 ==> true)))
    invariant (p0_1 ==> (forall j: Int :: j >= 0 && j < |ps| ==> acc(ps[j].joinInd, 1 / 2))) && (p1_1 ==> (forall j: Int :: j >= 0 && j < |ps_0| ==> acc(ps_0[j].joinInd1, 1 / 2))) && (forall j: Int :: (p0_1 ==> true) && (p1_1 ==> true)) && ((p0_1 ==> (forall j: Int :: j >= 0 && j < |ps| ==> acc(ps[j].PID, 1 / 2))) && (p1_1 ==> (forall j: Int :: j >= 0 && j < |ps_0| ==> acc(ps_0[j].PID1, 1 / 2)))) && (forall j: Int :: (p0_1 ==> true) && (p1_1 ==> true))
    invariant (p0_1 ==> (forall e: Ref :: (e in es) ==> acc(e.EID, 1 / 2))) && (p1_1 ==> (forall e: Ref :: (e in es_1) ==> acc(e.EID1, 1 / 2))) && (forall e: Ref :: (p0_1 ==> true) && (p1_1 ==> true))
    invariant (p0_1 ==> |tab| == i) && (p1_1 ==> |tab_0| == i_0)
    invariant (forall k: Int :: (p0_1 ==> true) && (p1_1 ==> true))
    invariant !p0_1 ==> tmp0_2 == i
    invariant !p0_1 ==> tmp0_1 == tab
    invariant !p1_1 ==> tmp1_2 == i_0
    invariant !p1_1 ==> tmp1_1 == tab_0 
  {
    var p0_2: Bool
    var p1_2: Bool
    p0_2 := p0_1 && i < |ps|
    p1_2 := p1_1 && i_0 < |ps_0|
    var pt0_1: Bool
    var pt1_1: Bool
    var pf0_1: Bool
    var pf1_1: Bool
    pt0_1 := p0_2 && ps[i] != null
    pt1_1 := p1_2 && ps_0[i_0] != null
    pf0_1 := p0_2 && !(ps[i] != null)
    pf1_1 := p1_2 && !(ps_0[i_0] != null)
    var current: Ref
    var current_0: Ref
    var tmp0_3: Ref
    var tmp1_3: Ref
    var tmp0_4: Seq[Ref]
    var tmp1_4: Seq[Ref]
    var tmp0_5: Ref
    var tmp1_5: Ref
    if (pt0_1) {
      tmp0_3 := ps[i]
    }
    if (pt1_1) {
      tmp1_3 := ps_0[i_0]
    }
    if (pt0_1) {
      tmp0_4 := es
    }
    if (pt1_1) {
      tmp1_4 := es_1
    }
    tmp0_5, tmp1_5 := checkJoinAndFindEmployee(pt0_1, pt1_1, tmp0_3, tmp1_3, tmp0_4, tmp1_4)
    if (pt0_1) {
      current := tmp0_5
    }
    if (pt1_1) {
      current_0 := tmp1_5
    }
    if (pt0_1) {
      tab := tab ++ Seq(current)
    }
    if (pt1_1) {
      tab_0 := tab_0 ++ Seq(current_0)
    }
    if (pf0_1) {
      tab := tab ++ Seq(null)
    }
    if (pf1_1) {
      tab_0 := tab_0 ++ Seq(null)
    }
    if (p0_2) {
      i := i + 1
    }
    if (p1_2) {
      i_0 := i_0 + 1
    }
  }
}

method checkJoinAndFindEmployee(p0: Bool, p1: Bool, psi: Ref, psi_0: Ref, es: Seq[Ref], es_0: Seq[Ref]) returns (res: Ref, res_0: Ref)
  requires (p0 ==> p0 && p1 ==> es == es_0) && (p1 ==> true)
  requires (p0 ==> acc(psi.joinInd, 1 / 4)) && (p1 ==> acc(psi_0.joinInd1, 1 / 4)) && ((p0 ==> p0 && p1 ==> psi.joinInd == psi_0.joinInd1) && (p1 ==> true))
  requires (p0 ==> acc(psi.PID, 1 / 4)) && (p1 ==> acc(psi_0.PID1, 1 / 4)) && ((p0 ==> p0 && p1 ==> psi.PID == psi_0.PID1) && (p1 ==> true))
  requires (p0 ==> (forall e: Ref :: (e in es) ==> acc(e.EID, 1 / 4))) && (p1 ==> (forall e: Ref :: (e in es_0) ==> acc(e.EID1, 1 / 4))) && (forall e: Ref :: (p0 ==> true) && (p1 ==> true))
  ensures (p0 ==> acc(psi.PID, 1 / 4)) && (p1 ==> acc(psi_0.PID1, 1 / 4))
  ensures (p0 ==> acc(psi.joinInd, 1 / 4)) && (p1 ==> acc(psi_0.joinInd1, 1 / 4))
  ensures (p0 ==> (forall e: Ref :: (e in es) ==> acc(e.EID, 1 / 4))) && (p1 ==> (forall e: Ref :: (e in es_0) ==> acc(e.EID1, 1 / 4)))
  ensures (p0 ==> p0 && p1 ==> res == res_0) && (p1 ==> true)
{
  var _cond0: Bool
  var _cond0_0: Bool
  if (p0) {
    _cond0 := false
  }
  if (p1) {
    _cond0_0 := false
  }
  if (p0) {
    res := null
  }
  if (p1) {
    res_0 := null
  }
  var pt0: Bool
  var pt1: Bool
  var pf0: Bool
  var pf1: Bool
  pt0 := p0 && psi.joinInd
  pt1 := p1 && psi_0.joinInd1
  pf0 := p0 && !psi.joinInd
  pf1 := p1 && !psi_0.joinInd1
  var j: Int
  var j_0: Int
  if (pt0) {
    j := 0
  }
  if (pt1) {
    j_0 := 0
  }
  var tmp0: Ref
  var tmp1: Ref
  var tmp0_0: Int
  var tmp1_0: Int
  if (!pt0) {
    tmp0 := res
  }
  if (!pt1) {
    tmp1 := res_0
  }
  if (!pt0) {
    tmp0_0 := j
  }
  if (!pt1) {
    tmp1_0 := j_0
  }
  while (pt0 && j < |es| || pt1 && j_0 < |es_0|)
    invariant (pt0 ==> acc(psi.PID, 1 / 8)) && (pt1 ==> acc(psi_0.PID1, 1 / 8)) && ((pt0 ==> pt0 && pt1 ==> psi.PID == psi_0.PID1) && (pt1 ==> true))
    invariant (pt0 ==> j >= 0) && (pt1 ==> j_0 >= 0) && ((pt0 ==> j <= |es|) && (pt1 ==> j_0 <= |es_0|) && ((pt0 ==> pt0 && pt1 ==> j == j_0) && (pt1 ==> true)))
    invariant (pt0 ==> (forall e: Ref :: (e in es) ==> acc(e.EID, 1 / 8))) && (pt1 ==> (forall e: Ref :: (e in es_0) ==> acc(e.EID1, 1 / 8))) && (forall e: Ref :: (pt0 ==> true) && (pt1 ==> true))
    invariant (pt0 ==> pt0 && pt1 ==> res == res_0) && (pt1 ==> true)
    invariant !pt0 ==> tmp0 == res
    invariant !pt0 ==> tmp0_0 == j
    invariant !pt1 ==> tmp1_0 == j_0
    invariant !pt1 ==> tmp1 == res_0 
  {
    var p0_0: Bool
    var p1_0: Bool
    p0_0 := pt0 && j < |es|
    p1_0 := pt1 && j_0 < |es_0|
    var pt0_0: Bool
    var pt1_0: Bool
    var pf0_0: Bool
    var pf1_0: Bool
    pt0_0 := p0_0 && psi.PID == es[j].EID
    pt1_0 := p1_0 && psi_0.PID1 == es_0[j_0].EID1
    pf0_0 := p0_0 && !(psi.PID == es[j].EID)
    pf1_0 := p1_0 && !(psi_0.PID1 == es_0[j_0].EID1)
    var tmp: Ref
    tmp := new(employee, payroll, employee1, payroll1)
    if (pt0_0) {
      res := tmp
    }
    if (pt1_0) {
      res_0 := tmp
    }
    if (pt0_0) {
      res.employee := es[j]
    }
    if (pt1_0) {
      res_0.employee1 := es_0[j_0]
    }
    if (pt0_0) {
      res.payroll := psi
    }
    if (pt1_0) {
      res_0.payroll1 := psi_0
    }
    if (p0_0) {
      j := j + 1
    }
    if (p1_0) {
      j_0 := j_0 + 1
    }
  }
}