domain MirrorDomain  {
  
  function mirror_simple$f_contains_not__$TY$__Snap$Slice$i32$$int$$$int$$$int$$$bool$(_1: Snap$Slice$i32,
  _2: Int, _3: Int, _4: Int): Bool 
  
  function mirror_simple$f_sorted__$TY$__Snap$Slice$i32$$bool$(_1: Snap$Slice$i32): Bool 
}

domain Snap$Slice$i32  {
  
  function cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data: Seq[Int]): Snap$Slice$i32 
  
  function uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data: Snap$Slice$i32): Seq[Int] 
  
  function read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self: Snap$Slice$i32,
  idx: Int): Int 
  
  function len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(self: Snap$Slice$i32): Int 
  
  axiom Snap$Slice$i32$injectivity {
    (forall data: Seq[Int] ::
      { cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data) }
      uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) ==
      data)
  }
  
  axiom Snap$Slice$i32$surjectivity {
    (forall data: Snap$Slice$i32 ::
      { uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data) }
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data)) ==
      data)
  }
  
  axiom Snap$Slice$i32$extensionality {
    (forall _l_data: Seq[Int], _r_data: Seq[Int] ::
      { cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_l_data), cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_r_data) }
      _l_data == _r_data ==>
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_l_data) ==
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_r_data))
  }
  
  axiom Slice$i32$read_indices {
    (forall data: Seq[Int], idx: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data),
      idx) }
      { data[idx] }
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data),
      idx) ==
      data[idx])
  }
  
  axiom Slice$i32$len_of_seq {
    (forall data: Seq[Int] ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) }
      { |data| }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) ==
      |data|)
  }
  
  axiom Slice$i32$len_positive {
    (forall slice: Snap$Slice$i32 ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) >= 0)
  }
  
  axiom Slice$i32$len_upper_bound {
    (forall slice: Snap$Slice$i32 ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) * 4 <=
      9223372036854775807)
  }
  
  axiom Snap$Slice$i32$valid {
    (forall self: Snap$Slice$i32, idx: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) }
      -2147483648 <=
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) &&
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) <=
      2147483647)
  }
}

domain Snap$m_std$$option$$Option$_beg_$usize$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0: Int): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$discriminant_axiom {
    (forall _0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$valid {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      18446744073709551615)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function Slice$len__$TY$__i32$Slice$i32$$int$(self: Ref): Int
  requires acc(Slice$i32(self), read$())
  ensures result >= 0
  ensures result <= 18446744073709551615


function f_contains_not__$TY$__Snap$Slice$i32$$int$$$int$$$int$$$bool$(_1: Snap$Slice$i32,
  _2: Int, _3: Int, _4: Int): Bool
  requires -2147483648 <= _4
  requires _4 <= 2147483647
  requires 0 <= _3
  requires _3 <= 18446744073709551615
  requires 0 <= _2
  requires _2 <= 18446744073709551615
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_contains_not__$TY$__Snap$Slice$i32$$int$$$int$$$int$$$bool$(_1,
    _2, _3, _4),
    true]
{
  (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
    _0_quant_0 <= 18446744073709551615 ==>
    _2 <= _0_quant_0 ==>
    _0_quant_0 < _3 ==>
    (_0_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1) ==>
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(_1, _0_quant_0) !=
    _4) &&
    _0_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1))
}

function f_sorted__$TY$__Snap$Slice$i32$$bool$(_1: Snap$Slice$i32): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_sorted__$TY$__Snap$Slice$i32$$bool$(_1),
    true]
{
  (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
    (_0_quant_0 <= 18446744073709551615 &&
    (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
    _0_quant_0 < _1_quant_0 ==>
    _1_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1) ==>
    (_0_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1) ==>
    (_1_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1) ==>
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(_1, _0_quant_0) <=
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(_1, _1_quant_0)) &&
    _1_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1)) &&
    _0_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1))
}

function lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self: Ref, idx: Int): Int
  requires acc(Slice$i32(self), read$())
  requires 0 <= idx
  requires idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)


function m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant)
}

function seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self: Ref,
  start: Int): Seq[Int]
  requires acc(Slice$i32(self), read$())
  requires 0 <= start
  ensures start >= Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    result == Seq[Int]()
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    |result| == Slice$len__$TY$__i32$Slice$i32$$int$(self) - start
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    result[0] ==
    lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, start)
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    (forall i: Int, j: Int ::
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i), result[j] }
      start <= i && i < Slice$len__$TY$__i32$Slice$i32$$int$(self) &&
      (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(self) - start &&
      i == j + start) ==>
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i) ==
      result[j])
{
  (start >= Slice$len__$TY$__i32$Slice$i32$$int$(self) ?
    Seq[Int]() :
    Seq(lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, start)) ++
    seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self, start + 1))
}

function snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(self: Ref): Snap$Slice$i32
  requires acc(Slice$i32(self), read$())
  ensures [(forall i: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(result, i) }
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i) }
      0 <= i && i < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(result, i) ==
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i)),
    true]
  ensures [Slice$len__$TY$__i32$Slice$i32$$int$(self) ==
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(result),
    true]
{
  cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self,
  0))
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$usize$_end_
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_())
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate Slice$i32(self: Ref) 

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_std$$option$$Option$_beg_$usize$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$usize$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_binary_search() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var _preserve$0: Ref
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Ref
  var __t43: Bool
  var __t44: Bool
  var __t45: Bool
  var __t46: Ref
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var __t50: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _9: Ref
  var _10: Int
  var _12: Ref
  var _18: Ref
  var _23: Ref
  var _27: Ref
  var _31: Ref
  var _37: Ref
  var _44: Int
  var _45: Int
  var _46: Ref
  var _47: Ref
  var _48: Int
  var _49: Int
  var _50: Ref
  var _51: Ref
  var _52: Int
  var _53: Int
  var _54: Int
  var _55: Ref
  var _56: Int
  var _57: Int
  var _58: Ref
  var _59: Ref
  var _60: Int
  var _61: Int
  var _62: Int
  var _63: Ref
  var _64: Int
  var _65: Ref
  var _66: Int
  var _67: Ref
  var _68: Ref
  var _69: Ref
  
  label start
  // ========== start ==========
  // Def path: "binary_search2::binary_search"
  // Span: tests/verify_overflow/pass/binary_search2.rs:24:1: 58:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(Slice$i32(_1.val_ref), read$()) && acc(i32(_2), write))
  inhale true
  inhale f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref))
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] _3 = const 0_usize
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_int, write)
  _3.val_int := 0
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = &(*_1)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_ref, write)
  _5.val_ref := _1.val_ref
  inhale acc(Slice$i32(_5.val_ref), read$())
  label l0
  // [mir] _4 = core::slice::<impl [i32]>::len(move _5) -> [return: bb1, unwind: bb36]
  label l1
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_int, write)
  _4.val_int := Slice$len__$TY$__i32$Slice$i32$$int$(_5.val_ref)
  // transfer perm _5.val_ref --> old[l1](_5.val_ref) // unchecked: false
  // ========== l2 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L19,L18,)

  if (__t0 && __t0) {
    // expire loan L18
    // transfer perm old[l1](_5.val_ref) --> old[l0](_5.val_ref) // unchecked: false
    exhale acc(Slice$i32(old[l0](_5.val_ref)), read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_5)
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_6)
  // [mir] _6 = std::option::Option::<usize>::None
  _6 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_6) ==
    0
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] StorageLive(_7)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb36]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  _10 := _4.val_int
  label l3
  // [mir] _9 = Gt(move _10, const 0_usize)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _10 > 0
  // [mir] StorageDead(_10)
  // [mir] switchInt(move _9) -> [0: bb35, otherwise: bb4]
  __t30 := _9.val_bool
  if (__t30) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l5 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb6, otherwise: bb5]
  __t31 := _12.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  _preserve$0 := _1.val_ref
  fold acc(usize(_4), write)
  // obtain acc(usize(_4), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(i32(_2), read)
  assert !((unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <
    0 ||
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <=
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_4), write) in _4.val_int) > 0 &&
    (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      _6.discriminant) ==
    0 &&
    ((unfolding acc(i32(_2), write) in _2.val_int) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) &&
    (f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(i32(_2), write) in
        (let _LET_0 ==
          (_3.val_int) in
          (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
            _0_quant_0 <= 18446744073709551615 ==>
            _0_quant_0 < _LET_0 ==>
            _0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
            read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
            _0_quant_0) <
            _2.val_int)))) &&
    ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      _6.discriminant) ==
    0 ?
      !((unfolding acc(usize(_3), write) in _3.val_int) +
      (unfolding acc(usize(_4), write) in _4.val_int) <
      0 ||
      (unfolding acc(usize(_3), write) in _3.val_int) +
      (unfolding acc(usize(_4), write) in _4.val_int) >
      18446744073709551615) &&
      f_contains_not__$TY$__Snap$Slice$i32$$int$$$int$$$int$$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
      (unfolding acc(usize(_3), write) in _3.val_int) +
      (unfolding acc(usize(_4), write) in _4.val_int), len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)),
      (unfolding acc(i32(_2), write) in _2.val_int)) :
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
        ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
        read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int))) ==
        (unfolding acc(i32(_2), write) in _2.val_int))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_4), write) &&
    (acc(usize(_3), write) &&
    (acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$()))))
  _10 := builtin$havoc_int()
  _12 := builtin$havoc_ref()
  _18 := builtin$havoc_ref()
  _23 := builtin$havoc_ref()
  _27 := builtin$havoc_ref()
  _3 := builtin$havoc_ref()
  _31 := builtin$havoc_ref()
  _37 := builtin$havoc_ref()
  _4 := builtin$havoc_ref()
  _44 := builtin$havoc_int()
  _45 := builtin$havoc_int()
  _46 := builtin$havoc_ref()
  _47 := builtin$havoc_ref()
  _48 := builtin$havoc_int()
  _49 := builtin$havoc_int()
  _50 := builtin$havoc_ref()
  _51 := builtin$havoc_ref()
  _52 := builtin$havoc_int()
  _53 := builtin$havoc_int()
  _54 := builtin$havoc_int()
  _55 := builtin$havoc_ref()
  _56 := builtin$havoc_int()
  _57 := builtin$havoc_int()
  _58 := builtin$havoc_ref()
  _59 := builtin$havoc_ref()
  _6 := builtin$havoc_ref()
  _60 := builtin$havoc_int()
  _61 := builtin$havoc_int()
  _62 := builtin$havoc_int()
  _63 := builtin$havoc_ref()
  _64 := builtin$havoc_int()
  _65 := builtin$havoc_ref()
  _66 := builtin$havoc_int()
  _67 := builtin$havoc_ref()
  _68 := builtin$havoc_ref()
  _69 := builtin$havoc_ref()
  _9 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t42 := builtin$havoc_ref()
  __t43 := builtin$havoc_bool()
  __t44 := builtin$havoc_bool()
  __t45 := builtin$havoc_bool()
  __t46 := builtin$havoc_ref()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t49 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(usize(_4), write) &&
    (acc(usize(_3), write) &&
    (acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$()))))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb36]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  unfold acc(usize(_4), write)
  _10 := _4.val_int
  label l6
  // [mir] _9 = Gt(move _10, const 0_usize)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _10 > 0
  // [mir] StorageDead(_10)
  // [mir] switchInt(move _9) -> [0: bb35, otherwise: bb4]
  __t32 := _9.val_bool
  if (__t32) {
    goto bb1
  }
  goto l2
  
  label bb1
  // ========== l8 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2b_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb6, otherwise: bb5]
  __t33 := _12.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  inhale !((unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int < 0 ||
    (unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int >
    18446744073709551615) &&
    (unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int <=
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    (_4.val_int > 0 &&
    (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      _6.discriminant) ==
    0 &&
    ((unfolding acc(i32(_2), write) in _2.val_int) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) &&
    (f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(i32(_2), write) in
        (let _LET_1 ==
          (_3.val_int) in
          (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
            _0_quant_0 <= 18446744073709551615 ==>
            _0_quant_0 < _LET_1 ==>
            _0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
            read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
            _0_quant_0) <
            _2.val_int)))) &&
    ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      _6.discriminant) ==
    0 ?
      !((unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int < 0 ||
      (unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int >
      18446744073709551615) &&
      f_contains_not__$TY$__Snap$Slice$i32$$int$$$int$$$int$$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
      (unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int, len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)),
      (unfolding acc(i32(_2), write) in _2.val_int)) :
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
        ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
        read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int))) ==
        (unfolding acc(i32(_2), write) in _2.val_int))))))))
  // ========== loop2_group3_bb6 ==========
  __t5 := true
  // [mir] _11 = const ()
  // [mir] goto -> bb7
  // ========== loop2_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_12)
  // [mir] StorageDead(_11)
  // [mir] StorageLive(_17)
  // [mir] StorageLive(_18)
  // [mir] _18 = const false
  _18 := builtin$havoc_ref()
  inhale acc(_18.val_bool, write)
  _18.val_bool := false
  // [mir] switchInt(move _18) -> [0: bb9, otherwise: bb8]
  __t34 := _18.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb9 ==========
  __t7 := true
  // [mir] _17 = const ()
  // [mir] goto -> bb10
  // ========== loop2_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_18)
  // [mir] StorageDead(_17)
  // [mir] StorageLive(_22)
  // [mir] StorageLive(_23)
  // [mir] _23 = const false
  _23 := builtin$havoc_ref()
  inhale acc(_23.val_bool, write)
  _23.val_bool := false
  // [mir] switchInt(move _23) -> [0: bb12, otherwise: bb11]
  __t35 := _23.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb12 ==========
  __t9 := true
  // [mir] _22 = const ()
  // [mir] goto -> bb13
  // ========== loop2_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_23)
  // [mir] StorageDead(_22)
  // [mir] StorageLive(_26)
  // [mir] StorageLive(_27)
  // [mir] _27 = const false
  _27 := builtin$havoc_ref()
  inhale acc(_27.val_bool, write)
  _27.val_bool := false
  // [mir] switchInt(move _27) -> [0: bb15, otherwise: bb14]
  __t36 := _27.val_bool
  // Ignore default target bb14, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb15 ==========
  __t11 := true
  // [mir] _26 = const ()
  // [mir] goto -> bb16
  // ========== loop2_group3_bb16 ==========
  __t12 := true
  // [mir] StorageDead(_27)
  // [mir] StorageDead(_26)
  // [mir] StorageLive(_30)
  // [mir] StorageLive(_31)
  // [mir] _31 = const false
  _31 := builtin$havoc_ref()
  inhale acc(_31.val_bool, write)
  _31.val_bool := false
  // [mir] switchInt(move _31) -> [0: bb18, otherwise: bb17]
  __t37 := _31.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb18 ==========
  __t13 := true
  // [mir] _30 = const ()
  // [mir] goto -> bb19
  // ========== loop2_group3_bb19 ==========
  __t14 := true
  // [mir] StorageDead(_31)
  // [mir] StorageDead(_30)
  // [mir] StorageLive(_36)
  // [mir] StorageLive(_37)
  // [mir] _37 = const false
  _37 := builtin$havoc_ref()
  inhale acc(_37.val_bool, write)
  _37.val_bool := false
  // [mir] switchInt(move _37) -> [0: bb21, otherwise: bb20]
  __t38 := _37.val_bool
  // Ignore default target bb20, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb21 ==========
  __t15 := true
  // [mir] _36 = const ()
  // [mir] goto -> bb22
  // ========== loop2_group3_bb22 ==========
  __t16 := true
  // [mir] StorageDead(_37)
  // [mir] StorageDead(_36)
  // [mir] StorageLive(_44)
  // [mir] StorageLive(_45)
  // [mir] _45 = _4
  _45 := builtin$havoc_int()
  _45 := _4.val_int
  label l9
  // [mir] _46 = Eq(const 2_usize, const 0_usize)
  _46 := builtin$havoc_ref()
  inhale acc(_46.val_bool, write)
  _46.val_bool := false
  // [mir] assert(!move _46, "attempt to divide `{}` by zero", _45) -> [success: bb23, unwind: bb36]
  __t39 := _46.val_bool
  // Rust assertion: attempt to divide by zero
  assert !__t39
  // ========== loop2_group3_bb23 ==========
  __t17 := true
  // [mir] _44 = Div(move _45, const 2_usize)
  _44 := builtin$havoc_int()
  _44 := _45 / 2
  // [mir] StorageDead(_45)
  // [mir] FakeRead(ForLet(None), _44)
  // [mir] StorageLive(_47)
  // [mir] StorageLive(_48)
  // [mir] _48 = _3
  _48 := builtin$havoc_int()
  unfold acc(usize(_3), write)
  _48 := _3.val_int
  label l10
  // [mir] StorageLive(_49)
  // [mir] _49 = _44
  _49 := builtin$havoc_int()
  _49 := _44
  label l11
  // [mir] _50 = CheckedAdd(_48, _49)
  _50 := builtin$havoc_ref()
  inhale acc(_50.tuple_0, write)
  inhale acc(_50.tuple_0.val_int, write)
  inhale acc(_50.tuple_1, write)
  inhale acc(_50.tuple_1.val_bool, write)
  _50.tuple_0.val_int := _48 + _49
  _50.tuple_1.val_bool := _48 + _49 < 0 || _48 + _49 > 18446744073709551615
  // [mir] assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", move _48, move _49) -> [success: bb24, unwind: bb36]
  __t40 := _50.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t40
  // ========== loop2_group3_bb24 ==========
  __t18 := true
  // [mir] _47 = move (_50.0: usize)
  _47 := _50.tuple_0
  label l12
  // [mir] StorageDead(_49)
  // [mir] StorageDead(_48)
  // [mir] FakeRead(ForLet(None), _47)
  // [mir] StorageLive(_51)
  // [mir] StorageLive(_52)
  // [mir] StorageLive(_53)
  // [mir] _53 = _47
  _53 := builtin$havoc_int()
  _53 := _47.val_int
  label l13
  // [mir] _54 = Len((*_1))
  assert acc(Slice$i32(_1.val_ref), read$())
  _54 := builtin$havoc_int()
  _54 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
  // [mir] _55 = Lt(_53, _54)
  _55 := builtin$havoc_ref()
  inhale acc(_55.val_bool, write)
  _55.val_bool := _53 < _54
  // [mir] assert(move _55, "index out of bounds: the length is {} but the index is {}", move _54, _53) -> [success: bb25, unwind: bb36]
  __t41 := _55.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _54, _53
  assert __t41
  // ========== loop2_group3_bb25 ==========
  __t19 := true
  // [mir] _52 = (*_1)[_53]
  __t42 := builtin$havoc_ref()
  inhale acc(i32(__t42), write)
  assert acc(Slice$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref,
    _53) ==
    (unfolding acc(i32(__t42), write) in __t42.val_int)
  _52 := builtin$havoc_int()
  unfold acc(i32(__t42), write)
  _52 := __t42.val_int
  label l14
  // [mir] StorageLive(_56)
  // [mir] _56 = _2
  _56 := builtin$havoc_int()
  unfold acc(i32(_2), write)
  _56 := _2.val_int
  label l15
  // [mir] _51 = Gt(move _52, move _56)
  _51 := builtin$havoc_ref()
  inhale acc(_51.val_bool, write)
  _51.val_bool := _52 > _56
  // [mir] StorageDead(_56)
  // [mir] StorageDead(_53)
  // [mir] StorageDead(_52)
  // [mir] switchInt(move _51) -> [0: bb28, otherwise: bb26]
  __t43 := _51.val_bool
  if (__t43) {
    goto l5
  }
  goto loop2_start
  
  label l2
  // ========== l7 ==========
  // MIR edge bb3 --> bb35
  goto end_of_method
  
  label l4
  // ========== loop2_group3_bb33 ==========
  __t27 := true
  // [mir] StorageDead(_59)
  // [mir] goto -> bb34
  // ========== l40 ==========
  // drop Acc(_60.val_int, write) (Acc(_60.val_int, write))
  // drop Acc(_62.val_int, write) (Acc(_62.val_int, write))
  // drop Acc(__t46.val_int, write) (Acc(__t46.val_int, write))
  // drop Acc(_61.val_int, write) (Acc(_61.val_int, write))
  // drop Acc(_63.val_bool, write) (Acc(_63.val_bool, write))
  // drop Acc(_64.val_int, write) (Acc(_64.val_int, write))
  // drop Acc(_59.val_bool, write) (Acc(_59.val_bool, write))
  goto loop2_group2_bb4
  
  label l5
  // ========== l17 ==========
  // MIR edge bb25 --> bb26
  // ========== loop2_group3_bb26 ==========
  __t20 := true
  // [mir] StorageLive(_57)
  // [mir] _57 = _44
  _57 := builtin$havoc_int()
  _57 := _44
  label l18
  // [mir] _58 = CheckedSub(_4, _57)
  _58 := builtin$havoc_ref()
  inhale acc(_58.tuple_0, write)
  inhale acc(_58.tuple_0.val_int, write)
  inhale acc(_58.tuple_1, write)
  inhale acc(_58.tuple_1.val_bool, write)
  _58.tuple_0.val_int := _4.val_int - _57
  _58.tuple_1.val_bool := _4.val_int - _57 < 0 ||
    _4.val_int - _57 > 18446744073709551615
  // [mir] assert(!move (_58.1: bool), "attempt to compute `{} - {}`, which would overflow", _4, move _57) -> [success: bb27, unwind: bb36]
  __t44 := _58.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t44
  // ========== loop2_group3_bb27 ==========
  __t21 := true
  // [mir] _4 = move (_58.0: usize)
  _4 := _58.tuple_0
  label l19
  // [mir] StorageDead(_57)
  // [mir] _8 = const ()
  // [mir] goto -> bb34
  // ========== l39 ==========
  // drop Acc(_58.tuple_1.val_bool, write) (Acc(_58.tuple_1.val_bool, write))
  // drop Acc(_58.tuple_0, write) (Acc(_58.tuple_0, write))
  // drop Acc(_57.val_int, write) (Acc(_57.val_int, write))
  // drop Acc(_58.tuple_1, write) (Acc(_58.tuple_1, write))
  goto loop2_group2_bb4
  
  label loop2_group1_bb2
  // ========== l23 ==========
  // MIR edge bb29 --> bb30
  // ========== loop2_group3_bb30 ==========
  __t24 := true
  // [mir] StorageLive(_65)
  // [mir] _65 = _47
  _65 := builtin$havoc_ref()
  inhale acc(_65.val_int, write)
  _65.val_int := _47.val_int
  label l25
  // [mir] _3 = move _65
  _3 := _65
  label l26
  // [mir] StorageDead(_65)
  // [mir] StorageLive(_66)
  // [mir] _66 = _44
  _66 := builtin$havoc_int()
  _66 := _44
  label l27
  // [mir] _67 = CheckedSub(_4, _66)
  _67 := builtin$havoc_ref()
  inhale acc(_67.tuple_0, write)
  inhale acc(_67.tuple_0.val_int, write)
  inhale acc(_67.tuple_1, write)
  inhale acc(_67.tuple_1.val_bool, write)
  _67.tuple_0.val_int := _4.val_int - _66
  _67.tuple_1.val_bool := _4.val_int - _66 < 0 ||
    _4.val_int - _66 > 18446744073709551615
  // [mir] assert(!move (_67.1: bool), "attempt to compute `{} - {}`, which would overflow", _4, move _66) -> [success: bb31, unwind: bb36]
  __t48 := _67.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t48
  // ========== loop2_group3_bb31 ==========
  __t25 := true
  // [mir] _4 = move (_67.0: usize)
  _4 := _67.tuple_0
  label l28
  // [mir] StorageDead(_66)
  // [mir] _8 = const ()
  // [mir] goto -> bb33
  // ========== l36 ==========
  // drop Acc(_67.tuple_0, write) (Acc(_67.tuple_0, write))
  // drop Acc(_66.val_int, write) (Acc(_66.val_int, write))
  // drop Acc(_67.tuple_1.val_bool, write) (Acc(_67.tuple_1.val_bool, write))
  // drop Acc(_67.tuple_1, write) (Acc(_67.tuple_1, write))
  goto l4
  
  label loop2_group1_bb3
  // ========== l24 ==========
  // MIR edge bb29 --> bb32
  // ========== loop2_group3_bb32 ==========
  __t26 := true
  // [mir] StorageLive(_68)
  // [mir] StorageLive(_69)
  // [mir] _69 = _47
  _69 := builtin$havoc_ref()
  inhale acc(_69.val_int, write)
  _69.val_int := _47.val_int
  label l29
  // [mir] _68 = std::option::Option::<usize>::Some(move _69)
  _68 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_68), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_68) ==
    1
  // downcast _68 to enum_Some

  unfold acc(m_std$$option$$Option$_beg_$usize$_end_(_68), write)
  unfold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_68.enum_Some), write)
  _68.enum_Some.f$0 := _69
  label l30
  // [mir] StorageDead(_69)
  // [mir] _6 = move _68
  _6 := _68
  label l31
  // [mir] StorageDead(_68)
  // [mir] _4 = const 0_usize
  _4.val_int := 0
  // [mir] _8 = const ()
  // [mir] goto -> bb33
  // ========== l38 ==========
  fold acc(usize(_6.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  goto l4
  
  label loop2_group2_bb4
  // ========== loop2_group3_bb34 ==========
  __t28 := true
  // [mir] StorageDead(_51)
  // [mir] StorageDead(_47)
  // [mir] StorageDead(_44)
  // [mir] StorageDead(_9)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb36]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  _10 := _4.val_int
  label l32
  // [mir] _9 = Gt(move _10, const 0_usize)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _10 > 0
  // [mir] StorageDead(_10)
  // [mir] switchInt(move _9) -> [0: bb35, otherwise: bb4]
  __t49 := _9.val_bool
  if (__t49) {
    goto loop2_inv_post_fnspc
  }
  goto loop2_inv_pre
  
  label loop2_inv_post_fnspc
  // ========== l34 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb6, otherwise: bb5]
  __t50 := _12.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_4), write)
  // obtain acc(usize(_4), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  // obtain acc(_1.val_ref, read)
  fold acc(i32(_2), write)
  // obtain acc(i32(_2), read)
  assert !((unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <
    0 ||
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <=
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_4), write) in _4.val_int) > 0 &&
    (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      _6.discriminant) ==
    0 &&
    ((unfolding acc(i32(_2), write) in _2.val_int) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) &&
    (f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(i32(_2), write) in
        (let _LET_2 ==
          (_3.val_int) in
          (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
            _0_quant_0 <= 18446744073709551615 ==>
            _0_quant_0 < _LET_2 ==>
            _0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
            read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
            _0_quant_0) <
            _2.val_int)))) &&
    ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      _6.discriminant) ==
    0 ?
      !((unfolding acc(usize(_3), write) in _3.val_int) +
      (unfolding acc(usize(_4), write) in _4.val_int) <
      0 ||
      (unfolding acc(usize(_3), write) in _3.val_int) +
      (unfolding acc(usize(_4), write) in _4.val_int) >
      18446744073709551615) &&
      f_contains_not__$TY$__Snap$Slice$i32$$int$$$int$$$int$$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
      (unfolding acc(usize(_3), write) in _3.val_int) +
      (unfolding acc(usize(_4), write) in _4.val_int), len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)),
      (unfolding acc(i32(_2), write) in _2.val_int)) :
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
        ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
        read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
          (unfolding acc(usize(_6.enum_Some.f$0), write) in
            _6.enum_Some.f$0.val_int))) ==
        (unfolding acc(i32(_2), write) in _2.val_int))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_4), write) &&
    (acc(usize(_3), write) &&
    (acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$()))))
  inhale false
  goto end_of_method
  
  label loop2_inv_post_perm
  // ========== bb35 ==========
  __t29 := true
  // [mir] StorageLive(_71)
  // [mir] _7 = const ()
  // [mir] StorageDead(_71)
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_7)
  // [mir] _0 = _6
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6) ==
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)
  label l35
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_3)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l37
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(Slice$i32(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write) in
      _0.discriminant) ==
    0 ?
      f_contains_not__$TY$__Snap$Slice$i32$$int$$$int$$$int$$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0),
      0, len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0)),
      old[pre]((unfolding acc(i32(_2), write) in _2.val_int))) :
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write) in
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_0.enum_Some), write) in
          (unfolding acc(usize(_0.enum_Some.f$0), write) in
            _0.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0)) &&
        ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_0.enum_Some), write) in
          (unfolding acc(usize(_0.enum_Some.f$0), write) in
            _0.enum_Some.f$0.val_int)) <
        len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0)) &&
        read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0),
        (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_0.enum_Some), write) in
          (unfolding acc(usize(_0.enum_Some.f$0), write) in
            _0.enum_Some.f$0.val_int))) ==
        old[pre]((unfolding acc(i32(_2), write) in _2.val_int)))))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(Slice$i32(_old$pre$0), read$())
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_inv_pre
  // ========== l33 ==========
  // MIR edge bb3 --> bb35
  // ========== l42 ==========
  // drop Acc(__t42.val_int, write) (Acc(__t42.val_int, write))
  // drop Acc(_23.val_bool, write) (Acc(_23.val_bool, write))
  // drop Acc(_44.val_int, write) (Acc(_44.val_int, write))
  // drop Acc(_48.val_int, write) (Acc(_48.val_int, write))
  // drop Acc(_18.val_bool, write) (Acc(_18.val_bool, write))
  // drop Acc(_47.val_int, write) (Acc(_47.val_int, write))
  // drop Acc(_54.val_int, write) (Acc(_54.val_int, write))
  // drop Acc(_27.val_bool, write) (Acc(_27.val_bool, write))
  // drop Acc(_37.val_bool, write) (Acc(_37.val_bool, write))
  // drop Acc(_49.val_int, write) (Acc(_49.val_int, write))
  // drop Acc(_53.val_int, write) (Acc(_53.val_int, write))
  // drop Acc(_12.val_bool, write) (Acc(_12.val_bool, write))
  // drop Acc(_45.val_int, write) (Acc(_45.val_int, write))
  // drop Acc(_51.val_bool, write) (Acc(_51.val_bool, write))
  // drop Acc(_56.val_int, write) (Acc(_56.val_int, write))
  // drop Acc(_50.tuple_1.val_bool, write) (Acc(_50.tuple_1.val_bool, write))
  // drop Acc(_31.val_bool, write) (Acc(_31.val_bool, write))
  // drop Acc(_50.tuple_0, write) (Acc(_50.tuple_0, write))
  // drop Acc(_46.val_bool, write) (Acc(_46.val_bool, write))
  // drop Acc(_52.val_int, write) (Acc(_52.val_int, write))
  // drop Acc(_55.val_bool, write) (Acc(_55.val_bool, write))
  // drop Acc(_50.tuple_1, write) (Acc(_50.tuple_1, write))
  goto loop2_inv_post_perm
  
  label loop2_start
  // ========== l16 ==========
  // MIR edge bb25 --> bb28
  // ========== loop2_group3_bb28 ==========
  __t22 := true
  // [mir] StorageLive(_59)
  // [mir] StorageLive(_60)
  // [mir] StorageLive(_61)
  // [mir] _61 = _47
  _61 := builtin$havoc_int()
  _61 := _47.val_int
  label l20
  // [mir] _62 = Len((*_1))
  assert acc(Slice$i32(_1.val_ref), read$())
  _62 := builtin$havoc_int()
  _62 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
  // [mir] _63 = Lt(_61, _62)
  _63 := builtin$havoc_ref()
  inhale acc(_63.val_bool, write)
  _63.val_bool := _61 < _62
  // [mir] assert(move _63, "index out of bounds: the length is {} but the index is {}", move _62, _61) -> [success: bb29, unwind: bb36]
  __t45 := _63.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _62, _61
  assert __t45
  // ========== loop2_group3_bb29 ==========
  __t23 := true
  // [mir] _60 = (*_1)[_61]
  __t46 := builtin$havoc_ref()
  inhale acc(i32(__t46), write)
  assert acc(Slice$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref,
    _61) ==
    (unfolding acc(i32(__t46), write) in __t46.val_int)
  _60 := builtin$havoc_int()
  unfold acc(i32(__t46), write)
  _60 := __t46.val_int
  label l21
  // [mir] StorageLive(_64)
  // [mir] _64 = _2
  _64 := builtin$havoc_int()
  _64 := _2.val_int
  label l22
  // [mir] _59 = Lt(move _60, move _64)
  _59 := builtin$havoc_ref()
  inhale acc(_59.val_bool, write)
  _59.val_bool := _60 < _64
  // [mir] StorageDead(_64)
  // [mir] StorageDead(_61)
  // [mir] StorageDead(_60)
  // [mir] switchInt(move _59) -> [0: bb32, otherwise: bb30]
  __t47 := _59.val_bool
  if (!__t47) {
    goto loop2_group1_bb3
  }
  goto loop2_group1_bb2
  
  label return
  // ========== l4 ==========
  // MIR edge bb3 --> bb35
  // ========== l41 ==========
  unfold acc(i32(_2), write)
  goto loop2_inv_post_perm
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
