domain MirrorDomain  {
  
  function mirror_simple$f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(_1: Snap$m_MessageOption$_beg_$_end_): Bool 
  
  function mirror_simple$f_StringWrapper$$equals__$TY$__Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$$bool$(_1: Snap$struct$m_StringWrapper,
  _2: Snap$struct$m_StringWrapper): Bool 
}

domain Snap$m_MessageOption$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_$$int$(self: Snap$m_MessageOption$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_0: Snap$struct$m_Message): Snap$m_MessageOption$_beg_$_end_ 
  
  function Snap$m_MessageOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message(self: Snap$m_MessageOption$_beg_$_end_): Snap$struct$m_Message 
  
  function cons$1$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(): Snap$m_MessageOption$_beg_$_end_ 
  
  axiom Snap$m_MessageOption$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_MessageOption$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_MessageOption$_beg_$_end_$0$injectivity {
    (forall _l_0: Snap$struct$m_Message, _r_0: Snap$struct$m_Message ::
      { cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_l_0),
      cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_r_0) }
      cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_l_0) ==
      cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_MessageOption$_beg_$_end_$0$discriminant_axiom {
    (forall _0: Snap$struct$m_Message ::
      { cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_0) }
      discriminant$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_0)) ==
      0)
  }
  
  axiom Snap$m_MessageOption$_beg_$_end_$0$field$f$0$axiom {
    (forall _0: Snap$struct$m_Message ::
      { Snap$m_MessageOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message(cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_0)) }
      Snap$m_MessageOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message(cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_MessageOption$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_()) ==
    1
  }
}

domain Snap$struct$m_Message  {
  
  function cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_0: Snap$struct$m_StringWrapper,
  _1: Snap$struct$m_StringWrapper): Snap$struct$m_Message 
  
  function Snap$struct$m_Message$0$field$f$recipient__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper(self: Snap$struct$m_Message): Snap$struct$m_StringWrapper 
  
  function Snap$struct$m_Message$0$field$f$data__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper(self: Snap$struct$m_Message): Snap$struct$m_StringWrapper 
  
  axiom Snap$struct$m_Message$0$injectivity {
    (forall _l_0: Snap$struct$m_StringWrapper, _l_1: Snap$struct$m_StringWrapper,
    _r_0: Snap$struct$m_StringWrapper, _r_1: Snap$struct$m_StringWrapper ::
      { cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_l_0,
      _l_1), cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_r_0,
      _r_1) }
      cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_l_0,
      _l_1) ==
      cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_r_0,
      _r_1) ==>
      _l_0 == _r_0 && _l_1 == _r_1)
  }
  
  axiom Snap$struct$m_Message$0$field$f$recipient$axiom {
    (forall _0: Snap$struct$m_StringWrapper, _1: Snap$struct$m_StringWrapper ::
      { Snap$struct$m_Message$0$field$f$recipient__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper(cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_0,
      _1)) }
      Snap$struct$m_Message$0$field$f$recipient__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper(cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_0,
      _1)) ==
      _0)
  }
  
  axiom Snap$struct$m_Message$0$field$f$data$axiom {
    (forall _0: Snap$struct$m_StringWrapper, _1: Snap$struct$m_StringWrapper ::
      { Snap$struct$m_Message$0$field$f$data__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper(cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_0,
      _1)) }
      Snap$struct$m_Message$0$field$f$data__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper(cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message(_0,
      _1)) ==
      _1)
  }
}

domain Snap$struct$m_StringWrapper  {
  
  function cons$0$__$TY$__Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper(): Snap$struct$m_StringWrapper 
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$data: Ref

field f$recipient: Ref

field val_bool: Bool

field val_ref: Ref

function f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(_1: Snap$m_MessageOption$_beg_$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(_1),
    true]
{
  discriminant$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_$$int$(_1) ==
  0
}

function f_StringWrapper$$equals__$TY$__Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$$bool$(_1: Snap$struct$m_StringWrapper,
  _2: Snap$struct$m_StringWrapper): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_StringWrapper$$equals__$TY$__Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$$bool$(_1,
    _2),
    true]


function snap$__$TY$__Snap$m_MessageOption$_beg_$_end_$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(self: Ref): Snap$m_MessageOption$_beg_$_end_
  requires acc(m_MessageOption$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_MessageOption$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_() :
    cons$0$__$TY$__Snap$m_MessageOption$_beg_$_end_$Snap$struct$m_Message$Snap$m_MessageOption$_beg_$_end_((unfolding acc(m_MessageOption$_beg_$_end_(self), read$()) in
      (unfolding acc(m_MessageOption$_beg_$_end_Some(self.enum_Some), read$()) in
        snap$__$TY$__Snap$struct$m_Message$struct$m_Message$Snap$struct$m_Message(self.enum_Some.f$0)))))
}

function snap$__$TY$__Snap$struct$m_Message$struct$m_Message$Snap$struct$m_Message(self: Ref): Snap$struct$m_Message
  requires acc(struct$m_Message(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_Message$Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$Snap$struct$m_Message((unfolding acc(struct$m_Message(self), read$()) in
    snap$__$TY$__Snap$struct$m_StringWrapper$struct$m_StringWrapper$Snap$struct$m_StringWrapper(self.f$recipient)),
  (unfolding acc(struct$m_Message(self), read$()) in
    snap$__$TY$__Snap$struct$m_StringWrapper$struct$m_StringWrapper$Snap$struct$m_StringWrapper(self.f$data)))
}

function snap$__$TY$__Snap$struct$m_StringWrapper$struct$m_StringWrapper$Snap$struct$m_StringWrapper(self: Ref): Snap$struct$m_StringWrapper
  requires acc(struct$m_StringWrapper(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper()
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate m_MessageOption$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_MessageOption$_beg_$_end_Some(self.enum_Some), write)))
}

predicate m_MessageOption$_beg_$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(struct$m_Message(self.f$0), write)
}

predicate struct$m_Message(self: Ref) {
  acc(self.f$recipient, write) &&
  (acc(struct$m_StringWrapper(self.f$recipient), write) &&
  (acc(self.f$data, write) &&
  acc(struct$m_StringWrapper(self.f$data), write)))
}

predicate struct$m_Receiver(self: Ref) 

predicate struct$m_Sender(self: Ref) 

predicate struct$m_StringWrapper(self: Ref) 

predicate tuple0$(self: Ref) {
  true
}

method m_router() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var _preserve$0: Ref
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Ref
  var _11: Ref
  var _13: Ref
  var _16: Ref
  var _17: Ref
  var _18: Ref
  var _19: Ref
  var _21: Ref
  var _22: Ref
  var _23: Ref
  var _24: Ref
  var _25: Ref
  var _26: Ref
  var _27: Ref
  var _28: Ref
  var _29: Ref
  var _30: Ref
  var _31: Ref
  var _32: Ref
  var _33: Ref
  
  label start
  // ========== start ==========
  // Def path: "message::router"
  // Span: tests/verify_overflow/pass/nll-rfc/message.rs:94:1: 118:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(struct$m_StringWrapper(_1.val_ref), write) &&
    (acc(struct$m_Receiver(_2), write) && acc(struct$m_Sender(_3), write)))
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_4)
  // [mir] _4 = move _2
  _4 := _2
  label l0
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_5)
  // [mir] _5 = move _3
  _5 := _3
  label l1
  // [mir] FakeRead(ForLet(None), _5)
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] _7 = &mut _4
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_ref, write)
  _7.val_ref := _4
  label l2
  // [mir] _6 = Receiver::recv(move _7) -> [return: bb1, unwind: bb19]
  label l3
  assert true
  exhale acc(_7.val_ref, write) &&
    acc(struct$m_Receiver(_7.val_ref), write)
  _6 := builtin$havoc_ref()
  inhale acc(struct$m_Receiver(old[l3](_7.val_ref)), write)
  inhale acc(m_MessageOption$_beg_$_end_(_6), write)
  inhale true
  label l4
  // ========== l5 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L16,L0,)

  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_7)
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = &_6
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_ref, write)
  _9.val_ref := _6
  exhale acc(m_MessageOption$_beg_$_end_(_6), write - read$())
  inhale acc(m_MessageOption$_beg_$_end_(_9.val_ref), read$())
  label l6
  // [mir] _8 = MessageOption::is_some(move _9) -> [return: bb2, unwind: bb19]
  label l7
  _8 := builtin$havoc_ref()
  inhale acc(bool(_8), write)
  inhale (unfolding acc(bool(_8), write) in _8.val_bool) ==
    f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_MessageOption$_beg_$_end_$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(_9.val_ref))
  // transfer perm _9.val_ref --> old[l7](_9.val_ref) // unchecked: false
  // ========== l8 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // expire_borrows ReborrowingDAG(L15,L1,)

  if (__t1 && __t1) {
    // expire loan L1
    // transfer perm old[l7](_9.val_ref) --> old[l6](_9.val_ref) // unchecked: false
    exhale acc(m_MessageOption$_beg_$_end_(old[l6](_9.val_ref)), read$())
    inhale acc(m_MessageOption$_beg_$_end_(_6), write - read$())
  }
  // ========== bb2 ==========
  __t2 := true
  // [mir] StorageDead(_9)
  // [mir] FakeRead(ForLet(None), _8)
  // [mir] goto -> bb3
  // ========== loop3_start ==========
  // ========== loop3_group1_bb3 ==========
  // This is a loop head
  __t3 := true
  // [mir] falseUnwind -> [real: bb4, unwind: bb19]
  // ========== loop3_group1_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _8
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  unfold acc(bool(_8), write)
  _11.val_bool := _8.val_bool
  label l9
  // [mir] switchInt(move _11) -> [0: bb18, otherwise: bb5]
  __t18 := _11.val_bool
  if (__t18) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l11 ==========
  // MIR edge bb4 --> bb5
  // ========== loop3_group2_bb5 ==========
  __t5 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb7, otherwise: bb6]
  __t19 := _13.val_bool
  // Ignore default target bb6, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop3_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb3)
  _preserve$0 := _1.val_ref
  // obtain acc(m_MessageOption$_beg_$_end_(_6), write)
  fold acc(bool(_8), write)
  // obtain acc(bool(_8), write)
  // obtain acc(struct$m_Receiver(_4), write)
  // obtain acc(struct$m_Sender(_5), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_StringWrapper(_1.val_ref), read)
  assert f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_MessageOption$_beg_$_end_$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(_6))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(m_MessageOption$_beg_$_end_(_6), write) &&
    (acc(bool(_8), write) &&
    (acc(struct$m_Receiver(_4), write) &&
    (acc(struct$m_Sender(_5), write) &&
    (acc(_1.val_ref, read$()) &&
    acc(struct$m_StringWrapper(_1.val_ref), read$())))))
  _11 := builtin$havoc_ref()
  _13 := builtin$havoc_ref()
  _16 := builtin$havoc_ref()
  _17 := builtin$havoc_ref()
  _18 := builtin$havoc_ref()
  _19 := builtin$havoc_ref()
  _21 := builtin$havoc_ref()
  _22 := builtin$havoc_ref()
  _23 := builtin$havoc_ref()
  _24 := builtin$havoc_ref()
  _25 := builtin$havoc_ref()
  _26 := builtin$havoc_ref()
  _27 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _29 := builtin$havoc_ref()
  _30 := builtin$havoc_ref()
  _31 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _33 := builtin$havoc_ref()
  _6 := builtin$havoc_ref()
  _8 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop3_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb3
  inhale acc(m_MessageOption$_beg_$_end_(_6), write) &&
    (acc(bool(_8), write) &&
    (acc(struct$m_Receiver(_4), write) &&
    (acc(struct$m_Sender(_5), write) &&
    (acc(_1.val_ref, read$()) &&
    acc(struct$m_StringWrapper(_1.val_ref), read$())))))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop3_group2a_bb3 ==========
  // This is a loop head
  __t3 := true
  // [mir] falseUnwind -> [real: bb4, unwind: bb19]
  // ========== loop3_group2a_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _8
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  unfold acc(bool(_8), write)
  _11.val_bool := _8.val_bool
  label l12
  // [mir] switchInt(move _11) -> [0: bb18, otherwise: bb5]
  __t20 := _11.val_bool
  if (__t20) {
    goto bb1
  }
  goto l5
  
  label bb1
  // ========== l14 ==========
  // MIR edge bb4 --> bb5
  // ========== loop3_group2b_bb5 ==========
  __t5 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb7, otherwise: bb6]
  __t21 := _13.val_bool
  // Ignore default target bb6, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop3_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb3
  inhale f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_MessageOption$_beg_$_end_$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(_6))
  // ========== loop3_group3_bb7 ==========
  __t6 := true
  // [mir] _12 = const ()
  // [mir] goto -> bb8
  // ========== loop3_group3_bb8 ==========
  __t7 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] StorageLive(_16)
  // [mir] StorageLive(_17)
  // [mir] _17 = move _6
  _17 := _6
  label l15
  // [mir] _16 = MessageOption::take(move _17) -> [return: bb9, unwind: bb19]
  label l16
  assert f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_MessageOption$_beg_$_end_$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(_17))
  assert true
  exhale acc(m_MessageOption$_beg_$_end_(_17), write)
  _16 := builtin$havoc_ref()
  inhale acc(struct$m_Message(_16), write)
  inhale true
  label l17
  // ========== loop3_group3_bb9 ==========
  __t8 := true
  // [mir] StorageDead(_17)
  // [mir] FakeRead(ForLet(None), _16)
  // [mir] StorageLive(_18)
  // [mir] StorageLive(_19)
  // [mir] _19 = &mut _4
  _19 := builtin$havoc_ref()
  inhale acc(_19.val_ref, write)
  _19.val_ref := _4
  label l18
  // [mir] _18 = Receiver::recv(move _19) -> [return: bb10, unwind: bb19]
  label l19
  assert true
  exhale acc(_19.val_ref, write) &&
    acc(struct$m_Receiver(_19.val_ref), write)
  _18 := builtin$havoc_ref()
  inhale acc(struct$m_Receiver(old[l19](_19.val_ref)), write)
  inhale acc(m_MessageOption$_beg_$_end_(_18), write)
  inhale true
  label l20
  // ========== l21 ==========
  // MIR edge bb9 --> bb10
  // Expire borrows
  // expire_borrows ReborrowingDAG(L18,L3,)

  // ========== loop3_group3_bb10 ==========
  __t9 := true
  // [mir] StorageDead(_19)
  // [mir] _6 = move _18
  _6 := _18
  label l22
  // [mir] StorageDead(_18)
  // [mir] StorageLive(_20)
  // [mir] StorageLive(_21)
  // [mir] _21 = &mut _16
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_ref, write)
  _21.val_ref := _16
  label l23
  // [mir] FakeRead(ForMatchedPlace(None), _21)
  // [mir] StorageLive(_22)
  // [mir] _22 = &mut (((*_21) as Letter).0: StringWrapper)
  _22 := builtin$havoc_ref()
  inhale acc(_22.val_ref, write)
  unfold acc(struct$m_Message(_21.val_ref), write)
  _22.val_ref := _21.val_ref.f$recipient
  label l24
  // [mir] StorageLive(_23)
  // [mir] _23 = &mut (((*_21) as Letter).1: StringWrapper)
  _23 := builtin$havoc_ref()
  inhale acc(_23.val_ref, write)
  _23.val_ref := _21.val_ref.f$data
  label l25
  // [mir] StorageLive(_24)
  // [mir] StorageLive(_25)
  // [mir] _25 = &(*_22)
  _25 := builtin$havoc_ref()
  inhale acc(_25.val_ref, write)
  _25.val_ref := _22.val_ref
  exhale acc(struct$m_StringWrapper(_22.val_ref), write - read$())
  inhale acc(struct$m_StringWrapper(_25.val_ref), read$())
  label l26
  // [mir] StorageLive(_26)
  // [mir] _26 = &(*_1)
  _26 := builtin$havoc_ref()
  inhale acc(_26.val_ref, write)
  _26.val_ref := _1.val_ref
  exhale acc(struct$m_StringWrapper(_1.val_ref), write - read$())
  inhale acc(struct$m_StringWrapper(_26.val_ref), read$())
  label l27
  // [mir] _24 = StringWrapper::equals(move _25, move _26) -> [return: bb11, unwind: bb19]
  label l28
  _24 := builtin$havoc_ref()
  inhale acc(bool(_24), write)
  inhale (unfolding acc(bool(_24), write) in _24.val_bool) ==
    f_StringWrapper$$equals__$TY$__Snap$struct$m_StringWrapper$Snap$struct$m_StringWrapper$$bool$(snap$__$TY$__Snap$struct$m_StringWrapper$struct$m_StringWrapper$Snap$struct$m_StringWrapper(_25.val_ref),
    snap$__$TY$__Snap$struct$m_StringWrapper$struct$m_StringWrapper$Snap$struct$m_StringWrapper(_26.val_ref))
  // transfer perm _25.val_ref --> old[l28](_25.val_ref) // unchecked: false
  // transfer perm _26.val_ref --> old[l28](_26.val_ref) // unchecked: false
  // ========== l29 ==========
  // MIR edge bb10 --> bb11
  // Expire borrows
  // expire_borrows ReborrowingDAG(L22,L21,L8,L7,L5,)

  if (__t9 && __t9) {
    // expire loan L8
    // transfer perm old[l28](_26.val_ref) --> old[l27](_26.val_ref) // unchecked: false
    exhale acc(struct$m_StringWrapper(old[l27](_26.val_ref)), read$())
    inhale acc(struct$m_StringWrapper(_1.val_ref), write - read$())
    // drop Acc(old[l28](_25.val_ref), write) (Acc(old[l28](_25.val_ref), write))
    // drop Acc(old[l27](_26.val_ref), write) (Acc(old[l27](_26.val_ref), write))
    // drop Pred(_22.val_ref, read) (Pred(_22.val_ref, read))
    // drop Pred(old[l28](_25.val_ref), read) (Pred(old[l28](_25.val_ref), read))
    // drop Pred(_1.val_ref, write-read) (Pred(_1.val_ref, write-read))
    // restored (in branch merge): Pred(_1.val_ref, write-read) (Pred(_1.val_ref, write-read))
  }
  if (__t9 && __t9) {
    // expire loan L7
    // transfer perm old[l28](_25.val_ref) --> old[l26](_25.val_ref) // unchecked: false
    exhale acc(struct$m_StringWrapper(old[l26](_25.val_ref)), read$())
    inhale acc(struct$m_StringWrapper(_22.val_ref), write - read$())
  }
  // ========== loop3_group3_bb11 ==========
  __t10 := true
  // [mir] StorageDead(_26)
  // [mir] StorageDead(_25)
  // [mir] switchInt(move _24) -> [0: bb14, otherwise: bb12]
  unfold acc(bool(_24), write)
  __t22 := _24.val_bool
  if (__t22) {
    goto bb2
  }
  goto l8
  
  label bb2
  // ========== l31 ==========
  // MIR edge bb11 --> bb12
  // Expire borrows
  // expire_borrows ReborrowingDAG(L6,L4,)

  // ========== loop3_group3_bb12 ==========
  __t11 := true
  // [mir] StorageLive(_27)
  // [mir] StorageLive(_28)
  // [mir] _28 = &mut _5
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_ref, write)
  _28.val_ref := _5
  label l32
  // [mir] StorageLive(_29)
  // [mir] _29 = move _16
  _29 := _16
  label l33
  // [mir] _27 = Sender::send(move _28, move _29) -> [return: bb13, unwind: bb19]
  label l34
  assert true
  fold acc(struct$m_Message(_29), write)
  exhale acc(_28.val_ref, write) &&
    (acc(struct$m_Sender(_28.val_ref), write) &&
    acc(struct$m_Message(_29), write))
  _27 := builtin$havoc_ref()
  inhale acc(struct$m_Sender(old[l34](_28.val_ref)), write)
  inhale acc(tuple0$(_27), write)
  inhale true
  label l35
  // ========== l36 ==========
  // MIR edge bb12 --> bb13
  // Expire borrows
  // expire_borrows ReborrowingDAG(L20,L9,)

  // ========== loop3_group3_bb13 ==========
  __t12 := true
  // [mir] StorageDead(_29)
  // [mir] StorageDead(_28)
  // [mir] StorageDead(_27)
  // [mir] _20 = const ()
  // [mir] goto -> bb16
  // ========== l48 ==========
  // drop Pred(_27, write) (Pred(_27, write))
  goto loop3_start
  
  label l10
  // ========== l47 ==========
  // MIR edge bb4 --> bb5
  // ========== loop3_group5_bb5 ==========
  __t5 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb7, otherwise: bb6]
  __t24 := _13.val_bool
  // Ignore default target bb6, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop3_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb3)
  // obtain acc(m_MessageOption$_beg_$_end_(_6), write)
  fold acc(bool(_8), write)
  // obtain acc(bool(_8), write)
  // obtain acc(struct$m_Receiver(_4), write)
  // obtain acc(struct$m_Sender(_5), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_StringWrapper(_1.val_ref), read)
  assert f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_MessageOption$_beg_$_end_$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(_6))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(m_MessageOption$_beg_$_end_(_6), write) &&
    (acc(bool(_8), write) &&
    (acc(struct$m_Receiver(_4), write) &&
    (acc(struct$m_Sender(_5), write) &&
    (acc(_1.val_ref, read$()) &&
    acc(struct$m_StringWrapper(_1.val_ref), read$())))))
  inhale false
  goto end_of_method
  
  label l5
  // ========== l13 ==========
  // MIR edge bb4 --> bb18
  goto end_of_method
  
  label l8
  // ========== l30 ==========
  // MIR edge bb11 --> bb14
  // ========== loop3_group3_bb14 ==========
  __t13 := true
  // [mir] StorageLive(_30)
  // [mir] StorageLive(_31)
  // [mir] _31 = &mut (*_23)
  _31 := builtin$havoc_ref()
  inhale acc(_31.val_ref, write)
  _31.val_ref := _23.val_ref
  label l37
  // [mir] _30 = process(move _31) -> [return: bb15, unwind: bb19]
  label l38
  assert true
  exhale acc(_31.val_ref, write) &&
    acc(struct$m_StringWrapper(_31.val_ref), write)
  _30 := builtin$havoc_ref()
  inhale acc(struct$m_StringWrapper(old[l38](_31.val_ref)), write)
  inhale acc(tuple0$(_30), write)
  inhale true
  label l39
  // ========== l40 ==========
  // MIR edge bb14 --> bb15
  // Expire borrows
  // expire_borrows ReborrowingDAG(L17,L11,L6,L4,)

  // ========== loop3_group3_bb15 ==========
  __t14 := true
  // [mir] StorageDead(_31)
  // [mir] StorageDead(_30)
  // [mir] _20 = const ()
  // [mir] goto -> bb16
  // ========== l50 ==========
  // drop Pred(_16.f$recipient, write) (Pred(_16.f$recipient, write))
  // drop Pred(_16.f$data, write) (Pred(_16.f$data, write))
  // drop Pred(_30, write) (Pred(_30, write))
  // drop Acc(_16.f$recipient, write) (Acc(_16.f$recipient, write))
  // drop Acc(_16.f$data, write) (Acc(_16.f$data, write))
  goto loop3_start
  
  label loop3_group1_bb3
  // ========== l46 ==========
  // MIR edge bb4 --> bb18
  // ========== l51 ==========
  // drop Acc(_13.val_bool, write) (Acc(_13.val_bool, write))
  // drop Acc(_24.val_bool, write) (Acc(_24.val_bool, write))
  // drop Acc(_23.val_ref, write) (Acc(_23.val_ref, write))
  // drop Acc(_33.val_ref, write) (Acc(_33.val_ref, write))
  // drop Acc(_22.val_ref, write) (Acc(_22.val_ref, write))
  // drop Acc(_25.val_ref, write) (Acc(_25.val_ref, write))
  // drop Acc(old[l41](_33.val_ref), write) (Acc(old[l41](_33.val_ref), write))
  // drop Acc(_21.val_ref, write) (Acc(_21.val_ref, write))
  // drop Acc(_26.val_ref, write) (Acc(_26.val_ref, write))
  goto loop3_group1_bb4
  
  label loop3_group1_bb4
  // ========== bb18 ==========
  __t17 := true
  // [mir] StorageLive(_35)
  // [mir] _0 = const ()
  // [mir] StorageDead(_35)
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l49
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(struct$m_StringWrapper(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_StringWrapper(_old$pre$0), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop3_start
  // ========== loop3_group3_bb16 ==========
  __t15 := true
  // [mir] StorageDead(_24)
  // [mir] StorageDead(_23)
  // [mir] StorageDead(_22)
  // [mir] StorageDead(_21)
  // [mir] StorageDead(_20)
  // [mir] StorageLive(_32)
  // [mir] StorageLive(_33)
  // [mir] _33 = &_6
  _33 := builtin$havoc_ref()
  inhale acc(_33.val_ref, write)
  _33.val_ref := _6
  exhale acc(m_MessageOption$_beg_$_end_(_6), write - read$())
  inhale acc(m_MessageOption$_beg_$_end_(_33.val_ref), read$())
  label l41
  // [mir] _32 = MessageOption::is_some(move _33) -> [return: bb17, unwind: bb19]
  label l42
  _32 := builtin$havoc_ref()
  inhale acc(bool(_32), write)
  inhale (unfolding acc(bool(_32), write) in _32.val_bool) ==
    f_MessageOption$$is_some__$TY$__Snap$m_MessageOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_MessageOption$_beg_$_end_$m_MessageOption$_beg_$_end_$Snap$m_MessageOption$_beg_$_end_(_33.val_ref))
  // transfer perm _33.val_ref --> old[l42](_33.val_ref) // unchecked: false
  // ========== l43 ==========
  // MIR edge bb16 --> bb17
  // Expire borrows
  // expire_borrows ReborrowingDAG(L19,L10,)

  if (__t15 && __t15) {
    // expire loan L10
    // transfer perm old[l42](_33.val_ref) --> old[l41](_33.val_ref) // unchecked: false
    exhale acc(m_MessageOption$_beg_$_end_(old[l41](_33.val_ref)), read$())
    inhale acc(m_MessageOption$_beg_$_end_(_6), write - read$())
  }
  // ========== loop3_group3_bb17 ==========
  __t16 := true
  // [mir] StorageDead(_33)
  // [mir] _8 = move _32
  _8 := _32
  label l44
  // [mir] StorageDead(_32)
  // [mir] _10 = const ()
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_11)
  // [mir] goto -> bb3
  // ========== loop3_group4_bb3 ==========
  // This is a loop head
  __t3 := true
  // [mir] falseUnwind -> [real: bb4, unwind: bb19]
  // ========== loop3_group4_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _8
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  unfold acc(bool(_8), write)
  _11.val_bool := _8.val_bool
  label l45
  // [mir] switchInt(move _11) -> [0: bb18, otherwise: bb5]
  __t23 := _11.val_bool
  if (__t23) {
    goto l10
  }
  goto loop3_group1_bb3
  
  label return
  // ========== l10 ==========
  // MIR edge bb4 --> bb18
  goto loop3_group1_bb4
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
