domain MirrorDomain  {
  
  function mirror_simple$f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$bool$(_1: Snap$m_Tree$_beg_$i32$_end_): Bool 
  
  function mirror_simple$f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(_1: Snap$m_Tree$_beg_$i32$_end_,
  _2: Int): Bool 
  
  function mirror_simple$f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1: Int,
  _2: Int): Snap$m_std$$cmp$$Ordering$_beg_$_end_ 
}

domain Snap$m_Tree$_beg_$i32$_end_  {
  
  function discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(self: Snap$m_Tree$_beg_$i32$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0: Int,
  _1: Snap$m_Tree$_beg_$i32$_end_, _2: Snap$m_Tree$_beg_$i32$_end_): Snap$m_Tree$_beg_$i32$_end_ 
  
  function Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(self: Snap$m_Tree$_beg_$i32$_end_): Int 
  
  function Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self: Snap$m_Tree$_beg_$i32$_end_): Snap$m_Tree$_beg_$i32$_end_ 
  
  function Snap$m_Tree$_beg_$i32$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self: Snap$m_Tree$_beg_$i32$_end_): Snap$m_Tree$_beg_$i32$_end_ 
  
  function cons$1$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(): Snap$m_Tree$_beg_$i32$_end_ 
  
  axiom Snap$m_Tree$_beg_$i32$_end_$discriminant_range {
    (forall self: Snap$m_Tree$_beg_$i32$_end_ ::
      { discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_Tree$_beg_$i32$_end_$0$injectivity {
    (forall _l_0: Int, _l_1: Snap$m_Tree$_beg_$i32$_end_, _l_2: Snap$m_Tree$_beg_$i32$_end_,
    _r_0: Int, _r_1: Snap$m_Tree$_beg_$i32$_end_, _r_2: Snap$m_Tree$_beg_$i32$_end_ ::
      { cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_l_0,
      _l_1, _l_2), cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_r_0,
      _r_1, _r_2) }
      cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_l_0,
      _l_1, _l_2) ==
      cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_r_0,
      _r_1, _r_2) ==>
      _l_0 == _r_0 && (_l_1 == _r_1 && _l_2 == _r_2))
  }
  
  axiom Snap$m_Tree$_beg_$i32$_end_$0$discriminant_axiom {
    (forall _0: Int, _1: Snap$m_Tree$_beg_$i32$_end_, _2: Snap$m_Tree$_beg_$i32$_end_ ::
      { cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2) }
      discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2)) ==
      0)
  }
  
  axiom Snap$m_Tree$_beg_$i32$_end_$0$field$f$0$axiom {
    (forall _0: Int, _1: Snap$m_Tree$_beg_$i32$_end_, _2: Snap$m_Tree$_beg_$i32$_end_ ::
      { Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2)) ==
      _0)
  }
  
  axiom Snap$m_Tree$_beg_$i32$_end_$0$field$f$0$valid {
    (forall self: Snap$m_Tree$_beg_$i32$_end_ ::
      { Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(self) }
      -2147483648 <=
      Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(self) &&
      Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(self) <=
      2147483647)
  }
  
  axiom Snap$m_Tree$_beg_$i32$_end_$0$field$f$1$axiom {
    (forall _0: Int, _1: Snap$m_Tree$_beg_$i32$_end_, _2: Snap$m_Tree$_beg_$i32$_end_ ::
      { Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2)) ==
      _1)
  }
  
  axiom Snap$m_Tree$_beg_$i32$_end_$0$field$f$2$axiom {
    (forall _0: Int, _1: Snap$m_Tree$_beg_$i32$_end_, _2: Snap$m_Tree$_beg_$i32$_end_ ::
      { Snap$m_Tree$_beg_$i32$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$i32$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_0,
      _1, _2)) ==
      _2)
  }
  
  axiom Snap$m_Tree$_beg_$i32$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(cons$1$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_()) ==
    1
  }
}

domain Snap$m_std$$cmp$$Ordering$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(self: Snap$m_std$$cmp$$Ordering$_beg_$_end_): Int 
}

domain Snap$tuple0$  {
  
  function cons$0$__$TY$__Snap$tuple0$$Snap$tuple0$(): Snap$tuple0$ 
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Node: Ref

field f$0: Ref

field f$1: Ref

field f$2: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$bool$(_1: Snap$m_Tree$_beg_$i32$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$bool$(_1),
    true]
{
  discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(_1) ==
  0 ==>
  (forall _0_quant_0: Int ::-2147483648 <= _0_quant_0 &&
    _0_quant_0 <= 2147483647 ==>
    (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
    -1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
    -1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _0_quant_0))) &&
  ((forall _0_quant_0: Int ::-2147483648 <= _0_quant_0 &&
    _0_quant_0 <= 2147483647 ==>
    (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
    -1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
    -1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _0_quant_0))) ==>
  (forall _0_quant_0: Int ::-2147483648 <= _0_quant_0 &&
    _0_quant_0 <= 2147483647 ==>
    (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
    1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
    1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _0_quant_0))))
}

function f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(_1: Snap$m_Tree$_beg_$i32$_end_,
  _2: Int): Bool
  requires -2147483648 <= _2
  requires _2 <= 2147483647
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(_1,
    _2),
    true]
{
  (discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(_1) ==
  0 ==>
  !(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
  Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
  0) ==>
  (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
  Snap$m_Tree$_beg_$i32$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$(_1))) ==
  -1 ?
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _2) :
    f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_1),
    _2))) &&
  discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(_1) ==
  0
}

function f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1: Int,
  _2: Int): Snap$m_std$$cmp$$Ordering$_beg_$_end_
  requires -2147483648 <= _2
  requires _2 <= 2147483647
  requires -2147483648 <= _1
  requires _1 <= 2147483647
  requires true
  requires true
  ensures (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
    0 ?
      _1 == _2 :
      !(_1 == _2)) &&
    ((discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
    -1 ?
      _1 < _2 :
      !(_1 < _2)) &&
    (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
    1 ?
      _1 > _2 :
      !(_1 > _2)))
  ensures [result ==
    mirror_simple$f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
    _2),
    true]


function invariant$m_Tree$_beg_$i32$_end___$TY$__Snap$m_Tree$_beg_$i32$_end_$$bool$(self: Snap$m_Tree$_beg_$i32$_end_): Bool
{
  (discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(self) ==
  0 ==>
  invariant$m_Tree$_beg_$i32$_end___$TY$__Snap$m_Tree$_beg_$i32$_end_$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self)) &&
  invariant$m_Tree$_beg_$i32$_end___$TY$__Snap$m_Tree$_beg_$i32$_end_$$bool$(Snap$m_Tree$_beg_$i32$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self))) &&
  f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$bool$(self)
}

function m_Tree$_beg_$i32$_end_$$discriminant$$__$TY$__m_Tree$_beg_$i32$_end_$$int$(self: Ref): Int
  requires acc(m_Tree$_beg_$i32$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$$int$(snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self)) ==
    result
{
  (unfolding acc(m_Tree$_beg_$i32$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self: Ref): Snap$m_Tree$_beg_$i32$_end_
  requires acc(m_Tree$_beg_$i32$_end_(self), read$())
{
  ((unfolding acc(m_Tree$_beg_$i32$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_() :
    cons$0$__$TY$__Snap$m_Tree$_beg_$i32$_end_$$int$$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_((unfolding acc(m_Tree$_beg_$i32$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$i32$_end_Node(self.enum_Node), read$()) in
        (unfolding acc(i32(self.enum_Node.f$0), read$()) in
          self.enum_Node.f$0.val_int))), (unfolding acc(m_Tree$_beg_$i32$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$i32$_end_Node(self.enum_Node), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(self.enum_Node.f$1), read$()) in
          snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self.enum_Node.f$1.val_ref)))),
    (unfolding acc(m_Tree$_beg_$i32$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$i32$_end_Node(self.enum_Node), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(self.enum_Node.f$2), read$()) in
          snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(self.enum_Node.f$2.val_ref))))))
}

function snap$__$TY$__Snap$tuple0$$tuple0$$Snap$tuple0$(self: Ref): Snap$tuple0$
  requires acc(tuple0$(self), read$())
{
  cons$0$__$TY$__Snap$tuple0$$Snap$tuple0$()
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_Tree$_beg_$i32$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Node, write) &&
  acc(m_Tree$_beg_$i32$_end_Node(self.enum_Node), write)))
}

predicate m_Tree$_beg_$i32$_end_Node(self: Ref) {
  acc(self.f$0, write) &&
  (acc(i32(self.f$0), write) &&
  (acc(self.f$1, write) &&
  (acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(self.f$1), write) &&
  (acc(self.f$2, write) &&
  acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(self.f$2), write)))))
}

predicate struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.val_ref, write) &&
  acc(m_Tree$_beg_$i32$_end_(self.val_ref), write)
}

predicate tuple0$(self: Ref) {
  true
}

method m_main() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Int
  var __t21: Int
  var __t22: Bool
  var __t23: Int
  var __t24: Bool
  var __t25: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Int
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _10: Ref
  var _11: Ref
  var _12: Int
  var _15: Ref
  var _16: Ref
  var _17: Int
  var _20: Ref
  var _21: Ref
  var _22: Int
  var _t25: Ref
  
  label start
  // ========== start ==========
  // Def path: "bst_generics_paper::main"
  // Span: tests/verify_overflow/pass/nfm22/bst_generics_paper.rs:5:1: 15:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  // Preconditions:
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_1)
  // [mir] _1 = Tree::<i32>::Empty
  _1 := builtin$havoc_ref()
  inhale acc(m_Tree$_beg_$i32$_end_(_1), write)
  inhale m_Tree$_beg_$i32$_end_$$discriminant$$__$TY$__m_Tree$_beg_$i32$_end_$$int$(_1) ==
    1
  // [mir] FakeRead(ForLet(None), _1)
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] _3 = &mut _1
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_ref, write)
  _3.val_ref := _1
  label l0
  // [mir] _2 = Tree::<i32>::insert(move _3, const 0_i32) -> [return: bb1, unwind: bb20]
  label l1
  _t25 := builtin$havoc_ref()
  inhale acc(i32(_t25), write)
  assert invariant$m_Tree$_beg_$i32$_end___$TY$__Snap$m_Tree$_beg_$i32$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_3.val_ref))
  exhale acc(_3.val_ref, write) &&
    (acc(m_Tree$_beg_$i32$_end_(_3.val_ref), write) &&
    acc(i32(_t25), write))
  _2 := builtin$havoc_ref()
  inhale acc(m_Tree$_beg_$i32$_end_(old[l1](_3.val_ref)), write)
  inhale acc(tuple0$(_2), write)
  inhale invariant$m_Tree$_beg_$i32$_end___$TY$__Snap$m_Tree$_beg_$i32$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(old[l1](_3.val_ref)))
  inhale f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(old[l1](_3.val_ref)),
    old[l1](0)) &&
    (forall _0_quant_0: Int ::-2147483648 <= _0_quant_0 &&
      _0_quant_0 <= 2147483647 ==>
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$impls$$$openang$impl$space$std$$cmp$$Ord$space$for$space$i32$closeang$$$cmp__$TY$__$int$$$int$$Snap$m_std$$cmp$$Ordering$_beg_$_end_(old[l1](0),
      _0_quant_0)) ==
      0 ||
      f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(old[l1](_3.val_ref)),
      _0_quant_0) ==
      f_Tree$$$openang$T$closeang$$$contains__$TY$__i32$Snap$m_Tree$_beg_$i32$_end_$$int$$$bool$(old[l1](snap$__$TY$__Snap$m_Tree$_beg_$i32$_end_$m_Tree$_beg_$i32$_end_$Snap$m_Tree$_beg_$i32$_end_(_3.val_ref)),
      _0_quant_0))
  label l2
  // ========== l3 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L4,L0,)

  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] StorageLive(_4)
  // [mir] _4 = &_1
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  _4.val_ref := _1
  exhale acc(m_Tree$_beg_$i32$_end_(_1), write - read$())
  inhale acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
  label l4
  // [mir] FakeRead(ForMatchedPlace(None), _4)
  // [mir] _5 = discriminant((*_4))
  _5 := builtin$havoc_int()
  _5 := m_Tree$_beg_$i32$_end_$$discriminant$$__$TY$__m_Tree$_beg_$i32$_end_$$int$(_4.val_ref)
  // [mir] switchInt(move _5) -> [0: bb2, otherwise: bb18]
  __t20 := _5
  if (__t20 == 0) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l6 ==========
  // MIR edge bb1 --> bb2
  // ========== bb2 ==========
  __t3 := true
  // [mir] falseEdge -> [real: bb3, imaginary: bb18]
  // ========== bb3 ==========
  __t4 := true
  // [mir] StorageLive(_6)
  // [mir] _6 = &(((*_4) as Node).0: i32)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_ref, write)
  unfold acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
  unfold acc(m_Tree$_beg_$i32$_end_Node(_4.val_ref.enum_Node), read$())
  _6.val_ref := _4.val_ref.enum_Node.f$0
  inhale acc(i32(_6.val_ref), read$())
  label l7
  // [mir] StorageLive(_7)
  // [mir] _7 = &(((*_4) as Node).1: std::boxed::Box<Tree<i32>>)
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_ref, write)
  _7.val_ref := _4.val_ref.enum_Node.f$1
  inhale acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_7.val_ref), read$())
  label l8
  // [mir] StorageLive(_8)
  // [mir] _8 = &(((*_4) as Node).2: std::boxed::Box<Tree<i32>>)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_ref, write)
  _8.val_ref := _4.val_ref.enum_Node.f$2
  inhale acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_8.val_ref), read$())
  label l9
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] FakeRead(ForMatchedPlace(None), (*(*_7)))
  // [mir] _12 = discriminant((*(*_7)))
  _12 := builtin$havoc_int()
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_7.val_ref), read$())
  _12 := m_Tree$_beg_$i32$_end_$$discriminant$$__$TY$__m_Tree$_beg_$i32$_end_$$int$(_7.val_ref.val_ref)
  // expire_borrows ReborrowingDAG(L5,)

  if (__t4) {
    // expire loan L5
    fold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_7.val_ref), read$())
    exhale acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_7.val_ref), read$())
  }
  // [mir] switchInt(move _12) -> [1: bb5, otherwise: bb4]
  __t21 := _12
  if (__t21 == 1) {
    goto bb1
  }
  goto l3
  
  label bb1
  // ========== l11 ==========
  // MIR edge bb3 --> bb5
  // ========== bb5 ==========
  __t6 := true
  // [mir] falseEdge -> [real: bb6, imaginary: bb4]
  // ========== bb6 ==========
  __t7 := true
  // [mir] _11 = const true
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := true
  // [mir] goto -> bb7
  goto l5
  
  label bb18
  // ========== l14 ==========
  // MIR edge bb9 --> bb10
  // ========== bb10 ==========
  __t11 := true
  // [mir] _16 = const false
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := false
  // [mir] goto -> bb13
  goto bb3
  
  label bb2
  // ========== l15 ==========
  // MIR edge bb9 --> bb11
  // ========== bb11 ==========
  __t12 := true
  // [mir] falseEdge -> [real: bb12, imaginary: bb10]
  // ========== bb12 ==========
  __t13 := true
  // [mir] _16 = const true
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := true
  // [mir] goto -> bb13
  goto bb3
  
  label bb3
  // ========== bb13 ==========
  __t14 := true
  // [mir] _15 = Not(move _16)
  _15 := builtin$havoc_ref()
  inhale acc(_15.val_bool, write)
  _15.val_bool := !_16.val_bool
  // [mir] StorageDead(_16)
  // [mir] switchInt(move _15) -> [0: bb15, otherwise: bb14]
  __t24 := _15.val_bool
  if (__t24) {
    goto bb5
  }
  goto l10
  
  label bb4
  // ========== l20 ==========
  // MIR edge bb15 --> bb16
  // ========== bb16 ==========
  __t17 := true
  // [mir] StorageLive(_23)
  // [mir] _23 = core::panicking::panic(const "assertion failed: *value == 0") -> bb20
  // Rust panic - const "assertion failed: *value == 0"
  assert false
  goto end_of_method
  
  label bb5
  // ========== l17 ==========
  // MIR edge bb13 --> bb14
  // Expire borrows
  // expire_borrows ReborrowingDAG(L6,L1,)

  if (__t4) {
    // expire loan L6
    exhale acc(i32(_6.val_ref), read$())
  }
  if (__t1 && __t4) {
    // expire loan L1
    fold acc(m_Tree$_beg_$i32$_end_Node(_4.val_ref.enum_Node), read$())
    fold acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
    exhale acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
    inhale acc(m_Tree$_beg_$i32$_end_(_1), write - read$())
  }
  // ========== bb14 ==========
  __t15 := true
  // [mir] StorageLive(_18)
  // [mir] _18 = core::panicking::panic(const "assertion failed: matches!(* * right, Tree :: Empty)") -> bb20
  // Rust panic - const "assertion failed: matches!(* * right, Tree :: Empty)"
  assert false
  goto end_of_method
  
  label bb6
  // ========== l13 ==========
  // MIR edge bb7 --> bb8
  // Expire borrows
  // expire_borrows ReborrowingDAG(L7,L6,L1,)

  if (__t4) {
    // expire loan L7
    exhale acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_8.val_ref), read$())
  }
  if (__t4) {
    // expire loan L6
    exhale acc(i32(_6.val_ref), read$())
  }
  if (__t1 && (__t4 && __t4)) {
    // expire loan L1
    fold acc(m_Tree$_beg_$i32$_end_Node(_4.val_ref.enum_Node), read$())
    fold acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
    exhale acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
    inhale acc(m_Tree$_beg_$i32$_end_(_1), write - read$())
  }
  // ========== bb8 ==========
  __t9 := true
  // [mir] StorageLive(_13)
  // [mir] _13 = core::panicking::panic(const "assertion failed: matches!(* * left, Tree :: Empty)") -> bb20
  // Rust panic - const "assertion failed: matches!(* * left, Tree :: Empty)"
  assert false
  goto end_of_method
  
  label l10
  // ========== l16 ==========
  // MIR edge bb13 --> bb15
  // ========== bb15 ==========
  __t16 := true
  // [mir] _14 = const ()
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_14)
  // [mir] StorageLive(_19)
  // [mir] StorageLive(_20)
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] _22 = (*_6)
  _22 := builtin$havoc_int()
  unfold acc(i32(_6.val_ref), read$())
  _22 := _6.val_ref.val_int
  label l18
  // expire_borrows ReborrowingDAG(L6,L1,)

  if (__t4) {
    // expire loan L6
    fold acc(i32(_6.val_ref), read$())
    exhale acc(i32(_6.val_ref), read$())
  }
  if (__t1 && __t4) {
    // expire loan L1
    fold acc(m_Tree$_beg_$i32$_end_Node(_4.val_ref.enum_Node), read$())
    fold acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
    exhale acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
    inhale acc(m_Tree$_beg_$i32$_end_(_1), write - read$())
  }
  // [mir] _21 = Eq(move _22, const 0_i32)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_bool, write)
  _21.val_bool := _22 == 0
  // [mir] StorageDead(_22)
  // [mir] _20 = Not(move _21)
  _20 := builtin$havoc_ref()
  inhale acc(_20.val_bool, write)
  _20.val_bool := !_21.val_bool
  // [mir] StorageDead(_21)
  // [mir] switchInt(move _20) -> [0: bb17, otherwise: bb16]
  __t25 := _20.val_bool
  if (__t25) {
    goto bb4
  }
  goto l11
  
  label l11
  // ========== l19 ==========
  // MIR edge bb15 --> bb17
  // ========== bb17 ==========
  __t18 := true
  // [mir] _19 = const ()
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_19)
  // [mir] _0 = const ()
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] drop(_1) -> [return: bb19, unwind: bb21]
  // ========== bb19 ==========
  __t19 := true
  // [mir] StorageDead(_1)
  // [mir] StorageDead(_4)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l22
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l3
  // ========== l10 ==========
  // MIR edge bb3 --> bb4
  // ========== bb4 ==========
  __t5 := true
  // [mir] _11 = const false
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := false
  // [mir] goto -> bb7
  goto l5
  
  label l5
  // ========== bb7 ==========
  __t8 := true
  // [mir] _10 = Not(move _11)
  _10 := builtin$havoc_ref()
  inhale acc(_10.val_bool, write)
  _10.val_bool := !_11.val_bool
  // [mir] StorageDead(_11)
  // [mir] switchInt(move _10) -> [0: bb9, otherwise: bb8]
  __t22 := _10.val_bool
  if (__t22) {
    goto bb6
  }
  goto l6
  
  label l6
  // ========== l12 ==========
  // MIR edge bb7 --> bb9
  // ========== bb9 ==========
  __t10 := true
  // [mir] _9 = const ()
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_9)
  // [mir] StorageLive(_14)
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] FakeRead(ForMatchedPlace(None), (*(*_8)))
  // [mir] _17 = discriminant((*(*_8)))
  _17 := builtin$havoc_int()
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_8.val_ref), read$())
  _17 := m_Tree$_beg_$i32$_end_$$discriminant$$__$TY$__m_Tree$_beg_$i32$_end_$$int$(_8.val_ref.val_ref)
  // expire_borrows ReborrowingDAG(L7,)

  if (__t4) {
    // expire loan L7
    fold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_8.val_ref), read$())
    exhale acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$i32$_end_$struct$m_std$$alloc$$Global(_8.val_ref), read$())
  }
  // [mir] switchInt(move _17) -> [1: bb11, otherwise: bb10]
  __t23 := _17
  if (__t23 == 1) {
    goto bb2
  }
  goto bb18
  
  label return
  // ========== l5 ==========
  // MIR edge bb1 --> bb18
  // Expire borrows
  // expire_borrows ReborrowingDAG(L1,)

  if (__t1) {
    // expire loan L1
    exhale acc(m_Tree$_beg_$i32$_end_(_4.val_ref), read$())
    inhale acc(m_Tree$_beg_$i32$_end_(_1), write - read$())
  }
  // ========== bb18 ==========
  __t2 := true
  // [mir] StorageLive(_24)
  // [mir] _24 = core::panicking::panic(const "internal error: entered unreachable code") -> bb20
  // Rust panic - const "internal error: entered unreachable code"
  assert false
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
