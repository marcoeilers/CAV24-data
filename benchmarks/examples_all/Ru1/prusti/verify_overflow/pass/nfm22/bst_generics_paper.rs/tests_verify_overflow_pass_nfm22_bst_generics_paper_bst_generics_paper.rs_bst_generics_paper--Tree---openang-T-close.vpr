domain MirrorDomain  {
  
  function mirror_simple$f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1: Snap$__TYPARAM__$_T$0$__,
  _2: Snap$__TYPARAM__$_T$0$__): Snap$m_std$$cmp$$Ordering$_beg_$_end_ 
}

domain Snap$__TYPARAM__$_T$0$__  {
  
  
}

domain Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_  {
  
  function discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0: Snap$__TYPARAM__$_T$0$__,
  _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_, _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  function Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$__TYPARAM__$_T$0$__ 
  
  function Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  function Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  function cons$1$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$discriminant_range {
    (forall self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$injectivity {
    (forall _l_0: Snap$__TYPARAM__$_T$0$__, _l_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _l_2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_, _r_0: Snap$__TYPARAM__$_T$0$__,
    _r_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_, _r_2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_l_0,
      _l_1, _l_2), cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_r_0,
      _r_1, _r_2) }
      cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_l_0,
      _l_1, _l_2) ==
      cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_r_0,
      _r_1, _r_2) ==>
      _l_0 == _r_0 && (_l_1 == _r_1 && _l_2 == _r_2))
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$discriminant_axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2) }
      discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      0)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0$axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      _0)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1$axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      _1)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2$axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      _2)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(cons$1$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_()) ==
    1
  }
}

domain Snap$m_std$$cmp$$Ordering$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(self: Snap$m_std$$cmp$$Ordering$_beg_$_end_): Int 
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Node: Ref

field f$0: Ref

field f$1: Ref

field f$2: Ref

field val_int: Int

field val_ref: Ref

function f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Bool
  requires true
  requires true
  ensures true
{
  discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1) ==
  0 ==>
  (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0))) &&
  ((forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0))) ==>
  (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0))))
}

function f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
  _2: Snap$__TYPARAM__$_T$0$__): Bool
  requires true
  requires true
  ensures true
{
  (discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1) ==
  0 ==>
  !(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
  Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
  0) ==>
  (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
  Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
  -1 ?
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _2) :
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _2))) &&
  discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1) ==
  0
}

function f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1: Snap$__TYPARAM__$_T$0$__,
  _2: Snap$__TYPARAM__$_T$0$__): Snap$m_std$$cmp$$Ordering$_beg_$_end_
  requires true
  requires true
  ensures (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
    1 ?
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
      _1)) ==
      -1 :
      (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
      0 ?
        discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
        _1)) ==
        0 :
        discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
        -1 &&
        discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
        _1)) ==
        1)) &&
    (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
      1 ?
        (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
        _0_quant_0)) ==
        1 ?
          discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
          _0_quant_0)) ==
          1 :
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          0 ?
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            1 :
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
            _0_quant_0)) ==
            -1)) :
        (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
        0 ?
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          1 ?
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            1 :
            (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
            _0_quant_0)) ==
            0 ?
              discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
              _0_quant_0)) ==
              0 :
              discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
              _0_quant_0)) ==
              -1 &&
              discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
              _0_quant_0)) ==
              -1)) :
          discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
          -1 &&
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          1 ||
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          0 ?
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            -1 :
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
            _0_quant_0)) ==
            -1 &&
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            -1)))))
  ensures [result ==
    mirror_simple$f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
    _2),
    true]
  decreases _


function invariant$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end___$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Bool
{
  (discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self) ==
  0 ==>
  invariant$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end___$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self)) &&
  invariant$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end___$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self))) &&
  f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(self)
}

function m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$discriminant$$__$TY$__m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self: Ref): Int
  requires acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self)) ==
    result
{
  (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(self: Ref): Snap$__TYPARAM__$_T$0$__
  requires acc(__TYPARAM__$_T$0$__(self), read$())


function snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Ref): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_
  requires acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$())
{
  ((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_() :
    cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), read$()) in
        snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(self.enum_Node.f$0))),
    (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.enum_Node.f$1), read$()) in
          snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self.enum_Node.f$1.val_ref)))),
    (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.enum_Node.f$2), read$()) in
          snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self.enum_Node.f$2.val_ref))))))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate __TYPARAM__$_T$0$__(self: Ref) 

predicate m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Node, write) &&
  acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), write)))
}

predicate m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self: Ref) {
  acc(self.f$0, write) &&
  (acc(__TYPARAM__$_T$0$__(self.f$0), write) &&
  (acc(self.f$1, write) &&
  (acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.f$1), write) &&
  (acc(self.f$2, write) &&
  acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.f$2), write)))))
}

predicate struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.val_ref, write) &&
  acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self.val_ref), write)
}

method m_Tree$$$openang$T$closeang$$$get_root_value() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Int
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Int
  var _5: Ref
  var _6: Ref
  
  label start
  // ========== start ==========
  // Def path: "bst_generics_paper::{impl#0}::get_root_value"
  // Span: tests/verify_overflow/pass/nfm22/bst_generics_paper.rs:104:5: 106:6 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref), write)
  inhale invariant$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end___$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))
  inhale (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref), write) in
      _1.val_ref.discriminant == 0)
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] FakeRead(ForMatchedPlace(None), _1)
  // [mir] _4 = discriminant((*_1))
  _4 := builtin$havoc_int()
  _4 := m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$discriminant$$__$TY$__m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1.val_ref)
  // [mir] switchInt(move _4) -> [0: bb1, otherwise: bb3]
  __t4 := _4
  if (__t4 == 0) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t2 := true
  // [mir] falseEdge -> [real: bb2, imaginary: bb3]
  // ========== bb2 ==========
  __t3 := true
  // [mir] StorageLive(_5)
  // [mir] _5 = &mut (((*_1) as Node).0: T)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_ref, write)
  unfold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref), write)
  unfold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(_1.val_ref.enum_Node), write)
  _5.val_ref := _1.val_ref.enum_Node.f$0
  label l2
  // [mir] StorageLive(_6)
  // [mir] _6 = &mut (*_5)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_ref, write)
  _6.val_ref := _5.val_ref
  label l3
  // [mir] _3 = &mut (*_6)
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_ref, write)
  _3.val_ref := _6.val_ref
  label l4
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] _2 = &mut (*_3)
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_ref, write)
  _2.val_ref := _3.val_ref
  label l5
  // [mir] _0 = &mut (*_2)
  _0 := builtin$havoc_ref()
  inhale acc(_0.val_ref, write)
  _0.val_ref := _2.val_ref
  label l6
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] return
  // obtain ((acc(__TYPARAM__$_T$0$__(_0.val_ref), write)) && (true)) && ((true) && (true))
  label l7
  package acc(DeadBorrowToken$(-1), write) &&
  (acc(__TYPARAM__$_T$0$__(old[l7](_0.val_ref)), write) &&
  (discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(old[pre](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))) ==
  0 &&
  ((forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))),
    _0_quant_0) ==>
    discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[l7](_0.val_ref)))) ==
    -1) &&
  (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))),
    _0_quant_0) ==>
    discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[l7](_0.val_ref)))) ==
    1)))) --*
  acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write) &&
  invariant$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end___$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref))) &&
  ((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write) in
    old[pre](_1.val_ref).discriminant) ==
  0 &&
  (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write) in
    discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(old[pre](_1.val_ref).enum_Node), write) in
      snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[pre](_1.val_ref).enum_Node.f$0)),
    old[lhs](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[l7](_0.val_ref))))) ==
    0)) {
    // expire_borrows ReborrowingDAG(L4,L3,L2,L1,L0,)

    if (__t3) {
      // expire loan L4
      // transfer perm _0.val_ref --> old[l6](_2.val_ref) // unchecked: false
    }
    if (__t3 && __t3) {
      // expire loan L3
      // transfer perm old[l6](_2.val_ref) --> old[l5](_2.val_ref) // unchecked: false
      // transfer perm old[l5](_2.val_ref) --> old[l5](_3.val_ref) // unchecked: false
    }
    if (__t3 && (__t3 && __t3)) {
      // expire loan L2
      // transfer perm old[l5](_3.val_ref) --> old[l4](_3.val_ref) // unchecked: false
      // transfer perm old[l4](_3.val_ref) --> old[l4](_6.val_ref) // unchecked: false
    }
    if (__t3 && (__t3 && (__t3 && __t3))) {
      // expire loan L1
      // transfer perm old[l4](_6.val_ref) --> old[l3](_6.val_ref) // unchecked: false
      // transfer perm old[l3](_6.val_ref) --> old[l3](_5.val_ref) // unchecked: false
    }
    if (__t3 && (__t3 && (__t3 && (__t3 && __t3)))) {
      // expire loan L0
      // transfer perm old[l3](_5.val_ref) --> old[l2](_5.val_ref) // unchecked: false
      // transfer perm old[l2](_5.val_ref) --> _1.val_ref[enum_Node].f$0 // unchecked: false
    }
    // Fold predicates for &mut args
    // transfer perm _1.val_ref --> old[pre](_1.val_ref) // unchecked: false
    assert acc(old[pre](_1.val_ref).enum_Node, read$())
    fold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(old[pre](_1.val_ref).enum_Node), write)
    fold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write)
    // obtain acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write)
  }
  // transfer perm old[l7](_0.val_ref) --> _0.val_ref // unchecked: false
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l8
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  // obtain acc(__TYPARAM__$_T$0$__(_0.val_ref), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(_0.val_ref, write) &&
    acc(__TYPARAM__$_T$0$__(_0.val_ref), write)
  // Exhale permissions of postcondition (3/3)
  exhale acc(DeadBorrowToken$(-1), write) &&
    (acc(__TYPARAM__$_T$0$__(old[l8](_0.val_ref)), write) &&
    (discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(old[pre](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))) ==
    0 &&
    ((forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))),
      _0_quant_0) ==>
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
      snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[l8](_0.val_ref)))) ==
      -1) &&
    (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))),
      _0_quant_0) ==>
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
      snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[l8](_0.val_ref)))) ==
      1)))) --*
    acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write) &&
    invariant$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end___$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref))) &&
    ((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write) in
      old[pre](_1.val_ref).discriminant) ==
    0 &&
    (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[pre](_1.val_ref)), write) in
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_std$$cmp$$Ord$$cmp__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(old[pre](_1.val_ref).enum_Node), write) in
        snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[pre](_1.val_ref).enum_Node.f$0)),
      old[lhs](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(old[l8](_0.val_ref))))) ==
      0))
  goto end_of_method
  
  label return
  // ========== l0 ==========
  // MIR edge bb0 --> bb3
  // ========== bb3 ==========
  __t1 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = std::rt::begin_panic::<&str>(const "explicit panic") -> bb4
  // Rust panic - const "explicit panic"
  assert false
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
