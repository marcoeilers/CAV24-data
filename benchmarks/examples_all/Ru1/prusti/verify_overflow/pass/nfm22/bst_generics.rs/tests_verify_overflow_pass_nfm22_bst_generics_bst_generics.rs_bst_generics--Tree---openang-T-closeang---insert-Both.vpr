domain MirrorDomain  {
  
  function mirror_simple$f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Bool 
  
  function mirror_simple$f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
  _2: Snap$__TYPARAM__$_T$0$__): Bool 
  
  function mirror_simple$f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1: Snap$__TYPARAM__$_T$0$__,
  _2: Snap$__TYPARAM__$_T$0$__): Snap$m_std$$cmp$$Ordering$_beg_$_end_ 
}

domain Snap$__TYPARAM__$_T$0$__  {
  
  
}

domain Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_  {
  
  function discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0: Snap$__TYPARAM__$_T$0$__,
  _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_, _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  function Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$__TYPARAM__$_T$0$__ 
  
  function Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  function Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  function cons$1$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ 
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$discriminant_range {
    (forall self: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$injectivity {
    (forall _l_0: Snap$__TYPARAM__$_T$0$__, _l_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _l_2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_, _r_0: Snap$__TYPARAM__$_T$0$__,
    _r_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_, _r_2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_l_0,
      _l_1, _l_2), cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_r_0,
      _r_1, _r_2) }
      cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_l_0,
      _l_1, _l_2) ==
      cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_r_0,
      _r_1, _r_2) ==>
      _l_0 == _r_0 && (_l_1 == _r_1 && _l_2 == _r_2))
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$discriminant_axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2) }
      discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      0)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0$axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      _0)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1$axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      _1)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2$axiom {
    (forall _0: Snap$__TYPARAM__$_T$0$__, _1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
    _2: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ ::
      { Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) }
      Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_0,
      _1, _2)) ==
      _2)
  }
  
  axiom Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(cons$1$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_()) ==
    1
  }
}

domain Snap$m_std$$cmp$$Ordering$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(self: Snap$m_std$$cmp$$Ordering$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_(): Snap$m_std$$cmp$$Ordering$_beg_$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_(): Snap$m_std$$cmp$$Ordering$_beg_$_end_ 
  
  function cons$2$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_(): Snap$m_std$$cmp$$Ordering$_beg_$_end_ 
  
  axiom Snap$m_std$$cmp$$Ordering$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_std$$cmp$$Ordering$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(self) }
      -1 <=
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$cmp$$Ordering$_beg_$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_()) ==
    -1
  }
  
  axiom Snap$m_std$$cmp$$Ordering$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$cmp$$Ordering$_beg_$_end_$2$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(cons$2$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_()) ==
    1
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Node: Ref

field f$0: Ref

field f$1: Ref

field f$2: Ref

field val_int: Int

field val_ref: Ref

function f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(_1),
    true]
{
  discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1) ==
  0 ==>
  (!(forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0))) ==>
  false) &&
  ((forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    -1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0))) ==>
  (!(forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0))) ==>
  false) &&
  ((forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    1 ==>
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0) ==
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _0_quant_0)) &&
    (!(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_0_quant_0,
    Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
    1) ==>
    !f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _0_quant_0))) ==>
  f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1)) &&
  (f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1)) ==>
  f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1)))))
}

function f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1: Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_,
  _2: Snap$__TYPARAM__$_T$0$__): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(_1,
    _2),
    true]
{
  (discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1) ==
  0 ==>
  !(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
  Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
  0) ==>
  (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
  Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$0__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__(_1))) ==
  -1 ?
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$1__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _2) :
    f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$0$field$f$2__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1),
    _2))) &&
  discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1) ==
  0
}

function f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1: Snap$__TYPARAM__$_T$0$__,
  _2: Snap$__TYPARAM__$_T$0$__): Snap$m_std$$cmp$$Ordering$_beg_$_end_
  requires true
  requires true
  ensures (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
    1 ?
      discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
      _1)) ==
      -1 :
      (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
      0 ?
        discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
        _1)) ==
        0 :
        discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
        -1 &&
        discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
        _1)) ==
        1)) &&
    (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::(discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
      1 ?
        (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
        _0_quant_0)) ==
        1 ?
          discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
          _0_quant_0)) ==
          1 :
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          0 ?
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            1 :
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
            _0_quant_0)) ==
            -1)) :
        (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
        0 ?
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          1 ?
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            1 :
            (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
            _0_quant_0)) ==
            0 ?
              discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
              _0_quant_0)) ==
              0 :
              discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
              _0_quant_0)) ==
              -1 &&
              discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
              _0_quant_0)) ==
              -1)) :
          discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(result) ==
          -1 &&
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          1 ||
          (discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
          _0_quant_0)) ==
          0 ?
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            -1 :
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_2,
            _0_quant_0)) ==
            -1 &&
            discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
            _0_quant_0)) ==
            -1)))))
  ensures [result ==
    mirror_simple$f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_1,
    _2),
    true]
  decreases _


function m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$discriminant$$__$TY$__m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(self: Ref): Int
  requires acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self)) ==
    result
{
  (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
    self.discriminant)
}

function m_std$$cmp$$Ordering$_beg_$_end_$$discriminant$$__$TY$__m_std$$cmp$$Ordering$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_std$$cmp$$Ordering$_beg_$_end_(self), read$())
  ensures -1 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(snap$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$cmp$$Ordering$_beg_$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(self: Ref): Snap$__TYPARAM__$_T$0$__
  requires acc(__TYPARAM__$_T$0$__(self), read$())


function snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Ref): Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_
  requires acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$())
{
  ((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_() :
    cons$0$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_((unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), read$()) in
        snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(self.enum_Node.f$0))),
    (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.enum_Node.f$1), read$()) in
          snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self.enum_Node.f$1.val_ref)))),
    (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self), read$()) in
      (unfolding acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.enum_Node.f$2), read$()) in
          snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self.enum_Node.f$2.val_ref))))))
}

function snap$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_(self: Ref): Snap$m_std$$cmp$$Ordering$_beg_$_end_
  requires acc(m_std$$cmp$$Ordering$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_std$$cmp$$Ordering$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$2$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_() :
    ((unfolding acc(m_std$$cmp$$Ordering$_beg_$_end_(self), read$()) in
      self.discriminant) ==
    0 ?
      cons$1$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_() :
      cons$0$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_()))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate __TYPARAM__$_T$0$__(self: Ref) 

predicate m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Node, write) &&
  acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self.enum_Node), write)))
}

predicate m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(self: Ref) {
  acc(self.f$0, write) &&
  (acc(__TYPARAM__$_T$0$__(self.f$0), write) &&
  (acc(self.f$1, write) &&
  (acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.f$1), write) &&
  (acc(self.f$2, write) &&
  acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self.f$2), write)))))
}

predicate m_std$$cmp$$Ordering$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (-1 <= self.discriminant && self.discriminant <= 1)
}

predicate struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.val_ref, write) &&
  acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(self.val_ref), write)
}

predicate tuple0$(self: Ref) {
  true
}

method m_Tree$$$openang$T$closeang$$$insert() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Int
  var _aux_havoc_m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_: Ref
  var __t24: Int
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Int
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Ref
  var _10: Ref
  var _11: Int
  var _12: Ref
  var _13: Ref
  var _14: Ref
  var _15: Ref
  var _16: Ref
  var _17: Ref
  var _18: Ref
  var _19: Ref
  var _20: Ref
  var _21: Ref
  
  label start
  // ========== start ==========
  // Def path: "bst_generics::{impl#0}::insert"
  // Span: tests/verify_overflow/pass/nfm22/bst_generics.rs:106:5: 116:6 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref), write) &&
    acc(__TYPARAM__$_T$0$__(_2), write))
  inhale true
  inhale f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref))
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] FakeRead(ForMatchedPlace(None), _1)
  // [mir] _3 = discriminant((*_1))
  _3 := builtin$havoc_int()
  _3 := m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$discriminant$$__$TY$__m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_1.val_ref)
  // [mir] switchInt(move _3) -> [0: bb1, otherwise: bb13]
  __t23 := _3
  if (__t23 == 0) {
    goto l0
  }
  goto bb0
  
  label bb0
  // ========== l0 ==========
  // MIR edge bb0 --> bb13
  // ========== bb13 ==========
  __t1 := true
  // [mir] StorageLive(_16)
  // [mir] StorageLive(_17)
  // [mir] _17 = move _2
  _17 := _2
  label l2
  // [mir] StorageLive(_18)
  // [mir] StorageLive(_19)
  // [mir] _19 = Tree::<T>::Empty
  _19 := builtin$havoc_ref()
  inhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_19), write)
  inhale m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$discriminant$$__$TY$__m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_19) ==
    1
  // [mir] _18 = std::boxed::Box::<Tree<T>>::new(move _19) -> [return: bb14, unwind: bb29]
  _18 := builtin$havoc_ref()
  inhale acc(_18.val_ref, write)
  _aux_havoc_m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ := builtin$havoc_ref()
  _18.val_ref := _aux_havoc_m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_
  inhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_18.val_ref), write)
  _18.val_ref := _19
  label l3
  // ========== bb14 ==========
  __t2 := true
  // [mir] StorageDead(_19)
  // [mir] StorageLive(_20)
  // [mir] StorageLive(_21)
  // [mir] _21 = Tree::<T>::Empty
  _21 := builtin$havoc_ref()
  inhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_21), write)
  inhale m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$discriminant$$__$TY$__m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_21) ==
    1
  // [mir] _20 = std::boxed::Box::<Tree<T>>::new(move _21) -> [return: bb15, unwind: bb27]
  _20 := builtin$havoc_ref()
  inhale acc(_20.val_ref, write)
  _aux_havoc_m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_ := builtin$havoc_ref()
  _20.val_ref := _aux_havoc_m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_
  inhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_20.val_ref), write)
  _20.val_ref := _21
  label l4
  // ========== bb15 ==========
  __t3 := true
  // [mir] StorageDead(_21)
  // [mir] _16 = Tree::<T>::Node(move _17, move _18, move _20)
  _16 := builtin$havoc_ref()
  inhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_16), write)
  inhale m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$discriminant$$__$TY$__m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$int$(_16) ==
    0
  // downcast _16 to enum_Node

  unfold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_16), write)
  unfold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(_16.enum_Node), write)
  _16.enum_Node.f$0 := _17
  label l5
  _16.enum_Node.f$1 := _18
  label l6
  _16.enum_Node.f$2 := _20
  label l7
  // [mir] drop(_20) -> [return: bb16, unwind: bb24]
  // ========== bb16 ==========
  __t4 := true
  // [mir] StorageDead(_20)
  // [mir] drop(_18) -> [return: bb17, unwind: bb25]
  // ========== bb17 ==========
  __t5 := true
  // [mir] StorageDead(_18)
  // [mir] drop(_17) -> [return: bb18, unwind: bb26]
  // ========== bb18 ==========
  __t6 := true
  // [mir] StorageDead(_17)
  // [mir] drop((*_1)) -> [return: bb19, unwind: bb20]
  // ========== bb19 ==========
  __t7 := true
  // [mir] (*_1) = move _16
  _1.val_ref := _16
  label l8
  // [mir] _0 = const ()
  // [mir] drop(_16) -> [return: bb21, unwind: bb33]
  // ========== bb21 ==========
  __t8 := true
  // [mir] StorageDead(_16)
  // [mir] goto -> bb22
  goto bb16
  
  label bb13
  // ========== l19 ==========
  // MIR edge bb3 --> bb5
  // ========== bb5 ==========
  __t15 := true
  // [mir] falseEdge -> [real: bb8, imaginary: bb4]
  // ========== l25 ==========
  // MIR edge bb5 --> bb8
  // Expire borrows
  // expire_borrows ReborrowingDAG(L2,L1,)

  // ========== bb8 ==========
  __t16 := true
  // [mir] _0 = ()
  _0 := builtin$havoc_ref()
  inhale acc(tuple0$(_0), write)
  // [mir] goto -> bb12
  // ========== l34 ==========
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_1.val_ref.enum_Node.f$1), write)
  // drop Pred(_2, write) (Pred(_2, write))
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_1.val_ref.enum_Node.f$2), write)
  goto bb15
  
  label bb14
  // ========== l18 ==========
  // MIR edge bb3 --> bb4
  // ========== bb4 ==========
  __t17 := true
  // [mir] falseEdge -> [real: bb9, imaginary: bb6]
  // ========== l26 ==========
  // MIR edge bb4 --> bb9
  // Expire borrows
  // expire_borrows ReborrowingDAG(L2,)

  // ========== bb9 ==========
  __t18 := true
  // [mir] StorageLive(_12)
  // [mir] _12 = &mut (*(*_5))
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_ref, write)
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_5.val_ref), write)
  _12.val_ref := _5.val_ref.val_ref
  label l27
  // [mir] StorageLive(_13)
  // [mir] _13 = move _2
  _13 := _2
  label l28
  // [mir] _0 = Tree::<T>::insert(move _12, move _13) -> [return: bb10, unwind: bb32]
  label l29
  assert f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_12.val_ref))
  assert true
  exhale acc(_12.val_ref, write) &&
    (acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_12.val_ref), write) &&
    acc(__TYPARAM__$_T$0$__(_13), write))
  _0 := builtin$havoc_ref()
  inhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l29](_12.val_ref)), write)
  inhale acc(tuple0$(_0), write)
  inhale true
  inhale f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l29](_12.val_ref))) &&
    (f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l29](_12.val_ref)),
    old[l29](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_13))) &&
    (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(old[l29](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_13)),
      _0_quant_0)) ==
      0 ||
      f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l29](_12.val_ref)),
      _0_quant_0) ==
      f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(old[l29](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_12.val_ref)),
      _0_quant_0)))
  label l30
  // ========== l31 ==========
  // MIR edge bb9 --> bb10
  // Expire borrows
  // expire_borrows ReborrowingDAG(L12,L6,L1,)

  // ========== bb10 ==========
  __t19 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] goto -> bb12
  // ========== l35 ==========
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_1.val_ref.enum_Node.f$2), write)
  goto bb15
  
  label bb15
  // ========== bb12 ==========
  __t20 := true
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] goto -> bb22
  // ========== l36 ==========
  // drop Acc(_6.val_ref, write) (Acc(_6.val_ref, write))
  // drop Acc(_11.val_int, write) (Acc(_11.val_int, write))
  // drop Acc(_9.val_ref, write) (Acc(_9.val_ref, write))
  // drop Acc(_8.val_ref, write) (Acc(_8.val_ref, write))
  // drop Acc(_10.val_ref, write) (Acc(_10.val_ref, write))
  // drop Acc(_4.val_ref, write) (Acc(_4.val_ref, write))
  // drop Acc(_5.val_ref, write) (Acc(_5.val_ref, write))
  // drop Pred(_0, write) (Pred(_0, write))
  // drop Pred(_7, write) (Pred(_7, write))
  goto bb16
  
  label bb16
  // ========== bb22 ==========
  __t21 := true
  // [mir] drop(_2) -> [return: bb23, unwind: bb34]
  // ========== bb23 ==========
  __t22 := true
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l33
  // Fold predicates for &mut args and transfer borrow permissions to old
  fold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_1.val_ref.enum_Node.f$2), write)
  fold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_1.val_ref.enum_Node.f$1), write)
  fold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(_1.val_ref.enum_Node), write)
  fold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref), write)
  // obtain acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_old$pre$0)) &&
    (f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_old$pre$0),
    old[pre](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_2))) &&
    (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(old[pre](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_2)),
      _0_quant_0)) ==
      0 ||
      f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_old$pre$0),
      _0_quant_0) ==
      f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(old[pre](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref)),
      _0_quant_0)))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_old$pre$0), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l0
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t9 := true
  // [mir] falseEdge -> [real: bb2, imaginary: bb13]
  // ========== bb2 ==========
  __t10 := true
  // [mir] StorageLive(_4)
  // [mir] _4 = &mut (((*_1) as Node).0: T)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  unfold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_1.val_ref), write)
  unfold acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_Node(_1.val_ref.enum_Node), write)
  _4.val_ref := _1.val_ref.enum_Node.f$0
  label l9
  // [mir] StorageLive(_5)
  // [mir] _5 = &mut (((*_1) as Node).1: std::boxed::Box<Tree<T>>)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_ref, write)
  _5.val_ref := _1.val_ref.enum_Node.f$1
  label l10
  // [mir] StorageLive(_6)
  // [mir] _6 = &mut (((*_1) as Node).2: std::boxed::Box<Tree<T>>)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_ref, write)
  _6.val_ref := _1.val_ref.enum_Node.f$2
  label l11
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = &_2
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_ref, write)
  _9.val_ref := _2
  exhale acc(__TYPARAM__$_T$0$__(_2), write - read$())
  inhale acc(__TYPARAM__$_T$0$__(_9.val_ref), read$())
  label l12
  // [mir] _8 = &(*_9)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_ref, write)
  _8.val_ref := _9.val_ref
  inhale acc(__TYPARAM__$_T$0$__(_8.val_ref), read$())
  label l13
  // [mir] StorageLive(_10)
  // [mir] _10 = &(*_4)
  _10 := builtin$havoc_ref()
  inhale acc(_10.val_ref, write)
  _10.val_ref := _4.val_ref
  exhale acc(__TYPARAM__$_T$0$__(_4.val_ref), write - read$())
  inhale acc(__TYPARAM__$_T$0$__(_10.val_ref), read$())
  label l14
  // [mir] _7 = compare::<T>(move _8, move _10) -> [return: bb3, unwind: bb33]
  label l15
  _7 := builtin$havoc_ref()
  inhale acc(m_std$$cmp$$Ordering$_beg_$_end_(_7), write)
  inhale snap$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_(_7) ==
    f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_8.val_ref),
    snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_10.val_ref))
  // transfer perm _8.val_ref --> old[l15](_8.val_ref) // unchecked: false
  // transfer perm _10.val_ref --> old[l15](_10.val_ref) // unchecked: false
  // ========== l16 ==========
  // MIR edge bb2 --> bb3
  // Expire borrows
  // expire_borrows ReborrowingDAG(L14,L13,L10,L4,L3,L0,)

  if (__t10 && __t10) {
    // expire loan L10
    // transfer perm old[l15](_8.val_ref) --> old[l13](_8.val_ref) // unchecked: false
    exhale acc(__TYPARAM__$_T$0$__(old[l13](_8.val_ref)), read$())
  }
  if (__t10 && __t10) {
    // expire loan L4
    // transfer perm old[l15](_10.val_ref) --> old[l14](_10.val_ref) // unchecked: false
    exhale acc(__TYPARAM__$_T$0$__(old[l14](_10.val_ref)), read$())
    inhale acc(__TYPARAM__$_T$0$__(_4.val_ref), write - read$())
  }
  if (__t10 && (__t10 && __t10)) {
    // expire loan L3
    exhale acc(__TYPARAM__$_T$0$__(_9.val_ref), read$())
    inhale acc(__TYPARAM__$_T$0$__(_2), write - read$())
    // drop Acc(old[l15](_10.val_ref), write) (Acc(old[l15](_10.val_ref), write))
    // drop Acc(old[l13](_8.val_ref), write) (Acc(old[l13](_8.val_ref), write))
    // drop Pred(old[l15](_10.val_ref), read) (Pred(old[l15](_10.val_ref), read))
    // drop Pred(_4.val_ref, read) (Pred(_4.val_ref, read))
    // drop Pred(_2, write-read) (Pred(_2, write-read))
    // restored (in branch merge): Pred(_2, write-read) (Pred(_2, write-read))
  }
  // ========== bb3 ==========
  __t11 := true
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_8)
  // [mir] FakeRead(ForMatchedPlace(None), _7)
  // [mir] _11 = discriminant(_7)
  _11 := builtin$havoc_int()
  _11 := m_std$$cmp$$Ordering$_beg_$_end_$$discriminant$$__$TY$__m_std$$cmp$$Ordering$_beg_$_end_$$int$(_7)
  // [mir] switchInt(move _11) -> [255: bb4, 0: bb5, 1: bb6, otherwise: bb7]
  __t24 := _11
  // Ignore default target bb7, as the compiler marked it as unreachable.
  if (__t24 == -1) {
    goto bb14
  }
  if (__t24 == 0) {
    goto bb13
  }
  goto l1
  
  label l1
  // ========== l17 ==========
  // MIR edge bb3 --> bb6
  // Expire borrows
  // expire_borrows ReborrowingDAG(L1,)

  // ========== bb6 ==========
  __t13 := true
  // [mir] StorageLive(_14)
  // [mir] _14 = &mut (*(*_6))
  _14 := builtin$havoc_ref()
  inhale acc(_14.val_ref, write)
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_6.val_ref), write)
  _14.val_ref := _6.val_ref.val_ref
  label l20
  // [mir] StorageLive(_15)
  // [mir] _15 = move _2
  _15 := _2
  label l21
  // [mir] _0 = Tree::<T>::insert(move _14, move _15) -> [return: bb11, unwind: bb31]
  label l22
  assert f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_14.val_ref))
  assert true
  exhale acc(_14.val_ref, write) &&
    (acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_14.val_ref), write) &&
    acc(__TYPARAM__$_T$0$__(_15), write))
  _0 := builtin$havoc_ref()
  inhale acc(m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l22](_14.val_ref)), write)
  inhale acc(tuple0$(_0), write)
  inhale true
  inhale f_Tree$$$openang$T$closeang$$$bst_invariant__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l22](_14.val_ref))) &&
    (f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l22](_14.val_ref)),
    old[l22](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_15))) &&
    (forall _0_quant_0: Snap$__TYPARAM__$_T$0$__ ::discriminant$__$TY$__Snap$m_std$$cmp$$Ordering$_beg_$_end_$Snap$m_std$$cmp$$Ordering$_beg_$_end_$$int$(f_compare__$TY$____TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__$Snap$m_std$$cmp$$Ordering$_beg_$_end_(old[l22](snap$__$TY$__Snap$__TYPARAM__$_T$0$__$__TYPARAM__$_T$0$__$Snap$__TYPARAM__$_T$0$__(_15)),
      _0_quant_0)) ==
      0 ||
      f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(old[l22](_14.val_ref)),
      _0_quant_0) ==
      f_Tree$$$openang$T$closeang$$$contains__$TY$____TYPARAM__$_T$0$__$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$__TYPARAM__$_T$0$__$$bool$(old[l22](snap$__$TY$__Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$Snap$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_(_14.val_ref)),
      _0_quant_0)))
  label l23
  // ========== l24 ==========
  // MIR edge bb6 --> bb11
  // Expire borrows
  // expire_borrows ReborrowingDAG(L11,L5,L2,)

  // ========== bb11 ==========
  __t14 := true
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_14)
  // [mir] goto -> bb12
  // ========== l32 ==========
  unfold acc(struct$m_std$$boxed$$Box$m_Tree$_beg_$__TYPARAM__$_T$0$__$_end_$struct$m_std$$alloc$$Global(_1.val_ref.enum_Node.f$1), write)
  goto bb15
  
  label return
  // ========== bb7 ==========
  __t12 := true
  // [mir] unreachable
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
