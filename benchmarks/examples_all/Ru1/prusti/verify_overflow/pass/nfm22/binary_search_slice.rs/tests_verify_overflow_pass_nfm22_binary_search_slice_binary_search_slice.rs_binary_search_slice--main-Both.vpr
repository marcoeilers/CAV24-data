domain Snap$Slice$i32  {
  
  function cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data: Seq[Int]): Snap$Slice$i32 
  
  function uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data: Snap$Slice$i32): Seq[Int] 
  
  function read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self: Snap$Slice$i32,
  idx: Int): Int 
  
  function len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(self: Snap$Slice$i32): Int 
  
  axiom Snap$Slice$i32$injectivity {
    (forall data: Seq[Int] ::
      { cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data) }
      uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) ==
      data)
  }
  
  axiom Snap$Slice$i32$surjectivity {
    (forall data: Snap$Slice$i32 ::
      { uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data) }
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data)) ==
      data)
  }
  
  axiom Snap$Slice$i32$extensionality {
    (forall _l_data: Seq[Int], _r_data: Seq[Int] ::
      { cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_l_data), cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_r_data) }
      _l_data == _r_data ==>
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_l_data) ==
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_r_data))
  }
  
  axiom Slice$i32$read_indices {
    (forall data: Seq[Int], idx: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data),
      idx) }
      { data[idx] }
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data),
      idx) ==
      data[idx])
  }
  
  axiom Slice$i32$len_of_seq {
    (forall data: Seq[Int] ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) }
      { |data| }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) ==
      |data|)
  }
  
  axiom Slice$i32$len_positive {
    (forall slice: Snap$Slice$i32 ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) >= 0)
  }
  
  axiom Slice$i32$len_upper_bound {
    (forall slice: Snap$Slice$i32 ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) * 4 <=
      9223372036854775807)
  }
  
  axiom Snap$Slice$i32$valid {
    (forall self: Snap$Slice$i32, idx: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) }
      -2147483648 <=
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) &&
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) <=
      2147483647)
  }
}

domain Snap$m_std$$option$$Option$_beg_$usize$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0: Int): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$discriminant_axiom {
    (forall _0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$valid {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      18446744073709551615)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function Slice$len__$TY$__i32$Slice$i32$$int$(self: Ref): Int
  requires acc(Slice$i32(self), read$())
  ensures result >= 0
  ensures result <= 18446744073709551615


function lookup_pure__$TY$__Array$2$i32$i32$Array$2$i32$$int$$$int$(self: Ref,
  idx: Int): Int
  requires acc(Array$2$i32(self), read$())
  requires 0 <= idx
  requires idx < 2


function lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self: Ref, idx: Int): Int
  requires acc(Slice$i32(self), read$())
  requires 0 <= idx
  requires idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)


function m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant)
}

function seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self: Ref,
  start: Int): Seq[Int]
  requires acc(Slice$i32(self), read$())
  requires 0 <= start
  ensures start >= Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    result == Seq[Int]()
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    |result| == Slice$len__$TY$__i32$Slice$i32$$int$(self) - start
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    result[0] ==
    lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, start)
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    (forall i: Int, j: Int ::
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i), result[j] }
      start <= i && i < Slice$len__$TY$__i32$Slice$i32$$int$(self) &&
      (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(self) - start &&
      i == j + start) ==>
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i) ==
      result[j])
{
  (start >= Slice$len__$TY$__i32$Slice$i32$$int$(self) ?
    Seq[Int]() :
    Seq(lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, start)) ++
    seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self, start + 1))
}

function snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(self: Ref): Snap$Slice$i32
  requires acc(Slice$i32(self), read$())
  ensures [(forall i: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(result, i) }
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i) }
      0 <= i && i < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(result, i) ==
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i)),
    true]
  ensures [Slice$len__$TY$__i32$Slice$i32$$int$(self) ==
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(result),
    true]
{
  cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self,
  0))
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$usize$_end_
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_())
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate Array$2$i32(self: Ref) 

predicate DeadBorrowToken$(borrow: Int) 

predicate Slice$i32(self: Ref) 

predicate i32(self: Ref) 

predicate m_std$$option$$Option$_beg_$usize$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$usize$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate ref$Slice$i32(self: Ref) {
  acc(self.val_ref, write) && acc(Slice$i32(self.val_ref), write)
}

predicate struct$m_std$$ops$$RangeFull(self: Ref) 

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_main() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Int
  var __t10: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Int
  var _9: Int
  var _11: Ref
  var _12: Ref
  var _13: Int
  var _t15: Ref
  
  label start
  // ========== start ==========
  // Def path: "binary_search_slice::main"
  // Span: tests/verify_overflow/pass/nfm22/binary_search_slice.rs:31:1: 40:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  // Preconditions:
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_1)
  // [mir] _1 = [const 1_i32, const 2_i32]
  _1 := builtin$havoc_ref()
  inhale acc(Array$2$i32(_1), write)
  inhale lookup_pure__$TY$__Array$2$i32$i32$Array$2$i32$$int$$$int$(_1, 0) ==
    1
  inhale lookup_pure__$TY$__Array$2$i32$i32$Array$2$i32$$int$$$int$(_1, 1) ==
    2
  // [mir] FakeRead(ForLet(None), _1)
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = &_1
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  _4.val_ref := _1
  exhale acc(Array$2$i32(_1), write - read$())
  inhale acc(Array$2$i32(_4.val_ref), read$())
  label l0
  // [mir] StorageLive(_5)
  // [mir] _5 = std::ops::RangeFull
  _5 := builtin$havoc_ref()
  inhale acc(struct$m_std$$ops$$RangeFull(_5), write)
  // [mir] _3 = <[i32; 2] as std::ops::Index<std::ops::RangeFull>>::index(move _4, move _5) -> [return: bb1, unwind: bb9]
  label l1
  _3 := builtin$havoc_ref()
  inhale acc(ref$Slice$i32(_3), read$())
  unfold acc(ref$Slice$i32(_3), read$())
  inhale Slice$len__$TY$__i32$Slice$i32$$int$(_3.val_ref) == 2
  inhale (let _LET_1 ==
      (_4.val_ref) in
      (let _LET_0 ==
        (_3.val_ref) in
        (forall i: Int, j: Int ::
          { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_3.val_ref,
          i), lookup_pure__$TY$__Array$2$i32$i32$Array$2$i32$$int$$$int$(_4.val_ref,
          j) }
          0 <= i &&
          (i < Slice$len__$TY$__i32$Slice$i32$$int$(_LET_0) &&
          (j == i + 0 && (0 <= j && j < 2))) ==>
          lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_LET_0, i) ==
          lookup_pure__$TY$__Array$2$i32$i32$Array$2$i32$$int$$$int$(_LET_1,
          j))))
  // transfer perm _4.val_ref --> old[l1](_4.val_ref) // unchecked: false
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] _2 = &(*_3)
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_ref, write)
  _2.val_ref := _3.val_ref
  inhale acc(Slice$i32(_2.val_ref), read$())
  label l2
  // [mir] FakeRead(ForLet(None), _2)
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] _7 = &(*_2)
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_ref, write)
  _7.val_ref := _2.val_ref
  inhale acc(Slice$i32(_7.val_ref), read$())
  label l3
  // [mir] _6 = search_fixed(move _7, const 1_i32) -> [return: bb2, unwind: bb9]
  label l4
  _t15 := builtin$havoc_ref()
  inhale acc(i32(_t15), write)
  assert true
  exhale acc(_7.val_ref, write) && acc(i32(_t15), write)
  _6 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  // transfer perm _7.val_ref --> old[l4](_7.val_ref) // unchecked: true
  inhale true
  inhale (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      _6.discriminant) ==
    1 ==>
    (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) in
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
        (unfolding acc(usize(_6.enum_Some.f$0), write) in
          _6.enum_Some.f$0.val_int)) <
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(old[l4](_7.val_ref))) &&
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(old[l4](_7.val_ref)),
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write) in
        (unfolding acc(usize(_6.enum_Some.f$0), write) in
          _6.enum_Some.f$0.val_int))) ==
      old[l4](1))
  label l5
  // ========== l6 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // expire_borrows ReborrowingDAG(L3,L5,L4,L6,L7,L0,)

  if (__t1 && __t1) {
    // expire loan L5
    // transfer perm old[l4](_7.val_ref) --> old[l3](_7.val_ref) // unchecked: false
    exhale acc(Slice$i32(old[l3](_7.val_ref)), read$())
  }
  if (__t1 && (__t1 && __t1)) {
    // expire loan L4
    exhale acc(Slice$i32(_2.val_ref), read$())
  }
  if (__t0 && (__t0 && (__t0 && (__t1 && (__t1 && __t1))))) {
    // expire loan L0
    // transfer perm old[l1](_4.val_ref) --> old[l0](_4.val_ref) // unchecked: false
    exhale acc(Array$2$i32(old[l0](_4.val_ref)), read$())
    inhale acc(Array$2$i32(_1), write - read$())
  }
  // ========== bb2 ==========
  __t2 := true
  // [mir] StorageDead(_7)
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] FakeRead(ForMatchedPlace(None), _6)
  // [mir] _8 = discriminant(_6)
  _8 := builtin$havoc_int()
  _8 := m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_6)
  // [mir] switchInt(move _8) -> [1: bb3, otherwise: bb7]
  __t9 := _8
  if (__t9 == 1) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l8 ==========
  // MIR edge bb2 --> bb3
  // ========== bb3 ==========
  __t4 := true
  // [mir] falseEdge -> [real: bb4, imaginary: bb7]
  // ========== bb4 ==========
  __t5 := true
  // [mir] StorageLive(_9)
  // [mir] _9 = ((_6 as Some).0: usize)
  _9 := builtin$havoc_int()
  unfold acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  unfold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write)
  unfold acc(usize(_6.enum_Some.f$0), write)
  _9 := _6.enum_Some.f$0.val_int
  label l9
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = _9
  _13 := builtin$havoc_int()
  _13 := _9
  label l10
  // [mir] _12 = Lt(move _13, const 2_usize)
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := _13 < 2
  // [mir] StorageDead(_13)
  // [mir] _11 = Not(move _12)
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := !_12.val_bool
  // [mir] StorageDead(_12)
  // [mir] switchInt(move _11) -> [0: bb6, otherwise: bb5]
  __t10 := _11.val_bool
  if (!__t10) {
    goto l6
  }
  goto bb1
  
  label bb1
  // ========== l11 ==========
  // MIR edge bb4 --> bb5
  // ========== bb5 ==========
  __t6 := true
  // [mir] StorageLive(_14)
  // [mir] _14 = core::panicking::panic(const "assertion failed: idx < 2") -> bb9
  // Rust panic - const "assertion failed: idx < 2"
  assert false
  goto end_of_method
  
  label bb2
  // ========== bb8 ==========
  __t8 := true
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] StorageDead(_1)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l14
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l6
  // ========== l12 ==========
  // MIR edge bb4 --> bb6
  // ========== bb6 ==========
  __t7 := true
  // [mir] _10 = const ()
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_10)
  // [mir] _0 = const ()
  // [mir] StorageDead(_9)
  // [mir] goto -> bb8
  // ========== l13 ==========
  fold acc(usize(_6.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  // drop Acc(_11.val_bool, write) (Acc(_11.val_bool, write))
  // drop Acc(_9.val_int, write) (Acc(_9.val_int, write))
  // drop Acc(_13.val_int, write) (Acc(_13.val_int, write))
  // drop Acc(_12.val_bool, write) (Acc(_12.val_bool, write))
  goto bb2
  
  label return
  // ========== l7 ==========
  // MIR edge bb2 --> bb7
  // ========== bb7 ==========
  __t3 := true
  // [mir] _0 = const ()
  // [mir] goto -> bb8
  goto bb2
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
