domain MirrorDomain  {
  
  function mirror_simple$f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$is_empty__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$bool$(_1: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Bool 
  
  function mirror_simple$f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(_1: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Int 
  
  function mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$i32$_end_): Bool 
  
  function mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$i32$_end_): Bool 
}

domain Snap$m_std$$option$$Option$_beg_$i32$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$i32$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_(): Snap$m_std$$option$$Option$_beg_$i32$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_0: Int): Snap$m_std$$option$$Option$_beg_$i32$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$i32$_end_): Int 
  
  axiom Snap$m_std$$option$$Option$_beg_$i32$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$i32$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$i32$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$i32$_end_$1$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$i32$_end_$1$discriminant_axiom {
    (forall _0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0$valid {
    (forall self: Snap$m_std$$option$$Option$_beg_$i32$_end_ ::
      { Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self) }
      -2147483648 <=
      Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self) &&
      Snap$m_std$$option$$Option$_beg_$i32$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(self) <=
      2147483647)
  }
}

domain Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_  {
  
  
}

domain Snap$struct$m_std$$alloc$$Global  {
  
  
}

domain Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global  {
  
  function cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
  _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
  _2: Int, _3: Snap$struct$m_std$$alloc$$Global, _4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global): Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global 
  
  function Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$head__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_ 
  
  function Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$tail__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_ 
  
  function Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(self: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Int 
  
  function Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$alloc__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$alloc$$Global(self: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Snap$struct$m_std$$alloc$$Global 
  
  function Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$marker__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(self: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$injectivity {
    (forall _l_0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _l_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _l_2: Int, _l_3: Snap$struct$m_std$$alloc$$Global, _l_4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global,
    _r_0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _r_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _r_2: Int, _r_3: Snap$struct$m_std$$alloc$$Global, _r_4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_l_0,
      _l_1, _l_2, _l_3, _l_4), cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_r_0,
      _r_1, _r_2, _r_3, _r_4) }
      cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_l_0,
      _l_1, _l_2, _l_3, _l_4) ==
      cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_r_0,
      _r_1, _r_2, _r_3, _r_4) ==>
      _l_0 == _r_0 &&
      (_l_1 == _r_1 && (_l_2 == _r_2 && (_l_3 == _r_3 && _l_4 == _r_4))))
  }
  
  axiom Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$head$axiom {
    (forall _0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _2: Int, _3: Snap$struct$m_std$$alloc$$Global, _4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$head__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) }
      Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$head__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) ==
      _0)
  }
  
  axiom Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$tail$axiom {
    (forall _0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _2: Int, _3: Snap$struct$m_std$$alloc$$Global, _4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$tail__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) }
      Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$tail__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) ==
      _1)
  }
  
  axiom Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len$axiom {
    (forall _0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _2: Int, _3: Snap$struct$m_std$$alloc$$Global, _4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) }
      Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) ==
      _2)
  }
  
  axiom Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len$valid {
    (forall self: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(self) }
      0 <=
      Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(self) &&
      Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$len__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(self) <=
      18446744073709551615)
  }
  
  axiom Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$alloc$axiom {
    (forall _0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _2: Int, _3: Snap$struct$m_std$$alloc$$Global, _4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$alloc__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) }
      Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$alloc__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) ==
      _3)
  }
  
  axiom Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$marker$axiom {
    (forall _0: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_,
    _2: Int, _3: Snap$struct$m_std$$alloc$$Global, _4: Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$marker__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) }
      Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$0$field$f$marker__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_0,
      _1, _2, _3, _4)) ==
      _4)
  }
}

domain Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$alloc: Ref

field f$head: Ref

field f$len: Ref

field f$marker: Ref

field f$tail: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(_1: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global,
  _2: Int): Int
  requires 0 <= _2
  requires _2 <= 18446744073709551615
  requires true
  requires _2 <
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(_1)
  ensures -2147483648 <= result
  ensures result <= 2147483647
  ensures true


function f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$is_empty__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$bool$(_1: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Bool
  requires true
  requires true
  ensures (result ==>
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(_1) ==
    0) &&
    (!result ==>
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(_1) >
    0)
  ensures [result ==
    mirror_simple$f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$is_empty__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$bool$(_1),
    true]


function f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(_1: Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global): Int
  requires true
  requires true
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(_1),
    true]


function f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$i32$_end_): Bool
  requires true
  requires true
  ensures f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(_1) ==
    !result
  ensures [result ==
    mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(_1),
    true]


function f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$i32$_end_): Bool
  requires true
  requires true
  ensures (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(_1) ==
    1 ?
      result :
      !result)
  ensures [result ==
    mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(_1),
    true]


function m_std$$option$$Option$_beg_$i32$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$i32$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$i32$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$i32$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$i32$_end_
  requires acc(m_std$$option$$Option$_beg_$i32$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$i32$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$$int$$Snap$m_std$$option$$Option$_beg_$i32$_end_((unfolding acc(m_std$$option$$Option$_beg_$i32$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$i32$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(i32(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_())
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_
  requires acc(m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self), read$())


function snap$__$TY$__Snap$struct$m_std$$alloc$$Global$struct$m_std$$alloc$$Global$Snap$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$alloc$$Global(self), read$())


function snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$$int$$Snap$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global((unfolding acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self), read$()) in
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self.f$head)),
  (unfolding acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self), read$()) in
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self.f$tail)),
  (unfolding acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self), read$()) in
    (unfolding acc(usize(self.f$len), read$()) in self.f$len.val_int)), (unfolding acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$alloc$$Global$struct$m_std$$alloc$$Global$Snap$struct$m_std$$alloc$$Global(self.f$alloc)),
  (unfolding acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(self.f$marker)))
}

function snap$__$TY$__Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_std$$option$$Option$_beg_$i32$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$i32$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$i32$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(i32(self.f$0), write)
}

predicate m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self: Ref) 

predicate struct$m_std$$alloc$$Global(self: Ref) 

predicate struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.f$head, write) &&
  (acc(m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self.f$head), write) &&
  (acc(self.f$tail, write) &&
  (acc(m_std$$option$$Option$_beg_$struct$m_std$$ptr$$NonNull$struct$m_std$$collections$$linked_list$$Node$i32$_end_(self.f$tail), write) &&
  (acc(self.f$len, write) &&
  (acc(usize(self.f$len), write) &&
  (acc(self.f$alloc, write) &&
  (acc(struct$m_std$$alloc$$Global(self.f$alloc), write) &&
  (acc(self.f$marker, write) &&
  acc(struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(self.f$marker), write)))))))))
}

predicate struct$m_std$$marker$$PhantomData$struct$m_std$$boxed$$Box$struct$m_std$$collections$$linked_list$$Node$i32$struct$m_std$$alloc$$Global(self: Ref) 

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_main() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var __t45: Bool
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var __t53: Int
  var __t54: Int
  var __t55: Bool
  var __t56: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Ref
  var _11: Ref
  var _12: Ref
  var _13: Ref
  var _14: Ref
  var _15: Ref
  var _16: Ref
  var _17: Ref
  var _19: Ref
  var _20: Ref
  var _21: Ref
  var _22: Ref
  var _23: Ref
  var _26: Ref
  var _27: Ref
  var _28: Ref
  var _29: Ref
  var _30: Ref
  var _33: Ref
  var _34: Ref
  var _35: Ref
  var _36: Ref
  var _37: Ref
  var _39: Ref
  var _40: Ref
  var _41: Ref
  var _42: Ref
  var _44: Ref
  var _45: Ref
  var _46: Int
  var _47: Ref
  var _50: Ref
  var _51: Ref
  var _52: Ref
  var _53: Ref
  var _54: Ref
  var _57: Ref
  var _58: Ref
  var _59: Ref
  var _60: Ref
  var _61: Ref
  var _64: Ref
  var _65: Ref
  var _66: Ref
  var _67: Ref
  var _68: Ref
  var _71: Ref
  var _72: Ref
  var _73: Ref
  var _74: Ref
  var _75: Int
  var _78: Ref
  var _79: Ref
  var _80: Int
  var _81: Ref
  var _t83: Ref
  var _t84: Ref
  var _t85: Ref
  var _t86: Ref
  
  label start
  // ========== start ==========
  // Def path: "linked_list::main"
  // Span: tests/verify_overflow/pass/extern-spec/linked-list.rs:102:1: 126:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  __t32 := false
  __t33 := false
  __t34 := false
  __t35 := false
  __t36 := false
  __t37 := false
  __t38 := false
  __t39 := false
  __t40 := false
  __t41 := false
  __t42 := false
  __t43 := false
  __t44 := false
  // Preconditions:
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_1)
  // [mir] _1 = std::collections::LinkedList::<i32>::new() -> [return: bb1, unwind: bb47]
  label l0
  _1 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write)
  inhale true
  inhale f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$is_empty__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$bool$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1))
  label l1
  // ========== bb1 ==========
  __t1 := true
  // [mir] FakeRead(ForLet(None), _1)
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] _3 = &mut _1
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_ref, write)
  _3.val_ref := _1
  label l2
  // [mir] _2 = std::collections::LinkedList::<i32>::push_front(move _3, const 1_i32) -> [return: bb2, unwind: bb46]
  label l3
  _t83 := builtin$havoc_ref()
  inhale acc(i32(_t83), write)
  assert true
  exhale acc(_3.val_ref, write) &&
    (acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_3.val_ref), write) &&
    acc(i32(_t83), write))
  _2 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l3](_3.val_ref)), write)
  inhale acc(tuple0$(_2), write)
  inhale true
  inhale !(old[l3](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_3.val_ref))) +
    1 <
    0 ||
    old[l3](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_3.val_ref))) +
    1 >
    18446744073709551615) &&
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l3](_3.val_ref))) ==
    old[l3](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_3.val_ref))) +
    1 &&
    (f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l3](_3.val_ref)),
    0) ==
    old[l3](1) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      _0_quant_0 <
      old[l3](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_3.val_ref))) ==>
      !(_0_quant_0 + 1 < 0 || _0_quant_0 + 1 > 18446744073709551615) &&
      f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l3](_3.val_ref)),
      _0_quant_0 + 1) ==
      old[l3](f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_3.val_ref),
      _0_quant_0))))
  label l4
  // ========== l5 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // expire_borrows ReborrowingDAG(L26,L0,)

  // ========== bb2 ==========
  __t2 := true
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = &_1
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_ref, write)
  _9.val_ref := _1
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_9.val_ref), read$())
  label l6
  // [mir] _8 = &(*_9)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_ref, write)
  _8.val_ref := _9.val_ref
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_8.val_ref), read$())
  label l7
  // [mir] _7 = get::<i32, std::alloc::Global>(move _8, const 0_usize) -> [return: bb3, unwind: bb46]
  label l8
  _7 := builtin$havoc_ref()
  inhale acc(i32(_7), write)
  inhale (unfolding acc(i32(_7), write) in _7.val_int) ==
    f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_8.val_ref),
    0)
  // transfer perm _8.val_ref --> old[l8](_8.val_ref) // unchecked: false
  // ========== l9 ==========
  // MIR edge bb2 --> bb3
  // Expire borrows
  // expire_borrows ReborrowingDAG(L29,L34,L1,)

  if (__t2 && __t2) {
    // expire loan L34
    // transfer perm old[l8](_8.val_ref) --> old[l7](_8.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l7](_8.val_ref)), read$())
  }
  if (__t2 && (__t2 && __t2)) {
    // expire loan L1
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_9.val_ref), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
      read$())
  }
  // ========== bb3 ==========
  __t3 := true
  // [mir] StorageDead(_8)
  // [mir] _6 = Eq(move _7, const 1_i32)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_bool, write)
  unfold acc(i32(_7), write)
  _6.val_bool := _7.val_int == 1
  // [mir] StorageDead(_7)
  // [mir] _5 = Not(move _6)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := !_6.val_bool
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb5, otherwise: bb4]
  __t45 := _5.val_bool
  if (__t45) {
    goto bb13
  }
  goto return
  
  label bb0
  // ========== l30 ==========
  // MIR edge bb10 --> bb12
  // ========== bb12 ==========
  __t12 := true
  // [mir] _18 = const ()
  // [mir] StorageDead(_19)
  // [mir] StorageDead(_18)
  // [mir] StorageLive(_25)
  // [mir] StorageLive(_26)
  // [mir] StorageLive(_27)
  // [mir] StorageLive(_28)
  // [mir] StorageLive(_29)
  // [mir] StorageLive(_30)
  // [mir] _30 = &_11
  _30 := builtin$havoc_ref()
  inhale acc(_30.val_ref, write)
  _30.val_ref := _11
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_30.val_ref), read$())
  label l32
  // [mir] _29 = &(*_30)
  _29 := builtin$havoc_ref()
  inhale acc(_29.val_ref, write)
  _29.val_ref := _30.val_ref
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_29.val_ref), read$())
  label l33
  // [mir] _28 = get::<i32, std::alloc::Global>(move _29, const 1_usize) -> [return: bb13, unwind: bb45]
  label l34
  _28 := builtin$havoc_ref()
  inhale acc(i32(_28), write)
  inhale (unfolding acc(i32(_28), write) in _28.val_int) ==
    f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_29.val_ref),
    1)
  // transfer perm _29.val_ref --> old[l34](_29.val_ref) // unchecked: false
  // ========== l35 ==========
  // MIR edge bb12 --> bb13
  // Expire borrows
  // expire_borrows ReborrowingDAG(L36,L23,L6,)

  if (__t12 && __t12) {
    // expire loan L23
    // transfer perm old[l34](_29.val_ref) --> old[l33](_29.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l33](_29.val_ref)), read$())
  }
  if (__t12 && (__t12 && __t12)) {
    // expire loan L6
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_30.val_ref), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11), write -
      read$())
  }
  // ========== bb13 ==========
  __t13 := true
  // [mir] StorageDead(_29)
  // [mir] _27 = Eq(move _28, const 3_i32)
  _27 := builtin$havoc_ref()
  inhale acc(_27.val_bool, write)
  unfold acc(i32(_28), write)
  _27.val_bool := _28.val_int == 3
  // [mir] StorageDead(_28)
  // [mir] _26 = Not(move _27)
  _26 := builtin$havoc_ref()
  inhale acc(_26.val_bool, write)
  _26.val_bool := !_27.val_bool
  // [mir] StorageDead(_30)
  // [mir] StorageDead(_27)
  // [mir] switchInt(move _26) -> [0: bb15, otherwise: bb14]
  __t47 := _26.val_bool
  if (__t47) {
    goto bb12
  }
  goto bb1
  
  label bb1
  // ========== l36 ==========
  // MIR edge bb13 --> bb15
  // ========== bb15 ==========
  __t15 := true
  // [mir] _25 = const ()
  // [mir] StorageDead(_26)
  // [mir] StorageDead(_25)
  // [mir] StorageLive(_32)
  // [mir] StorageLive(_33)
  // [mir] StorageLive(_34)
  // [mir] StorageLive(_35)
  // [mir] StorageLive(_36)
  // [mir] StorageLive(_37)
  // [mir] _37 = &_11
  _37 := builtin$havoc_ref()
  inhale acc(_37.val_ref, write)
  _37.val_ref := _11
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_37.val_ref), read$())
  label l38
  // [mir] _36 = &(*_37)
  _36 := builtin$havoc_ref()
  inhale acc(_36.val_ref, write)
  _36.val_ref := _37.val_ref
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_36.val_ref), read$())
  label l39
  // [mir] _35 = get::<i32, std::alloc::Global>(move _36, const 0_usize) -> [return: bb16, unwind: bb45]
  label l40
  _35 := builtin$havoc_ref()
  inhale acc(i32(_35), write)
  inhale (unfolding acc(i32(_35), write) in _35.val_int) ==
    f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_36.val_ref),
    0)
  // transfer perm _36.val_ref --> old[l40](_36.val_ref) // unchecked: false
  // ========== l41 ==========
  // MIR edge bb15 --> bb16
  // Expire borrows
  // expire_borrows ReborrowingDAG(L30,L41,L7,)

  if (__t15 && __t15) {
    // expire loan L41
    // transfer perm old[l40](_36.val_ref) --> old[l39](_36.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l39](_36.val_ref)), read$())
  }
  if (__t15 && (__t15 && __t15)) {
    // expire loan L7
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_37.val_ref), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11), write -
      read$())
  }
  // ========== bb16 ==========
  __t16 := true
  // [mir] StorageDead(_36)
  // [mir] _34 = Eq(move _35, const 4_i32)
  _34 := builtin$havoc_ref()
  inhale acc(_34.val_bool, write)
  unfold acc(i32(_35), write)
  _34.val_bool := _35.val_int == 4
  // [mir] StorageDead(_35)
  // [mir] _33 = Not(move _34)
  _33 := builtin$havoc_ref()
  inhale acc(_33.val_bool, write)
  _33.val_bool := !_34.val_bool
  // [mir] StorageDead(_37)
  // [mir] StorageDead(_34)
  // [mir] switchInt(move _33) -> [0: bb18, otherwise: bb17]
  __t48 := _33.val_bool
  if (__t48) {
    goto bb11
  }
  goto l5
  
  label bb10
  // ========== l66 ==========
  // MIR edge bb26 --> bb27
  // ========== bb27 ==========
  __t27 := true
  // [mir] StorageLive(_62)
  // [mir] _62 = core::panicking::panic(const "assertion failed: get(&l, 2) == 3") -> bb45
  // Rust panic - const "assertion failed: get(&l, 2) == 3"
  assert false
  goto end_of_method
  
  label bb11
  // ========== l43 ==========
  // MIR edge bb16 --> bb17
  // ========== bb17 ==========
  __t17 := true
  // [mir] StorageLive(_38)
  // [mir] _38 = core::panicking::panic(const "assertion failed: get(&ll2, 0) == 4") -> bb45
  // Rust panic - const "assertion failed: get(&ll2, 0) == 4"
  assert false
  goto end_of_method
  
  label bb12
  // ========== l37 ==========
  // MIR edge bb13 --> bb14
  // ========== bb14 ==========
  __t14 := true
  // [mir] StorageLive(_31)
  // [mir] _31 = core::panicking::panic(const "assertion failed: get(&ll2, 1) == 3") -> bb45
  // Rust panic - const "assertion failed: get(&ll2, 1) == 3"
  assert false
  goto end_of_method
  
  label bb13
  // ========== l11 ==========
  // MIR edge bb3 --> bb4
  // ========== bb4 ==========
  __t4 := true
  // [mir] StorageLive(_10)
  // [mir] _10 = core::panicking::panic(const "assertion failed: get(&l, 0) == 1") -> bb46
  // Rust panic - const "assertion failed: get(&l, 0) == 1"
  assert false
  goto end_of_method
  
  label bb2
  // ========== l53 ==========
  // MIR edge bb20 --> bb22
  // ========== bb22 ==========
  __t22 := true
  // [mir] _43 = const ()
  // [mir] StorageDead(_44)
  // [mir] StorageDead(_43)
  // [mir] StorageLive(_49)
  // [mir] StorageLive(_50)
  // [mir] StorageLive(_51)
  // [mir] StorageLive(_52)
  // [mir] StorageLive(_53)
  // [mir] StorageLive(_54)
  // [mir] _54 = &_1
  _54 := builtin$havoc_ref()
  inhale acc(_54.val_ref, write)
  _54.val_ref := _1
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_54.val_ref), read$())
  label l55
  // [mir] _53 = &(*_54)
  _53 := builtin$havoc_ref()
  inhale acc(_53.val_ref, write)
  _53.val_ref := _54.val_ref
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_53.val_ref), read$())
  label l56
  // [mir] _52 = get::<i32, std::alloc::Global>(move _53, const 3_usize) -> [return: bb23, unwind: bb45]
  label l57
  _52 := builtin$havoc_ref()
  inhale acc(i32(_52), write)
  inhale (unfolding acc(i32(_52), write) in _52.val_int) ==
    f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_53.val_ref),
    3)
  // transfer perm _53.val_ref --> old[l57](_53.val_ref) // unchecked: false
  // ========== l58 ==========
  // MIR edge bb22 --> bb23
  // Expire borrows
  // expire_borrows ReborrowingDAG(L21,L28,L12,)

  if (__t22 && __t22) {
    // expire loan L28
    // transfer perm old[l57](_53.val_ref) --> old[l56](_53.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l56](_53.val_ref)), read$())
  }
  if (__t22 && (__t22 && __t22)) {
    // expire loan L12
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_54.val_ref), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
      read$())
  }
  // ========== bb23 ==========
  __t23 := true
  // [mir] StorageDead(_53)
  // [mir] _51 = Eq(move _52, const 2_i32)
  _51 := builtin$havoc_ref()
  inhale acc(_51.val_bool, write)
  unfold acc(i32(_52), write)
  _51.val_bool := _52.val_int == 2
  // [mir] StorageDead(_52)
  // [mir] _50 = Not(move _51)
  _50 := builtin$havoc_ref()
  inhale acc(_50.val_bool, write)
  _50.val_bool := !_51.val_bool
  // [mir] StorageDead(_54)
  // [mir] StorageDead(_51)
  // [mir] switchInt(move _50) -> [0: bb25, otherwise: bb24]
  __t50 := _50.val_bool
  if (__t50) {
    goto l30
  }
  goto l9
  
  label bb3
  // ========== l65 ==========
  // MIR edge bb26 --> bb28
  // ========== bb28 ==========
  __t28 := true
  // [mir] _56 = const ()
  // [mir] StorageDead(_57)
  // [mir] StorageDead(_56)
  // [mir] StorageLive(_63)
  // [mir] StorageLive(_64)
  // [mir] StorageLive(_65)
  // [mir] StorageLive(_66)
  // [mir] StorageLive(_67)
  // [mir] StorageLive(_68)
  // [mir] _68 = &_1
  _68 := builtin$havoc_ref()
  inhale acc(_68.val_ref, write)
  _68.val_ref := _1
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_68.val_ref), read$())
  label l67
  // [mir] _67 = &(*_68)
  _67 := builtin$havoc_ref()
  inhale acc(_67.val_ref, write)
  _67.val_ref := _68.val_ref
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_67.val_ref), read$())
  label l68
  // [mir] _66 = get::<i32, std::alloc::Global>(move _67, const 1_usize) -> [return: bb29, unwind: bb45]
  label l69
  _66 := builtin$havoc_ref()
  inhale acc(i32(_66), write)
  inhale (unfolding acc(i32(_66), write) in _66.val_int) ==
    f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_67.val_ref),
    1)
  // transfer perm _67.val_ref --> old[l69](_67.val_ref) // unchecked: false
  // ========== l70 ==========
  // MIR edge bb28 --> bb29
  // Expire borrows
  // expire_borrows ReborrowingDAG(L31,L19,L14,)

  if (__t28 && __t28) {
    // expire loan L19
    // transfer perm old[l69](_67.val_ref) --> old[l68](_67.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l68](_67.val_ref)), read$())
  }
  if (__t28 && (__t28 && __t28)) {
    // expire loan L14
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_68.val_ref), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
      read$())
  }
  // ========== bb29 ==========
  __t29 := true
  // [mir] StorageDead(_67)
  // [mir] _65 = Eq(move _66, const 4_i32)
  _65 := builtin$havoc_ref()
  inhale acc(_65.val_bool, write)
  unfold acc(i32(_66), write)
  _65.val_bool := _66.val_int == 4
  // [mir] StorageDead(_66)
  // [mir] _64 = Not(move _65)
  _64 := builtin$havoc_ref()
  inhale acc(_64.val_bool, write)
  _64.val_bool := !_65.val_bool
  // [mir] StorageDead(_68)
  // [mir] StorageDead(_65)
  // [mir] switchInt(move _64) -> [0: bb31, otherwise: bb30]
  __t52 := _64.val_bool
  if (__t52) {
    goto l29
  }
  goto l10
  
  label bb4
  // ========== l78 ==========
  // MIR edge bb32 --> bb34
  // ========== bb34 ==========
  __t33 := true
  // [mir] switchInt(((_73 as Some).0: i32)) -> [1: bb35, otherwise: bb33]
  unfold acc(m_std$$option$$Option$_beg_$i32$_end_(_73), write)
  unfold acc(m_std$$option$$Option$_beg_$i32$_end_Some(_73.enum_Some), write)
  unfold acc(i32(_73.enum_Some.f$0), write)
  __t54 := _73.enum_Some.f$0.val_int
  if (__t54 == 1) {
    goto l17
  }
  goto bb5
  
  label bb5
  // ========== l79 ==========
  // MIR edge bb34 --> bb33
  // ========== l88 ==========
  fold acc(i32(_73.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$i32$_end_Some(_73.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$i32$_end_(_73), write)
  goto bb6
  
  label bb6
  // ========== bb33 ==========
  __t34 := true
  // [mir] _72 = const false
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_bool, write)
  _72.val_bool := false
  // [mir] goto -> bb37
  goto bb7
  
  label bb7
  // ========== bb37 ==========
  __t37 := true
  // [mir] _71 = Not(move _72)
  _71 := builtin$havoc_ref()
  inhale acc(_71.val_bool, write)
  _71.val_bool := !_72.val_bool
  // [mir] StorageDead(_73)
  // [mir] StorageDead(_72)
  // [mir] switchInt(move _71) -> [0: bb39, otherwise: bb38]
  __t55 := _71.val_bool
  if (__t55) {
    goto bb9
  }
  goto l21
  
  label bb8
  // ========== l86 ==========
  // MIR edge bb40 --> bb42
  // ========== bb42 ==========
  __t42 := true
  // [mir] _77 = const ()
  // [mir] StorageDead(_78)
  // [mir] StorageDead(_77)
  // [mir] _0 = const ()
  // [mir] drop(_11) -> [return: bb43, unwind: bb46]
  // ========== bb43 ==========
  __t43 := true
  // [mir] StorageDead(_11)
  // [mir] drop(_1) -> [return: bb44, unwind: bb47]
  // ========== bb44 ==========
  __t44 := true
  // [mir] StorageDead(_1)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l89
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label bb9
  // ========== l82 ==========
  // MIR edge bb37 --> bb38
  // ========== bb38 ==========
  __t38 := true
  // [mir] StorageLive(_76)
  // [mir] _76 = core::panicking::panic(const "assertion failed: matches!(l.pop_front(), Some(1))") -> bb45
  // Rust panic - const "assertion failed: matches!(l.pop_front(), Some(1))"
  assert false
  goto end_of_method
  
  label l10
  // ========== l71 ==========
  // MIR edge bb29 --> bb31
  // ========== bb31 ==========
  __t31 := true
  // [mir] _63 = const ()
  // [mir] StorageDead(_64)
  // [mir] StorageDead(_63)
  // [mir] StorageLive(_70)
  // [mir] StorageLive(_71)
  // [mir] StorageLive(_72)
  // [mir] StorageLive(_73)
  // [mir] StorageLive(_74)
  // [mir] _74 = &mut _1
  _74 := builtin$havoc_ref()
  inhale acc(_74.val_ref, write)
  _74.val_ref := _1
  label l73
  // [mir] _73 = std::collections::LinkedList::<i32>::pop_front(move _74) -> [return: bb32, unwind: bb45]
  label l74
  assert true
  exhale acc(_74.val_ref, write) &&
    acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref), write)
  _73 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l74](_74.val_ref)), write)
  inhale acc(m_std$$option$$Option$_beg_$i32$_end_(_73), write)
  inhale true
  inhale (old[l74](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref))) ==
    0 ==>
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l74](_74.val_ref))) ==
    old[l74](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref))) &&
    f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_(_73))) &&
    ((old[l74](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref))) >
    0 ==>
    !(old[l74](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref))) -
    1 <
    0 ||
    old[l74](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref))) -
    1 >
    18446744073709551615) &&
    (f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l74](_74.val_ref))) ==
    old[l74](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref))) -
    1 &&
    f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__i32$Snap$m_std$$option$$Option$_beg_$i32$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$i32$_end_$m_std$$option$$Option$_beg_$i32$_end_$Snap$m_std$$option$$Option$_beg_$i32$_end_(_73)))) &&
    (old[l74](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref))) >
    0 ==>
    (let _LET_0 ==
      (old[l74](_74.val_ref)) in
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        _0_quant_0 <
        f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_LET_0)) ==>
        !(_0_quant_0 + 1 < 0 || _0_quant_0 + 1 > 18446744073709551615) &&
        f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l74](_74.val_ref)),
        _0_quant_0) ==
        old[l74](f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_74.val_ref),
        _0_quant_0 + 1))))))
  label l75
  // ========== l76 ==========
  // MIR edge bb31 --> bb32
  // Expire borrows
  // expire_borrows ReborrowingDAG(L22,L15,)

  // ========== bb32 ==========
  __t32 := true
  // [mir] StorageDead(_74)
  // [mir] FakeRead(ForMatchedPlace(None), _73)
  // [mir] _75 = discriminant(_73)
  _75 := builtin$havoc_int()
  _75 := m_std$$option$$Option$_beg_$i32$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$i32$_end_$$int$(_73)
  // [mir] switchInt(move _75) -> [1: bb34, otherwise: bb33]
  __t53 := _75
  if (__t53 == 1) {
    goto bb4
  }
  goto l11
  
  label l11
  // ========== l77 ==========
  // MIR edge bb32 --> bb33
  goto bb6
  
  label l17
  // ========== l80 ==========
  // MIR edge bb34 --> bb35
  // ========== bb35 ==========
  __t35 := true
  // [mir] falseEdge -> [real: bb36, imaginary: bb33]
  // ========== bb36 ==========
  __t36 := true
  // [mir] _72 = const true
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_bool, write)
  _72.val_bool := true
  // [mir] goto -> bb37
  // ========== l90 ==========
  fold acc(i32(_73.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$i32$_end_Some(_73.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$i32$_end_(_73), write)
  goto bb7
  
  label l21
  // ========== l81 ==========
  // MIR edge bb37 --> bb39
  // ========== bb39 ==========
  __t39 := true
  // [mir] _70 = const ()
  // [mir] StorageDead(_71)
  // [mir] StorageDead(_70)
  // [mir] StorageLive(_77)
  // [mir] StorageLive(_78)
  // [mir] StorageLive(_79)
  // [mir] StorageLive(_80)
  // [mir] StorageLive(_81)
  // [mir] _81 = &_1
  _81 := builtin$havoc_ref()
  inhale acc(_81.val_ref, write)
  _81.val_ref := _1
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_81.val_ref), read$())
  label l83
  // [mir] _80 = std::collections::LinkedList::<i32>::len(move _81) -> [return: bb40, unwind: bb45]
  label l84
  _80 := builtin$havoc_int()
  inhale _80 >= 0 && 18446744073709551615 >= _80
  inhale _80 ==
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_81.val_ref))
  // transfer perm _81.val_ref --> old[l84](_81.val_ref) // unchecked: false
  // ========== l85 ==========
  // MIR edge bb39 --> bb40
  // Expire borrows
  // expire_borrows ReborrowingDAG(L25,L16,)

  if (__t39 && __t39) {
    // expire loan L16
    // transfer perm old[l84](_81.val_ref) --> old[l83](_81.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l83](_81.val_ref)), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
      read$())
  }
  // ========== bb40 ==========
  __t40 := true
  // [mir] StorageDead(_81)
  // [mir] _79 = Eq(move _80, const 3_usize)
  _79 := builtin$havoc_ref()
  inhale acc(_79.val_bool, write)
  inhale _80 >= 0 && 18446744073709551615 >= _80
  _79.val_bool := _80 == 3
  // [mir] StorageDead(_80)
  // [mir] _78 = Not(move _79)
  _78 := builtin$havoc_ref()
  inhale acc(_78.val_bool, write)
  _78.val_bool := !_79.val_bool
  // [mir] StorageDead(_79)
  // [mir] switchInt(move _78) -> [0: bb42, otherwise: bb41]
  __t56 := _78.val_bool
  if (__t56) {
    goto l25
  }
  goto bb8
  
  label l25
  // ========== l87 ==========
  // MIR edge bb40 --> bb41
  // ========== bb41 ==========
  __t41 := true
  // [mir] StorageLive(_82)
  // [mir] _82 = core::panicking::panic(const "assertion failed: l.len() == 3") -> bb45
  // Rust panic - const "assertion failed: l.len() == 3"
  assert false
  goto end_of_method
  
  label l29
  // ========== l72 ==========
  // MIR edge bb29 --> bb30
  // ========== bb30 ==========
  __t30 := true
  // [mir] StorageLive(_69)
  // [mir] _69 = core::panicking::panic(const "assertion failed: get(&l, 1) == 4") -> bb45
  // Rust panic - const "assertion failed: get(&l, 1) == 4"
  assert false
  goto end_of_method
  
  label l30
  // ========== l60 ==========
  // MIR edge bb23 --> bb24
  // ========== bb24 ==========
  __t24 := true
  // [mir] StorageLive(_55)
  // [mir] _55 = core::panicking::panic(const "assertion failed: get(&l, 3) == 2") -> bb45
  // Rust panic - const "assertion failed: get(&l, 3) == 2"
  assert false
  goto end_of_method
  
  label l31
  // ========== l54 ==========
  // MIR edge bb20 --> bb21
  // ========== bb21 ==========
  __t21 := true
  // [mir] StorageLive(_48)
  // [mir] _48 = core::panicking::panic(const "assertion failed: l.len() == 4") -> bb45
  // Rust panic - const "assertion failed: l.len() == 4"
  assert false
  goto end_of_method
  
  label l35
  // ========== l31 ==========
  // MIR edge bb10 --> bb11
  // ========== bb11 ==========
  __t11 := true
  // [mir] StorageLive(_24)
  // [mir] _24 = core::panicking::panic(const "assertion failed: get(&ll2, 2) == 2") -> bb45
  // Rust panic - const "assertion failed: get(&ll2, 2) == 2"
  assert false
  goto end_of_method
  
  label l5
  // ========== l42 ==========
  // MIR edge bb16 --> bb18
  // ========== bb18 ==========
  __t18 := true
  // [mir] _32 = const ()
  // [mir] StorageDead(_33)
  // [mir] StorageDead(_32)
  // [mir] StorageLive(_39)
  // [mir] StorageLive(_40)
  // [mir] _40 = &mut _1
  _40 := builtin$havoc_ref()
  inhale acc(_40.val_ref, write)
  _40.val_ref := _1
  label l44
  // [mir] StorageLive(_41)
  // [mir] StorageLive(_42)
  // [mir] _42 = &mut _11
  _42 := builtin$havoc_ref()
  inhale acc(_42.val_ref, write)
  _42.val_ref := _11
  label l45
  // [mir] _41 = &mut (*_42)
  _41 := builtin$havoc_ref()
  inhale acc(_41.val_ref, write)
  _41.val_ref := _42.val_ref
  label l46
  // [mir] _39 = std::collections::LinkedList::<i32>::append(move _40, move _41) -> [return: bb19, unwind: bb45]
  label l47
  assert true
  exhale acc(_40.val_ref, write) &&
    (acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_40.val_ref), write) &&
    (acc(_41.val_ref, write) &&
    acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_41.val_ref), write)))
  _39 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref)), write) &&
    acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_41.val_ref)), write)
  inhale acc(tuple0$(_39), write)
  inhale true
  inhale !(f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref))) +
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_41.val_ref))) <
    0 ||
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref))) +
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_41.val_ref))) >
    18446744073709551615) &&
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref))) ==
    old[l47](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_40.val_ref)) +
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_41.val_ref))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      _0_quant_0 <
      old[l47](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_40.val_ref))) ==>
      f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref)),
      _0_quant_0) ==
      old[l47](f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_40.val_ref),
      _0_quant_0))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(old[l47](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_40.val_ref))) <=
      _0_quant_0) ||
      (_0_quant_0 <
      f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref))) ==>
      !(_0_quant_0 -
      f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref))) <
      0 ||
      _0_quant_0 -
      f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref))) >
      18446744073709551615) &&
      f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_40.val_ref)),
      _0_quant_0) ==
      old[l47](f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_41.val_ref),
      _0_quant_0 -
      f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_40.val_ref)))))) &&
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l47](_41.val_ref))) ==
    0))
  label l48
  // ========== l49 ==========
  // MIR edge bb18 --> bb19
  // Expire borrows
  // expire_borrows ReborrowingDAG(L33,L32,L10,L9,L8,)

  // ========== bb19 ==========
  __t19 := true
  // [mir] StorageDead(_41)
  // [mir] StorageDead(_40)
  // [mir] StorageDead(_42)
  // [mir] StorageDead(_39)
  // [mir] StorageLive(_43)
  // [mir] StorageLive(_44)
  // [mir] StorageLive(_45)
  // [mir] StorageLive(_46)
  // [mir] StorageLive(_47)
  // [mir] _47 = &_1
  _47 := builtin$havoc_ref()
  inhale acc(_47.val_ref, write)
  _47.val_ref := _1
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_47.val_ref), read$())
  label l50
  // [mir] _46 = std::collections::LinkedList::<i32>::len(move _47) -> [return: bb20, unwind: bb45]
  label l51
  _46 := builtin$havoc_int()
  inhale _46 >= 0 && 18446744073709551615 >= _46
  inhale _46 ==
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_47.val_ref))
  // transfer perm _47.val_ref --> old[l51](_47.val_ref) // unchecked: false
  // ========== l52 ==========
  // MIR edge bb19 --> bb20
  // Expire borrows
  // expire_borrows ReborrowingDAG(L39,L11,)

  if (__t19 && __t19) {
    // expire loan L11
    // transfer perm old[l51](_47.val_ref) --> old[l50](_47.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l50](_47.val_ref)), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
      read$())
  }
  // ========== bb20 ==========
  __t20 := true
  // [mir] StorageDead(_47)
  // [mir] _45 = Eq(move _46, const 4_usize)
  _45 := builtin$havoc_ref()
  inhale acc(_45.val_bool, write)
  inhale _46 >= 0 && 18446744073709551615 >= _46
  _45.val_bool := _46 == 4
  // [mir] StorageDead(_46)
  // [mir] _44 = Not(move _45)
  _44 := builtin$havoc_ref()
  inhale acc(_44.val_bool, write)
  _44.val_bool := !_45.val_bool
  // [mir] StorageDead(_45)
  // [mir] switchInt(move _44) -> [0: bb22, otherwise: bb21]
  __t49 := _44.val_bool
  if (__t49) {
    goto l31
  }
  goto bb2
  
  label l9
  // ========== l59 ==========
  // MIR edge bb23 --> bb25
  // ========== bb25 ==========
  __t25 := true
  // [mir] _49 = const ()
  // [mir] StorageDead(_50)
  // [mir] StorageDead(_49)
  // [mir] StorageLive(_56)
  // [mir] StorageLive(_57)
  // [mir] StorageLive(_58)
  // [mir] StorageLive(_59)
  // [mir] StorageLive(_60)
  // [mir] StorageLive(_61)
  // [mir] _61 = &_1
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_ref, write)
  _61.val_ref := _1
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_61.val_ref), read$())
  label l61
  // [mir] _60 = &(*_61)
  _60 := builtin$havoc_ref()
  inhale acc(_60.val_ref, write)
  _60.val_ref := _61.val_ref
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_60.val_ref), read$())
  label l62
  // [mir] _59 = get::<i32, std::alloc::Global>(move _60, const 2_usize) -> [return: bb26, unwind: bb45]
  label l63
  _59 := builtin$havoc_ref()
  inhale acc(i32(_59), write)
  inhale (unfolding acc(i32(_59), write) in _59.val_int) ==
    f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_60.val_ref),
    2)
  // transfer perm _60.val_ref --> old[l63](_60.val_ref) // unchecked: false
  // ========== l64 ==========
  // MIR edge bb25 --> bb26
  // Expire borrows
  // expire_borrows ReborrowingDAG(L37,L24,L13,)

  if (__t25 && __t25) {
    // expire loan L24
    // transfer perm old[l63](_60.val_ref) --> old[l62](_60.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l62](_60.val_ref)), read$())
  }
  if (__t25 && (__t25 && __t25)) {
    // expire loan L13
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_61.val_ref), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_1), write -
      read$())
  }
  // ========== bb26 ==========
  __t26 := true
  // [mir] StorageDead(_60)
  // [mir] _58 = Eq(move _59, const 3_i32)
  _58 := builtin$havoc_ref()
  inhale acc(_58.val_bool, write)
  unfold acc(i32(_59), write)
  _58.val_bool := _59.val_int == 3
  // [mir] StorageDead(_59)
  // [mir] _57 = Not(move _58)
  _57 := builtin$havoc_ref()
  inhale acc(_57.val_bool, write)
  _57.val_bool := !_58.val_bool
  // [mir] StorageDead(_61)
  // [mir] StorageDead(_58)
  // [mir] switchInt(move _57) -> [0: bb28, otherwise: bb27]
  __t51 := _57.val_bool
  if (__t51) {
    goto bb10
  }
  goto bb3
  
  label return
  // ========== l10 ==========
  // MIR edge bb3 --> bb5
  // ========== bb5 ==========
  __t5 := true
  // [mir] _4 = const ()
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] StorageLive(_11)
  // [mir] _11 = std::collections::LinkedList::<i32>::new() -> [return: bb6, unwind: bb46]
  label l12
  _11 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11), write)
  inhale true
  inhale f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$is_empty__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$bool$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11))
  label l13
  // ========== bb6 ==========
  __t6 := true
  // [mir] FakeRead(ForLet(None), _11)
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = &mut _11
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_ref, write)
  _13.val_ref := _11
  label l14
  // [mir] _12 = std::collections::LinkedList::<i32>::push_front(move _13, const 2_i32) -> [return: bb7, unwind: bb45]
  label l15
  _t84 := builtin$havoc_ref()
  inhale acc(i32(_t84), write)
  assert true
  exhale acc(_13.val_ref, write) &&
    (acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_13.val_ref), write) &&
    acc(i32(_t84), write))
  _12 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l15](_13.val_ref)), write)
  inhale acc(tuple0$(_12), write)
  inhale true
  inhale !(old[l15](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_13.val_ref))) +
    1 <
    0 ||
    old[l15](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_13.val_ref))) +
    1 >
    18446744073709551615) &&
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l15](_13.val_ref))) ==
    old[l15](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_13.val_ref))) +
    1 &&
    (f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l15](_13.val_ref)),
    0) ==
    old[l15](2) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      _0_quant_0 <
      old[l15](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_13.val_ref))) ==>
      !(_0_quant_0 + 1 < 0 || _0_quant_0 + 1 > 18446744073709551615) &&
      f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l15](_13.val_ref)),
      _0_quant_0 + 1) ==
      old[l15](f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_13.val_ref),
      _0_quant_0))))
  label l16
  // ========== l17 ==========
  // MIR edge bb6 --> bb7
  // Expire borrows
  // expire_borrows ReborrowingDAG(L40,L2,)

  // ========== bb7 ==========
  __t7 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] StorageLive(_14)
  // [mir] StorageLive(_15)
  // [mir] _15 = &mut _11
  _15 := builtin$havoc_ref()
  inhale acc(_15.val_ref, write)
  _15.val_ref := _11
  label l18
  // [mir] _14 = std::collections::LinkedList::<i32>::push_front(move _15, const 3_i32) -> [return: bb8, unwind: bb45]
  label l19
  _t85 := builtin$havoc_ref()
  inhale acc(i32(_t85), write)
  assert true
  exhale acc(_15.val_ref, write) &&
    (acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_15.val_ref), write) &&
    acc(i32(_t85), write))
  _14 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l19](_15.val_ref)), write)
  inhale acc(tuple0$(_14), write)
  inhale true
  inhale !(old[l19](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_15.val_ref))) +
    1 <
    0 ||
    old[l19](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_15.val_ref))) +
    1 >
    18446744073709551615) &&
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l19](_15.val_ref))) ==
    old[l19](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_15.val_ref))) +
    1 &&
    (f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l19](_15.val_ref)),
    0) ==
    old[l19](3) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      _0_quant_0 <
      old[l19](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_15.val_ref))) ==>
      !(_0_quant_0 + 1 < 0 || _0_quant_0 + 1 > 18446744073709551615) &&
      f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l19](_15.val_ref)),
      _0_quant_0 + 1) ==
      old[l19](f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_15.val_ref),
      _0_quant_0))))
  label l20
  // ========== l21 ==========
  // MIR edge bb7 --> bb8
  // Expire borrows
  // expire_borrows ReborrowingDAG(L38,L3,)

  // ========== bb8 ==========
  __t8 := true
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_14)
  // [mir] StorageLive(_16)
  // [mir] StorageLive(_17)
  // [mir] _17 = &mut _11
  _17 := builtin$havoc_ref()
  inhale acc(_17.val_ref, write)
  _17.val_ref := _11
  label l22
  // [mir] _16 = std::collections::LinkedList::<i32>::push_front(move _17, const 4_i32) -> [return: bb9, unwind: bb45]
  label l23
  _t86 := builtin$havoc_ref()
  inhale acc(i32(_t86), write)
  assert true
  exhale acc(_17.val_ref, write) &&
    (acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_17.val_ref), write) &&
    acc(i32(_t86), write))
  _16 := builtin$havoc_ref()
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l23](_17.val_ref)), write)
  inhale acc(tuple0$(_16), write)
  inhale true
  inhale !(old[l23](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_17.val_ref))) +
    1 <
    0 ||
    old[l23](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_17.val_ref))) +
    1 >
    18446744073709551615) &&
    f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l23](_17.val_ref))) ==
    old[l23](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_17.val_ref))) +
    1 &&
    (f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l23](_17.val_ref)),
    0) ==
    old[l23](4) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      _0_quant_0 <
      old[l23](f_std$$collections$$LinkedList$$$openang$T$comma$$space$A$closeang$$$len__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_17.val_ref))) ==>
      !(_0_quant_0 + 1 < 0 || _0_quant_0 + 1 > 18446744073709551615) &&
      f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l23](_17.val_ref)),
      _0_quant_0 + 1) ==
      old[l23](f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_17.val_ref),
      _0_quant_0))))
  label l24
  // ========== l25 ==========
  // MIR edge bb8 --> bb9
  // Expire borrows
  // expire_borrows ReborrowingDAG(L35,L4,)

  // ========== bb9 ==========
  __t9 := true
  // [mir] StorageDead(_17)
  // [mir] StorageDead(_16)
  // [mir] StorageLive(_18)
  // [mir] StorageLive(_19)
  // [mir] StorageLive(_20)
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] StorageLive(_23)
  // [mir] _23 = &_11
  _23 := builtin$havoc_ref()
  inhale acc(_23.val_ref, write)
  _23.val_ref := _11
  exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11), write -
    read$())
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_23.val_ref), read$())
  label l26
  // [mir] _22 = &(*_23)
  _22 := builtin$havoc_ref()
  inhale acc(_22.val_ref, write)
  _22.val_ref := _23.val_ref
  inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_22.val_ref), read$())
  label l27
  // [mir] _21 = get::<i32, std::alloc::Global>(move _22, const 2_usize) -> [return: bb10, unwind: bb45]
  label l28
  _21 := builtin$havoc_ref()
  inhale acc(i32(_21), write)
  inhale (unfolding acc(i32(_21), write) in _21.val_int) ==
    f_get__$TY$__i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$$int$$$int$(snap$__$TY$__Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_22.val_ref),
    2)
  // transfer perm _22.val_ref --> old[l28](_22.val_ref) // unchecked: false
  // ========== l29 ==========
  // MIR edge bb9 --> bb10
  // Expire borrows
  // expire_borrows ReborrowingDAG(L20,L27,L5,)

  if (__t9 && __t9) {
    // expire loan L27
    // transfer perm old[l28](_22.val_ref) --> old[l27](_22.val_ref) // unchecked: false
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(old[l27](_22.val_ref)), read$())
  }
  if (__t9 && (__t9 && __t9)) {
    // expire loan L5
    exhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_23.val_ref), read$())
    inhale acc(struct$m_std$$collections$$LinkedList$i32$struct$m_std$$alloc$$Global(_11), write -
      read$())
  }
  // ========== bb10 ==========
  __t10 := true
  // [mir] StorageDead(_22)
  // [mir] _20 = Eq(move _21, const 2_i32)
  _20 := builtin$havoc_ref()
  inhale acc(_20.val_bool, write)
  unfold acc(i32(_21), write)
  _20.val_bool := _21.val_int == 2
  // [mir] StorageDead(_21)
  // [mir] _19 = Not(move _20)
  _19 := builtin$havoc_ref()
  inhale acc(_19.val_bool, write)
  _19.val_bool := !_20.val_bool
  // [mir] StorageDead(_23)
  // [mir] StorageDead(_20)
  // [mir] switchInt(move _19) -> [0: bb12, otherwise: bb11]
  __t46 := _19.val_bool
  if (__t46) {
    goto l35
  }
  goto bb0
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
