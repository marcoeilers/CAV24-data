domain MirrorDomain  {
  
  function mirror_simple$f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(_1: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  function mirror_simple$f_sorted__$TY$__Snap$Slice$i32$$bool$(_1: Snap$Slice$i32): Bool 
  
  function mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$usize$_end_): Bool 
  
  function mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$usize$_end_): Bool 
}

domain Snap$Slice$i32  {
  
  function cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data: Seq[Int]): Snap$Slice$i32 
  
  function uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data: Snap$Slice$i32): Seq[Int] 
  
  function read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self: Snap$Slice$i32,
  idx: Int): Int 
  
  function len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(self: Snap$Slice$i32): Int 
  
  axiom Snap$Slice$i32$injectivity {
    (forall data: Seq[Int] ::
      { cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data) }
      uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) ==
      data)
  }
  
  axiom Snap$Slice$i32$surjectivity {
    (forall data: Snap$Slice$i32 ::
      { uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data) }
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(uncons$Snap$Slice$i32$__$TY$__Snap$Slice$i32$Seq$$int$(data)) ==
      data)
  }
  
  axiom Snap$Slice$i32$extensionality {
    (forall _l_data: Seq[Int], _r_data: Seq[Int] ::
      { cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_l_data), cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_r_data) }
      _l_data == _r_data ==>
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_l_data) ==
      cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(_r_data))
  }
  
  axiom Slice$i32$read_indices {
    (forall data: Seq[Int], idx: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data),
      idx) }
      { data[idx] }
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data),
      idx) ==
      data[idx])
  }
  
  axiom Slice$i32$len_of_seq {
    (forall data: Seq[Int] ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) }
      { |data| }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(data)) ==
      |data|)
  }
  
  axiom Slice$i32$len_positive {
    (forall slice: Snap$Slice$i32 ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) >= 0)
  }
  
  axiom Slice$i32$len_upper_bound {
    (forall slice: Snap$Slice$i32 ::
      { len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) }
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(slice) * 4 <=
      9223372036854775807)
  }
  
  axiom Snap$Slice$i32$valid {
    (forall self: Snap$Slice$i32, idx: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) }
      -2147483648 <=
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) &&
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(self, idx) <=
      2147483647)
  }
}

domain Snap$m_std$$option$$Option$_beg_$usize$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0: Int): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$discriminant_axiom {
    (forall _0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$valid {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      18446744073709551615)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function Slice$len__$TY$__i32$Slice$i32$$int$(self: Ref): Int
  requires acc(Slice$i32(self), read$())
  ensures result >= 0
  ensures result <= 18446744073709551615


function f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(_1: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int
  requires true
  requires f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1)
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures !(discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(_1) ==
    0) &&
    Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(_1) ==
    result
  ensures [result ==
    mirror_simple$f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(_1),
    true]


function f_sorted__$TY$__Snap$Slice$i32$$bool$(_1: Snap$Slice$i32): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_sorted__$TY$__Snap$Slice$i32$$bool$(_1),
    true]
{
  (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
    (_0_quant_0 <= 18446744073709551615 &&
    (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
    _0_quant_0 < _1_quant_0 ==>
    _1_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1) ==>
    (_0_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1) ==>
    (_1_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1) ==>
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(_1, _0_quant_0) <=
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(_1, _1_quant_0)) &&
    _1_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1)) &&
    _0_quant_0 < len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(_1))
}

function f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$usize$_end_): Bool
  requires true
  requires true
  ensures f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1) ==
    !result
  ensures [result ==
    mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1),
    true]


function f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1: Snap$m_std$$option$$Option$_beg_$usize$_end_): Bool
  requires true
  requires true
  ensures (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(_1) ==
    1 ?
      result :
      !result)
  ensures [result ==
    mirror_simple$f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(_1),
    true]


function lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self: Ref, idx: Int): Int
  requires acc(Slice$i32(self), read$())
  requires 0 <= idx
  requires idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)


function m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant)
}

function seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self: Ref,
  start: Int): Seq[Int]
  requires acc(Slice$i32(self), read$())
  requires 0 <= start
  ensures start >= Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    result == Seq[Int]()
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    |result| == Slice$len__$TY$__i32$Slice$i32$$int$(self) - start
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    result[0] ==
    lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, start)
  ensures start < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
    (forall i: Int, j: Int ::
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i), result[j] }
      start <= i && i < Slice$len__$TY$__i32$Slice$i32$$int$(self) &&
      (0 <= j && j < Slice$len__$TY$__i32$Slice$i32$$int$(self) - start &&
      i == j + start) ==>
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i) ==
      result[j])
{
  (start >= Slice$len__$TY$__i32$Slice$i32$$int$(self) ?
    Seq[Int]() :
    Seq(lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, start)) ++
    seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self, start + 1))
}

function snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(self: Ref): Snap$Slice$i32
  requires acc(Slice$i32(self), read$())
  ensures [(forall i: Int ::
      { read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(result, i) }
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i) }
      0 <= i && i < Slice$len__$TY$__i32$Slice$i32$$int$(self) ==>
      read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(result, i) ==
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self, i)),
    true]
  ensures [Slice$len__$TY$__i32$Slice$i32$$int$(self) ==
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(result),
    true]
{
  cons$Snap$Slice$i32$__$TY$__Seq$$int$$Snap$Slice$i32(seq_collect$Slice$i32$__$TY$__Slice$i32$$int$$Seq$$int$(self,
  0))
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$usize$_end_
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_())
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate Slice$i32(self: Ref) 

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_std$$option$$Option$_beg_$usize$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$usize$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_binary_search() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var _preserve$0: Ref
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var __t45: Ref
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Ref
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var __t53: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _9: Ref
  var _10: Int
  var _12: Ref
  var _18: Ref
  var _23: Ref
  var _27: Ref
  var _31: Ref
  var _37: Ref
  var _45: Ref
  var _50: Int
  var _51: Int
  var _52: Ref
  var _53: Ref
  var _54: Int
  var _55: Int
  var _56: Ref
  var _57: Ref
  var _58: Int
  var _59: Int
  var _60: Int
  var _61: Ref
  var _62: Int
  var _63: Int
  var _64: Ref
  var _65: Ref
  var _66: Int
  var _67: Int
  var _68: Int
  var _69: Ref
  var _70: Int
  var _71: Ref
  var _72: Int
  var _73: Ref
  var _74: Ref
  var _75: Ref
  
  label start
  // ========== start ==========
  // Def path: "binary_search::binary_search"
  // Span: tests/verify_overflow/pass/binary_search.rs:35:1: 68:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(Slice$i32(_1.val_ref), read$()) && acc(i32(_2), write))
  inhale true
  inhale f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref))
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] _3 = const 0_usize
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_int, write)
  _3.val_int := 0
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = &(*_1)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_ref, write)
  _5.val_ref := _1.val_ref
  inhale acc(Slice$i32(_5.val_ref), read$())
  label l0
  // [mir] _4 = core::slice::<impl [i32]>::len(move _5) -> [return: bb1, unwind: bb39]
  label l1
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_int, write)
  _4.val_int := Slice$len__$TY$__i32$Slice$i32$$int$(_5.val_ref)
  // transfer perm _5.val_ref --> old[l1](_5.val_ref) // unchecked: false
  // ========== l2 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L22,L21,)

  if (__t0 && __t0) {
    // expire loan L21
    // transfer perm old[l1](_5.val_ref) --> old[l0](_5.val_ref) // unchecked: false
    exhale acc(Slice$i32(old[l0](_5.val_ref)), read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_5)
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_6)
  // [mir] _6 = std::option::Option::<usize>::None
  _6 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_6) ==
    0
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] StorageLive(_7)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb39]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  _10 := _4.val_int
  label l3
  // [mir] _9 = Gt(move _10, const 0_usize)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _10 > 0
  // [mir] StorageDead(_10)
  // [mir] switchInt(move _9) -> [0: bb38, otherwise: bb4]
  __t32 := _9.val_bool
  if (__t32) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l5 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb6, otherwise: bb5]
  __t33 := _12.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  _preserve$0 := _1.val_ref
  fold acc(usize(_4), write)
  // obtain acc(usize(_4), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(i32(_2), read)
  assert !((unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <
    0 ||
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <=
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_4), write) in _4.val_int) > 0 &&
    f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) &&
    ((unfolding acc(i32(_2), write) in _2.val_int) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) &&
    (f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(i32(_2), write) in
        (let _LET_0 ==
          (_3.val_int) in
          (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
            _0_quant_0 <= 18446744073709551615 ==>
            _0_quant_0 < _LET_0 ==>
            _0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
            read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
            _0_quant_0) <
            _2.val_int)))) &&
    ((f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) ==>
    (unfolding acc(usize(_4), write) in
      (unfolding acc(i32(_2), write) in
        (unfolding acc(usize(_3), write) in
          (let _LET_1 ==
            (_3.val_int + _4.val_int < 0 ||
            _3.val_int + _4.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_1 &&
              (!(_3.val_int + _4.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) ==>
              _0_quant_0 <
              len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
              _2.val_int <
              read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) ==>
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    (f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6))) ==
    (unfolding acc(i32(_2), write) in _2.val_int))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_4), write) &&
    (acc(usize(_3), write) &&
    (acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$()))))
  _10 := builtin$havoc_int()
  _12 := builtin$havoc_ref()
  _18 := builtin$havoc_ref()
  _23 := builtin$havoc_ref()
  _27 := builtin$havoc_ref()
  _3 := builtin$havoc_ref()
  _31 := builtin$havoc_ref()
  _37 := builtin$havoc_ref()
  _4 := builtin$havoc_ref()
  _45 := builtin$havoc_ref()
  _50 := builtin$havoc_int()
  _51 := builtin$havoc_int()
  _52 := builtin$havoc_ref()
  _53 := builtin$havoc_ref()
  _54 := builtin$havoc_int()
  _55 := builtin$havoc_int()
  _56 := builtin$havoc_ref()
  _57 := builtin$havoc_ref()
  _58 := builtin$havoc_int()
  _59 := builtin$havoc_int()
  _6 := builtin$havoc_ref()
  _60 := builtin$havoc_int()
  _61 := builtin$havoc_ref()
  _62 := builtin$havoc_int()
  _63 := builtin$havoc_int()
  _64 := builtin$havoc_ref()
  _65 := builtin$havoc_ref()
  _66 := builtin$havoc_int()
  _67 := builtin$havoc_int()
  _68 := builtin$havoc_int()
  _69 := builtin$havoc_ref()
  _70 := builtin$havoc_int()
  _71 := builtin$havoc_ref()
  _72 := builtin$havoc_int()
  _73 := builtin$havoc_ref()
  _74 := builtin$havoc_ref()
  _75 := builtin$havoc_ref()
  _9 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t42 := builtin$havoc_bool()
  __t43 := builtin$havoc_bool()
  __t44 := builtin$havoc_bool()
  __t45 := builtin$havoc_ref()
  __t46 := builtin$havoc_bool()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t49 := builtin$havoc_ref()
  __t5 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(usize(_4), write) &&
    (acc(usize(_3), write) &&
    (acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$()))))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb39]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  unfold acc(usize(_4), write)
  _10 := _4.val_int
  label l6
  // [mir] _9 = Gt(move _10, const 0_usize)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _10 > 0
  // [mir] StorageDead(_10)
  // [mir] switchInt(move _9) -> [0: bb38, otherwise: bb4]
  __t34 := _9.val_bool
  if (__t34) {
    goto bb1
  }
  goto l2
  
  label bb1
  // ========== l8 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2b_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb6, otherwise: bb5]
  __t35 := _12.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  inhale !((unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int < 0 ||
    (unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int >
    18446744073709551615) &&
    (unfolding acc(usize(_3), write) in _3.val_int) + _4.val_int <=
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    (_4.val_int > 0 &&
    f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) &&
    ((unfolding acc(i32(_2), write) in _2.val_int) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) &&
    (f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(i32(_2), write) in
        (let _LET_2 ==
          (_3.val_int) in
          (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
            _0_quant_0 <= 18446744073709551615 ==>
            _0_quant_0 < _LET_2 ==>
            _0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
            read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
            _0_quant_0) <
            _2.val_int)))) &&
    ((f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) ==>
    (unfolding acc(usize(_3), write) in
      (unfolding acc(i32(_2), write) in
        (let _LET_3 ==
          (_3.val_int + _4.val_int < 0 ||
          _3.val_int + _4.val_int > 18446744073709551615) in
          (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
            _0_quant_0 <= 18446744073709551615 ==>
            !_LET_3 &&
            (!(_3.val_int + _4.val_int <= _0_quant_0) ||
            (_0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) ==>
            _0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
            _2.val_int <
            read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
            _0_quant_0)))))))) &&
    (f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) ==>
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    (f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6))) ==
    (unfolding acc(i32(_2), write) in _2.val_int))))))))
  // ========== loop2_group3_bb6 ==========
  __t5 := true
  // [mir] _11 = const ()
  // [mir] goto -> bb7
  // ========== loop2_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_12)
  // [mir] StorageDead(_11)
  // [mir] StorageLive(_17)
  // [mir] StorageLive(_18)
  // [mir] _18 = const false
  _18 := builtin$havoc_ref()
  inhale acc(_18.val_bool, write)
  _18.val_bool := false
  // [mir] switchInt(move _18) -> [0: bb9, otherwise: bb8]
  __t36 := _18.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb9 ==========
  __t7 := true
  // [mir] _17 = const ()
  // [mir] goto -> bb10
  // ========== loop2_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_18)
  // [mir] StorageDead(_17)
  // [mir] StorageLive(_22)
  // [mir] StorageLive(_23)
  // [mir] _23 = const false
  _23 := builtin$havoc_ref()
  inhale acc(_23.val_bool, write)
  _23.val_bool := false
  // [mir] switchInt(move _23) -> [0: bb12, otherwise: bb11]
  __t37 := _23.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb12 ==========
  __t9 := true
  // [mir] _22 = const ()
  // [mir] goto -> bb13
  // ========== loop2_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_23)
  // [mir] StorageDead(_22)
  // [mir] StorageLive(_26)
  // [mir] StorageLive(_27)
  // [mir] _27 = const false
  _27 := builtin$havoc_ref()
  inhale acc(_27.val_bool, write)
  _27.val_bool := false
  // [mir] switchInt(move _27) -> [0: bb15, otherwise: bb14]
  __t38 := _27.val_bool
  // Ignore default target bb14, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb15 ==========
  __t11 := true
  // [mir] _26 = const ()
  // [mir] goto -> bb16
  // ========== loop2_group3_bb16 ==========
  __t12 := true
  // [mir] StorageDead(_27)
  // [mir] StorageDead(_26)
  // [mir] StorageLive(_30)
  // [mir] StorageLive(_31)
  // [mir] _31 = const false
  _31 := builtin$havoc_ref()
  inhale acc(_31.val_bool, write)
  _31.val_bool := false
  // [mir] switchInt(move _31) -> [0: bb18, otherwise: bb17]
  __t39 := _31.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb18 ==========
  __t13 := true
  // [mir] _30 = const ()
  // [mir] goto -> bb19
  // ========== loop2_group3_bb19 ==========
  __t14 := true
  // [mir] StorageDead(_31)
  // [mir] StorageDead(_30)
  // [mir] StorageLive(_36)
  // [mir] StorageLive(_37)
  // [mir] _37 = const false
  _37 := builtin$havoc_ref()
  inhale acc(_37.val_bool, write)
  _37.val_bool := false
  // [mir] switchInt(move _37) -> [0: bb21, otherwise: bb20]
  __t40 := _37.val_bool
  // Ignore default target bb20, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb21 ==========
  __t15 := true
  // [mir] _36 = const ()
  // [mir] goto -> bb22
  // ========== loop2_group3_bb22 ==========
  __t16 := true
  // [mir] StorageDead(_37)
  // [mir] StorageDead(_36)
  // [mir] StorageLive(_44)
  // [mir] StorageLive(_45)
  // [mir] _45 = const false
  _45 := builtin$havoc_ref()
  inhale acc(_45.val_bool, write)
  _45.val_bool := false
  // [mir] switchInt(move _45) -> [0: bb24, otherwise: bb23]
  __t41 := _45.val_bool
  // Ignore default target bb23, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb24 ==========
  __t17 := true
  // [mir] _44 = const ()
  // [mir] goto -> bb25
  // ========== loop2_group3_bb25 ==========
  __t18 := true
  // [mir] StorageDead(_45)
  // [mir] StorageDead(_44)
  // [mir] StorageLive(_50)
  // [mir] StorageLive(_51)
  // [mir] _51 = _4
  _51 := builtin$havoc_int()
  _51 := _4.val_int
  label l9
  // [mir] _52 = Eq(const 2_usize, const 0_usize)
  _52 := builtin$havoc_ref()
  inhale acc(_52.val_bool, write)
  _52.val_bool := false
  // [mir] assert(!move _52, "attempt to divide `{}` by zero", _51) -> [success: bb26, unwind: bb39]
  __t42 := _52.val_bool
  // Rust assertion: attempt to divide by zero
  assert !__t42
  // ========== loop2_group3_bb26 ==========
  __t19 := true
  // [mir] _50 = Div(move _51, const 2_usize)
  _50 := builtin$havoc_int()
  _50 := _51 / 2
  // [mir] StorageDead(_51)
  // [mir] FakeRead(ForLet(None), _50)
  // [mir] StorageLive(_53)
  // [mir] StorageLive(_54)
  // [mir] _54 = _3
  _54 := builtin$havoc_int()
  unfold acc(usize(_3), write)
  _54 := _3.val_int
  label l10
  // [mir] StorageLive(_55)
  // [mir] _55 = _50
  _55 := builtin$havoc_int()
  _55 := _50
  label l11
  // [mir] _56 = CheckedAdd(_54, _55)
  _56 := builtin$havoc_ref()
  inhale acc(_56.tuple_0, write)
  inhale acc(_56.tuple_0.val_int, write)
  inhale acc(_56.tuple_1, write)
  inhale acc(_56.tuple_1.val_bool, write)
  _56.tuple_0.val_int := _54 + _55
  _56.tuple_1.val_bool := _54 + _55 < 0 || _54 + _55 > 18446744073709551615
  // [mir] assert(!move (_56.1: bool), "attempt to compute `{} + {}`, which would overflow", move _54, move _55) -> [success: bb27, unwind: bb39]
  __t43 := _56.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t43
  // ========== loop2_group3_bb27 ==========
  __t20 := true
  // [mir] _53 = move (_56.0: usize)
  _53 := _56.tuple_0
  label l12
  // [mir] StorageDead(_55)
  // [mir] StorageDead(_54)
  // [mir] FakeRead(ForLet(None), _53)
  // [mir] StorageLive(_57)
  // [mir] StorageLive(_58)
  // [mir] StorageLive(_59)
  // [mir] _59 = _53
  _59 := builtin$havoc_int()
  _59 := _53.val_int
  label l13
  // [mir] _60 = Len((*_1))
  assert acc(Slice$i32(_1.val_ref), read$())
  _60 := builtin$havoc_int()
  _60 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
  // [mir] _61 = Lt(_59, _60)
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := _59 < _60
  // [mir] assert(move _61, "index out of bounds: the length is {} but the index is {}", move _60, _59) -> [success: bb28, unwind: bb39]
  __t44 := _61.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _60, _59
  assert __t44
  // ========== loop2_group3_bb28 ==========
  __t21 := true
  // [mir] _58 = (*_1)[_59]
  __t45 := builtin$havoc_ref()
  inhale acc(i32(__t45), write)
  assert acc(Slice$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref,
    _59) ==
    (unfolding acc(i32(__t45), write) in __t45.val_int)
  _58 := builtin$havoc_int()
  unfold acc(i32(__t45), write)
  _58 := __t45.val_int
  label l14
  // [mir] StorageLive(_62)
  // [mir] _62 = _2
  _62 := builtin$havoc_int()
  unfold acc(i32(_2), write)
  _62 := _2.val_int
  label l15
  // [mir] _57 = Gt(move _58, move _62)
  _57 := builtin$havoc_ref()
  inhale acc(_57.val_bool, write)
  _57.val_bool := _58 > _62
  // [mir] StorageDead(_62)
  // [mir] StorageDead(_59)
  // [mir] StorageDead(_58)
  // [mir] switchInt(move _57) -> [0: bb31, otherwise: bb29]
  __t46 := _57.val_bool
  if (__t46) {
    goto l5
  }
  goto loop2_start
  
  label l2
  // ========== l7 ==========
  // MIR edge bb3 --> bb38
  goto end_of_method
  
  label l4
  // ========== loop2_group3_bb36 ==========
  __t29 := true
  // [mir] StorageDead(_65)
  // [mir] goto -> bb37
  // ========== l40 ==========
  // drop Acc(_68.val_int, write) (Acc(_68.val_int, write))
  // drop Acc(__t49.val_int, write) (Acc(__t49.val_int, write))
  // drop Acc(_70.val_int, write) (Acc(_70.val_int, write))
  // drop Acc(_69.val_bool, write) (Acc(_69.val_bool, write))
  // drop Acc(_67.val_int, write) (Acc(_67.val_int, write))
  // drop Acc(_66.val_int, write) (Acc(_66.val_int, write))
  // drop Acc(_65.val_bool, write) (Acc(_65.val_bool, write))
  goto loop2_group2_bb4
  
  label l5
  // ========== l17 ==========
  // MIR edge bb28 --> bb29
  // ========== loop2_group3_bb29 ==========
  __t22 := true
  // [mir] StorageLive(_63)
  // [mir] _63 = _50
  _63 := builtin$havoc_int()
  _63 := _50
  label l18
  // [mir] _64 = CheckedSub(_4, _63)
  _64 := builtin$havoc_ref()
  inhale acc(_64.tuple_0, write)
  inhale acc(_64.tuple_0.val_int, write)
  inhale acc(_64.tuple_1, write)
  inhale acc(_64.tuple_1.val_bool, write)
  _64.tuple_0.val_int := _4.val_int - _63
  _64.tuple_1.val_bool := _4.val_int - _63 < 0 ||
    _4.val_int - _63 > 18446744073709551615
  // [mir] assert(!move (_64.1: bool), "attempt to compute `{} - {}`, which would overflow", _4, move _63) -> [success: bb30, unwind: bb39]
  __t47 := _64.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t47
  // ========== loop2_group3_bb30 ==========
  __t23 := true
  // [mir] _4 = move (_64.0: usize)
  _4 := _64.tuple_0
  label l19
  // [mir] StorageDead(_63)
  // [mir] _8 = const ()
  // [mir] goto -> bb37
  // ========== l39 ==========
  // drop Acc(_63.val_int, write) (Acc(_63.val_int, write))
  // drop Acc(_64.tuple_0, write) (Acc(_64.tuple_0, write))
  // drop Acc(_64.tuple_1.val_bool, write) (Acc(_64.tuple_1.val_bool, write))
  // drop Acc(_64.tuple_1, write) (Acc(_64.tuple_1, write))
  goto loop2_group2_bb4
  
  label loop2_group1_bb2
  // ========== l23 ==========
  // MIR edge bb32 --> bb33
  // ========== loop2_group3_bb33 ==========
  __t26 := true
  // [mir] StorageLive(_71)
  // [mir] _71 = _53
  _71 := builtin$havoc_ref()
  inhale acc(_71.val_int, write)
  _71.val_int := _53.val_int
  label l25
  // [mir] _3 = move _71
  _3 := _71
  label l26
  // [mir] StorageDead(_71)
  // [mir] StorageLive(_72)
  // [mir] _72 = _50
  _72 := builtin$havoc_int()
  _72 := _50
  label l27
  // [mir] _73 = CheckedSub(_4, _72)
  _73 := builtin$havoc_ref()
  inhale acc(_73.tuple_0, write)
  inhale acc(_73.tuple_0.val_int, write)
  inhale acc(_73.tuple_1, write)
  inhale acc(_73.tuple_1.val_bool, write)
  _73.tuple_0.val_int := _4.val_int - _72
  _73.tuple_1.val_bool := _4.val_int - _72 < 0 ||
    _4.val_int - _72 > 18446744073709551615
  // [mir] assert(!move (_73.1: bool), "attempt to compute `{} - {}`, which would overflow", _4, move _72) -> [success: bb34, unwind: bb39]
  __t51 := _73.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t51
  // ========== loop2_group3_bb34 ==========
  __t27 := true
  // [mir] _4 = move (_73.0: usize)
  _4 := _73.tuple_0
  label l28
  // [mir] StorageDead(_72)
  // [mir] _8 = const ()
  // [mir] goto -> bb36
  // ========== l36 ==========
  // drop Acc(_72.val_int, write) (Acc(_72.val_int, write))
  // drop Acc(_73.tuple_1.val_bool, write) (Acc(_73.tuple_1.val_bool, write))
  // drop Acc(_73.tuple_0, write) (Acc(_73.tuple_0, write))
  // drop Acc(_73.tuple_1, write) (Acc(_73.tuple_1, write))
  goto l4
  
  label loop2_group1_bb3
  // ========== l24 ==========
  // MIR edge bb32 --> bb35
  // ========== loop2_group3_bb35 ==========
  __t28 := true
  // [mir] StorageLive(_74)
  // [mir] StorageLive(_75)
  // [mir] _75 = _53
  _75 := builtin$havoc_ref()
  inhale acc(_75.val_int, write)
  _75.val_int := _53.val_int
  label l29
  // [mir] _74 = std::option::Option::<usize>::Some(move _75)
  _74 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_74), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_74) ==
    1
  // downcast _74 to enum_Some

  unfold acc(m_std$$option$$Option$_beg_$usize$_end_(_74), write)
  unfold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_74.enum_Some), write)
  _74.enum_Some.f$0 := _75
  label l30
  // [mir] StorageDead(_75)
  // [mir] _6 = move _74
  _6 := _74
  label l31
  // [mir] StorageDead(_74)
  // [mir] _4 = const 0_usize
  _4.val_int := 0
  // [mir] _8 = const ()
  // [mir] goto -> bb36
  // ========== l38 ==========
  fold acc(usize(_6.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_6.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  goto l4
  
  label loop2_group2_bb4
  // ========== loop2_group3_bb37 ==========
  __t30 := true
  // [mir] StorageDead(_57)
  // [mir] StorageDead(_53)
  // [mir] StorageDead(_50)
  // [mir] StorageDead(_9)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb39]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = _4
  _10 := builtin$havoc_int()
  _10 := _4.val_int
  label l32
  // [mir] _9 = Gt(move _10, const 0_usize)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _10 > 0
  // [mir] StorageDead(_10)
  // [mir] switchInt(move _9) -> [0: bb38, otherwise: bb4]
  __t52 := _9.val_bool
  if (__t52) {
    goto loop2_inv_post_fnspc
  }
  goto loop2_inv_pre
  
  label loop2_inv_post_fnspc
  // ========== l34 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb6, otherwise: bb5]
  __t53 := _12.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_4), write)
  // obtain acc(usize(_4), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write)
  // obtain acc(_1.val_ref, read)
  fold acc(i32(_2), write)
  // obtain acc(i32(_2), read)
  assert !((unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <
    0 ||
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_3), write) in _3.val_int) +
    (unfolding acc(usize(_4), write) in _4.val_int) <=
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_4), write) in _4.val_int) > 0 &&
    f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) &&
    ((unfolding acc(i32(_2), write) in _2.val_int) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) &&
    (f_sorted__$TY$__Snap$Slice$i32$$bool$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(i32(_2), write) in
        (let _LET_4 ==
          (_3.val_int) in
          (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
            _0_quant_0 <= 18446744073709551615 ==>
            _0_quant_0 < _LET_4 ==>
            _0_quant_0 <
            len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
            read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
            _0_quant_0) <
            _2.val_int)))) &&
    ((f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) ==>
    (unfolding acc(usize(_4), write) in
      (unfolding acc(i32(_2), write) in
        (unfolding acc(usize(_3), write) in
          (let _LET_5 ==
            (_3.val_int + _4.val_int < 0 ||
            _3.val_int + _4.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_5 &&
              (!(_3.val_int + _4.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) ==>
              _0_quant_0 <
              len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
              _2.val_int <
              read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) ==>
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    (f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref)) &&
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_1.val_ref),
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6))) ==
    (unfolding acc(i32(_2), write) in _2.val_int))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_4), write) &&
    (acc(usize(_3), write) &&
    (acc(m_std$$option$$Option$_beg_$usize$_end_(_6), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$()))))
  inhale false
  goto end_of_method
  
  label loop2_inv_post_perm
  // ========== bb38 ==========
  __t31 := true
  // [mir] StorageLive(_77)
  // [mir] _7 = const ()
  // [mir] StorageDead(_77)
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_7)
  // [mir] _0 = _6
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_6) ==
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)
  label l35
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_3)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l37
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(Slice$i32(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert (f_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==>
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0)) &&
    (f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) <
    len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0)) &&
    read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0),
    f_option_peek__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0))) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int)))) &&
    (f_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__usize$Snap$m_std$$option$$Option$_beg_$usize$_end_$$bool$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==>
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      _0_quant_0 <
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0)) ==>
      _0_quant_0 <
      len$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0)) &&
      !(read$Snap$Slice$i32$__$TY$__Snap$Slice$i32$$int$$$int$(snap$__$TY$__Snap$Slice$i32$Slice$i32$Snap$Slice$i32(_old$pre$0),
      _0_quant_0) ==
      old[pre]((unfolding acc(i32(_2), write) in _2.val_int)))))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(Slice$i32(_old$pre$0), read$())
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_inv_pre
  // ========== l33 ==========
  // MIR edge bb3 --> bb38
  // ========== l42 ==========
  // drop Acc(_56.tuple_0, write) (Acc(_56.tuple_0, write))
  // drop Acc(_57.val_bool, write) (Acc(_57.val_bool, write))
  // drop Acc(_23.val_bool, write) (Acc(_23.val_bool, write))
  // drop Acc(_61.val_bool, write) (Acc(_61.val_bool, write))
  // drop Acc(_52.val_bool, write) (Acc(_52.val_bool, write))
  // drop Acc(_59.val_int, write) (Acc(_59.val_int, write))
  // drop Acc(_18.val_bool, write) (Acc(_18.val_bool, write))
  // drop Acc(_54.val_int, write) (Acc(_54.val_int, write))
  // drop Acc(__t45.val_int, write) (Acc(__t45.val_int, write))
  // drop Acc(_62.val_int, write) (Acc(_62.val_int, write))
  // drop Acc(_12.val_bool, write) (Acc(_12.val_bool, write))
  // drop Acc(_37.val_bool, write) (Acc(_37.val_bool, write))
  // drop Acc(_56.tuple_1.val_bool, write) (Acc(_56.tuple_1.val_bool, write))
  // drop Acc(_53.val_int, write) (Acc(_53.val_int, write))
  // drop Acc(_50.val_int, write) (Acc(_50.val_int, write))
  // drop Acc(_45.val_bool, write) (Acc(_45.val_bool, write))
  // drop Acc(_27.val_bool, write) (Acc(_27.val_bool, write))
  // drop Acc(_60.val_int, write) (Acc(_60.val_int, write))
  // drop Acc(_58.val_int, write) (Acc(_58.val_int, write))
  // drop Acc(_31.val_bool, write) (Acc(_31.val_bool, write))
  // drop Acc(_55.val_int, write) (Acc(_55.val_int, write))
  // drop Acc(_51.val_int, write) (Acc(_51.val_int, write))
  // drop Acc(_56.tuple_1, write) (Acc(_56.tuple_1, write))
  goto loop2_inv_post_perm
  
  label loop2_start
  // ========== l16 ==========
  // MIR edge bb28 --> bb31
  // ========== loop2_group3_bb31 ==========
  __t24 := true
  // [mir] StorageLive(_65)
  // [mir] StorageLive(_66)
  // [mir] StorageLive(_67)
  // [mir] _67 = _53
  _67 := builtin$havoc_int()
  _67 := _53.val_int
  label l20
  // [mir] _68 = Len((*_1))
  assert acc(Slice$i32(_1.val_ref), read$())
  _68 := builtin$havoc_int()
  _68 := Slice$len__$TY$__i32$Slice$i32$$int$(_1.val_ref)
  // [mir] _69 = Lt(_67, _68)
  _69 := builtin$havoc_ref()
  inhale acc(_69.val_bool, write)
  _69.val_bool := _67 < _68
  // [mir] assert(move _69, "index out of bounds: the length is {} but the index is {}", move _68, _67) -> [success: bb32, unwind: bb39]
  __t48 := _69.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _68, _67
  assert __t48
  // ========== loop2_group3_bb32 ==========
  __t25 := true
  // [mir] _66 = (*_1)[_67]
  __t49 := builtin$havoc_ref()
  inhale acc(i32(__t49), write)
  assert acc(Slice$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_1.val_ref,
    _67) ==
    (unfolding acc(i32(__t49), write) in __t49.val_int)
  _66 := builtin$havoc_int()
  unfold acc(i32(__t49), write)
  _66 := __t49.val_int
  label l21
  // [mir] StorageLive(_70)
  // [mir] _70 = _2
  _70 := builtin$havoc_int()
  _70 := _2.val_int
  label l22
  // [mir] _65 = Lt(move _66, move _70)
  _65 := builtin$havoc_ref()
  inhale acc(_65.val_bool, write)
  _65.val_bool := _66 < _70
  // [mir] StorageDead(_70)
  // [mir] StorageDead(_67)
  // [mir] StorageDead(_66)
  // [mir] switchInt(move _65) -> [0: bb35, otherwise: bb33]
  __t50 := _65.val_bool
  if (!__t50) {
    goto loop2_group1_bb3
  }
  goto loop2_group1_bb2
  
  label return
  // ========== l4 ==========
  // MIR edge bb3 --> bb38
  // ========== l41 ==========
  unfold acc(i32(_2), write)
  goto loop2_inv_post_perm
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
