domain Snap$m_Ordering$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self: Snap$m_Ordering$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  function cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  function cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  axiom Snap$m_Ordering$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_Ordering$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) <=
      2)
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    0
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    1
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$2$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    2
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field val_bool: Bool

field val_int: Int

function m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_Ordering$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 2
  ensures discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Ordering$_beg_$_end_$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_Ordering$_beg_$_end_$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(self: Ref): Snap$m_Ordering$_beg_$_end_
  requires acc(m_Ordering$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  2 ?
    cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_() :
    ((unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
      self.discriminant) ==
    1 ?
      cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_() :
      cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_Ordering$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 2)
}

method m_cmp() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Int
  var _5: Int
  var _6: Ref
  var _7: Int
  var _8: Int
  
  label start
  // ========== start ==========
  // Def path: "Binary_search_shared::cmp"
  // Span: tests/verify_overflow/pass/rosetta/Binary_search_shared.rs:93:1: 97:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  // Preconditions:
  inhale acc(i32(_1), write) && acc(i32(_2), write)
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = _1
  _4 := builtin$havoc_int()
  unfold acc(i32(_1), write)
  _4 := _1.val_int
  label l0
  // [mir] StorageLive(_5)
  // [mir] _5 = _2
  _5 := builtin$havoc_int()
  unfold acc(i32(_2), write)
  _5 := _2.val_int
  label l1
  // [mir] _3 = Eq(move _4, move _5)
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_bool, write)
  _3.val_bool := _4 == _5
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] switchInt(move _3) -> [0: bb2, otherwise: bb1]
  __t7 := _3.val_bool
  if (__t7) {
    goto bb1
  }
  goto return
  
  label bb0
  // ========== l6 ==========
  // MIR edge bb2 --> bb3
  // ========== bb3 ==========
  __t3 := true
  // [mir] _0 = Ordering::Less
  _0 := builtin$havoc_ref()
  inhale acc(m_Ordering$_beg_$_end_(_0), write)
  inhale m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(_0) ==
    0
  // [mir] goto -> bb5
  goto l3
  
  label bb1
  // ========== l3 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t1 := true
  // [mir] _0 = Ordering::Equal
  _0 := builtin$havoc_ref()
  inhale acc(m_Ordering$_beg_$_end_(_0), write)
  inhale m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(_0) ==
    1
  // [mir] goto -> bb6
  goto bb2
  
  label bb2
  // ========== bb6 ==========
  __t6 := true
  // [mir] StorageDead(_3)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l9
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  // obtain acc(m_Ordering$_beg_$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert (unfolding acc(m_Ordering$_beg_$_end_(_0), write) in
      (_0.discriminant == 1 ?
        old[pre]((unfolding acc(i32(_1), write) in _1.val_int)) ==
        old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) :
        (_0.discriminant == 0 ?
          old[pre]((unfolding acc(i32(_1), write) in _1.val_int)) <
          old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) :
          old[pre]((unfolding acc(i32(_1), write) in _1.val_int)) >
          old[pre]((unfolding acc(i32(_2), write) in _2.val_int)))))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_Ordering$_beg_$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l2
  // ========== l7 ==========
  // MIR edge bb2 --> bb4
  // ========== bb4 ==========
  __t4 := true
  // [mir] _0 = Ordering::Greater
  _0 := builtin$havoc_ref()
  inhale acc(m_Ordering$_beg_$_end_(_0), write)
  inhale m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(_0) ==
    2
  // [mir] goto -> bb5
  goto l3
  
  label l3
  // ========== bb5 ==========
  __t5 := true
  // [mir] StorageDead(_6)
  // [mir] goto -> bb6
  // ========== l8 ==========
  // drop Acc(_8.val_int, write) (Acc(_8.val_int, write))
  // drop Acc(_6.val_bool, write) (Acc(_6.val_bool, write))
  // drop Acc(_7.val_int, write) (Acc(_7.val_int, write))
  goto bb2
  
  label return
  // ========== l2 ==========
  // MIR edge bb0 --> bb2
  // ========== bb2 ==========
  __t2 := true
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] _7 = _1
  _7 := builtin$havoc_int()
  _7 := _1.val_int
  label l4
  // [mir] StorageLive(_8)
  // [mir] _8 = _2
  _8 := builtin$havoc_int()
  _8 := _2.val_int
  label l5
  // [mir] _6 = Lt(move _7, move _8)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_bool, write)
  _6.val_bool := _7 < _8
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] switchInt(move _6) -> [0: bb4, otherwise: bb3]
  __t8 := _6.val_bool
  if (!__t8) {
    goto l2
  }
  goto bb0
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
