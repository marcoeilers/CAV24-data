domain MirrorDomain  {
  
  function mirror_simple$f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool 
  
  function mirror_simple$f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool 
  
  function mirror_simple$f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function mirror_simple$f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1: Snap$struct$m_VecWrapperI32): Int 
  
  function mirror_simple$f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1: Snap$struct$m_VecWrapperI32,
  _2: Int): Int 
}

domain Snap$m_Ordering$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self: Snap$m_Ordering$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  function cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  function cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  axiom Snap$m_Ordering$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_Ordering$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) <=
      2)
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    0
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    1
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$2$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    2
  }
}

domain Snap$m_UsizeOption$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0: Int): Snap$m_UsizeOption$_beg_$_end_ 
  
  function Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(): Snap$m_UsizeOption$_beg_$_end_ 
  
  axiom Snap$m_UsizeOption$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_UsizeOption$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_l_0),
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_r_0) }
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_l_0) ==
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$discriminant_axiom {
    (forall _0: Int ::
      { cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0) }
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) ==
      0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) }
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$field$f$0$valid {
    (forall self: Snap$m_UsizeOption$_beg_$_end_ ::
      { Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) }
      0 <=
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) &&
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) <=
      18446744073709551615)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_()) ==
    1
  }
}

domain Snap$struct$m_VecWrapperI32  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapperI32 
  
  function Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapperI32): Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapperI32$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapperI32$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0)) }
      Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$v: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function builtin$unreach__$TY$__$int$$$int$(): Int
  requires false


function f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1),
    true]
{
  !f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1)
}

function f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1),
    true]
{
  discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(_1) ==
  0
}

function f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1: Snap$m_UsizeOption$_beg_$_end_): Int
  requires true
  requires f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1)
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1),
    true]
{
  (discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(_1) ==
  0 ?
    Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1) :
    builtin$unreach__$TY$__$int$$$int$())
}

function f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1: Snap$struct$m_VecWrapperI32): Int
  requires true
  requires true
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1),
    true]


function f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1: Snap$struct$m_VecWrapperI32,
  _2: Int): Int
  requires 0 <= _2
  requires _2 <= 18446744073709551615
  requires true
  requires 0 <= _2 &&
    _2 < f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1)
  ensures -2147483648 <= result
  ensures result <= 2147483647
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1,
    _2),
    true]


function m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_Ordering$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 2
  ensures discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Ordering$_beg_$_end_$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
    self.discriminant)
}

function m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_UsizeOption$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_Ordering$_beg_$_end_$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(self: Ref): Snap$m_Ordering$_beg_$_end_
  requires acc(m_Ordering$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  2 ?
    cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_() :
    ((unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
      self.discriminant) ==
    1 ?
      cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_() :
      cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()))
}

function snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(self: Ref): Snap$m_UsizeOption$_beg_$_end_
  requires acc(m_UsizeOption$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_() :
    cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_((unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
      (unfolding acc(m_UsizeOption$_beg_$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))))
}

function snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(self: Ref): Snap$struct$m_VecWrapperI32
  requires acc(struct$m_VecWrapperI32(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32((unfolding acc(struct$m_VecWrapperI32(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_Ordering$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 2)
}

predicate m_UsizeOption$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_UsizeOption$_beg_$_end_Some(self.enum_Some), write)))
}

predicate m_UsizeOption$_beg_$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate struct$m_VecWrapperI32(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Ref) 

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_binary_search() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var __t45: Bool
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var _preserve$0: Ref
  var __t53: Bool
  var __t54: Bool
  var __t55: Bool
  var __t56: Bool
  var __t57: Bool
  var __t58: Bool
  var __t59: Bool
  var __t60: Bool
  var __t61: Bool
  var __t62: Bool
  var __t63: Bool
  var __t64: Bool
  var __t65: Bool
  var __t66: Bool
  var __t67: Bool
  var __t68: Bool
  var __t69: Bool
  var __t70: Bool
  var __t71: Int
  var __t72: Bool
  var __t73: Bool
  var __t74: Bool
  var __t75: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Int
  var _11: Ref
  var _13: Ref
  var _19: Ref
  var _24: Ref
  var _28: Ref
  var _32: Ref
  var _36: Ref
  var _42: Ref
  var _50: Ref
  var _56: Ref
  var _57: Ref
  var _58: Int
  var _61: Ref
  var _62: Ref
  var _63: Int
  var _66: Ref
  var _67: Ref
  var _68: Int
  var _69: Ref
  var _72: Ref
  var _73: Ref
  var _74: Ref
  var _75: Int
  var _76: Int
  var _77: Ref
  var _79: Int
  var _80: Int
  var _81: Ref
  var _83: Ref
  var _84: Ref
  var _85: Int
  var _86: Int
  var _89: Ref
  var _90: Ref
  var _91: Int
  var _93: Ref
  var _94: Int
  var _95: Int
  var _96: Ref
  var _97: Ref
  var _98: Ref
  var _99: Int
  var _100: Ref
  var _101: Ref
  var _102: Ref
  var _103: Ref
  var _104: Int
  var _105: Ref
  var _106: Ref
  var _107: Int
  var _108: Ref
  var _109: Ref
  var _110: Ref
  var _111: Int
  var _112: Ref
  var _113: Ref
  
  label start
  // ========== start ==========
  // Def path: "Binary_search_shared::binary_search"
  // Span: tests/verify_overflow/pass/rosetta/Binary_search_shared.rs:108:1: 161:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  __t32 := false
  __t33 := false
  __t34 := false
  __t35 := false
  __t36 := false
  __t37 := false
  __t38 := false
  __t39 := false
  __t40 := false
  __t41 := false
  __t42 := false
  __t43 := false
  __t44 := false
  __t45 := false
  __t46 := false
  __t47 := false
  __t48 := false
  __t49 := false
  __t50 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), read$()) &&
    acc(i32(_2), write))
  inhale true
  inhale (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0))))
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = &(*_1)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  _4.val_ref := _1.val_ref
  inhale acc(struct$m_VecWrapperI32(_4.val_ref), read$())
  label l0
  // [mir] _3 = VecWrapperI32::len(move _4) -> [return: bb1, unwind: bb59]
  label l1
  _3 := builtin$havoc_ref()
  inhale acc(usize(_3), write)
  inhale (unfolding acc(usize(_3), write) in _3.val_int) ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_4.val_ref))
  // transfer perm _4.val_ref --> old[l1](_4.val_ref) // unchecked: false
  // ========== l2 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L23,L25,)

  if (__t0 && __t0) {
    // expire loan L25
    // transfer perm old[l1](_4.val_ref) --> old[l0](_4.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l0](_4.val_ref)), read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_4)
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_5)
  // [mir] _5 = const 0_usize
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_int, write)
  _5.val_int := 0
  // [mir] FakeRead(ForLet(None), _5)
  // [mir] StorageLive(_6)
  // [mir] _6 = UsizeOption::None
  _6 := builtin$havoc_ref()
  inhale acc(m_UsizeOption$_beg_$_end_(_6), write)
  inhale m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(_6) ==
    1
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = _3
  _8 := builtin$havoc_int()
  unfold acc(usize(_3), write)
  _8 := _3.val_int
  label l3
  // [mir] _7 = Gt(move _8, const 0_usize)
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_bool, write)
  _7.val_bool := _8 > 0
  // [mir] StorageDead(_8)
  // [mir] FakeRead(ForLet(None), _7)
  // [mir] StorageLive(_9)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb59]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _7
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := _7.val_bool
  label l4
  // [mir] switchInt(move _11) -> [0: bb58, otherwise: bb4]
  __t51 := _11.val_bool
  if (__t51) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l6 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb6, otherwise: bb5]
  __t52 := _13.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  _preserve$0 := _1.val_ref
  // obtain acc(m_UsizeOption$_beg_$_end_(_6), write)
  fold acc(usize(_5), write)
  // obtain acc(usize(_5), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(bool(_7), write)
  // obtain acc(bool(_7), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(i32(_2), read)
  assert !((unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <
    0 ||
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <=
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0)))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((unfolding acc(i32(_2), write) in
      (unfolding acc(usize(_5), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _5.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <
          _2.val_int)))) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    (unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_5), write) in
        (unfolding acc(i32(_2), write) in
          (let _LET_0 ==
            (_5.val_int + _3.val_int < 0 ||
            _5.val_int + _3.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_0 &&
              (!(_5.val_int + _3.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              _2.val_int <
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6))) ==
    (unfolding acc(i32(_2), write) in _2.val_int)))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(m_UsizeOption$_beg_$_end_(_6), write) &&
    (acc(usize(_5), write) &&
    (acc(usize(_3), write) &&
    (acc(bool(_7), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$())))))
  _100 := builtin$havoc_ref()
  _101 := builtin$havoc_ref()
  _102 := builtin$havoc_ref()
  _103 := builtin$havoc_ref()
  _104 := builtin$havoc_int()
  _105 := builtin$havoc_ref()
  _106 := builtin$havoc_ref()
  _107 := builtin$havoc_int()
  _108 := builtin$havoc_ref()
  _109 := builtin$havoc_ref()
  _11 := builtin$havoc_ref()
  _110 := builtin$havoc_ref()
  _111 := builtin$havoc_int()
  _112 := builtin$havoc_ref()
  _113 := builtin$havoc_ref()
  _13 := builtin$havoc_ref()
  _19 := builtin$havoc_ref()
  _24 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _3 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _36 := builtin$havoc_ref()
  _42 := builtin$havoc_ref()
  _5 := builtin$havoc_ref()
  _50 := builtin$havoc_ref()
  _56 := builtin$havoc_ref()
  _57 := builtin$havoc_ref()
  _58 := builtin$havoc_int()
  _6 := builtin$havoc_ref()
  _61 := builtin$havoc_ref()
  _62 := builtin$havoc_ref()
  _63 := builtin$havoc_int()
  _66 := builtin$havoc_ref()
  _67 := builtin$havoc_ref()
  _68 := builtin$havoc_int()
  _69 := builtin$havoc_ref()
  _7 := builtin$havoc_ref()
  _72 := builtin$havoc_ref()
  _73 := builtin$havoc_ref()
  _74 := builtin$havoc_ref()
  _75 := builtin$havoc_int()
  _76 := builtin$havoc_int()
  _77 := builtin$havoc_ref()
  _79 := builtin$havoc_int()
  _80 := builtin$havoc_int()
  _81 := builtin$havoc_ref()
  _83 := builtin$havoc_ref()
  _84 := builtin$havoc_ref()
  _85 := builtin$havoc_int()
  _86 := builtin$havoc_int()
  _89 := builtin$havoc_ref()
  _90 := builtin$havoc_ref()
  _91 := builtin$havoc_int()
  _93 := builtin$havoc_ref()
  _94 := builtin$havoc_int()
  _95 := builtin$havoc_int()
  _96 := builtin$havoc_ref()
  _97 := builtin$havoc_ref()
  _98 := builtin$havoc_ref()
  _99 := builtin$havoc_int()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t42 := builtin$havoc_bool()
  __t43 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_bool()
  __t58 := builtin$havoc_bool()
  __t59 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t60 := builtin$havoc_bool()
  __t61 := builtin$havoc_bool()
  __t62 := builtin$havoc_bool()
  __t63 := builtin$havoc_bool()
  __t64 := builtin$havoc_bool()
  __t65 := builtin$havoc_bool()
  __t66 := builtin$havoc_bool()
  __t67 := builtin$havoc_bool()
  __t68 := builtin$havoc_bool()
  __t69 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t70 := builtin$havoc_bool()
  __t71 := builtin$havoc_int()
  __t72 := builtin$havoc_bool()
  __t73 := builtin$havoc_bool()
  __t74 := builtin$havoc_bool()
  __t75 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(m_UsizeOption$_beg_$_end_(_6), write) &&
    (acc(usize(_5), write) &&
    (acc(usize(_3), write) &&
    (acc(bool(_7), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$())))))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb59]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _7
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  unfold acc(bool(_7), write)
  _11.val_bool := _7.val_bool
  label l7
  // [mir] switchInt(move _11) -> [0: bb58, otherwise: bb4]
  __t53 := _11.val_bool
  if (__t53) {
    goto bb1
  }
  goto l2
  
  label bb1
  // ========== l9 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2b_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb6, otherwise: bb5]
  __t54 := _13.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  inhale !((unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <
    0 ||
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <=
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0)))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((unfolding acc(i32(_2), write) in
      (unfolding acc(usize(_5), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _5.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <
          _2.val_int)))) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    (unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_5), write) in
        (unfolding acc(i32(_2), write) in
          (let _LET_1 ==
            (_5.val_int + _3.val_int < 0 ||
            _5.val_int + _3.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_1 &&
              (!(_5.val_int + _3.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              _2.val_int <
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6))) ==
    (unfolding acc(i32(_2), write) in _2.val_int)))))))))
  // ========== loop2_group3_bb6 ==========
  __t5 := true
  // [mir] _12 = const ()
  // [mir] goto -> bb7
  // ========== loop2_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] StorageLive(_18)
  // [mir] StorageLive(_19)
  // [mir] _19 = const false
  _19 := builtin$havoc_ref()
  inhale acc(_19.val_bool, write)
  _19.val_bool := false
  // [mir] switchInt(move _19) -> [0: bb9, otherwise: bb8]
  __t55 := _19.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb9 ==========
  __t7 := true
  // [mir] _18 = const ()
  // [mir] goto -> bb10
  // ========== loop2_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_19)
  // [mir] StorageDead(_18)
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb12, otherwise: bb11]
  __t56 := _24.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb12 ==========
  __t9 := true
  // [mir] _23 = const ()
  // [mir] goto -> bb13
  // ========== loop2_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_24)
  // [mir] StorageDead(_23)
  // [mir] StorageLive(_27)
  // [mir] StorageLive(_28)
  // [mir] _28 = const false
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_bool, write)
  _28.val_bool := false
  // [mir] switchInt(move _28) -> [0: bb15, otherwise: bb14]
  __t57 := _28.val_bool
  // Ignore default target bb14, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb15 ==========
  __t11 := true
  // [mir] _27 = const ()
  // [mir] goto -> bb16
  // ========== loop2_group3_bb16 ==========
  __t12 := true
  // [mir] StorageDead(_28)
  // [mir] StorageDead(_27)
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] _32 = const false
  _32 := builtin$havoc_ref()
  inhale acc(_32.val_bool, write)
  _32.val_bool := false
  // [mir] switchInt(move _32) -> [0: bb18, otherwise: bb17]
  __t58 := _32.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb18 ==========
  __t13 := true
  // [mir] _31 = const ()
  // [mir] goto -> bb19
  // ========== loop2_group3_bb19 ==========
  __t14 := true
  // [mir] StorageDead(_32)
  // [mir] StorageDead(_31)
  // [mir] StorageLive(_35)
  // [mir] StorageLive(_36)
  // [mir] _36 = const false
  _36 := builtin$havoc_ref()
  inhale acc(_36.val_bool, write)
  _36.val_bool := false
  // [mir] switchInt(move _36) -> [0: bb21, otherwise: bb20]
  __t59 := _36.val_bool
  // Ignore default target bb20, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb21 ==========
  __t15 := true
  // [mir] _35 = const ()
  // [mir] goto -> bb22
  // ========== loop2_group3_bb22 ==========
  __t16 := true
  // [mir] StorageDead(_36)
  // [mir] StorageDead(_35)
  // [mir] StorageLive(_41)
  // [mir] StorageLive(_42)
  // [mir] _42 = const false
  _42 := builtin$havoc_ref()
  inhale acc(_42.val_bool, write)
  _42.val_bool := false
  // [mir] switchInt(move _42) -> [0: bb24, otherwise: bb23]
  __t60 := _42.val_bool
  // Ignore default target bb23, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb24 ==========
  __t17 := true
  // [mir] _41 = const ()
  // [mir] goto -> bb25
  // ========== loop2_group3_bb25 ==========
  __t18 := true
  // [mir] StorageDead(_42)
  // [mir] StorageDead(_41)
  // [mir] StorageLive(_49)
  // [mir] StorageLive(_50)
  // [mir] _50 = const false
  _50 := builtin$havoc_ref()
  inhale acc(_50.val_bool, write)
  _50.val_bool := false
  // [mir] switchInt(move _50) -> [0: bb27, otherwise: bb26]
  __t61 := _50.val_bool
  // Ignore default target bb26, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb27 ==========
  __t19 := true
  // [mir] _49 = const ()
  // [mir] goto -> bb28
  // ========== loop2_group3_bb28 ==========
  __t20 := true
  // [mir] StorageDead(_50)
  // [mir] StorageDead(_49)
  // [mir] StorageLive(_55)
  // [mir] StorageLive(_56)
  // [mir] StorageLive(_57)
  // [mir] StorageLive(_58)
  // [mir] _58 = _5
  _58 := builtin$havoc_int()
  unfold acc(usize(_5), write)
  _58 := _5.val_int
  label l10
  // [mir] _57 = Ge(move _58, const 0_usize)
  _57 := builtin$havoc_ref()
  inhale acc(_57.val_bool, write)
  _57.val_bool := _58 >= 0
  // [mir] StorageDead(_58)
  // [mir] _56 = Not(move _57)
  _56 := builtin$havoc_ref()
  inhale acc(_56.val_bool, write)
  _56.val_bool := !_57.val_bool
  // [mir] StorageDead(_57)
  // [mir] switchInt(move _56) -> [0: bb30, otherwise: bb29]
  __t62 := _56.val_bool
  if (__t62) {
    goto loop2_group3_bb16
  }
  goto loop2_start
  
  label l2
  // ========== l8 ==========
  // MIR edge bb3 --> bb58
  goto end_of_method
  
  label l5
  // ========== l24 ==========
  // MIR edge bb36 --> bb38
  // ========== loop2_group3_bb38 ==========
  __t26 := true
  // [mir] _71 = const ()
  // [mir] StorageDead(_72)
  // [mir] StorageDead(_71)
  // [mir] StorageLive(_79)
  // [mir] StorageLive(_80)
  // [mir] _80 = _3
  _80 := builtin$havoc_int()
  _80 := _3.val_int
  label l26
  // [mir] _81 = Eq(const 2_usize, const 0_usize)
  _81 := builtin$havoc_ref()
  inhale acc(_81.val_bool, write)
  _81.val_bool := false
  // [mir] assert(!move _81, "attempt to divide `{}` by zero", _80) -> [success: bb39, unwind: bb59]
  __t67 := _81.val_bool
  // Rust assertion: attempt to divide by zero
  assert !__t67
  // ========== loop2_group3_bb39 ==========
  __t27 := true
  // [mir] _79 = Div(move _80, const 2_usize)
  _79 := builtin$havoc_int()
  _79 := _80 / 2
  // [mir] StorageDead(_80)
  // [mir] FakeRead(ForLet(None), _79)
  // [mir] StorageLive(_82)
  // [mir] StorageLive(_83)
  // [mir] StorageLive(_84)
  // [mir] StorageLive(_85)
  // [mir] _85 = _79
  _85 := builtin$havoc_int()
  _85 := _79
  label l27
  // [mir] StorageLive(_86)
  // [mir] _86 = _3
  _86 := builtin$havoc_int()
  _86 := _3.val_int
  label l28
  // [mir] _84 = Le(move _85, move _86)
  _84 := builtin$havoc_ref()
  inhale acc(_84.val_bool, write)
  _84.val_bool := _85 <= _86
  // [mir] StorageDead(_86)
  // [mir] StorageDead(_85)
  // [mir] _83 = Not(move _84)
  _83 := builtin$havoc_ref()
  inhale acc(_83.val_bool, write)
  _83.val_bool := !_84.val_bool
  // [mir] StorageDead(_84)
  // [mir] switchInt(move _83) -> [0: bb41, otherwise: bb40]
  __t68 := _83.val_bool
  if (__t68) {
    goto loop2_group3_bb10
  }
  goto l6
  
  label l6
  // ========== l29 ==========
  // MIR edge bb39 --> bb41
  // ========== loop2_group3_bb41 ==========
  __t28 := true
  // [mir] _82 = const ()
  // [mir] StorageDead(_83)
  // [mir] StorageDead(_82)
  // [mir] StorageLive(_88)
  // [mir] StorageLive(_89)
  // [mir] StorageLive(_90)
  // [mir] StorageLive(_91)
  // [mir] _91 = _79
  _91 := builtin$havoc_int()
  _91 := _79
  label l31
  // [mir] _90 = Ge(move _91, const 0_usize)
  _90 := builtin$havoc_ref()
  inhale acc(_90.val_bool, write)
  _90.val_bool := _91 >= 0
  // [mir] StorageDead(_91)
  // [mir] _89 = Not(move _90)
  _89 := builtin$havoc_ref()
  inhale acc(_89.val_bool, write)
  _89.val_bool := !_90.val_bool
  // [mir] StorageDead(_90)
  // [mir] switchInt(move _89) -> [0: bb43, otherwise: bb42]
  __t69 := _89.val_bool
  if (__t69) {
    goto loop2_group3_bb9
  }
  goto loop2_group2_bb4
  
  label l8
  // ========== l59 ==========
  // MIR edge bb53 --> bb54
  // ========== loop2_group3_bb54 ==========
  __t42 := true
  // [mir] _109 = const false
  _109 := builtin$havoc_ref()
  inhale acc(_109.val_bool, write)
  _109.val_bool := false
  // [mir] goto -> bb56
  goto l9
  
  label l9
  // ========== loop2_group3_bb56 ==========
  __t43 := true
  // [mir] StorageDead(_112)
  // [mir] StorageDead(_110)
  // [mir] _7 = move _109
  _7 := _109
  label l64
  // [mir] StorageDead(_109)
  // [mir] _10 = const ()
  // [mir] StorageDead(_100)
  // [mir] StorageDead(_97)
  // [mir] StorageDead(_93)
  // [mir] StorageDead(_79)
  // [mir] StorageDead(_11)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb59]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _7
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := _7.val_bool
  label l65
  // [mir] switchInt(move _11) -> [0: bb58, otherwise: bb4]
  __t74 := _11.val_bool
  if (__t74) {
    goto loop2_group3_bb7
  }
  goto loop2_group2b_bb4
  
  label loop2_group1_bb2
  // ========== l14 ==========
  // MIR edge bb30 --> bb32
  // ========== loop2_group3_bb32 ==========
  __t22 := true
  // [mir] _60 = const ()
  // [mir] StorageDead(_61)
  // [mir] StorageDead(_60)
  // [mir] StorageLive(_65)
  // [mir] StorageLive(_66)
  // [mir] StorageLive(_67)
  // [mir] StorageLive(_68)
  // [mir] StorageLive(_69)
  // [mir] _69 = &(*_1)
  _69 := builtin$havoc_ref()
  inhale acc(_69.val_ref, write)
  _69.val_ref := _1.val_ref
  inhale acc(struct$m_VecWrapperI32(_69.val_ref), read$())
  label l16
  // [mir] _68 = VecWrapperI32::len(move _69) -> [return: bb33, unwind: bb59]
  label l17
  _68 := builtin$havoc_int()
  inhale _68 >= 0 && 18446744073709551615 >= _68
  inhale _68 ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_69.val_ref))
  // transfer perm _69.val_ref --> old[l17](_69.val_ref) // unchecked: false
  // ========== l18 ==========
  // MIR edge bb32 --> bb33
  // Expire borrows
  // expire_borrows ReborrowingDAG(L24,L26,)

  if (__t22 && __t22) {
    // expire loan L26
    // transfer perm old[l17](_69.val_ref) --> old[l16](_69.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l16](_69.val_ref)), read$())
  }
  // ========== loop2_group3_bb33 ==========
  __t23 := true
  // [mir] StorageDead(_69)
  // [mir] _67 = Le(move _68, const _)
  _67 := builtin$havoc_ref()
  inhale acc(_67.val_bool, write)
  inhale _68 >= 0 && 18446744073709551615 >= _68
  _67.val_bool := _68 <= 18446744073709551615
  // [mir] StorageDead(_68)
  // [mir] _66 = Not(move _67)
  _66 := builtin$havoc_ref()
  inhale acc(_66.val_bool, write)
  _66.val_bool := !_67.val_bool
  // [mir] StorageDead(_67)
  // [mir] switchInt(move _66) -> [0: bb35, otherwise: bb34]
  __t64 := _66.val_bool
  if (__t64) {
    goto loop2_group3_bb13
  }
  goto loop2_group1_bb3
  
  label loop2_group1_bb3
  // ========== l19 ==========
  // MIR edge bb33 --> bb35
  // ========== loop2_group3_bb35 ==========
  __t24 := true
  // [mir] _65 = const ()
  // [mir] StorageDead(_66)
  // [mir] StorageDead(_65)
  // [mir] StorageLive(_71)
  // [mir] StorageLive(_72)
  // [mir] StorageLive(_73)
  // [mir] StorageLive(_74)
  // [mir] StorageLive(_75)
  // [mir] _75 = _5
  _75 := builtin$havoc_int()
  _75 := _5.val_int
  label l21
  // [mir] StorageLive(_76)
  // [mir] _76 = _3
  _76 := builtin$havoc_int()
  _76 := _3.val_int
  label l22
  // [mir] _77 = CheckedAdd(_75, _76)
  _77 := builtin$havoc_ref()
  inhale acc(_77.tuple_0, write)
  inhale acc(_77.tuple_0.val_int, write)
  inhale acc(_77.tuple_1, write)
  inhale acc(_77.tuple_1.val_bool, write)
  _77.tuple_0.val_int := _75 + _76
  _77.tuple_1.val_bool := _75 + _76 < 0 || _75 + _76 > 18446744073709551615
  // [mir] assert(!move (_77.1: bool), "attempt to compute `{} + {}`, which would overflow", move _75, move _76) -> [success: bb36, unwind: bb59]
  __t65 := _77.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t65
  // ========== loop2_group3_bb36 ==========
  __t25 := true
  // [mir] _74 = move (_77.0: usize)
  _74 := _77.tuple_0
  label l23
  // [mir] StorageDead(_76)
  // [mir] StorageDead(_75)
  // [mir] _73 = Le(move _74, const _)
  _73 := builtin$havoc_ref()
  inhale acc(_73.val_bool, write)
  _73.val_bool := _74.val_int <= 18446744073709551615
  // [mir] StorageDead(_74)
  // [mir] _72 = Not(move _73)
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_bool, write)
  _72.val_bool := !_73.val_bool
  // [mir] StorageDead(_73)
  // [mir] switchInt(move _72) -> [0: bb38, otherwise: bb37]
  __t66 := _72.val_bool
  if (__t66) {
    goto loop2_group3_bb12
  }
  goto l5
  
  label loop2_group2_bb4
  // ========== l32 ==========
  // MIR edge bb41 --> bb43
  // ========== loop2_group3_bb43 ==========
  __t29 := true
  // [mir] _88 = const ()
  // [mir] StorageDead(_89)
  // [mir] StorageDead(_88)
  // [mir] StorageLive(_93)
  // [mir] StorageLive(_94)
  // [mir] _94 = _5
  _94 := builtin$havoc_int()
  _94 := _5.val_int
  label l34
  // [mir] StorageLive(_95)
  // [mir] _95 = _79
  _95 := builtin$havoc_int()
  _95 := _79
  label l35
  // [mir] _96 = CheckedAdd(_94, _95)
  _96 := builtin$havoc_ref()
  inhale acc(_96.tuple_0, write)
  inhale acc(_96.tuple_0.val_int, write)
  inhale acc(_96.tuple_1, write)
  inhale acc(_96.tuple_1.val_bool, write)
  _96.tuple_0.val_int := _94 + _95
  _96.tuple_1.val_bool := _94 + _95 < 0 || _94 + _95 > 18446744073709551615
  // [mir] assert(!move (_96.1: bool), "attempt to compute `{} + {}`, which would overflow", move _94, move _95) -> [success: bb44, unwind: bb59]
  __t70 := _96.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t70
  // ========== loop2_group3_bb44 ==========
  __t30 := true
  // [mir] _93 = move (_96.0: usize)
  _93 := _96.tuple_0
  label l36
  // [mir] StorageDead(_95)
  // [mir] StorageDead(_94)
  // [mir] FakeRead(ForLet(None), _93)
  // [mir] StorageLive(_97)
  // [mir] StorageLive(_98)
  // [mir] _98 = &(*_1)
  _98 := builtin$havoc_ref()
  inhale acc(_98.val_ref, write)
  _98.val_ref := _1.val_ref
  inhale acc(struct$m_VecWrapperI32(_98.val_ref), read$())
  label l37
  // [mir] StorageLive(_99)
  // [mir] _99 = _93
  _99 := builtin$havoc_int()
  _99 := _93.val_int
  label l38
  // [mir] _97 = VecWrapperI32::borrow(move _98, move _99) -> [return: bb45, unwind: bb59]
  label l39
  assert 0 <= _99 &&
    _99 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_98.val_ref))
  assert true
  assert _99 >= 0 && 18446744073709551615 >= _99
  exhale acc(_98.val_ref, write) &&
    (_99 >= 0 && 18446744073709551615 >= _99)
  _97 := builtin$havoc_ref()
  inhale acc(_97.val_ref, write) && acc(i32(_97.val_ref), read$())
  // transfer perm _98.val_ref --> old[l39](_98.val_ref) // unchecked: true
  inhale true
  inhale (unfolding acc(i32(_97.val_ref), read$()) in
      _97.val_ref.val_int ==
      old[l39](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_98.val_ref),
      _99)))
  label l40
  // ========== loop2_group3_bb45 ==========
  __t31 := true
  // [mir] StorageDead(_99)
  // [mir] StorageDead(_98)
  // [mir] FakeRead(ForLet(None), _97)
  // [mir] StorageLive(_100)
  // [mir] StorageLive(_101)
  // [mir] _101 = (*_97)
  _101 := builtin$havoc_ref()
  inhale acc(_101.val_int, write)
  unfold acc(i32(_97.val_ref), read$())
  _101.val_int := _97.val_ref.val_int
  label l41
  // expire_borrows ReborrowingDAG(L27,L28,L29,)

  if (__t30 && (__t30 && __t30)) {
    // expire loan L29
    // transfer perm old[l39](_98.val_ref) --> old[l37](_98.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l37](_98.val_ref)), read$())
  }
  // [mir] StorageLive(_102)
  // [mir] _102 = _2
  _102 := builtin$havoc_ref()
  inhale acc(_102.val_int, write)
  unfold acc(i32(_2), write)
  _102.val_int := _2.val_int
  label l42
  // [mir] _100 = cmp(move _101, move _102) -> [return: bb46, unwind: bb59]
  label l43
  assert true
  fold acc(i32(_101), write)
  fold acc(i32(_102), write)
  exhale acc(i32(_101), write) && acc(i32(_102), write)
  _100 := builtin$havoc_ref()
  inhale acc(m_Ordering$_beg_$_end_(_100), write)
  inhale true
  inhale (unfolding acc(m_Ordering$_beg_$_end_(_100), write) in
      (_100.discriminant == 1 ?
        old[l43](_101.val_int) == old[l43](_102.val_int) :
        (_100.discriminant == 0 ?
          old[l43](_101.val_int) < old[l43](_102.val_int) :
          old[l43](_101.val_int) > old[l43](_102.val_int))))
  label l44
  // ========== loop2_group3_bb46 ==========
  __t32 := true
  // [mir] StorageDead(_102)
  // [mir] StorageDead(_101)
  // [mir] FakeRead(ForLet(None), _100)
  // [mir] StorageLive(_103)
  // [mir] FakeRead(ForMatchedPlace(None), _100)
  // [mir] _104 = discriminant(_100)
  _104 := builtin$havoc_int()
  _104 := m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(_100)
  // [mir] switchInt(move _104) -> [0: bb47, 2: bb49, otherwise: bb48]
  __t71 := _104
  if (__t71 == 0) {
    goto loop2_inv_post_fnspc
  }
  if (__t71 == 2) {
    goto loop2_inv_post_perm
  }
  goto loop2_inv_pre
  
  label loop2_group2a_bb2
  // ========== loop2_group3_bb52 ==========
  __t38 := true
  // [mir] _5 = move _103
  _5 := _103
  label l54
  // [mir] StorageDead(_103)
  // [mir] StorageLive(_107)
  // [mir] _107 = _79
  _107 := builtin$havoc_int()
  _107 := _79
  label l55
  // [mir] _108 = CheckedSub(_3, _107)
  _108 := builtin$havoc_ref()
  inhale acc(_108.tuple_0, write)
  inhale acc(_108.tuple_0.val_int, write)
  inhale acc(_108.tuple_1, write)
  inhale acc(_108.tuple_1.val_bool, write)
  _108.tuple_0.val_int := _3.val_int - _107
  _108.tuple_1.val_bool := _3.val_int - _107 < 0 ||
    _3.val_int - _107 > 18446744073709551615
  // [mir] assert(!move (_108.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _107) -> [success: bb53, unwind: bb59]
  __t72 := _108.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t72
  // ========== loop2_group3_bb53 ==========
  __t39 := true
  // [mir] _3 = move (_108.0: usize)
  _3 := _108.tuple_0
  label l56
  // [mir] StorageDead(_107)
  // [mir] StorageLive(_109)
  // [mir] StorageLive(_110)
  // [mir] StorageLive(_111)
  // [mir] _111 = _3
  _111 := builtin$havoc_int()
  _111 := _3.val_int
  label l57
  // [mir] _110 = Gt(move _111, const 0_usize)
  _110 := builtin$havoc_ref()
  inhale acc(_110.val_bool, write)
  _110.val_bool := _111 > 0
  // [mir] StorageDead(_111)
  // [mir] switchInt(move _110) -> [0: bb54, otherwise: bb55]
  __t73 := _110.val_bool
  if (!__t73) {
    goto l8
  }
  goto loop2_group2a_bb3
  
  label loop2_group2a_bb3
  // ========== l58 ==========
  // MIR edge bb53 --> bb55
  // ========== loop2_group3_bb55 ==========
  __t40 := true
  // [mir] StorageLive(_112)
  // [mir] StorageLive(_113)
  // [mir] _113 = &_6
  _113 := builtin$havoc_ref()
  inhale acc(_113.val_ref, write)
  _113.val_ref := _6
  exhale acc(m_UsizeOption$_beg_$_end_(_6), write - read$())
  inhale acc(m_UsizeOption$_beg_$_end_(_113.val_ref), read$())
  label l60
  // [mir] _112 = UsizeOption::is_none(move _113) -> [return: bb57, unwind: bb59]
  label l61
  _112 := builtin$havoc_ref()
  inhale acc(bool(_112), write)
  inhale (unfolding acc(bool(_112), write) in _112.val_bool) ==
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_113.val_ref))
  // transfer perm _113.val_ref --> old[l61](_113.val_ref) // unchecked: false
  // ========== l62 ==========
  // MIR edge bb55 --> bb57
  // Expire borrows
  // expire_borrows ReborrowingDAG(L30,L19,)

  if (__t40 && __t40) {
    // expire loan L19
    // transfer perm old[l61](_113.val_ref) --> old[l60](_113.val_ref) // unchecked: false
    exhale acc(m_UsizeOption$_beg_$_end_(old[l60](_113.val_ref)), read$())
    inhale acc(m_UsizeOption$_beg_$_end_(_6), write - read$())
  }
  // ========== loop2_group3_bb57 ==========
  __t41 := true
  // [mir] StorageDead(_113)
  // [mir] _109 = move _112
  _109 := _112
  label l63
  // [mir] goto -> bb56
  // ========== l71 ==========
  // drop Acc(old[l60](_113.val_ref), write) (Acc(old[l60](_113.val_ref), write))
  // drop Acc(_113.val_ref, write) (Acc(_113.val_ref, write))
  unfold acc(bool(_109), write)
  goto l9
  
  label loop2_group2b_bb4
  // ========== l66 ==========
  // MIR edge bb3 --> bb58
  // ========== l73 ==========
  // drop Acc(_19.val_bool, write) (Acc(_19.val_bool, write))
  // drop Acc(_77.tuple_1.val_bool, write) (Acc(_77.tuple_1.val_bool, write))
  // drop Acc(_81.val_bool, write) (Acc(_81.val_bool, write))
  // drop Acc(_77.tuple_0, write) (Acc(_77.tuple_0, write))
  // drop Acc(_58.val_int, write) (Acc(_58.val_int, write))
  // drop Acc(_24.val_bool, write) (Acc(_24.val_bool, write))
  // drop Acc(_110.val_bool, write) (Acc(_110.val_bool, write))
  // drop Acc(_61.val_bool, write) (Acc(_61.val_bool, write))
  // drop Acc(_104.val_int, write) (Acc(_104.val_int, write))
  // drop Acc(_66.val_bool, write) (Acc(_66.val_bool, write))
  // drop Acc(_97.val_ref.val_int, read) (Acc(_97.val_ref.val_int, read))
  // drop Acc(_13.val_bool, write) (Acc(_13.val_bool, write))
  // drop Acc(_69.val_ref, write) (Acc(_69.val_ref, write))
  // drop Acc(_72.val_bool, write) (Acc(_72.val_bool, write))
  // drop Acc(_79.val_int, write) (Acc(_79.val_int, write))
  // drop Acc(_68.val_int, write) (Acc(_68.val_int, write))
  // drop Acc(_74.val_int, write) (Acc(_74.val_int, write))
  // drop Acc(_108.tuple_1.val_bool, write) (Acc(_108.tuple_1.val_bool, write))
  // drop Acc(_89.val_bool, write) (Acc(_89.val_bool, write))
  // drop Acc(_108.tuple_0, write) (Acc(_108.tuple_0, write))
  // drop Acc(_28.val_bool, write) (Acc(_28.val_bool, write))
  // drop Acc(_91.val_int, write) (Acc(_91.val_int, write))
  // drop Acc(_96.tuple_0, write) (Acc(_96.tuple_0, write))
  // drop Acc(_111.val_int, write) (Acc(_111.val_int, write))
  // drop Acc(_94.val_int, write) (Acc(_94.val_int, write))
  // drop Acc(_93.val_int, write) (Acc(_93.val_int, write))
  // drop Acc(_50.val_bool, write) (Acc(_50.val_bool, write))
  // drop Acc(_32.val_bool, write) (Acc(_32.val_bool, write))
  // drop Acc(_84.val_bool, write) (Acc(_84.val_bool, write))
  // drop Acc(_80.val_int, write) (Acc(_80.val_int, write))
  // drop Acc(_57.val_bool, write) (Acc(_57.val_bool, write))
  // drop Acc(_63.val_int, write) (Acc(_63.val_int, write))
  // drop Acc(_95.val_int, write) (Acc(_95.val_int, write))
  // drop Acc(_96.tuple_1.val_bool, write) (Acc(_96.tuple_1.val_bool, write))
  // drop Acc(_90.val_bool, write) (Acc(_90.val_bool, write))
  // drop Acc(_42.val_bool, write) (Acc(_42.val_bool, write))
  // drop Acc(_85.val_int, write) (Acc(_85.val_int, write))
  // drop Acc(_56.val_bool, write) (Acc(_56.val_bool, write))
  // drop Acc(old[l16](_69.val_ref), write) (Acc(old[l16](_69.val_ref), write))
  // drop Acc(_75.val_int, write) (Acc(_75.val_int, write))
  // drop Acc(_83.val_bool, write) (Acc(_83.val_bool, write))
  // drop Acc(_73.val_bool, write) (Acc(_73.val_bool, write))
  // drop Acc(_86.val_int, write) (Acc(_86.val_int, write))
  // drop Acc(_67.val_bool, write) (Acc(_67.val_bool, write))
  // drop Acc(_36.val_bool, write) (Acc(_36.val_bool, write))
  // drop Acc(_107.val_int, write) (Acc(_107.val_int, write))
  // drop Acc(_62.val_bool, write) (Acc(_62.val_bool, write))
  // drop Acc(_76.val_int, write) (Acc(_76.val_int, write))
  // drop Pred(_100, write) (Pred(_100, write))
  // drop Acc(_96.tuple_1, write) (Acc(_96.tuple_1, write))
  // drop Acc(_97.val_ref, write) (Acc(_97.val_ref, write))
  // drop Acc(_108.tuple_1, write) (Acc(_108.tuple_1, write))
  // drop Acc(_77.tuple_1, write) (Acc(_77.tuple_1, write))
  goto loop2_group3_bb6
  
  label loop2_group3_bb10
  // ========== l30 ==========
  // MIR edge bb39 --> bb40
  // ========== bb40 ==========
  __t45 := true
  // [mir] StorageLive(_87)
  // [mir] _87 = core::panicking::panic(const "assertion failed: half <= size") -> bb59
  // Rust panic - const "assertion failed: half <= size"
  assert false
  goto end_of_method
  
  label loop2_group3_bb12
  // ========== l25 ==========
  // MIR edge bb36 --> bb37
  // ========== bb37 ==========
  __t46 := true
  // [mir] StorageLive(_78)
  // [mir] _78 = core::panicking::panic(const "assertion failed: base + size <= usize::MAX") -> bb59
  // Rust panic - const "assertion failed: base + size <= usize::MAX"
  assert false
  goto end_of_method
  
  label loop2_group3_bb13
  // ========== l20 ==========
  // MIR edge bb33 --> bb34
  // ========== bb34 ==========
  __t47 := true
  // [mir] StorageLive(_70)
  // [mir] _70 = core::panicking::panic(const "assertion failed: arr.len() <= usize::MAX") -> bb59
  // Rust panic - const "assertion failed: arr.len() <= usize::MAX"
  assert false
  goto end_of_method
  
  label loop2_group3_bb15
  // ========== l15 ==========
  // MIR edge bb30 --> bb31
  // ========== bb31 ==========
  __t48 := true
  // [mir] StorageLive(_64)
  // [mir] _64 = core::panicking::panic(const "assertion failed: size >= 0") -> bb59
  // Rust panic - const "assertion failed: size >= 0"
  assert false
  goto end_of_method
  
  label loop2_group3_bb16
  // ========== l12 ==========
  // MIR edge bb28 --> bb29
  // ========== bb29 ==========
  __t49 := true
  // [mir] StorageLive(_59)
  // [mir] _59 = core::panicking::panic(const "assertion failed: base >= 0") -> bb59
  // Rust panic - const "assertion failed: base >= 0"
  assert false
  goto end_of_method
  
  label loop2_group3_bb6
  // ========== bb58 ==========
  __t50 := true
  // [mir] StorageLive(_115)
  // [mir] _9 = const ()
  // [mir] StorageDead(_115)
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_9)
  // [mir] _0 = move _6
  _0 := _6
  label l68
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_3)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l70
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  // obtain acc(m_UsizeOption$_beg_$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) ==>
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==>
      !(old[pre]((unfolding acc(i32(_2), write) in _2.val_int)) ==
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
      _0_quant_0))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0))) ==
    old[pre]((unfolding acc(i32(_2), write) in _2.val_int))))))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_VecWrapperI32(_old$pre$0), read$())
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_UsizeOption$_beg_$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_group3_bb7
  // ========== l67 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb6, otherwise: bb5]
  __t75 := _13.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  // obtain acc(m_UsizeOption$_beg_$_end_(_6), write)
  fold acc(usize(_5), write)
  // obtain acc(usize(_5), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(bool(_7), write)
  // obtain acc(bool(_7), write)
  // obtain acc(_1.val_ref, read)
  fold acc(i32(_2), write)
  // obtain acc(i32(_2), read)
  assert !((unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <
    0 ||
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <=
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0)))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((unfolding acc(i32(_2), write) in
      (unfolding acc(usize(_5), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _5.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <
          _2.val_int)))) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    (unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_5), write) in
        (unfolding acc(i32(_2), write) in
          (let _LET_2 ==
            (_5.val_int + _3.val_int < 0 ||
            _5.val_int + _3.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_2 &&
              (!(_5.val_int + _3.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              _2.val_int <
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6))) ==
    (unfolding acc(i32(_2), write) in _2.val_int)))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(m_UsizeOption$_beg_$_end_(_6), write) &&
    (acc(usize(_5), write) &&
    (acc(usize(_3), write) &&
    (acc(bool(_7), write) &&
    (acc(_1.val_ref, read$()) && acc(i32(_2), read$())))))
  inhale false
  goto end_of_method
  
  label loop2_group3_bb9
  // ========== l33 ==========
  // MIR edge bb41 --> bb42
  // ========== bb42 ==========
  __t44 := true
  // [mir] StorageLive(_92)
  // [mir] _92 = core::panicking::panic(const "assertion failed: half >= 0") -> bb59
  // Rust panic - const "assertion failed: half >= 0"
  assert false
  goto end_of_method
  
  label loop2_inv_post_fnspc
  // ========== l46 ==========
  // MIR edge bb46 --> bb47
  // ========== loop2_group3_bb47 ==========
  __t36 := true
  // [mir] falseEdge -> [real: bb50, imaginary: bb49]
  // ========== loop2_group3_bb50 ==========
  __t37 := true
  // [mir] _103 = _93
  _103 := builtin$havoc_ref()
  inhale acc(_103.val_int, write)
  _103.val_int := _93.val_int
  label l53
  // [mir] goto -> bb52
  goto loop2_group2a_bb2
  
  label loop2_inv_post_perm
  // ========== l47 ==========
  // MIR edge bb46 --> bb49
  // ========== loop2_group3_bb49 ==========
  __t34 := true
  // [mir] falseEdge -> [real: bb51, imaginary: bb48]
  // ========== loop2_group3_bb51 ==========
  __t35 := true
  // [mir] _103 = _5
  _103 := builtin$havoc_ref()
  inhale acc(_103.val_int, write)
  _103.val_int := _5.val_int
  label l52
  // [mir] goto -> bb52
  goto loop2_group2a_bb2
  
  label loop2_inv_pre
  // ========== l45 ==========
  // MIR edge bb46 --> bb48
  // ========== loop2_group3_bb48 ==========
  __t33 := true
  // [mir] StorageLive(_105)
  // [mir] StorageLive(_106)
  // [mir] _106 = _93
  _106 := builtin$havoc_ref()
  inhale acc(_106.val_int, write)
  _106.val_int := _93.val_int
  label l48
  // [mir] _105 = UsizeOption::Some(move _106)
  _105 := builtin$havoc_ref()
  inhale acc(m_UsizeOption$_beg_$_end_(_105), write)
  inhale m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(_105) ==
    0
  // downcast _105 to enum_Some

  unfold acc(m_UsizeOption$_beg_$_end_(_105), write)
  unfold acc(m_UsizeOption$_beg_$_end_Some(_105.enum_Some), write)
  _105.enum_Some.f$0 := _106
  label l49
  // [mir] StorageDead(_106)
  // [mir] _6 = move _105
  _6 := _105
  label l50
  // [mir] StorageDead(_105)
  // [mir] _103 = _5
  _103 := builtin$havoc_ref()
  inhale acc(_103.val_int, write)
  _103.val_int := _5.val_int
  label l51
  // [mir] goto -> bb52
  // ========== l69 ==========
  fold acc(usize(_6.enum_Some.f$0), write)
  fold acc(m_UsizeOption$_beg_$_end_Some(_6.enum_Some), write)
  fold acc(m_UsizeOption$_beg_$_end_(_6), write)
  goto loop2_group2a_bb2
  
  label loop2_start
  // ========== l11 ==========
  // MIR edge bb28 --> bb30
  // ========== loop2_group3_bb30 ==========
  __t21 := true
  // [mir] _55 = const ()
  // [mir] StorageDead(_56)
  // [mir] StorageDead(_55)
  // [mir] StorageLive(_60)
  // [mir] StorageLive(_61)
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = _3
  _63 := builtin$havoc_int()
  unfold acc(usize(_3), write)
  _63 := _3.val_int
  label l13
  // [mir] _62 = Ge(move _63, const 0_usize)
  _62 := builtin$havoc_ref()
  inhale acc(_62.val_bool, write)
  _62.val_bool := _63 >= 0
  // [mir] StorageDead(_63)
  // [mir] _61 = Not(move _62)
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := !_62.val_bool
  // [mir] StorageDead(_62)
  // [mir] switchInt(move _61) -> [0: bb32, otherwise: bb31]
  __t63 := _61.val_bool
  if (__t63) {
    goto loop2_group3_bb15
  }
  goto loop2_group1_bb2
  
  label return
  // ========== l5 ==========
  // MIR edge bb3 --> bb58
  // ========== l72 ==========
  unfold acc(i32(_2), write)
  goto loop2_group3_bb6
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
