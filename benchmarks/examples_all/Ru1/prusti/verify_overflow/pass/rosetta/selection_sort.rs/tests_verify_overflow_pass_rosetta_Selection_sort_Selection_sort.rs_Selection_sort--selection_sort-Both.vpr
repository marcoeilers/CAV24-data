domain MirrorDomain  {
  
  function mirror_simple$f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1: Snap$struct$m_VecWrapperI32): Int 
  
  function mirror_simple$f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1: Snap$struct$m_VecWrapperI32,
  _2: Int): Int 
}

domain Snap$struct$m_VecWrapperI32  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapperI32 
  
  function Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapperI32): Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapperI32$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapperI32$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0)) }
      Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$v: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1: Snap$struct$m_VecWrapperI32): Int
  requires true
  requires true
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1),
    true]


function f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1: Snap$struct$m_VecWrapperI32,
  _2: Int): Int
  requires 0 <= _2
  requires _2 <= 18446744073709551615
  requires true
  requires 0 <= _2 &&
    _2 < f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1)
  ensures -2147483648 <= result
  ensures result <= 2147483647
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1,
    _2),
    true]


function snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(self: Ref): Snap$struct$m_VecWrapperI32
  requires acc(struct$m_VecWrapperI32(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32((unfolding acc(struct$m_VecWrapperI32(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate struct$m_VecWrapperI32(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Ref) 

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_selection_sort() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var __t45: Bool
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var __t53: Bool
  var __t54: Bool
  var __t55: Bool
  var __t56: Bool
  var __t57: Bool
  var __t58: Bool
  var _preserve$0: Ref
  var __t59: Bool
  var __t60: Bool
  var __t61: Bool
  var __t62: Bool
  var __t63: Bool
  var __t64: Bool
  var __t65: Bool
  var __t66: Bool
  var __t67: Bool
  var __t68: Bool
  var _preserve$1: Ref
  var __t69: Bool
  var __t70: Bool
  var __t71: Bool
  var __t72: Bool
  var __t73: Bool
  var __t74: Bool
  var __t75: Bool
  var __t76: Bool
  var __t77: Bool
  var __t78: Bool
  var __t79: Bool
  var __t80: Bool
  var __t81: Bool
  var __t82: Bool
  var __t83: Bool
  var _old$l59$0: Ref
  var _old$l65$0: Ref
  var __t84: Bool
  var __t85: Bool
  var __t86: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Int
  var _6: Int
  var _7: Ref
  var _9: Ref
  var _11: Ref
  var _15: Ref
  var _20: Ref
  var _26: Ref
  var _32: Ref
  var _37: Ref
  var _41: Ref
  var _42: Ref
  var _43: Int
  var _44: Ref
  var _45: Ref
  var _46: Int
  var _47: Int
  var _48: Ref
  var _50: Ref
  var _52: Ref
  var _56: Ref
  var _61: Ref
  var _66: Ref
  var _71: Ref
  var _76: Ref
  var _81: Ref
  var _86: Ref
  var _91: Ref
  var _97: Ref
  var _104: Ref
  var _105: Int
  var _106: Ref
  var _107: Ref
  var _108: Int
  var _109: Int
  var _110: Ref
  var _111: Ref
  var _112: Int
  var _113: Ref
  var _114: Ref
  var _115: Int
  var _116: Int
  var _117: Ref
  var _121: Int
  var _122: Ref
  var _123: Ref
  var _124: Int
  var _125: Int
  var _126: Ref
  var _127: Ref
  var _128: Int
  var _129: Ref
  var _130: Ref
  var _131: Int
  var _132: Ref
  var _133: Ref
  var _134: Ref
  var _135: Int
  var _136: Ref
  var _137: Ref
  var _138: Int
  var _139: Int
  var _140: Ref
  
  label start
  // ========== start ==========
  // Def path: "Selection_sort::selection_sort"
  // Span: tests/verify_overflow/pass/rosetta/Selection_sort.rs:76:1: 131:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  __t32 := false
  __t33 := false
  __t34 := false
  __t35 := false
  __t36 := false
  __t37 := false
  __t38 := false
  __t39 := false
  __t40 := false
  __t41 := false
  __t42 := false
  __t43 := false
  __t44 := false
  __t45 := false
  __t46 := false
  __t47 := false
  __t48 := false
  __t49 := false
  __t50 := false
  __t51 := false
  __t52 := false
  __t53 := false
  __t54 := false
  __t55 := false
  __t56 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    acc(struct$m_VecWrapperI32(_1.val_ref), write)
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] _3 = const 0_usize
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_int, write)
  _3.val_int := 0
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] _5 = _3
  _5 := builtin$havoc_int()
  _5 := _3.val_int
  label l0
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] _7 = &(*_1)
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_ref, write)
  _7.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_7.val_ref), read$())
  label l1
  // [mir] _6 = VecWrapperI32::len(move _7) -> [return: bb1, unwind: bb73]
  label l2
  _6 := builtin$havoc_int()
  inhale _6 >= 0 && 18446744073709551615 >= _6
  inhale _6 ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_7.val_ref))
  // transfer perm _7.val_ref --> old[l2](_7.val_ref) // unchecked: false
  // ========== l3 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L51,L0,)

  if (__t0 && __t0) {
    // expire loan L0
    // transfer perm old[l2](_7.val_ref) --> old[l1](_7.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l1](_7.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_7)
  // [mir] _4 = Lt(move _5, move _6)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_bool, write)
  inhale _6 >= 0 && 18446744073709551615 >= _6
  _4.val_bool := _5 < _6
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb73]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] _9 = _4
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _4.val_bool
  label l4
  // [mir] switchInt(move _9) -> [0: bb72, otherwise: bb4]
  __t57 := _9.val_bool
  if (__t57) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l6 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = const false
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := false
  // [mir] switchInt(move _11) -> [0: bb6, otherwise: bb5]
  __t58 := _11.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  _preserve$0 := _1.val_ref
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(bool(_4), write)
  // obtain acc(bool(_4), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), write)
  assert f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    (0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    (((unfolding acc(bool(_4), write) in _4.val_bool) ==>
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((!(unfolding acc(bool(_4), write) in _4.val_bool) ==>
    (unfolding acc(usize(_3), write) in _3.val_int) ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _1_quant_0) ||
        (_1_quant_0 < _3.val_int ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))) &&
    (unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _3.val_int) ||
        (!(_3.val_int <= _1_quant_0) ||
        (_1_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_3), write) &&
    (acc(bool(_4), write) &&
    (acc(_1.val_ref, read$()) &&
    acc(struct$m_VecWrapperI32(_1.val_ref), write)))
  _104 := builtin$havoc_ref()
  _105 := builtin$havoc_int()
  _106 := builtin$havoc_ref()
  _107 := builtin$havoc_ref()
  _108 := builtin$havoc_int()
  _109 := builtin$havoc_int()
  _11 := builtin$havoc_ref()
  _110 := builtin$havoc_ref()
  _111 := builtin$havoc_ref()
  _112 := builtin$havoc_int()
  _113 := builtin$havoc_ref()
  _114 := builtin$havoc_ref()
  _115 := builtin$havoc_int()
  _116 := builtin$havoc_int()
  _117 := builtin$havoc_ref()
  _121 := builtin$havoc_int()
  _122 := builtin$havoc_ref()
  _123 := builtin$havoc_ref()
  _124 := builtin$havoc_int()
  _125 := builtin$havoc_int()
  _126 := builtin$havoc_ref()
  _127 := builtin$havoc_ref()
  _128 := builtin$havoc_int()
  _129 := builtin$havoc_ref()
  _130 := builtin$havoc_ref()
  _131 := builtin$havoc_int()
  _132 := builtin$havoc_ref()
  _133 := builtin$havoc_ref()
  _134 := builtin$havoc_ref()
  _135 := builtin$havoc_int()
  _136 := builtin$havoc_ref()
  _137 := builtin$havoc_ref()
  _138 := builtin$havoc_int()
  _139 := builtin$havoc_int()
  _140 := builtin$havoc_ref()
  _15 := builtin$havoc_ref()
  _2 := builtin$havoc_ref()
  _20 := builtin$havoc_ref()
  _26 := builtin$havoc_ref()
  _3 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _37 := builtin$havoc_ref()
  _41 := builtin$havoc_ref()
  _42 := builtin$havoc_ref()
  _43 := builtin$havoc_int()
  _44 := builtin$havoc_ref()
  _45 := builtin$havoc_ref()
  _46 := builtin$havoc_int()
  _47 := builtin$havoc_int()
  _48 := builtin$havoc_ref()
  _50 := builtin$havoc_ref()
  _52 := builtin$havoc_ref()
  _56 := builtin$havoc_ref()
  _61 := builtin$havoc_ref()
  _66 := builtin$havoc_ref()
  _71 := builtin$havoc_ref()
  _76 := builtin$havoc_ref()
  _81 := builtin$havoc_ref()
  _86 := builtin$havoc_ref()
  _9 := builtin$havoc_ref()
  _91 := builtin$havoc_ref()
  _97 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t42 := builtin$havoc_bool()
  __t43 := builtin$havoc_bool()
  __t44 := builtin$havoc_bool()
  __t45 := builtin$havoc_bool()
  __t46 := builtin$havoc_bool()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t49 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t59 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t60 := builtin$havoc_bool()
  __t61 := builtin$havoc_bool()
  __t62 := builtin$havoc_bool()
  __t63 := builtin$havoc_bool()
  __t64 := builtin$havoc_bool()
  __t65 := builtin$havoc_bool()
  __t66 := builtin$havoc_bool()
  __t67 := builtin$havoc_bool()
  __t68 := builtin$havoc_bool()
  __t69 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t70 := builtin$havoc_bool()
  __t71 := builtin$havoc_bool()
  __t72 := builtin$havoc_bool()
  __t73 := builtin$havoc_bool()
  __t74 := builtin$havoc_bool()
  __t75 := builtin$havoc_bool()
  __t76 := builtin$havoc_bool()
  __t77 := builtin$havoc_bool()
  __t78 := builtin$havoc_bool()
  __t79 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t80 := builtin$havoc_bool()
  __t81 := builtin$havoc_bool()
  __t82 := builtin$havoc_bool()
  __t83 := builtin$havoc_bool()
  __t84 := builtin$havoc_bool()
  __t85 := builtin$havoc_bool()
  __t86 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  _preserve$1 := builtin$havoc_ref()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(usize(_3), write) &&
    (acc(bool(_4), write) &&
    (acc(_1.val_ref, read$()) &&
    acc(struct$m_VecWrapperI32(_1.val_ref), write)))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb73]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] _9 = _4
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  unfold acc(bool(_4), write)
  _9.val_bool := _4.val_bool
  label l7
  // [mir] switchInt(move _9) -> [0: bb72, otherwise: bb4]
  __t59 := _9.val_bool
  if (__t59) {
    goto bb1
  }
  goto l3
  
  label bb1
  // ========== l9 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2b_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = const false
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := false
  // [mir] switchInt(move _11) -> [0: bb6, otherwise: bb5]
  __t60 := _11.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  inhale f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    (0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((_4.val_bool ==>
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((!_4.val_bool ==>
    (unfolding acc(usize(_3), write) in _3.val_int) ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _1_quant_0) ||
        (_1_quant_0 < _3.val_int ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))) &&
    (unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _3.val_int) ||
        (!(_3.val_int <= _1_quant_0) ||
        (_1_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))))))))
  // ========== loop2_group3_bb6 ==========
  __t5 := true
  // [mir] _10 = const ()
  // [mir] goto -> bb7
  // ========== loop2_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_10)
  // [mir] StorageLive(_14)
  // [mir] StorageLive(_15)
  // [mir] _15 = const false
  _15 := builtin$havoc_ref()
  inhale acc(_15.val_bool, write)
  _15.val_bool := false
  // [mir] switchInt(move _15) -> [0: bb9, otherwise: bb8]
  __t61 := _15.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb9 ==========
  __t7 := true
  // [mir] _14 = const ()
  // [mir] goto -> bb10
  // ========== loop2_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_14)
  // [mir] StorageLive(_19)
  // [mir] StorageLive(_20)
  // [mir] _20 = const false
  _20 := builtin$havoc_ref()
  inhale acc(_20.val_bool, write)
  _20.val_bool := false
  // [mir] switchInt(move _20) -> [0: bb12, otherwise: bb11]
  __t62 := _20.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb12 ==========
  __t9 := true
  // [mir] _19 = const ()
  // [mir] goto -> bb13
  // ========== loop2_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_19)
  // [mir] StorageLive(_25)
  // [mir] StorageLive(_26)
  // [mir] _26 = const false
  _26 := builtin$havoc_ref()
  inhale acc(_26.val_bool, write)
  _26.val_bool := false
  // [mir] switchInt(move _26) -> [0: bb15, otherwise: bb14]
  __t63 := _26.val_bool
  // Ignore default target bb14, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb15 ==========
  __t11 := true
  // [mir] _25 = const ()
  // [mir] goto -> bb16
  // ========== loop2_group3_bb16 ==========
  __t12 := true
  // [mir] StorageDead(_26)
  // [mir] StorageDead(_25)
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] _32 = const false
  _32 := builtin$havoc_ref()
  inhale acc(_32.val_bool, write)
  _32.val_bool := false
  // [mir] switchInt(move _32) -> [0: bb18, otherwise: bb17]
  __t64 := _32.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb18 ==========
  __t13 := true
  // [mir] _31 = const ()
  // [mir] goto -> bb19
  // ========== loop2_group3_bb19 ==========
  __t14 := true
  // [mir] StorageDead(_32)
  // [mir] StorageDead(_31)
  // [mir] StorageLive(_36)
  // [mir] StorageLive(_37)
  // [mir] _37 = const false
  _37 := builtin$havoc_ref()
  inhale acc(_37.val_bool, write)
  _37.val_bool := false
  // [mir] switchInt(move _37) -> [0: bb21, otherwise: bb20]
  __t65 := _37.val_bool
  // Ignore default target bb20, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb21 ==========
  __t15 := true
  // [mir] _36 = const ()
  // [mir] goto -> bb22
  // ========== loop2_group3_bb22 ==========
  __t16 := true
  // [mir] StorageDead(_37)
  // [mir] StorageDead(_36)
  // [mir] StorageLive(_41)
  // [mir] _41 = _3
  _41 := builtin$havoc_ref()
  inhale acc(_41.val_int, write)
  unfold acc(usize(_3), write)
  _41.val_int := _3.val_int
  label l10
  // [mir] _2 = move _41
  _2 := _41
  label l11
  // [mir] StorageDead(_41)
  // [mir] StorageLive(_42)
  // [mir] StorageLive(_43)
  // [mir] _43 = _3
  _43 := builtin$havoc_int()
  _43 := _3.val_int
  label l12
  // [mir] _44 = CheckedAdd(_43, const 1_usize)
  _44 := builtin$havoc_ref()
  inhale acc(_44.tuple_0, write)
  inhale acc(_44.tuple_0.val_int, write)
  inhale acc(_44.tuple_1, write)
  inhale acc(_44.tuple_1.val_bool, write)
  _44.tuple_0.val_int := _43 + 1
  _44.tuple_1.val_bool := _43 + 1 < 0 || _43 + 1 > 18446744073709551615
  // [mir] assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, const 1_usize) -> [success: bb23, unwind: bb73]
  __t66 := _44.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t66
  // ========== loop2_group3_bb23 ==========
  __t17 := true
  // [mir] _42 = move (_44.0: usize)
  _42 := _44.tuple_0
  label l13
  // [mir] StorageDead(_43)
  // [mir] FakeRead(ForLet(None), _42)
  // [mir] StorageLive(_45)
  // [mir] StorageLive(_46)
  // [mir] _46 = _42
  _46 := builtin$havoc_int()
  _46 := _42.val_int
  label l14
  // [mir] StorageLive(_47)
  // [mir] StorageLive(_48)
  // [mir] _48 = &(*_1)
  _48 := builtin$havoc_ref()
  inhale acc(_48.val_ref, write)
  _48.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_48.val_ref), read$())
  label l15
  // [mir] _47 = VecWrapperI32::len(move _48) -> [return: bb24, unwind: bb73]
  label l16
  _47 := builtin$havoc_int()
  inhale _47 >= 0 && 18446744073709551615 >= _47
  inhale _47 ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_48.val_ref))
  // transfer perm _48.val_ref --> old[l16](_48.val_ref) // unchecked: false
  // ========== l17 ==========
  // MIR edge bb23 --> bb24
  // Expire borrows
  // expire_borrows ReborrowingDAG(L50,L14,)

  if (__t17 && __t17) {
    // expire loan L14
    // transfer perm old[l16](_48.val_ref) --> old[l15](_48.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l15](_48.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // ========== loop2_group3_bb24 ==========
  __t18 := true
  // [mir] StorageDead(_48)
  // [mir] _45 = Lt(move _46, move _47)
  _45 := builtin$havoc_ref()
  inhale acc(_45.val_bool, write)
  inhale _47 >= 0 && 18446744073709551615 >= _47
  _45.val_bool := _46 < _47
  // [mir] StorageDead(_47)
  // [mir] StorageDead(_46)
  // [mir] FakeRead(ForLet(None), _45)
  // [mir] StorageLive(_49)
  // [mir] goto -> bb25
  // ========== loop2_group3_loop25_start ==========
  // ========== loop2_group3_loop25_group1_bb25 ==========
  // This is a loop head
  __t19 := true
  // [mir] falseUnwind -> [real: bb26, unwind: bb73]
  // ========== loop2_group3_loop25_group1_bb26 ==========
  __t20 := true
  // [mir] StorageLive(_50)
  // [mir] _50 = _45
  _50 := builtin$havoc_ref()
  inhale acc(_50.val_bool, write)
  _50.val_bool := _45.val_bool
  label l18
  // [mir] switchInt(move _50) -> [0: bb65, otherwise: bb27]
  __t67 := _50.val_bool
  if (__t67) {
    goto loop2_group1_bb2
  }
  goto loop2_start
  
  label l3
  // ========== l8 ==========
  // MIR edge bb3 --> bb72
  goto end_of_method
  
  label l5
  // ========== l23 ==========
  // MIR edge bb26 --> bb27
  // ========== loop2_group3_loop25_group2b_bb27 ==========
  __t21 := true
  // [mir] StorageLive(_51)
  // [mir] StorageLive(_52)
  // [mir] _52 = const false
  _52 := builtin$havoc_ref()
  inhale acc(_52.val_bool, write)
  _52.val_bool := false
  // [mir] switchInt(move _52) -> [0: bb29, otherwise: bb28]
  __t70 := _52.val_bool
  // Ignore default target bb28, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb25
  inhale f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    (0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _1_quant_0) ||
        (_1_quant_0 < _3.val_int ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _3.val_int) ||
        (!(_3.val_int <= _1_quant_0) ||
        (_1_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0)))))) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <
    (unfolding acc(usize(_42), write) in _42.val_int) &&
    ((unfolding acc(usize(_42), write) in _42.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <=
    (unfolding acc(usize(_2), write) in _2.val_int) &&
    ((unfolding acc(usize(_2), write) in _2.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_2), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _3.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <=
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _2.val_int))))) &&
    (unfolding acc(usize(_42), write) in
      (unfolding acc(usize(_3), write) in
        (unfolding acc(usize(_2), write) in
          (let _LET_1 ==
            (_3.val_int) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !(_LET_1 <= _0_quant_0) ||
              (!(_0_quant_0 < _42.val_int) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _2.val_int) <=
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))))))))))
  // ========== loop2_group3_loop25_group3_bb29 ==========
  __t22 := true
  // [mir] _51 = const ()
  // [mir] goto -> bb30
  // ========== loop2_group3_loop25_group3_bb30 ==========
  __t23 := true
  // [mir] StorageDead(_52)
  // [mir] StorageDead(_51)
  // [mir] StorageLive(_55)
  // [mir] StorageLive(_56)
  // [mir] _56 = const false
  _56 := builtin$havoc_ref()
  inhale acc(_56.val_bool, write)
  _56.val_bool := false
  // [mir] switchInt(move _56) -> [0: bb32, otherwise: bb31]
  __t71 := _56.val_bool
  // Ignore default target bb31, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb32 ==========
  __t24 := true
  // [mir] _55 = const ()
  // [mir] goto -> bb33
  // ========== loop2_group3_loop25_group3_bb33 ==========
  __t25 := true
  // [mir] StorageDead(_56)
  // [mir] StorageDead(_55)
  // [mir] StorageLive(_60)
  // [mir] StorageLive(_61)
  // [mir] _61 = const false
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := false
  // [mir] switchInt(move _61) -> [0: bb35, otherwise: bb34]
  __t72 := _61.val_bool
  // Ignore default target bb34, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb35 ==========
  __t26 := true
  // [mir] _60 = const ()
  // [mir] goto -> bb36
  // ========== loop2_group3_loop25_group3_bb36 ==========
  __t27 := true
  // [mir] StorageDead(_61)
  // [mir] StorageDead(_60)
  // [mir] StorageLive(_65)
  // [mir] StorageLive(_66)
  // [mir] _66 = const false
  _66 := builtin$havoc_ref()
  inhale acc(_66.val_bool, write)
  _66.val_bool := false
  // [mir] switchInt(move _66) -> [0: bb38, otherwise: bb37]
  __t73 := _66.val_bool
  // Ignore default target bb37, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb38 ==========
  __t28 := true
  // [mir] _65 = const ()
  // [mir] goto -> bb39
  // ========== loop2_group3_loop25_group3_bb39 ==========
  __t29 := true
  // [mir] StorageDead(_66)
  // [mir] StorageDead(_65)
  // [mir] StorageLive(_70)
  // [mir] StorageLive(_71)
  // [mir] _71 = const false
  _71 := builtin$havoc_ref()
  inhale acc(_71.val_bool, write)
  _71.val_bool := false
  // [mir] switchInt(move _71) -> [0: bb41, otherwise: bb40]
  __t74 := _71.val_bool
  // Ignore default target bb40, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb41 ==========
  __t30 := true
  // [mir] _70 = const ()
  // [mir] goto -> bb42
  // ========== loop2_group3_loop25_group3_bb42 ==========
  __t31 := true
  // [mir] StorageDead(_71)
  // [mir] StorageDead(_70)
  // [mir] StorageLive(_75)
  // [mir] StorageLive(_76)
  // [mir] _76 = const false
  _76 := builtin$havoc_ref()
  inhale acc(_76.val_bool, write)
  _76.val_bool := false
  // [mir] switchInt(move _76) -> [0: bb44, otherwise: bb43]
  __t75 := _76.val_bool
  // Ignore default target bb43, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb44 ==========
  __t32 := true
  // [mir] _75 = const ()
  // [mir] goto -> bb45
  // ========== loop2_group3_loop25_group3_bb45 ==========
  __t33 := true
  // [mir] StorageDead(_76)
  // [mir] StorageDead(_75)
  // [mir] StorageLive(_80)
  // [mir] StorageLive(_81)
  // [mir] _81 = const false
  _81 := builtin$havoc_ref()
  inhale acc(_81.val_bool, write)
  _81.val_bool := false
  // [mir] switchInt(move _81) -> [0: bb47, otherwise: bb46]
  __t76 := _81.val_bool
  // Ignore default target bb46, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb47 ==========
  __t34 := true
  // [mir] _80 = const ()
  // [mir] goto -> bb48
  // ========== loop2_group3_loop25_group3_bb48 ==========
  __t35 := true
  // [mir] StorageDead(_81)
  // [mir] StorageDead(_80)
  // [mir] StorageLive(_85)
  // [mir] StorageLive(_86)
  // [mir] _86 = const false
  _86 := builtin$havoc_ref()
  inhale acc(_86.val_bool, write)
  _86.val_bool := false
  // [mir] switchInt(move _86) -> [0: bb50, otherwise: bb49]
  __t77 := _86.val_bool
  // Ignore default target bb49, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb50 ==========
  __t36 := true
  // [mir] _85 = const ()
  // [mir] goto -> bb51
  // ========== loop2_group3_loop25_group3_bb51 ==========
  __t37 := true
  // [mir] StorageDead(_86)
  // [mir] StorageDead(_85)
  // [mir] StorageLive(_90)
  // [mir] StorageLive(_91)
  // [mir] _91 = const false
  _91 := builtin$havoc_ref()
  inhale acc(_91.val_bool, write)
  _91.val_bool := false
  // [mir] switchInt(move _91) -> [0: bb53, otherwise: bb52]
  __t78 := _91.val_bool
  // Ignore default target bb52, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb53 ==========
  __t38 := true
  // [mir] _90 = const ()
  // [mir] goto -> bb54
  // ========== loop2_group3_loop25_group3_bb54 ==========
  __t39 := true
  // [mir] StorageDead(_91)
  // [mir] StorageDead(_90)
  // [mir] StorageLive(_96)
  // [mir] StorageLive(_97)
  // [mir] _97 = const false
  _97 := builtin$havoc_ref()
  inhale acc(_97.val_bool, write)
  _97.val_bool := false
  // [mir] switchInt(move _97) -> [0: bb56, otherwise: bb55]
  __t79 := _97.val_bool
  // Ignore default target bb55, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_group3_bb56 ==========
  __t40 := true
  // [mir] _96 = const ()
  // [mir] goto -> bb57
  // ========== loop2_group3_loop25_group3_bb57 ==========
  __t41 := true
  // [mir] StorageDead(_97)
  // [mir] StorageDead(_96)
  // [mir] StorageLive(_103)
  // [mir] StorageLive(_104)
  // [mir] StorageLive(_105)
  // [mir] StorageLive(_106)
  // [mir] StorageLive(_107)
  // [mir] _107 = &(*_1)
  _107 := builtin$havoc_ref()
  inhale acc(_107.val_ref, write)
  _107.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_107.val_ref), read$())
  label l24
  // [mir] StorageLive(_108)
  // [mir] _108 = _42
  _108 := builtin$havoc_int()
  unfold acc(usize(_42), write)
  _108 := _42.val_int
  label l25
  // [mir] _106 = VecWrapperI32::index(move _107, move _108) -> [return: bb58, unwind: bb73]
  label l26
  assert 0 <= _108 &&
    _108 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_107.val_ref))
  assert true
  assert _108 >= 0 && 18446744073709551615 >= _108
  exhale acc(_107.val_ref, write) &&
    (_108 >= 0 && 18446744073709551615 >= _108)
  _106 := builtin$havoc_ref()
  inhale acc(_106.val_ref, write) && acc(i32(_106.val_ref), read$())
  // transfer perm _107.val_ref --> old[l26](_107.val_ref) // unchecked: true
  inhale true
  inhale (unfolding acc(i32(_106.val_ref), read$()) in
      _106.val_ref.val_int ==
      old[l26](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_107.val_ref),
      _108)))
  label l27
  // ========== loop2_group3_loop25_group3_bb58 ==========
  __t42 := true
  // [mir] StorageDead(_108)
  // [mir] StorageDead(_107)
  // [mir] _105 = (*_106)
  _105 := builtin$havoc_int()
  unfold acc(i32(_106.val_ref), read$())
  _105 := _106.val_ref.val_int
  label l28
  // expire_borrows ReborrowingDAG(L48,L49,L37,)

  if (__t41 && (__t41 && __t41)) {
    // expire loan L37
    // transfer perm old[l26](_107.val_ref) --> old[l24](_107.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l24](_107.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // [mir] StorageLive(_109)
  // [mir] StorageLive(_110)
  // [mir] StorageLive(_111)
  // [mir] _111 = &(*_1)
  _111 := builtin$havoc_ref()
  inhale acc(_111.val_ref, write)
  _111.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_111.val_ref), read$())
  label l29
  // [mir] StorageLive(_112)
  // [mir] _112 = _2
  _112 := builtin$havoc_int()
  unfold acc(usize(_2), write)
  _112 := _2.val_int
  label l30
  // [mir] _110 = VecWrapperI32::index(move _111, move _112) -> [return: bb59, unwind: bb73]
  label l31
  assert 0 <= _112 &&
    _112 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_111.val_ref))
  assert true
  assert _112 >= 0 && 18446744073709551615 >= _112
  exhale acc(_111.val_ref, write) &&
    (_112 >= 0 && 18446744073709551615 >= _112)
  _110 := builtin$havoc_ref()
  inhale acc(_110.val_ref, write) && acc(i32(_110.val_ref), read$())
  // transfer perm _111.val_ref --> old[l31](_111.val_ref) // unchecked: true
  inhale true
  inhale (unfolding acc(i32(_110.val_ref), read$()) in
      _110.val_ref.val_int ==
      old[l31](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_111.val_ref),
      _112)))
  label l32
  // ========== loop2_group3_loop25_group3_bb59 ==========
  __t43 := true
  // [mir] StorageDead(_112)
  // [mir] StorageDead(_111)
  // [mir] _109 = (*_110)
  _109 := builtin$havoc_int()
  unfold acc(i32(_110.val_ref), read$())
  _109 := _110.val_ref.val_int
  label l33
  // expire_borrows ReborrowingDAG(L54,L55,L38,)

  if (__t42 && (__t42 && __t42)) {
    // expire loan L38
    // transfer perm old[l31](_111.val_ref) --> old[l29](_111.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l29](_111.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // [mir] _104 = Lt(move _105, move _109)
  _104 := builtin$havoc_ref()
  inhale acc(_104.val_bool, write)
  _104.val_bool := _105 < _109
  // [mir] StorageDead(_110)
  // [mir] StorageDead(_109)
  // [mir] StorageDead(_106)
  // [mir] StorageDead(_105)
  // [mir] switchInt(move _104) -> [0: bb61, otherwise: bb60]
  __t80 := _104.val_bool
  if (!__t80) {
    goto loop2_group2_bb4
  }
  goto l6
  
  label l6
  // ========== l34 ==========
  // MIR edge bb59 --> bb60
  // ========== loop2_group3_loop25_group3_bb60 ==========
  __t44 := true
  // [mir] StorageLive(_113)
  // [mir] _113 = _42
  _113 := builtin$havoc_ref()
  inhale acc(_113.val_int, write)
  _113.val_int := _42.val_int
  label l36
  // [mir] _2 = move _113
  _2 := _113
  label l37
  // [mir] StorageDead(_113)
  // [mir] _103 = const ()
  // [mir] goto -> bb62
  goto loop2_inv_pre
  
  label l8
  // ========== l75 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = const false
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := false
  // [mir] switchInt(move _11) -> [0: bb6, otherwise: bb5]
  __t86 := _11.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(bool(_4), write)
  // obtain acc(bool(_4), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), write)
  assert f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    (0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    (((unfolding acc(bool(_4), write) in _4.val_bool) ==>
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((!(unfolding acc(bool(_4), write) in _4.val_bool) ==>
    (unfolding acc(usize(_3), write) in _3.val_int) ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _1_quant_0) ||
        (_1_quant_0 < _3.val_int ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))) &&
    (unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _3.val_int) ||
        (!(_3.val_int <= _1_quant_0) ||
        (_1_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_3), write) &&
    (acc(bool(_4), write) &&
    (acc(_1.val_ref, read$()) &&
    acc(struct$m_VecWrapperI32(_1.val_ref), write)))
  inhale false
  goto end_of_method
  
  label l9
  // ========== l45 ==========
  // MIR edge bb26 --> bb27
  // ========== loop2_group3_loop25_group5_bb27 ==========
  __t21 := true
  // [mir] StorageLive(_51)
  // [mir] StorageLive(_52)
  // [mir] _52 = const false
  _52 := builtin$havoc_ref()
  inhale acc(_52.val_bool, write)
  _52.val_bool := false
  // [mir] switchInt(move _52) -> [0: bb29, otherwise: bb28]
  __t83 := _52.val_bool
  // Ignore default target bb28, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb25)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  fold acc(usize(_42), write)
  // obtain acc(usize(_42), write)
  fold acc(bool(_45), write)
  // obtain acc(bool(_45), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), read)
  // obtain acc(usize(_3), read)
  assert f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    (0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _1_quant_0) ||
        (_1_quant_0 < _3.val_int ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _3.val_int) ||
        (!(_3.val_int <= _1_quant_0) ||
        (_1_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0)))))) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <
    (unfolding acc(usize(_42), write) in _42.val_int) &&
    ((unfolding acc(usize(_42), write) in _42.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <=
    (unfolding acc(usize(_2), write) in _2.val_int) &&
    ((unfolding acc(usize(_2), write) in _2.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_2), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _3.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <=
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _2.val_int))))) &&
    (unfolding acc(usize(_42), write) in
      (unfolding acc(usize(_3), write) in
        (unfolding acc(usize(_2), write) in
          (let _LET_2 ==
            (_3.val_int) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !(_LET_2 <= _0_quant_0) ||
              (!(_0_quant_0 < _42.val_int) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _2.val_int) <=
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))))))))))
  assert true
  assert _preserve$1 == _1.val_ref
  exhale acc(usize(_2), write) &&
    (acc(usize(_42), write) &&
    (acc(bool(_45), write) &&
    (acc(_1.val_ref, read$()) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), read$()) &&
    acc(usize(_3), read$())))))
  inhale false
  goto end_of_method
  
  label loop2_group1_bb2
  // ========== l20 ==========
  // MIR edge bb26 --> bb27
  // ========== loop2_group3_loop25_group2_bb27 ==========
  __t21 := true
  // [mir] StorageLive(_51)
  // [mir] StorageLive(_52)
  // [mir] _52 = const false
  _52 := builtin$havoc_ref()
  inhale acc(_52.val_bool, write)
  _52.val_bool := false
  // [mir] switchInt(move _52) -> [0: bb29, otherwise: bb28]
  __t68 := _52.val_bool
  // Ignore default target bb28, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop25_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb25)
  _preserve$1 := _1.val_ref
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  fold acc(usize(_42), write)
  // obtain acc(usize(_42), write)
  fold acc(bool(_45), write)
  // obtain acc(bool(_45), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), read)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), read)
  assert f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    (0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _1_quant_0) ||
        (_1_quant_0 < _3.val_int ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0))))) &&
    ((unfolding acc(usize(_3), write) in
      (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
        (_0_quant_0 <= 18446744073709551615 &&
        (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 < _3.val_int) ||
        (!(_3.val_int <= _1_quant_0) ||
        (_1_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _0_quant_0) <=
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
        _1_quant_0)))))) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <
    (unfolding acc(usize(_42), write) in _42.val_int) &&
    ((unfolding acc(usize(_42), write) in _42.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <=
    (unfolding acc(usize(_2), write) in _2.val_int) &&
    ((unfolding acc(usize(_2), write) in _2.val_int) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_2), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _3.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <=
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _2.val_int))))) &&
    (unfolding acc(usize(_42), write) in
      (unfolding acc(usize(_3), write) in
        (unfolding acc(usize(_2), write) in
          (let _LET_0 ==
            (_3.val_int) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !(_LET_0 <= _0_quant_0) ||
              (!(_0_quant_0 < _42.val_int) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _2.val_int) <=
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))))))))))
  assert true
  assert _preserve$1 == _1.val_ref
  exhale acc(usize(_2), write) &&
    (acc(usize(_42), write) &&
    (acc(bool(_45), write) &&
    (acc(_1.val_ref, read$()) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), read$()) &&
    acc(usize(_3), read$())))))
  _104 := builtin$havoc_ref()
  _105 := builtin$havoc_int()
  _106 := builtin$havoc_ref()
  _107 := builtin$havoc_ref()
  _108 := builtin$havoc_int()
  _109 := builtin$havoc_int()
  _110 := builtin$havoc_ref()
  _111 := builtin$havoc_ref()
  _112 := builtin$havoc_int()
  _113 := builtin$havoc_ref()
  _114 := builtin$havoc_ref()
  _115 := builtin$havoc_int()
  _116 := builtin$havoc_int()
  _117 := builtin$havoc_ref()
  _2 := builtin$havoc_ref()
  _42 := builtin$havoc_ref()
  _50 := builtin$havoc_ref()
  _52 := builtin$havoc_ref()
  _56 := builtin$havoc_ref()
  _61 := builtin$havoc_ref()
  _66 := builtin$havoc_ref()
  _71 := builtin$havoc_ref()
  _76 := builtin$havoc_ref()
  _81 := builtin$havoc_ref()
  _86 := builtin$havoc_ref()
  _91 := builtin$havoc_ref()
  _97 := builtin$havoc_ref()
  __t19 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t42 := builtin$havoc_bool()
  __t43 := builtin$havoc_bool()
  __t44 := builtin$havoc_bool()
  __t45 := builtin$havoc_bool()
  __t46 := builtin$havoc_bool()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t69 := builtin$havoc_bool()
  __t70 := builtin$havoc_bool()
  __t71 := builtin$havoc_bool()
  __t72 := builtin$havoc_bool()
  __t73 := builtin$havoc_bool()
  __t74 := builtin$havoc_bool()
  __t75 := builtin$havoc_bool()
  __t76 := builtin$havoc_bool()
  __t77 := builtin$havoc_bool()
  __t78 := builtin$havoc_bool()
  __t79 := builtin$havoc_bool()
  __t80 := builtin$havoc_bool()
  __t81 := builtin$havoc_bool()
  __t82 := builtin$havoc_bool()
  __t83 := builtin$havoc_bool()
  // ========== loop2_group3_loop25_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb25
  inhale acc(usize(_2), write) &&
    (acc(usize(_42), write) &&
    (acc(bool(_45), write) &&
    (acc(_1.val_ref, read$()) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), read$()) &&
    acc(usize(_3), read$())))))
  inhale _preserve$1 == _1.val_ref
  inhale true
  // ========== loop2_group3_loop25_group2a_bb25 ==========
  // This is a loop head
  __t19 := true
  // [mir] falseUnwind -> [real: bb26, unwind: bb73]
  // ========== loop2_group3_loop25_group2a_bb26 ==========
  __t20 := true
  // [mir] StorageLive(_50)
  // [mir] _50 = _45
  _50 := builtin$havoc_ref()
  inhale acc(_50.val_bool, write)
  unfold acc(bool(_45), write)
  _50.val_bool := _45.val_bool
  label l21
  // [mir] switchInt(move _50) -> [0: bb65, otherwise: bb27]
  __t69 := _50.val_bool
  if (__t69) {
    goto l5
  }
  goto loop2_group1_bb3
  
  label loop2_group1_bb3
  // ========== l22 ==========
  // MIR edge bb26 --> bb65
  goto end_of_method
  
  label loop2_group2_bb4
  // ========== l35 ==========
  // MIR edge bb59 --> bb61
  // ========== loop2_group3_loop25_group3_bb61 ==========
  __t45 := true
  // [mir] _103 = const ()
  // [mir] goto -> bb62
  goto loop2_inv_pre
  
  label loop2_group2a_bb2
  // ========== l74 ==========
  // MIR edge bb3 --> bb72
  // ========== l78 ==========
  // drop Acc(_48.val_ref, write) (Acc(_48.val_ref, write))
  // drop Acc(_26.val_bool, write) (Acc(_26.val_bool, write))
  // drop Acc(_139.val_int, write) (Acc(_139.val_int, write))
  // drop Acc(_122.val_ref.val_int, read) (Acc(_122.val_ref.val_int, read))
  // drop Acc(_45.val_bool, write) (Acc(_45.val_bool, write))
  // drop Acc(_37.val_bool, write) (Acc(_37.val_bool, write))
  // drop Acc(_126.val_ref.val_int, read) (Acc(_126.val_ref.val_int, read))
  // drop Acc(_2.val_int, write) (Acc(_2.val_int, write))
  // drop Acc(_138.val_int, write) (Acc(_138.val_int, write))
  // drop Acc(_44.tuple_0, write) (Acc(_44.tuple_0, write))
  // drop Acc(old[l15](_48.val_ref), write) (Acc(old[l15](_48.val_ref), write))
  // drop Acc(_140.val_ref, write) (Acc(_140.val_ref, write))
  // drop Acc(_133.val_ref, write) (Acc(_133.val_ref, write))
  // drop Acc(_50.val_bool, write) (Acc(_50.val_bool, write))
  // drop Acc(_32.val_bool, write) (Acc(_32.val_bool, write))
  // drop Acc(_11.val_bool, write) (Acc(_11.val_bool, write))
  // drop Acc(_46.val_int, write) (Acc(_46.val_int, write))
  // drop Acc(old[l70](_140.val_ref), write) (Acc(old[l70](_140.val_ref), write))
  // drop Acc(_42.val_int, write) (Acc(_42.val_int, write))
  // drop Acc(_47.val_int, write) (Acc(_47.val_int, write))
  // drop Acc(_125.val_int, write) (Acc(_125.val_int, write))
  // drop Acc(_20.val_bool, write) (Acc(_20.val_bool, write))
  // drop Acc(_137.tuple_0, write) (Acc(_137.tuple_0, write))
  // drop Acc(_129.val_ref, write) (Acc(_129.val_ref, write))
  // drop Acc(_15.val_bool, write) (Acc(_15.val_bool, write))
  // drop Acc(_44.tuple_1.val_bool, write) (Acc(_44.tuple_1.val_bool, write))
  // drop Acc(_121.val_int, write) (Acc(_121.val_int, write))
  // drop Acc(_43.val_int, write) (Acc(_43.val_int, write))
  // drop Acc(_137.tuple_1.val_bool, write) (Acc(_137.tuple_1.val_bool, write))
  // drop Acc(_126.val_ref, write) (Acc(_126.val_ref, write))
  // drop Acc(_44.tuple_1, write) (Acc(_44.tuple_1, write))
  // drop Acc(_122.val_ref, write) (Acc(_122.val_ref, write))
  // drop Acc(_137.tuple_1, write) (Acc(_137.tuple_1, write))
  goto loop2_group2a_bb3
  
  label loop2_group2a_bb3
  // ========== bb72 ==========
  __t56 := true
  // [mir] StorageLive(_142)
  // [mir] _0 = const ()
  // [mir] StorageDead(_142)
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_4)
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l77
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
      _1_quant_0))))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_VecWrapperI32(_old$pre$0), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_inv_post_fnspc
  // ========== loop2_group3_bb65 ==========
  __t49 := true
  // [mir] StorageLive(_119)
  // [mir] _49 = const ()
  // [mir] StorageDead(_119)
  // [mir] StorageDead(_50)
  // [mir] StorageDead(_49)
  // [mir] StorageLive(_121)
  // [mir] StorageLive(_122)
  // [mir] StorageLive(_123)
  // [mir] _123 = &(*_1)
  _123 := builtin$havoc_ref()
  inhale acc(_123.val_ref, write)
  _123.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_123.val_ref), read$())
  label l46
  // [mir] StorageLive(_124)
  // [mir] _124 = _3
  _124 := builtin$havoc_int()
  _124 := _3.val_int
  label l47
  // [mir] _122 = VecWrapperI32::index(move _123, move _124) -> [return: bb66, unwind: bb73]
  label l48
  assert 0 <= _124 &&
    _124 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_123.val_ref))
  assert true
  assert _124 >= 0 && 18446744073709551615 >= _124
  exhale acc(_123.val_ref, write) &&
    (_124 >= 0 && 18446744073709551615 >= _124)
  _122 := builtin$havoc_ref()
  inhale acc(_122.val_ref, write) && acc(i32(_122.val_ref), read$())
  // transfer perm _123.val_ref --> old[l48](_123.val_ref) // unchecked: true
  inhale true
  inhale (unfolding acc(i32(_122.val_ref), read$()) in
      _122.val_ref.val_int ==
      old[l48](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_123.val_ref),
      _124)))
  label l49
  // ========== loop2_group3_bb66 ==========
  __t50 := true
  // [mir] StorageDead(_124)
  // [mir] StorageDead(_123)
  // [mir] _121 = (*_122)
  _121 := builtin$havoc_int()
  unfold acc(i32(_122.val_ref), read$())
  _121 := _122.val_ref.val_int
  label l50
  // expire_borrows ReborrowingDAG(L61,L62,L40,)

  if (__t49 && (__t49 && __t49)) {
    // expire loan L40
    // transfer perm old[l48](_123.val_ref) --> old[l46](_123.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l46](_123.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // [mir] FakeRead(ForLet(None), _121)
  // [mir] StorageDead(_122)
  // [mir] StorageLive(_125)
  // [mir] StorageLive(_126)
  // [mir] StorageLive(_127)
  // [mir] _127 = &(*_1)
  _127 := builtin$havoc_ref()
  inhale acc(_127.val_ref, write)
  _127.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_127.val_ref), read$())
  label l51
  // [mir] StorageLive(_128)
  // [mir] _128 = _2
  _128 := builtin$havoc_int()
  _128 := _2.val_int
  label l52
  // [mir] _126 = VecWrapperI32::index(move _127, move _128) -> [return: bb67, unwind: bb73]
  label l53
  assert 0 <= _128 &&
    _128 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_127.val_ref))
  assert true
  assert _128 >= 0 && 18446744073709551615 >= _128
  exhale acc(_127.val_ref, write) &&
    (_128 >= 0 && 18446744073709551615 >= _128)
  _126 := builtin$havoc_ref()
  inhale acc(_126.val_ref, write) && acc(i32(_126.val_ref), read$())
  // transfer perm _127.val_ref --> old[l53](_127.val_ref) // unchecked: true
  inhale true
  inhale (unfolding acc(i32(_126.val_ref), read$()) in
      _126.val_ref.val_int ==
      old[l53](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_127.val_ref),
      _128)))
  label l54
  // ========== loop2_group3_bb67 ==========
  __t51 := true
  // [mir] StorageDead(_128)
  // [mir] StorageDead(_127)
  // [mir] _125 = (*_126)
  _125 := builtin$havoc_int()
  unfold acc(i32(_126.val_ref), read$())
  _125 := _126.val_ref.val_int
  label l55
  // expire_borrows ReborrowingDAG(L59,L60,L41,)

  if (__t50 && (__t50 && __t50)) {
    // expire loan L41
    // transfer perm old[l53](_127.val_ref) --> old[l51](_127.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l51](_127.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // [mir] FakeRead(ForLet(None), _125)
  // [mir] StorageDead(_126)
  // [mir] StorageLive(_129)
  // [mir] StorageLive(_130)
  // [mir] _130 = &mut (*_1)
  _130 := builtin$havoc_ref()
  inhale acc(_130.val_ref, write)
  _130.val_ref := _1.val_ref
  label l56
  // [mir] StorageLive(_131)
  // [mir] _131 = _3
  _131 := builtin$havoc_int()
  _131 := _3.val_int
  label l57
  // [mir] _129 = VecWrapperI32::index_mut(move _130, move _131) -> [return: bb68, unwind: bb73]
  label l58
  assert 0 <= _131 &&
    _131 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_130.val_ref))
  assert true
  assert _131 >= 0 && 18446744073709551615 >= _131
  exhale acc(_130.val_ref, write) &&
    (acc(struct$m_VecWrapperI32(_130.val_ref), write) &&
    (_131 >= 0 && 18446744073709551615 >= _131))
  _129 := builtin$havoc_ref()
  inhale acc(_129.val_ref, write) && acc(i32(_129.val_ref), write)
  inhale true
  inhale (unfolding acc(i32(_129.val_ref), write) in
      _129.val_ref.val_int ==
      old[l58](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_130.val_ref),
      _131)))
  label l59
  // ========== loop2_group3_bb68 ==========
  __t52 := true
  // [mir] StorageDead(_131)
  // [mir] StorageDead(_130)
  // [mir] FakeRead(ForLet(None), _129)
  // [mir] StorageLive(_132)
  // [mir] _132 = _125
  _132 := builtin$havoc_ref()
  inhale acc(_132.val_int, write)
  _132.val_int := _125
  label l60
  // [mir] (*_129) = move _132
  _129.val_ref := _132
  label l61
  // expire_borrows ReborrowingDAG(L52,L53,L42,)

  if (__t51) {
    // expire loan L52
    _old$l59$0 := _129.val_ref
    inhale acc(DeadBorrowToken$(52), write) && acc(i32(_old$l59$0), write) --*
      acc(struct$m_VecWrapperI32(old[l58](_130.val_ref)), write) &&
      (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref))) ==
      old[l58](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_130.val_ref))) &&
      (f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref)),
      old[l58](_131)) ==
      old[lhs]((unfolding acc(i32(_old$l59$0), write) in
        _old$l59$0.val_int)) &&
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref)))) ||
        (!(_0_quant_0 == old[l58](_131)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref)),
        _0_quant_0) ==
        old[l58](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_130.val_ref),
        _0_quant_0)))))))
    fold acc(i32(_old$l59$0), write)
    inhale acc(DeadBorrowToken$(52), write)
    apply acc(DeadBorrowToken$(52), write) && acc(i32(_old$l59$0), write) --*
      acc(struct$m_VecWrapperI32(old[l58](_130.val_ref)), write) &&
      (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref))) ==
      old[l58](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_130.val_ref))) &&
      (f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref)),
      old[l58](_131)) ==
      old[lhs]((unfolding acc(i32(_old$l59$0), write) in
        _old$l59$0.val_int)) &&
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref)))) ||
        (!(_0_quant_0 == old[l58](_131)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l58](_130.val_ref)),
        _0_quant_0) ==
        old[l58](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_130.val_ref),
        _0_quant_0)))))))
  }
  // [mir] StorageDead(_132)
  // [mir] StorageLive(_133)
  // [mir] StorageLive(_134)
  // [mir] _134 = &mut (*_1)
  _134 := builtin$havoc_ref()
  inhale acc(_134.val_ref, write)
  _134.val_ref := _1.val_ref
  label l62
  // [mir] StorageLive(_135)
  // [mir] _135 = _2
  _135 := builtin$havoc_int()
  _135 := _2.val_int
  label l63
  // [mir] _133 = VecWrapperI32::index_mut(move _134, move _135) -> [return: bb69, unwind: bb73]
  label l64
  assert 0 <= _135 &&
    _135 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_134.val_ref))
  assert true
  assert _135 >= 0 && 18446744073709551615 >= _135
  exhale acc(_134.val_ref, write) &&
    (acc(struct$m_VecWrapperI32(_134.val_ref), write) &&
    (_135 >= 0 && 18446744073709551615 >= _135))
  _133 := builtin$havoc_ref()
  inhale acc(_133.val_ref, write) && acc(i32(_133.val_ref), write)
  inhale true
  inhale (unfolding acc(i32(_133.val_ref), write) in
      _133.val_ref.val_int ==
      old[l64](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_134.val_ref),
      _135)))
  label l65
  // ========== loop2_group3_bb69 ==========
  __t53 := true
  // [mir] StorageDead(_135)
  // [mir] StorageDead(_134)
  // [mir] FakeRead(ForLet(None), _133)
  // [mir] StorageLive(_136)
  // [mir] _136 = _121
  _136 := builtin$havoc_ref()
  inhale acc(_136.val_int, write)
  _136.val_int := _121
  label l66
  // [mir] (*_133) = move _136
  _133.val_ref := _136
  label l67
  // expire_borrows ReborrowingDAG(L57,L58,L43,)

  if (__t52) {
    // expire loan L57
    _old$l65$0 := _133.val_ref
    inhale acc(DeadBorrowToken$(57), write) && acc(i32(_old$l65$0), write) --*
      acc(struct$m_VecWrapperI32(old[l64](_134.val_ref)), write) &&
      (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref))) ==
      old[l64](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_134.val_ref))) &&
      (f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref)),
      old[l64](_135)) ==
      old[lhs]((unfolding acc(i32(_old$l65$0), write) in
        _old$l65$0.val_int)) &&
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref)))) ||
        (!(_0_quant_0 == old[l64](_135)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref)),
        _0_quant_0) ==
        old[l64](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_134.val_ref),
        _0_quant_0)))))))
    fold acc(i32(_old$l65$0), write)
    inhale acc(DeadBorrowToken$(57), write)
    apply acc(DeadBorrowToken$(57), write) && acc(i32(_old$l65$0), write) --*
      acc(struct$m_VecWrapperI32(old[l64](_134.val_ref)), write) &&
      (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref))) ==
      old[l64](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_134.val_ref))) &&
      (f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref)),
      old[l64](_135)) ==
      old[lhs]((unfolding acc(i32(_old$l65$0), write) in
        _old$l65$0.val_int)) &&
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref)))) ||
        (!(_0_quant_0 == old[l64](_135)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l64](_134.val_ref)),
        _0_quant_0) ==
        old[l64](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_134.val_ref),
        _0_quant_0)))))))
  }
  // [mir] StorageDead(_136)
  // [mir] _137 = CheckedAdd(_3, const 1_usize)
  _137 := builtin$havoc_ref()
  inhale acc(_137.tuple_0, write)
  inhale acc(_137.tuple_0.val_int, write)
  inhale acc(_137.tuple_1, write)
  inhale acc(_137.tuple_1.val_bool, write)
  _137.tuple_0.val_int := _3.val_int + 1
  _137.tuple_1.val_bool := _3.val_int + 1 < 0 ||
    _3.val_int + 1 > 18446744073709551615
  // [mir] assert(!move (_137.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb70, unwind: bb73]
  __t84 := _137.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t84
  // ========== loop2_group3_bb70 ==========
  __t54 := true
  // [mir] _3 = move (_137.0: usize)
  _3 := _137.tuple_0
  label l68
  // [mir] StorageLive(_138)
  // [mir] _138 = _3
  _138 := builtin$havoc_int()
  _138 := _3.val_int
  label l69
  // [mir] StorageLive(_139)
  // [mir] StorageLive(_140)
  // [mir] _140 = &(*_1)
  _140 := builtin$havoc_ref()
  inhale acc(_140.val_ref, write)
  _140.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_140.val_ref), read$())
  label l70
  // [mir] _139 = VecWrapperI32::len(move _140) -> [return: bb71, unwind: bb73]
  label l71
  _139 := builtin$havoc_int()
  inhale _139 >= 0 && 18446744073709551615 >= _139
  inhale _139 ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_140.val_ref))
  // transfer perm _140.val_ref --> old[l71](_140.val_ref) // unchecked: false
  // ========== l72 ==========
  // MIR edge bb70 --> bb71
  // Expire borrows
  // expire_borrows ReborrowingDAG(L63,L44,)

  if (__t54 && __t54) {
    // expire loan L44
    // transfer perm old[l71](_140.val_ref) --> old[l70](_140.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l70](_140.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // ========== loop2_group3_bb71 ==========
  __t55 := true
  // [mir] StorageDead(_140)
  // [mir] _4 = Lt(move _138, move _139)
  inhale _139 >= 0 && 18446744073709551615 >= _139
  _4.val_bool := _138 < _139
  // [mir] StorageDead(_139)
  // [mir] StorageDead(_138)
  // [mir] _8 = const ()
  // [mir] StorageDead(_133)
  // [mir] StorageDead(_129)
  // [mir] StorageDead(_125)
  // [mir] StorageDead(_121)
  // [mir] StorageDead(_45)
  // [mir] StorageDead(_42)
  // [mir] StorageDead(_9)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb73]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_9)
  // [mir] _9 = _4
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _4.val_bool
  label l73
  // [mir] switchInt(move _9) -> [0: bb72, otherwise: bb4]
  __t85 := _9.val_bool
  if (__t85) {
    goto l8
  }
  goto loop2_group2a_bb2
  
  label loop2_inv_post_perm
  // ========== l44 ==========
  // MIR edge bb26 --> bb65
  // ========== l76 ==========
  // drop Acc(_81.val_bool, write) (Acc(_81.val_bool, write))
  // drop Acc(_86.val_bool, write) (Acc(_86.val_bool, write))
  // drop Acc(old[l40](_117.val_ref), write) (Acc(old[l40](_117.val_ref), write))
  // drop Acc(_110.val_ref.val_int, read) (Acc(_110.val_ref.val_int, read))
  // drop Acc(_114.tuple_1.val_bool, write) (Acc(_114.tuple_1.val_bool, write))
  // drop Acc(_115.val_int, write) (Acc(_115.val_int, write))
  // drop Acc(_61.val_bool, write) (Acc(_61.val_bool, write))
  // drop Acc(_97.val_bool, write) (Acc(_97.val_bool, write))
  // drop Acc(_91.val_bool, write) (Acc(_91.val_bool, write))
  // drop Acc(_66.val_bool, write) (Acc(_66.val_bool, write))
  // drop Acc(_105.val_int, write) (Acc(_105.val_int, write))
  // drop Acc(_117.val_ref, write) (Acc(_117.val_ref, write))
  // drop Acc(_109.val_int, write) (Acc(_109.val_int, write))
  // drop Acc(_116.val_int, write) (Acc(_116.val_int, write))
  // drop Acc(_106.val_ref.val_int, read) (Acc(_106.val_ref.val_int, read))
  // drop Acc(_104.val_bool, write) (Acc(_104.val_bool, write))
  // drop Acc(_114.tuple_0, write) (Acc(_114.tuple_0, write))
  // drop Acc(_52.val_bool, write) (Acc(_52.val_bool, write))
  // drop Acc(_56.val_bool, write) (Acc(_56.val_bool, write))
  unfold acc(usize(_3), write)
  // drop Acc(_76.val_bool, write) (Acc(_76.val_bool, write))
  // drop Acc(_71.val_bool, write) (Acc(_71.val_bool, write))
  // drop Acc(_114.tuple_1, write) (Acc(_114.tuple_1, write))
  // drop Acc(_106.val_ref, write) (Acc(_106.val_ref, write))
  // drop Acc(_110.val_ref, write) (Acc(_110.val_ref, write))
  goto loop2_inv_post_fnspc
  
  label loop2_inv_pre
  // ========== loop2_group3_loop25_group3_bb62 ==========
  __t46 := true
  // [mir] StorageDead(_104)
  // [mir] StorageDead(_103)
  // [mir] _114 = CheckedAdd(_42, const 1_usize)
  _114 := builtin$havoc_ref()
  inhale acc(_114.tuple_0, write)
  inhale acc(_114.tuple_0.val_int, write)
  inhale acc(_114.tuple_1, write)
  inhale acc(_114.tuple_1.val_bool, write)
  _114.tuple_0.val_int := _42.val_int + 1
  _114.tuple_1.val_bool := _42.val_int + 1 < 0 ||
    _42.val_int + 1 > 18446744073709551615
  // [mir] assert(!move (_114.1: bool), "attempt to compute `{} + {}`, which would overflow", _42, const 1_usize) -> [success: bb63, unwind: bb73]
  __t81 := _114.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t81
  // ========== loop2_group3_loop25_group3_bb63 ==========
  __t47 := true
  // [mir] _42 = move (_114.0: usize)
  _42 := _114.tuple_0
  label l38
  // [mir] StorageLive(_115)
  // [mir] _115 = _42
  _115 := builtin$havoc_int()
  _115 := _42.val_int
  label l39
  // [mir] StorageLive(_116)
  // [mir] StorageLive(_117)
  // [mir] _117 = &(*_1)
  _117 := builtin$havoc_ref()
  inhale acc(_117.val_ref, write)
  _117.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_117.val_ref), read$())
  label l40
  // [mir] _116 = VecWrapperI32::len(move _117) -> [return: bb64, unwind: bb73]
  label l41
  _116 := builtin$havoc_int()
  inhale _116 >= 0 && 18446744073709551615 >= _116
  inhale _116 ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_117.val_ref))
  // transfer perm _117.val_ref --> old[l41](_117.val_ref) // unchecked: false
  // ========== l42 ==========
  // MIR edge bb63 --> bb64
  // Expire borrows
  // expire_borrows ReborrowingDAG(L56,L39,)

  if (__t47 && __t47) {
    // expire loan L39
    // transfer perm old[l41](_117.val_ref) --> old[l40](_117.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l40](_117.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // ========== loop2_group3_loop25_group3_bb64 ==========
  __t48 := true
  // [mir] StorageDead(_117)
  // [mir] _45 = Lt(move _115, move _116)
  inhale _116 >= 0 && 18446744073709551615 >= _116
  _45.val_bool := _115 < _116
  // [mir] StorageDead(_116)
  // [mir] StorageDead(_115)
  // [mir] _8 = const ()
  // [mir] StorageDead(_50)
  // [mir] goto -> bb25
  // ========== loop2_group3_loop25_group4_bb25 ==========
  // This is a loop head
  __t19 := true
  // [mir] falseUnwind -> [real: bb26, unwind: bb73]
  // ========== loop2_group3_loop25_group4_bb26 ==========
  __t20 := true
  // [mir] StorageLive(_50)
  // [mir] _50 = _45
  _50 := builtin$havoc_ref()
  inhale acc(_50.val_bool, write)
  _50.val_bool := _45.val_bool
  label l43
  // [mir] switchInt(move _50) -> [0: bb65, otherwise: bb27]
  __t82 := _50.val_bool
  if (__t82) {
    goto l9
  }
  goto loop2_inv_post_perm
  
  label loop2_start
  // ========== l19 ==========
  // MIR edge bb26 --> bb65
  goto loop2_inv_post_fnspc
  
  label return
  // ========== l5 ==========
  // MIR edge bb3 --> bb72
  goto loop2_group2a_bb3
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
