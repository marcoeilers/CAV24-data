domain MirrorDomain  {
  
  function mirror_simple$f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(_1: Snap$struct$m_VecWrapperBool): Int 
  
  function mirror_simple$f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(_1: Snap$struct$m_VecWrapperBool,
  _2: Int): Bool 
}

domain Snap$struct$m_VecWrapperBool  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool(_0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapperBool 
  
  function Snap$struct$m_VecWrapperBool$0$field$f$v__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapperBool): Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapperBool$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapperBool$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapperBool$0$field$f$v__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool(_0)) }
      Snap$struct$m_VecWrapperBool$0$field$f$v__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$v: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(_1: Snap$struct$m_VecWrapperBool): Int
  requires true
  requires true
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(_1),
    true]


function f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(_1: Snap$struct$m_VecWrapperBool,
  _2: Int): Bool
  requires 0 <= _2
  requires _2 <= 18446744073709551615
  requires true
  requires 0 <= _2 &&
    _2 <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(_1)
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(_1,
    _2),
    true]


function snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(self: Ref): Snap$struct$m_VecWrapperBool
  requires acc(struct$m_VecWrapperBool(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapperBool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperBool((unfolding acc(struct$m_VecWrapperBool(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate struct$m_VecWrapperBool(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self: Ref) 

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_doors1() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var __t45: Bool
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var __t53: Bool
  var __t54: Bool
  var __t55: Bool
  var __t56: Bool
  var __t57: Bool
  var __t58: Bool
  var __t59: Bool
  var __t60: Bool
  var __t61: Bool
  var __t62: Bool
  var __t63: Bool
  var __t64: Bool
  var __t65: Bool
  var __t66: Bool
  var __t67: Bool
  var __t68: Bool
  var __t69: Bool
  var __t70: Bool
  var __t71: Bool
  var __t72: Bool
  var _1: Ref
  var _2: Ref
  var _5: Ref
  var _6: Int
  var _8: Ref
  var _12: Ref
  var _16: Ref
  var _19: Ref
  var _21: Ref
  var _22: Int
  var _24: Ref
  var _28: Ref
  var _32: Ref
  var _35: Ref
  var _36: Ref
  var _37: Ref
  var _38: Int
  var _39: Ref
  var _40: Ref
  var _41: Ref
  var _42: Ref
  var _43: Int
  var _44: Ref
  var _45: Ref
  var _46: Ref
  var _47: Int
  var _48: Ref
  var _52: Ref
  var _56: Ref
  var _57: Ref
  var _58: Int
  var _59: Int
  var _60: Ref
  var _61: Ref
  var _63: Ref
  var _67: Ref
  var _72: Ref
  var _77: Ref
  var _78: Ref
  var _79: Int
  var _80: Ref
  var _81: Int
  var _82: Ref
  var _83: Ref
  var _84: Int
  var _85: Int
  var _86: Ref
  var _t90: Ref
  var _t91: Int
  
  label start
  // ========== start ==========
  // Def path: "100_doors::doors1"
  // Span: tests/verify_overflow/pass/rosetta/100_doors.rs:81:1: 110:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  __t32 := false
  __t33 := false
  __t34 := false
  __t35 := false
  __t36 := false
  __t37 := false
  __t38 := false
  __t39 := false
  __t40 := false
  __t41 := false
  __t42 := false
  __t43 := false
  // Preconditions:
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_1)
  // [mir] _1 = VecWrapperBool::new(const false, const 100_usize) -> [return: bb1, unwind: bb54]
  label l0
  _t90 := builtin$havoc_ref()
  inhale acc(bool(_t90), write)
  _t91 := builtin$havoc_int()
  inhale _t91 >= 0 && 18446744073709551615 >= _t91
  assert true
  exhale acc(bool(_t90), write) &&
    (_t91 >= 0 && 18446744073709551615 >= _t91)
  _1 := builtin$havoc_ref()
  inhale acc(struct$m_VecWrapperBool(_1), write)
  inhale true
  inhale f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==
    old[l0](100) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==>
      f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1),
      _0_quant_0) ==
      old[l0](false)))
  label l1
  // ========== bb1 ==========
  __t1 := true
  // [mir] FakeRead(ForLet(None), _1)
  // [mir] StorageLive(_2)
  // [mir] _2 = const 1_usize
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_int, write)
  _2.val_int := 1
  // [mir] FakeRead(ForLet(None), _2)
  // [mir] StorageLive(_3)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb53]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _2
  _6 := builtin$havoc_int()
  _6 := _2.val_int
  label l2
  // [mir] _5 = Lt(move _6, const 100_usize)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < 100
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb33, otherwise: bb4]
  __t44 := _5.val_bool
  if (__t44) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l4 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb6, otherwise: bb5]
  __t45 := _8.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  // obtain acc(struct$m_VecWrapperBool(_1), write)
  assert (unfolding acc(usize(_2), write) in _2.val_int) < 100 &&
    (1 <= (unfolding acc(usize(_2), write) in _2.val_int) &&
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==
    100)
  assert true
  exhale acc(usize(_2), write) && acc(struct$m_VecWrapperBool(_1), write)
  _12 := builtin$havoc_ref()
  _16 := builtin$havoc_ref()
  _19 := builtin$havoc_ref()
  _2 := builtin$havoc_ref()
  _21 := builtin$havoc_ref()
  _22 := builtin$havoc_int()
  _24 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _35 := builtin$havoc_ref()
  _36 := builtin$havoc_ref()
  _37 := builtin$havoc_ref()
  _38 := builtin$havoc_int()
  _39 := builtin$havoc_ref()
  _40 := builtin$havoc_ref()
  _41 := builtin$havoc_ref()
  _42 := builtin$havoc_ref()
  _43 := builtin$havoc_int()
  _44 := builtin$havoc_ref()
  _45 := builtin$havoc_ref()
  _46 := builtin$havoc_ref()
  _47 := builtin$havoc_int()
  _48 := builtin$havoc_ref()
  _5 := builtin$havoc_ref()
  _52 := builtin$havoc_ref()
  _6 := builtin$havoc_int()
  _8 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t46 := builtin$havoc_bool()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t49 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_bool()
  __t58 := builtin$havoc_bool()
  __t59 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t60 := builtin$havoc_bool()
  __t61 := builtin$havoc_bool()
  __t62 := builtin$havoc_bool()
  __t63 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(usize(_2), write) && acc(struct$m_VecWrapperBool(_1), write)
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb53]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _2
  _6 := builtin$havoc_int()
  unfold acc(usize(_2), write)
  _6 := _2.val_int
  label l5
  // [mir] _5 = Lt(move _6, const 100_usize)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < 100
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb33, otherwise: bb4]
  __t46 := _5.val_bool
  if (__t46) {
    goto loop2_start
  }
  goto bb1
  
  label bb1
  // ========== l6 ==========
  // MIR edge bb3 --> bb33
  goto end_of_method
  
  label l3
  // ========== l13 ==========
  // MIR edge bb15 --> bb31
  goto end_of_method
  
  label l4
  // ========== l14 ==========
  // MIR edge bb15 --> bb16
  // ========== loop2_group3_loop14_group2b_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb18, otherwise: bb17]
  __t53 := _24.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb14
  inhale _19.val_int <= 100 &&
    (1 <= _19.val_int &&
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==
    100)
  // ========== loop2_group3_loop14_group3_bb18 ==========
  __t14 := true
  // [mir] _23 = const ()
  // [mir] goto -> bb19
  // ========== loop2_group3_loop14_group3_bb19 ==========
  __t15 := true
  // [mir] StorageDead(_24)
  // [mir] StorageDead(_23)
  // [mir] StorageLive(_27)
  // [mir] StorageLive(_28)
  // [mir] _28 = const false
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_bool, write)
  _28.val_bool := false
  // [mir] switchInt(move _28) -> [0: bb21, otherwise: bb20]
  __t54 := _28.val_bool
  // Ignore default target bb20, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_group3_bb21 ==========
  __t16 := true
  // [mir] _27 = const ()
  // [mir] goto -> bb22
  // ========== loop2_group3_loop14_group3_bb22 ==========
  __t17 := true
  // [mir] StorageDead(_28)
  // [mir] StorageDead(_27)
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] _32 = const false
  _32 := builtin$havoc_ref()
  inhale acc(_32.val_bool, write)
  _32.val_bool := false
  // [mir] switchInt(move _32) -> [0: bb24, otherwise: bb23]
  __t55 := _32.val_bool
  // Ignore default target bb23, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_group3_bb24 ==========
  __t18 := true
  // [mir] _31 = const ()
  // [mir] goto -> bb25
  // ========== loop2_group3_loop14_group3_bb25 ==========
  __t19 := true
  // [mir] StorageDead(_32)
  // [mir] StorageDead(_31)
  // [mir] StorageLive(_35)
  // [mir] StorageLive(_36)
  // [mir] _36 = &_1
  _36 := builtin$havoc_ref()
  inhale acc(_36.val_ref, write)
  _36.val_ref := _1
  exhale acc(struct$m_VecWrapperBool(_1), write - read$())
  inhale acc(struct$m_VecWrapperBool(_36.val_ref), read$())
  label l15
  // [mir] StorageLive(_37)
  // [mir] StorageLive(_38)
  // [mir] _38 = _19
  _38 := builtin$havoc_int()
  _38 := _19.val_int
  label l16
  // [mir] _39 = CheckedSub(_38, const 1_usize)
  _39 := builtin$havoc_ref()
  inhale acc(_39.tuple_0, write)
  inhale acc(_39.tuple_0.val_int, write)
  inhale acc(_39.tuple_1, write)
  inhale acc(_39.tuple_1.val_bool, write)
  _39.tuple_0.val_int := _38 - 1
  _39.tuple_1.val_bool := _38 - 1 < 0 || _38 - 1 > 18446744073709551615
  // [mir] assert(!move (_39.1: bool), "attempt to compute `{} - {}`, which would overflow", move _38, const 1_usize) -> [success: bb26, unwind: bb53]
  __t56 := _39.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t56
  // ========== loop2_group3_loop14_group3_bb26 ==========
  __t20 := true
  // [mir] _37 = move (_39.0: usize)
  _37 := _39.tuple_0
  label l17
  // [mir] StorageDead(_38)
  // [mir] _35 = VecWrapperBool::lookup(move _36, move _37) -> [return: bb27, unwind: bb53]
  label l18
  _35 := builtin$havoc_ref()
  inhale acc(bool(_35), write)
  inhale (unfolding acc(bool(_35), write) in _35.val_bool) ==
    f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_36.val_ref),
    _37.val_int)
  // transfer perm _36.val_ref --> old[l18](_36.val_ref) // unchecked: false
  // ========== l19 ==========
  // MIR edge bb26 --> bb27
  // Expire borrows
  // expire_borrows ReborrowingDAG(L20,L6,)

  if (__t19 && __t20) {
    // expire loan L6
    // transfer perm old[l18](_36.val_ref) --> old[l15](_36.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperBool(old[l15](_36.val_ref)), read$())
    inhale acc(struct$m_VecWrapperBool(_1), write - read$())
  }
  // ========== loop2_group3_loop14_group3_bb27 ==========
  __t21 := true
  // [mir] StorageDead(_37)
  // [mir] StorageDead(_36)
  // [mir] FakeRead(ForLet(None), _35)
  // [mir] StorageLive(_40)
  // [mir] StorageLive(_41)
  // [mir] _41 = &mut _1
  _41 := builtin$havoc_ref()
  inhale acc(_41.val_ref, write)
  _41.val_ref := _1
  label l20
  // [mir] StorageLive(_42)
  // [mir] StorageLive(_43)
  // [mir] _43 = _19
  _43 := builtin$havoc_int()
  _43 := _19.val_int
  label l21
  // [mir] _44 = CheckedSub(_43, const 1_usize)
  _44 := builtin$havoc_ref()
  inhale acc(_44.tuple_0, write)
  inhale acc(_44.tuple_0.val_int, write)
  inhale acc(_44.tuple_1, write)
  inhale acc(_44.tuple_1.val_bool, write)
  _44.tuple_0.val_int := _43 - 1
  _44.tuple_1.val_bool := _43 - 1 < 0 || _43 - 1 > 18446744073709551615
  // [mir] assert(!move (_44.1: bool), "attempt to compute `{} - {}`, which would overflow", move _43, const 1_usize) -> [success: bb28, unwind: bb53]
  __t57 := _44.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t57
  // ========== loop2_group3_loop14_group3_bb28 ==========
  __t22 := true
  // [mir] _42 = move (_44.0: usize)
  _42 := _44.tuple_0
  label l22
  // [mir] StorageDead(_43)
  // [mir] StorageLive(_45)
  // [mir] StorageLive(_46)
  // [mir] _46 = _35
  _46 := builtin$havoc_ref()
  inhale acc(_46.val_bool, write)
  unfold acc(bool(_35), write)
  _46.val_bool := _35.val_bool
  label l23
  // [mir] _45 = Not(move _46)
  _45 := builtin$havoc_ref()
  inhale acc(_45.val_bool, write)
  _45.val_bool := !_46.val_bool
  // [mir] StorageDead(_46)
  // [mir] _40 = VecWrapperBool::store(move _41, move _42, move _45) -> [return: bb29, unwind: bb53]
  label l24
  assert 0 <= _42.val_int &&
    _42.val_int <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_41.val_ref))
  assert true
  fold acc(usize(_42), write)
  fold acc(bool(_45), write)
  exhale acc(_41.val_ref, write) &&
    (acc(struct$m_VecWrapperBool(_41.val_ref), write) &&
    (acc(usize(_42), write) && acc(bool(_45), write)))
  _40 := builtin$havoc_ref()
  inhale acc(struct$m_VecWrapperBool(old[l24](_41.val_ref)), write)
  inhale acc(tuple0$(_40), write)
  inhale true
  inhale f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(old[l24](_41.val_ref))) ==
    old[l24](f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_41.val_ref))) &&
    (f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(old[l24](_41.val_ref)),
    old[l24](_42.val_int)) ==
    old[l24](_45.val_bool) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 <
      f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(old[l24](_41.val_ref)))) ||
      (!(_0_quant_0 == old[l24](_42.val_int)) ==>
      f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(old[l24](_41.val_ref)),
      _0_quant_0) ==
      old[l24](f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_41.val_ref),
      _0_quant_0))))))
  label l25
  // ========== l26 ==========
  // MIR edge bb28 --> bb29
  // Expire borrows
  // expire_borrows ReborrowingDAG(L19,L7,)

  // ========== loop2_group3_loop14_group3_bb29 ==========
  __t23 := true
  // [mir] StorageDead(_45)
  // [mir] StorageDead(_42)
  // [mir] StorageDead(_41)
  // [mir] StorageDead(_40)
  // [mir] StorageLive(_47)
  // [mir] _47 = _2
  _47 := builtin$havoc_int()
  unfold acc(usize(_2), write)
  _47 := _2.val_int
  label l27
  // [mir] _48 = CheckedAdd(_19, _47)
  _48 := builtin$havoc_ref()
  inhale acc(_48.tuple_0, write)
  inhale acc(_48.tuple_0.val_int, write)
  inhale acc(_48.tuple_1, write)
  inhale acc(_48.tuple_1.val_bool, write)
  _48.tuple_0.val_int := _19.val_int + _47
  _48.tuple_1.val_bool := _19.val_int + _47 < 0 ||
    _19.val_int + _47 > 18446744073709551615
  // [mir] assert(!move (_48.1: bool), "attempt to compute `{} + {}`, which would overflow", _19, move _47) -> [success: bb30, unwind: bb53]
  __t58 := _48.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t58
  // ========== loop2_group3_loop14_group3_bb30 ==========
  __t24 := true
  // [mir] _19 = move (_48.0: usize)
  _19 := _48.tuple_0
  label l28
  // [mir] StorageDead(_47)
  // [mir] _4 = const ()
  // [mir] StorageDead(_35)
  // [mir] StorageDead(_21)
  // [mir] goto -> bb14
  // ========== loop2_group3_loop14_group4_bb14 ==========
  // This is a loop head
  __t11 := true
  // [mir] falseUnwind -> [real: bb15, unwind: bb53]
  // ========== loop2_group3_loop14_group4_bb15 ==========
  __t12 := true
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] _22 = _19
  _22 := builtin$havoc_int()
  _22 := _19.val_int
  label l29
  // [mir] _21 = Le(move _22, const 100_usize)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_bool, write)
  _21.val_bool := _22 <= 100
  // [mir] StorageDead(_22)
  // [mir] switchInt(move _21) -> [0: bb31, otherwise: bb16]
  __t59 := _21.val_bool
  if (__t59) {
    goto loop2_group3_bb10
  }
  goto loop2_group2_bb4
  
  label l6
  // ========== l44 ==========
  // MIR edge bb36 --> bb51
  goto end_of_method
  
  label l7
  // ========== l45 ==========
  // MIR edge bb36 --> bb37
  // ========== loop35_group2b_bb37 ==========
  __t31 := true
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = const false
  _63 := builtin$havoc_ref()
  inhale acc(_63.val_bool, write)
  _63.val_bool := false
  // [mir] switchInt(move _63) -> [0: bb39, otherwise: bb38]
  __t67 := _63.val_bool
  // Ignore default target bb38, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop35_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb35
  inhale 0 <= (unfolding acc(usize(_56), write) in _56.val_int) &&
    ((unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) &&
    (_57.val_bool ==>
    (unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1))))
  // ========== loop35_group3_bb39 ==========
  __t32 := true
  // [mir] _62 = const ()
  // [mir] goto -> bb40
  // ========== loop35_group3_bb40 ==========
  __t33 := true
  // [mir] StorageDead(_63)
  // [mir] StorageDead(_62)
  // [mir] StorageLive(_66)
  // [mir] StorageLive(_67)
  // [mir] _67 = const false
  _67 := builtin$havoc_ref()
  inhale acc(_67.val_bool, write)
  _67.val_bool := false
  // [mir] switchInt(move _67) -> [0: bb42, otherwise: bb41]
  __t68 := _67.val_bool
  // Ignore default target bb41, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop35_group3_bb42 ==========
  __t34 := true
  // [mir] _66 = const ()
  // [mir] goto -> bb43
  // ========== loop35_group3_bb43 ==========
  __t35 := true
  // [mir] StorageDead(_67)
  // [mir] StorageDead(_66)
  // [mir] StorageLive(_71)
  // [mir] StorageLive(_72)
  // [mir] _72 = const false
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_bool, write)
  _72.val_bool := false
  // [mir] switchInt(move _72) -> [0: bb45, otherwise: bb44]
  __t69 := _72.val_bool
  // Ignore default target bb44, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop35_group3_bb45 ==========
  __t36 := true
  // [mir] _71 = const ()
  // [mir] goto -> bb46
  // ========== loop35_group3_bb46 ==========
  __t37 := true
  // [mir] StorageDead(_72)
  // [mir] StorageDead(_71)
  // [mir] StorageLive(_77)
  // [mir] StorageLive(_78)
  // [mir] _78 = &_1
  _78 := builtin$havoc_ref()
  inhale acc(_78.val_ref, write)
  _78.val_ref := _1
  exhale acc(struct$m_VecWrapperBool(_1), write - read$())
  inhale acc(struct$m_VecWrapperBool(_78.val_ref), read$())
  label l46
  // [mir] StorageLive(_79)
  // [mir] _79 = _56
  _79 := builtin$havoc_int()
  unfold acc(usize(_56), write)
  _79 := _56.val_int
  label l47
  // [mir] _77 = VecWrapperBool::lookup(move _78, move _79) -> [return: bb47, unwind: bb53]
  label l48
  _77 := builtin$havoc_ref()
  inhale acc(bool(_77), write)
  inhale (unfolding acc(bool(_77), write) in _77.val_bool) ==
    f_VecWrapperBool$$lookup__$TY$__Snap$struct$m_VecWrapperBool$$int$$$bool$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_78.val_ref),
    _79)
  // transfer perm _78.val_ref --> old[l48](_78.val_ref) // unchecked: false
  // ========== l49 ==========
  // MIR edge bb46 --> bb47
  // Expire borrows
  // expire_borrows ReborrowingDAG(L22,L15,)

  if (__t37 && __t37) {
    // expire loan L15
    // transfer perm old[l48](_78.val_ref) --> old[l46](_78.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperBool(old[l46](_78.val_ref)), read$())
    inhale acc(struct$m_VecWrapperBool(_1), write - read$())
  }
  // ========== loop35_group3_bb47 ==========
  __t38 := true
  // [mir] StorageDead(_79)
  // [mir] StorageDead(_78)
  // [mir] FakeRead(ForLet(None), _77)
  // [mir] StorageLive(_80)
  // [mir] StorageLive(_81)
  // [mir] _81 = _56
  _81 := builtin$havoc_int()
  _81 := _56.val_int
  label l50
  // [mir] StorageLive(_82)
  // [mir] _82 = _77
  _82 := builtin$havoc_ref()
  inhale acc(_82.val_bool, write)
  unfold acc(bool(_77), write)
  _82.val_bool := _77.val_bool
  label l51
  // [mir] _80 = print_door_state(move _81, move _82) -> [return: bb48, unwind: bb53]
  label l52
  assert true
  assert _81 >= 0 && 18446744073709551615 >= _81
  fold acc(bool(_82), write)
  exhale _81 >= 0 && 18446744073709551615 >= _81 && acc(bool(_82), write)
  _80 := builtin$havoc_ref()
  inhale acc(tuple0$(_80), write)
  inhale true
  label l53
  // ========== loop35_group3_bb48 ==========
  __t39 := true
  // [mir] StorageDead(_82)
  // [mir] StorageDead(_81)
  // [mir] StorageDead(_80)
  // [mir] _83 = CheckedAdd(_56, const 1_usize)
  _83 := builtin$havoc_ref()
  inhale acc(_83.tuple_0, write)
  inhale acc(_83.tuple_0.val_int, write)
  inhale acc(_83.tuple_1, write)
  inhale acc(_83.tuple_1.val_bool, write)
  _83.tuple_0.val_int := _56.val_int + 1
  _83.tuple_1.val_bool := _56.val_int + 1 < 0 ||
    _56.val_int + 1 > 18446744073709551615
  // [mir] assert(!move (_83.1: bool), "attempt to compute `{} + {}`, which would overflow", _56, const 1_usize) -> [success: bb49, unwind: bb53]
  __t70 := _83.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t70
  // ========== loop35_group3_bb49 ==========
  __t40 := true
  // [mir] _56 = move (_83.0: usize)
  _56 := _83.tuple_0
  label l54
  // [mir] StorageLive(_84)
  // [mir] _84 = _56
  _84 := builtin$havoc_int()
  _84 := _56.val_int
  label l55
  // [mir] StorageLive(_85)
  // [mir] StorageLive(_86)
  // [mir] _86 = &_1
  _86 := builtin$havoc_ref()
  inhale acc(_86.val_ref, write)
  _86.val_ref := _1
  exhale acc(struct$m_VecWrapperBool(_1), write - read$())
  inhale acc(struct$m_VecWrapperBool(_86.val_ref), read$())
  label l56
  // [mir] _85 = VecWrapperBool::len(move _86) -> [return: bb50, unwind: bb53]
  label l57
  _85 := builtin$havoc_int()
  inhale _85 >= 0 && 18446744073709551615 >= _85
  inhale _85 ==
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_86.val_ref))
  // transfer perm _86.val_ref --> old[l57](_86.val_ref) // unchecked: false
  // ========== l58 ==========
  // MIR edge bb49 --> bb50
  // Expire borrows
  // expire_borrows ReborrowingDAG(L21,L16,)

  if (__t40 && __t40) {
    // expire loan L16
    // transfer perm old[l57](_86.val_ref) --> old[l56](_86.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperBool(old[l56](_86.val_ref)), read$())
    inhale acc(struct$m_VecWrapperBool(_1), write - read$())
  }
  // ========== loop35_group3_bb50 ==========
  __t41 := true
  // [mir] StorageDead(_86)
  // [mir] _57 = Lt(move _84, move _85)
  inhale _85 >= 0 && 18446744073709551615 >= _85
  _57.val_bool := _84 < _85
  // [mir] StorageDead(_85)
  // [mir] StorageDead(_84)
  // [mir] _4 = const ()
  // [mir] StorageDead(_77)
  // [mir] StorageDead(_61)
  // [mir] goto -> bb35
  // ========== loop35_group4_bb35 ==========
  // This is a loop head
  __t29 := true
  // [mir] falseUnwind -> [real: bb36, unwind: bb53]
  // ========== loop35_group4_bb36 ==========
  __t30 := true
  // [mir] StorageLive(_61)
  // [mir] _61 = _57
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := _57.val_bool
  label l59
  // [mir] switchInt(move _61) -> [0: bb51, otherwise: bb37]
  __t71 := _61.val_bool
  if (__t71) {
    goto loop2_group3_bb7
  }
  goto loop2_group2b_bb4
  
  label loop2_group1_bb2
  // ========== l10 ==========
  // MIR edge bb15 --> bb31
  goto loop2_inv_pre
  
  label loop2_group1_bb3
  // ========== l11 ==========
  // MIR edge bb15 --> bb16
  // ========== loop2_group3_loop14_group2_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb18, otherwise: bb17]
  __t51 := _24.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb14)
  fold acc(usize(_19), write)
  // obtain acc(usize(_19), write)
  // obtain acc(struct$m_VecWrapperBool(_1), write)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), read)
  assert (unfolding acc(usize(_19), write) in _19.val_int) <= 100 &&
    (1 <= (unfolding acc(usize(_19), write) in _19.val_int) &&
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==
    100)
  assert true
  exhale acc(usize(_19), write) &&
    (acc(struct$m_VecWrapperBool(_1), write) && acc(usize(_2), read$()))
  _19 := builtin$havoc_ref()
  _21 := builtin$havoc_ref()
  _22 := builtin$havoc_int()
  _24 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _35 := builtin$havoc_ref()
  _36 := builtin$havoc_ref()
  _37 := builtin$havoc_ref()
  _38 := builtin$havoc_int()
  _39 := builtin$havoc_ref()
  _40 := builtin$havoc_ref()
  _41 := builtin$havoc_ref()
  _42 := builtin$havoc_ref()
  _43 := builtin$havoc_int()
  _44 := builtin$havoc_ref()
  _45 := builtin$havoc_ref()
  _46 := builtin$havoc_ref()
  _47 := builtin$havoc_int()
  _48 := builtin$havoc_ref()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_bool()
  __t58 := builtin$havoc_bool()
  __t59 := builtin$havoc_bool()
  __t60 := builtin$havoc_bool()
  // ========== loop2_group3_loop14_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb14
  inhale acc(usize(_19), write) &&
    (acc(struct$m_VecWrapperBool(_1), write) && acc(usize(_2), read$()))
  inhale true
  // ========== loop2_group3_loop14_group2a_bb14 ==========
  // This is a loop head
  __t11 := true
  // [mir] falseUnwind -> [real: bb15, unwind: bb53]
  // ========== loop2_group3_loop14_group2a_bb15 ==========
  __t12 := true
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] _22 = _19
  _22 := builtin$havoc_int()
  unfold acc(usize(_19), write)
  _22 := _19.val_int
  label l12
  // [mir] _21 = Le(move _22, const 100_usize)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_bool, write)
  _21.val_bool := _22 <= 100
  // [mir] StorageDead(_22)
  // [mir] switchInt(move _21) -> [0: bb31, otherwise: bb16]
  __t52 := _21.val_bool
  if (__t52) {
    goto l4
  }
  goto l3
  
  label loop2_group2_bb4
  // ========== l30 ==========
  // MIR edge bb15 --> bb31
  // ========== l62 ==========
  // drop Acc(old[l15](_36.val_ref), write) (Acc(old[l15](_36.val_ref), write))
  // drop Acc(_36.val_ref, write) (Acc(_36.val_ref, write))
  // drop Acc(_39.tuple_1.val_bool, write) (Acc(_39.tuple_1.val_bool, write))
  // drop Acc(_24.val_bool, write) (Acc(_24.val_bool, write))
  // drop Acc(_28.val_bool, write) (Acc(_28.val_bool, write))
  // drop Acc(_38.val_int, write) (Acc(_38.val_int, write))
  // drop Acc(_37.val_int, write) (Acc(_37.val_int, write))
  // drop Acc(_48.tuple_0, write) (Acc(_48.tuple_0, write))
  // drop Acc(_48.tuple_1.val_bool, write) (Acc(_48.tuple_1.val_bool, write))
  // drop Acc(_47.val_int, write) (Acc(_47.val_int, write))
  // drop Acc(_39.tuple_0, write) (Acc(_39.tuple_0, write))
  // drop Acc(_44.tuple_0, write) (Acc(_44.tuple_0, write))
  // drop Acc(_44.tuple_1.val_bool, write) (Acc(_44.tuple_1.val_bool, write))
  // drop Acc(_35.val_bool, write) (Acc(_35.val_bool, write))
  // drop Acc(_46.val_bool, write) (Acc(_46.val_bool, write))
  // drop Acc(_43.val_int, write) (Acc(_43.val_int, write))
  // drop Acc(_32.val_bool, write) (Acc(_32.val_bool, write))
  // drop Pred(_40, write) (Pred(_40, write))
  // drop Acc(_39.tuple_1, write) (Acc(_39.tuple_1, write))
  // drop Acc(_48.tuple_1, write) (Acc(_48.tuple_1, write))
  // drop Acc(_44.tuple_1, write) (Acc(_44.tuple_1, write))
  goto loop2_inv_pre
  
  label loop2_group2a_bb2
  // ========== l41 ==========
  // MIR edge bb36 --> bb51
  goto loop2_group3_bb6
  
  label loop2_group2a_bb3
  // ========== l42 ==========
  // MIR edge bb36 --> bb37
  // ========== loop35_group2_bb37 ==========
  __t31 := true
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = const false
  _63 := builtin$havoc_ref()
  inhale acc(_63.val_bool, write)
  _63.val_bool := false
  // [mir] switchInt(move _63) -> [0: bb39, otherwise: bb38]
  __t65 := _63.val_bool
  // Ignore default target bb38, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop35_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb35)
  fold acc(usize(_56), write)
  // obtain acc(usize(_56), write)
  fold acc(bool(_57), write)
  // obtain acc(bool(_57), write)
  // obtain acc(struct$m_VecWrapperBool(_1), read)
  assert 0 <= (unfolding acc(usize(_56), write) in _56.val_int) &&
    ((unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) &&
    ((unfolding acc(bool(_57), write) in _57.val_bool) ==>
    (unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1))))
  assert true
  exhale acc(usize(_56), write) &&
    (acc(bool(_57), write) && acc(struct$m_VecWrapperBool(_1), read$()))
  _56 := builtin$havoc_ref()
  _61 := builtin$havoc_ref()
  _63 := builtin$havoc_ref()
  _67 := builtin$havoc_ref()
  _72 := builtin$havoc_ref()
  _77 := builtin$havoc_ref()
  _78 := builtin$havoc_ref()
  _79 := builtin$havoc_int()
  _80 := builtin$havoc_ref()
  _81 := builtin$havoc_int()
  _82 := builtin$havoc_ref()
  _83 := builtin$havoc_ref()
  _84 := builtin$havoc_int()
  _85 := builtin$havoc_int()
  _86 := builtin$havoc_ref()
  __t29 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t66 := builtin$havoc_bool()
  __t67 := builtin$havoc_bool()
  __t68 := builtin$havoc_bool()
  __t69 := builtin$havoc_bool()
  __t70 := builtin$havoc_bool()
  __t71 := builtin$havoc_bool()
  __t72 := builtin$havoc_bool()
  // ========== loop35_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb35
  inhale acc(usize(_56), write) &&
    (acc(bool(_57), write) && acc(struct$m_VecWrapperBool(_1), read$()))
  inhale true
  // ========== loop35_group2a_bb35 ==========
  // This is a loop head
  __t29 := true
  // [mir] falseUnwind -> [real: bb36, unwind: bb53]
  // ========== loop35_group2a_bb36 ==========
  __t30 := true
  // [mir] StorageLive(_61)
  // [mir] _61 = _57
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  unfold acc(bool(_57), write)
  _61.val_bool := _57.val_bool
  label l43
  // [mir] switchInt(move _61) -> [0: bb51, otherwise: bb37]
  __t66 := _61.val_bool
  if (__t66) {
    goto l7
  }
  goto l6
  
  label loop2_group2b_bb4
  // ========== l60 ==========
  // MIR edge bb36 --> bb51
  // ========== l65 ==========
  // drop Acc(old[l56](_86.val_ref), write) (Acc(old[l56](_86.val_ref), write))
  // drop Acc(_83.tuple_0, write) (Acc(_83.tuple_0, write))
  // drop Acc(_78.val_ref, write) (Acc(_78.val_ref, write))
  // drop Acc(_86.val_ref, write) (Acc(_86.val_ref, write))
  // drop Acc(_79.val_int, write) (Acc(_79.val_int, write))
  // drop Acc(_77.val_bool, write) (Acc(_77.val_bool, write))
  // drop Acc(_84.val_int, write) (Acc(_84.val_int, write))
  // drop Acc(_67.val_bool, write) (Acc(_67.val_bool, write))
  // drop Acc(old[l46](_78.val_ref), write) (Acc(old[l46](_78.val_ref), write))
  // drop Acc(_85.val_int, write) (Acc(_85.val_int, write))
  // drop Acc(_72.val_bool, write) (Acc(_72.val_bool, write))
  // drop Acc(_63.val_bool, write) (Acc(_63.val_bool, write))
  // drop Acc(_83.tuple_1.val_bool, write) (Acc(_83.tuple_1.val_bool, write))
  // drop Pred(_80, write) (Pred(_80, write))
  // drop Acc(_83.tuple_1, write) (Acc(_83.tuple_1, write))
  goto loop2_group3_bb6
  
  label loop2_group3_bb10
  // ========== l31 ==========
  // MIR edge bb15 --> bb16
  // ========== loop2_group3_loop14_group5_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb18, otherwise: bb17]
  __t60 := _24.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb14)
  fold acc(usize(_19), write)
  // obtain acc(usize(_19), write)
  // obtain acc(struct$m_VecWrapperBool(_1), write)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), read)
  assert (unfolding acc(usize(_19), write) in _19.val_int) <= 100 &&
    (1 <= (unfolding acc(usize(_19), write) in _19.val_int) &&
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==
    100)
  assert true
  exhale acc(usize(_19), write) &&
    (acc(struct$m_VecWrapperBool(_1), write) && acc(usize(_2), read$()))
  inhale false
  goto end_of_method
  
  label loop2_group3_bb6
  // ========== bb51 ==========
  __t42 := true
  // [mir] StorageLive(_88)
  // [mir] _0 = const ()
  // [mir] StorageDead(_88)
  // [mir] StorageDead(_61)
  // [mir] StorageDead(_57)
  // [mir] StorageDead(_56)
  // [mir] StorageDead(_2)
  // [mir] drop(_1) -> [return: bb52, unwind: bb54]
  // ========== bb52 ==========
  __t43 := true
  // [mir] StorageDead(_1)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l63
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_group3_bb7
  // ========== l61 ==========
  // MIR edge bb36 --> bb37
  // ========== loop35_group5_bb37 ==========
  __t31 := true
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = const false
  _63 := builtin$havoc_ref()
  inhale acc(_63.val_bool, write)
  _63.val_bool := false
  // [mir] switchInt(move _63) -> [0: bb39, otherwise: bb38]
  __t72 := _63.val_bool
  // Ignore default target bb38, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop35_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb35)
  fold acc(usize(_56), write)
  // obtain acc(usize(_56), write)
  fold acc(bool(_57), write)
  // obtain acc(bool(_57), write)
  // obtain acc(struct$m_VecWrapperBool(_1), read)
  assert 0 <= (unfolding acc(usize(_56), write) in _56.val_int) &&
    ((unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) &&
    ((unfolding acc(bool(_57), write) in _57.val_bool) ==>
    (unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1))))
  assert true
  exhale acc(usize(_56), write) &&
    (acc(bool(_57), write) && acc(struct$m_VecWrapperBool(_1), read$()))
  inhale false
  goto end_of_method
  
  label loop2_group3_bb9
  // ========== l35 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb6, otherwise: bb5]
  __t63 := _8.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  // obtain acc(struct$m_VecWrapperBool(_1), write)
  assert (unfolding acc(usize(_2), write) in _2.val_int) < 100 &&
    (1 <= (unfolding acc(usize(_2), write) in _2.val_int) &&
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==
    100)
  assert true
  exhale acc(usize(_2), write) && acc(struct$m_VecWrapperBool(_1), write)
  inhale false
  goto end_of_method
  
  label loop2_inv_post_fnspc
  // ========== bb33 ==========
  __t27 := true
  // [mir] StorageLive(_54)
  // [mir] _3 = const ()
  // [mir] StorageDead(_54)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_3)
  // [mir] StorageLive(_56)
  // [mir] _56 = const 0_usize
  _56 := builtin$havoc_ref()
  inhale acc(_56.val_int, write)
  _56.val_int := 0
  // [mir] FakeRead(ForLet(None), _56)
  // [mir] StorageLive(_57)
  // [mir] StorageLive(_58)
  // [mir] _58 = _56
  _58 := builtin$havoc_int()
  _58 := _56.val_int
  label l36
  // [mir] StorageLive(_59)
  // [mir] StorageLive(_60)
  // [mir] _60 = &_1
  _60 := builtin$havoc_ref()
  inhale acc(_60.val_ref, write)
  _60.val_ref := _1
  exhale acc(struct$m_VecWrapperBool(_1), write - read$())
  inhale acc(struct$m_VecWrapperBool(_60.val_ref), read$())
  label l37
  // [mir] _59 = VecWrapperBool::len(move _60) -> [return: bb34, unwind: bb53]
  label l38
  _59 := builtin$havoc_int()
  inhale _59 >= 0 && 18446744073709551615 >= _59
  inhale _59 ==
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_60.val_ref))
  // transfer perm _60.val_ref --> old[l38](_60.val_ref) // unchecked: false
  // ========== l39 ==========
  // MIR edge bb33 --> bb34
  // Expire borrows
  // expire_borrows ReborrowingDAG(L23,L8,)

  if (__t27 && __t27) {
    // expire loan L8
    // transfer perm old[l38](_60.val_ref) --> old[l37](_60.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperBool(old[l37](_60.val_ref)), read$())
    inhale acc(struct$m_VecWrapperBool(_1), write - read$())
  }
  // ========== bb34 ==========
  __t28 := true
  // [mir] StorageDead(_60)
  // [mir] _57 = Lt(move _58, move _59)
  _57 := builtin$havoc_ref()
  inhale acc(_57.val_bool, write)
  inhale _59 >= 0 && 18446744073709551615 >= _59
  _57.val_bool := _58 < _59
  // [mir] StorageDead(_59)
  // [mir] StorageDead(_58)
  // [mir] FakeRead(ForLet(None), _57)
  // [mir] goto -> bb35
  // ========== loop35_start ==========
  // ========== loop35_group1_bb35 ==========
  // This is a loop head
  __t29 := true
  // [mir] falseUnwind -> [real: bb36, unwind: bb53]
  // ========== loop35_group1_bb36 ==========
  __t30 := true
  // [mir] StorageLive(_61)
  // [mir] _61 = _57
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := _57.val_bool
  label l40
  // [mir] switchInt(move _61) -> [0: bb51, otherwise: bb37]
  __t64 := _61.val_bool
  if (__t64) {
    goto loop2_group2a_bb3
  }
  goto loop2_group2a_bb2
  
  label loop2_inv_post_perm
  // ========== l34 ==========
  // MIR edge bb3 --> bb33
  // ========== l64 ==========
  // drop Acc(_52.tuple_0, write) (Acc(_52.tuple_0, write))
  // drop Acc(_16.val_bool, write) (Acc(_16.val_bool, write))
  // drop Acc(_21.val_bool, write) (Acc(_21.val_bool, write))
  // drop Acc(_8.val_bool, write) (Acc(_8.val_bool, write))
  // drop Acc(_19.val_int, write) (Acc(_19.val_int, write))
  // drop Acc(_52.tuple_1.val_bool, write) (Acc(_52.tuple_1.val_bool, write))
  // drop Acc(_22.val_int, write) (Acc(_22.val_int, write))
  // drop Acc(_12.val_bool, write) (Acc(_12.val_bool, write))
  // drop Acc(_52.tuple_1, write) (Acc(_52.tuple_1, write))
  goto loop2_inv_post_fnspc
  
  label loop2_inv_pre
  // ========== loop2_group3_bb31 ==========
  __t25 := true
  // [mir] StorageLive(_50)
  // [mir] _20 = const ()
  // [mir] StorageDead(_50)
  // [mir] StorageDead(_21)
  // [mir] StorageDead(_20)
  // [mir] _52 = CheckedAdd(_2, const 1_usize)
  _52 := builtin$havoc_ref()
  inhale acc(_52.tuple_0, write)
  inhale acc(_52.tuple_0.val_int, write)
  inhale acc(_52.tuple_1, write)
  inhale acc(_52.tuple_1.val_bool, write)
  _52.tuple_0.val_int := _2.val_int + 1
  _52.tuple_1.val_bool := _2.val_int + 1 < 0 ||
    _2.val_int + 1 > 18446744073709551615
  // [mir] assert(!move (_52.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb32, unwind: bb53]
  __t61 := _52.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t61
  // ========== loop2_group3_bb32 ==========
  __t26 := true
  // [mir] _2 = move (_52.0: usize)
  _2 := _52.tuple_0
  label l32
  // [mir] _4 = const ()
  // [mir] StorageDead(_19)
  // [mir] StorageDead(_5)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb53]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _2
  _6 := builtin$havoc_int()
  _6 := _2.val_int
  label l33
  // [mir] _5 = Lt(move _6, const 100_usize)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < 100
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb33, otherwise: bb4]
  __t62 := _5.val_bool
  if (__t62) {
    goto loop2_group3_bb9
  }
  goto loop2_inv_post_perm
  
  label loop2_start
  // ========== l7 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2b_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb6, otherwise: bb5]
  __t47 := _8.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  inhale _2.val_int < 100 &&
    (1 <= _2.val_int &&
    f_VecWrapperBool$$len__$TY$__Snap$struct$m_VecWrapperBool$$int$(snap$__$TY$__Snap$struct$m_VecWrapperBool$struct$m_VecWrapperBool$Snap$struct$m_VecWrapperBool(_1)) ==
    100)
  // ========== loop2_group3_bb6 ==========
  __t5 := true
  // [mir] _7 = const ()
  // [mir] goto -> bb7
  // ========== loop2_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb9, otherwise: bb8]
  __t48 := _12.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb9 ==========
  __t7 := true
  // [mir] _11 = const ()
  // [mir] goto -> bb10
  // ========== loop2_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_12)
  // [mir] StorageDead(_11)
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] _16 = const false
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := false
  // [mir] switchInt(move _16) -> [0: bb12, otherwise: bb11]
  __t49 := _16.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb12 ==========
  __t9 := true
  // [mir] _15 = const ()
  // [mir] goto -> bb13
  // ========== loop2_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_15)
  // [mir] StorageLive(_19)
  // [mir] _19 = _2
  _19 := builtin$havoc_ref()
  inhale acc(_19.val_int, write)
  _19.val_int := _2.val_int
  label l8
  // [mir] FakeRead(ForLet(None), _19)
  // [mir] StorageLive(_20)
  // [mir] goto -> bb14
  // ========== loop2_group3_loop14_start ==========
  // ========== loop2_group3_loop14_group1_bb14 ==========
  // This is a loop head
  __t11 := true
  // [mir] falseUnwind -> [real: bb15, unwind: bb53]
  // ========== loop2_group3_loop14_group1_bb15 ==========
  __t12 := true
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] _22 = _19
  _22 := builtin$havoc_int()
  _22 := _19.val_int
  label l9
  // [mir] _21 = Le(move _22, const 100_usize)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_bool, write)
  _21.val_bool := _22 <= 100
  // [mir] StorageDead(_22)
  // [mir] switchInt(move _21) -> [0: bb31, otherwise: bb16]
  __t50 := _21.val_bool
  if (__t50) {
    goto loop2_group1_bb3
  }
  goto loop2_group1_bb2
  
  label return
  // ========== l3 ==========
  // MIR edge bb3 --> bb33
  goto loop2_inv_post_fnspc
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
