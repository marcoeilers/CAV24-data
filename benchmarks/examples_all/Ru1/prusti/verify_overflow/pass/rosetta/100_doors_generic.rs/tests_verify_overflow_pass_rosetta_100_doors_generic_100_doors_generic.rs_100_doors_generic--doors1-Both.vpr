domain MirrorDomain  {
  
  function mirror_simple$f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(_1: Snap$struct$m_VecWrapper$bool): Int 
}

domain Snap$struct$m_VecWrapper$bool  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool(_0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapper$bool 
  
  function Snap$struct$m_VecWrapper$bool$0$field$f$v__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapper$bool): Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapper$bool$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapper$bool$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapper$bool$0$field$f$v__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool(_0)) }
      Snap$struct$m_VecWrapper$bool$0$field$f$v__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$v: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(_1: Snap$struct$m_VecWrapper$bool): Int
  requires true
  requires true
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(_1),
    true]


function snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(self: Ref): Snap$struct$m_VecWrapper$bool
  requires acc(struct$m_VecWrapper$bool(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapper$bool$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapper$bool((unfolding acc(struct$m_VecWrapper$bool(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate struct$m_VecWrapper$bool(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$bool$struct$m_std$$alloc$$Global(self: Ref) 

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_doors1() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var __t45: Bool
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var __t53: Bool
  var __t54: Bool
  var __t55: Bool
  var __t56: Bool
  var _old$l27$0: Ref
  var __t57: Bool
  var __t58: Bool
  var __t59: Bool
  var __t60: Bool
  var __t61: Bool
  var __t62: Bool
  var __t63: Bool
  var __t64: Bool
  var __t65: Bool
  var __t66: Bool
  var __t67: Bool
  var __t68: Bool
  var __t69: Bool
  var __t70: Bool
  var _1: Ref
  var _2: Ref
  var _5: Ref
  var _6: Int
  var _8: Ref
  var _12: Ref
  var _16: Ref
  var _19: Ref
  var _21: Ref
  var _22: Int
  var _24: Ref
  var _28: Ref
  var _32: Ref
  var _35: Ref
  var _36: Ref
  var _37: Ref
  var _38: Ref
  var _39: Int
  var _40: Ref
  var _41: Ref
  var _42: Ref
  var _43: Ref
  var _44: Int
  var _45: Ref
  var _46: Ref
  var _47: Int
  var _48: Ref
  var _52: Ref
  var _56: Ref
  var _57: Ref
  var _58: Int
  var _59: Int
  var _60: Ref
  var _61: Ref
  var _63: Ref
  var _67: Ref
  var _71: Ref
  var _72: Ref
  var _73: Ref
  var _74: Int
  var _75: Ref
  var _76: Int
  var _77: Ref
  var _78: Ref
  var _79: Int
  var _80: Int
  var _81: Ref
  var _t85: Ref
  var _t86: Int
  
  label start
  // ========== start ==========
  // Def path: "100_doors_generic::doors1"
  // Span: tests/verify_overflow/pass/rosetta/100_doors_generic.rs:65:1: 94:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  __t32 := false
  __t33 := false
  __t34 := false
  __t35 := false
  __t36 := false
  __t37 := false
  __t38 := false
  __t39 := false
  __t40 := false
  __t41 := false
  __t42 := false
  // Preconditions:
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_1)
  // [mir] _1 = VecWrapper::<bool>::new(const false, const 100_usize) -> [return: bb1, unwind: bb52]
  label l0
  _t85 := builtin$havoc_ref()
  inhale acc(bool(_t85), write)
  _t86 := builtin$havoc_int()
  inhale _t86 >= 0 && 18446744073709551615 >= _t86
  assert true
  exhale acc(bool(_t85), write) &&
    (_t86 >= 0 && 18446744073709551615 >= _t86)
  _1 := builtin$havoc_ref()
  inhale acc(struct$m_VecWrapper$bool(_1), write)
  inhale true
  inhale f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1)) ==
    old[l0](100)
  label l1
  // ========== bb1 ==========
  __t1 := true
  // [mir] FakeRead(ForLet(None), _1)
  // [mir] StorageLive(_2)
  // [mir] _2 = const 1_usize
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_int, write)
  _2.val_int := 1
  // [mir] FakeRead(ForLet(None), _2)
  // [mir] StorageLive(_3)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb51]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _2
  _6 := builtin$havoc_int()
  _6 := _2.val_int
  label l2
  // [mir] _5 = Lt(move _6, const 100_usize)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < 100
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb34, otherwise: bb4]
  __t43 := _5.val_bool
  if (__t43) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l4 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb6, otherwise: bb5]
  __t44 := _8.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  // obtain acc(struct$m_VecWrapper$bool(_1), write)
  assert (unfolding acc(usize(_2), write) in _2.val_int) < 100 &&
    (1 <= (unfolding acc(usize(_2), write) in _2.val_int) &&
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1)) ==
    100)
  assert true
  exhale acc(usize(_2), write) && acc(struct$m_VecWrapper$bool(_1), write)
  _12 := builtin$havoc_ref()
  _16 := builtin$havoc_ref()
  _19 := builtin$havoc_ref()
  _2 := builtin$havoc_ref()
  _21 := builtin$havoc_ref()
  _22 := builtin$havoc_int()
  _24 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _35 := builtin$havoc_ref()
  _36 := builtin$havoc_ref()
  _37 := builtin$havoc_ref()
  _38 := builtin$havoc_ref()
  _39 := builtin$havoc_int()
  _40 := builtin$havoc_ref()
  _41 := builtin$havoc_ref()
  _42 := builtin$havoc_ref()
  _43 := builtin$havoc_ref()
  _44 := builtin$havoc_int()
  _45 := builtin$havoc_ref()
  _46 := builtin$havoc_ref()
  _47 := builtin$havoc_int()
  _48 := builtin$havoc_ref()
  _5 := builtin$havoc_ref()
  _52 := builtin$havoc_ref()
  _6 := builtin$havoc_int()
  _8 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t45 := builtin$havoc_bool()
  __t46 := builtin$havoc_bool()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t49 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_bool()
  __t58 := builtin$havoc_bool()
  __t59 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t60 := builtin$havoc_bool()
  __t61 := builtin$havoc_bool()
  __t62 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(usize(_2), write) && acc(struct$m_VecWrapper$bool(_1), write)
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb51]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _2
  _6 := builtin$havoc_int()
  unfold acc(usize(_2), write)
  _6 := _2.val_int
  label l5
  // [mir] _5 = Lt(move _6, const 100_usize)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < 100
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb34, otherwise: bb4]
  __t45 := _5.val_bool
  if (__t45) {
    goto loop2_start
  }
  goto bb1
  
  label bb1
  // ========== l6 ==========
  // MIR edge bb3 --> bb34
  goto end_of_method
  
  label l3
  // ========== l13 ==========
  // MIR edge bb15 --> bb32
  goto end_of_method
  
  label l4
  // ========== l14 ==========
  // MIR edge bb15 --> bb16
  // ========== loop2_group3_loop14_group2b_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb18, otherwise: bb17]
  __t52 := _24.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb14
  inhale _19.val_int <= 100 &&
    (1 <= _19.val_int &&
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1)) ==
    100)
  // ========== loop2_group3_loop14_group3_bb18 ==========
  __t14 := true
  // [mir] _23 = const ()
  // [mir] goto -> bb19
  // ========== loop2_group3_loop14_group3_bb19 ==========
  __t15 := true
  // [mir] StorageDead(_24)
  // [mir] StorageDead(_23)
  // [mir] StorageLive(_27)
  // [mir] StorageLive(_28)
  // [mir] _28 = const false
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_bool, write)
  _28.val_bool := false
  // [mir] switchInt(move _28) -> [0: bb21, otherwise: bb20]
  __t53 := _28.val_bool
  // Ignore default target bb20, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_group3_bb21 ==========
  __t16 := true
  // [mir] _27 = const ()
  // [mir] goto -> bb22
  // ========== loop2_group3_loop14_group3_bb22 ==========
  __t17 := true
  // [mir] StorageDead(_28)
  // [mir] StorageDead(_27)
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] _32 = const false
  _32 := builtin$havoc_ref()
  inhale acc(_32.val_bool, write)
  _32.val_bool := false
  // [mir] switchInt(move _32) -> [0: bb24, otherwise: bb23]
  __t54 := _32.val_bool
  // Ignore default target bb23, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_group3_bb24 ==========
  __t18 := true
  // [mir] _31 = const ()
  // [mir] goto -> bb25
  // ========== loop2_group3_loop14_group3_bb25 ==========
  __t19 := true
  // [mir] StorageDead(_32)
  // [mir] StorageDead(_31)
  // [mir] StorageLive(_35)
  // [mir] StorageLive(_36)
  // [mir] StorageLive(_37)
  // [mir] _37 = &_1
  _37 := builtin$havoc_ref()
  inhale acc(_37.val_ref, write)
  _37.val_ref := _1
  exhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  inhale acc(struct$m_VecWrapper$bool(_37.val_ref), read$())
  label l15
  // [mir] StorageLive(_38)
  // [mir] StorageLive(_39)
  // [mir] _39 = _19
  _39 := builtin$havoc_int()
  _39 := _19.val_int
  label l16
  // [mir] _40 = CheckedSub(_39, const 1_usize)
  _40 := builtin$havoc_ref()
  inhale acc(_40.tuple_0, write)
  inhale acc(_40.tuple_0.val_int, write)
  inhale acc(_40.tuple_1, write)
  inhale acc(_40.tuple_1.val_bool, write)
  _40.tuple_0.val_int := _39 - 1
  _40.tuple_1.val_bool := _39 - 1 < 0 || _39 - 1 > 18446744073709551615
  // [mir] assert(!move (_40.1: bool), "attempt to compute `{} - {}`, which would overflow", move _39, const 1_usize) -> [success: bb26, unwind: bb51]
  __t55 := _40.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t55
  // ========== loop2_group3_loop14_group3_bb26 ==========
  __t20 := true
  // [mir] _38 = move (_40.0: usize)
  _38 := _40.tuple_0
  label l17
  // [mir] StorageDead(_39)
  // [mir] _36 = VecWrapper::<bool>::index(move _37, move _38) -> [return: bb27, unwind: bb51]
  label l18
  assert 0 <= _38.val_int &&
    _38.val_int <
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_37.val_ref))
  assert true
  fold acc(usize(_38), write)
  exhale acc(_37.val_ref, write) && acc(usize(_38), write)
  _36 := builtin$havoc_ref()
  inhale acc(_36.val_ref, write) && acc(bool(_36.val_ref), read$())
  // transfer perm _37.val_ref --> old[l18](_37.val_ref) // unchecked: true
  inhale true
  label l19
  // ========== loop2_group3_loop14_group3_bb27 ==========
  __t21 := true
  // [mir] StorageDead(_38)
  // [mir] StorageDead(_37)
  // [mir] _35 = <&bool as std::ops::Not>::not(move _36) -> [return: bb28, unwind: bb51]
  label l20
  assert true
  exhale acc(_36.val_ref, write)
  _35 := builtin$havoc_ref()
  inhale acc(bool(_35), write)
  // transfer perm _36.val_ref --> old[l20](_36.val_ref) // unchecked: true
  inhale true
  label l21
  // ========== l22 ==========
  // MIR edge bb27 --> bb28
  // Expire borrows
  // expire_borrows ReborrowingDAG(L17,L18,L19,L6,)

  if (__t19 && (__t20 && (__t20 && __t21))) {
    // expire loan L6
    // transfer perm old[l18](_37.val_ref) --> old[l15](_37.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapper$bool(old[l15](_37.val_ref)), read$())
    inhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  }
  // ========== loop2_group3_loop14_group3_bb28 ==========
  __t22 := true
  // [mir] StorageDead(_36)
  // [mir] FakeRead(ForLet(None), _35)
  // [mir] StorageLive(_41)
  // [mir] StorageLive(_42)
  // [mir] _42 = &mut _1
  _42 := builtin$havoc_ref()
  inhale acc(_42.val_ref, write)
  _42.val_ref := _1
  label l23
  // [mir] StorageLive(_43)
  // [mir] StorageLive(_44)
  // [mir] _44 = _19
  _44 := builtin$havoc_int()
  _44 := _19.val_int
  label l24
  // [mir] _45 = CheckedSub(_44, const 1_usize)
  _45 := builtin$havoc_ref()
  inhale acc(_45.tuple_0, write)
  inhale acc(_45.tuple_0.val_int, write)
  inhale acc(_45.tuple_1, write)
  inhale acc(_45.tuple_1.val_bool, write)
  _45.tuple_0.val_int := _44 - 1
  _45.tuple_1.val_bool := _44 - 1 < 0 || _44 - 1 > 18446744073709551615
  // [mir] assert(!move (_45.1: bool), "attempt to compute `{} - {}`, which would overflow", move _44, const 1_usize) -> [success: bb29, unwind: bb51]
  __t56 := _45.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t56
  // ========== loop2_group3_loop14_group3_bb29 ==========
  __t23 := true
  // [mir] _43 = move (_45.0: usize)
  _43 := _45.tuple_0
  label l25
  // [mir] StorageDead(_44)
  // [mir] _41 = VecWrapper::<bool>::index_mut(move _42, move _43) -> [return: bb30, unwind: bb51]
  label l26
  assert 0 <= _43.val_int &&
    _43.val_int <
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_42.val_ref))
  assert true
  fold acc(usize(_43), write)
  exhale acc(_42.val_ref, write) &&
    (acc(struct$m_VecWrapper$bool(_42.val_ref), write) &&
    acc(usize(_43), write))
  _41 := builtin$havoc_ref()
  inhale acc(_41.val_ref, write) && acc(bool(_41.val_ref), write)
  inhale true
  label l27
  // ========== loop2_group3_loop14_group3_bb30 ==========
  __t24 := true
  // [mir] StorageDead(_43)
  // [mir] StorageDead(_42)
  // [mir] FakeRead(ForLet(None), _41)
  // [mir] StorageLive(_46)
  // [mir] _46 = _35
  _46 := builtin$havoc_ref()
  inhale acc(_46.val_bool, write)
  unfold acc(bool(_35), write)
  _46.val_bool := _35.val_bool
  label l28
  // [mir] (*_41) = move _46
  _41.val_ref := _46
  label l29
  // expire_borrows ReborrowingDAG(L20,L21,L7,)

  if (__t23) {
    // expire loan L20
    _old$l27$0 := _41.val_ref
    inhale acc(DeadBorrowToken$(20), write) && acc(bool(_old$l27$0), write) --*
      acc(struct$m_VecWrapper$bool(old[l26](_42.val_ref)), write) &&
      f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(old[l26](_42.val_ref))) ==
      old[l26](f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_42.val_ref)))
    fold acc(bool(_old$l27$0), write)
    inhale acc(DeadBorrowToken$(20), write)
    apply acc(DeadBorrowToken$(20), write) && acc(bool(_old$l27$0), write) --*
      acc(struct$m_VecWrapper$bool(old[l26](_42.val_ref)), write) &&
      f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(old[l26](_42.val_ref))) ==
      old[l26](f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_42.val_ref)))
  }
  // [mir] StorageDead(_46)
  // [mir] StorageLive(_47)
  // [mir] _47 = _2
  _47 := builtin$havoc_int()
  unfold acc(usize(_2), write)
  _47 := _2.val_int
  label l30
  // [mir] _48 = CheckedAdd(_19, _47)
  _48 := builtin$havoc_ref()
  inhale acc(_48.tuple_0, write)
  inhale acc(_48.tuple_0.val_int, write)
  inhale acc(_48.tuple_1, write)
  inhale acc(_48.tuple_1.val_bool, write)
  _48.tuple_0.val_int := _19.val_int + _47
  _48.tuple_1.val_bool := _19.val_int + _47 < 0 ||
    _19.val_int + _47 > 18446744073709551615
  // [mir] assert(!move (_48.1: bool), "attempt to compute `{} + {}`, which would overflow", _19, move _47) -> [success: bb31, unwind: bb51]
  __t57 := _48.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t57
  // ========== loop2_group3_loop14_group3_bb31 ==========
  __t25 := true
  // [mir] _19 = move (_48.0: usize)
  _19 := _48.tuple_0
  label l31
  // [mir] StorageDead(_47)
  // [mir] _4 = const ()
  // [mir] StorageDead(_41)
  // [mir] StorageDead(_35)
  // [mir] StorageDead(_21)
  // [mir] goto -> bb14
  // ========== loop2_group3_loop14_group4_bb14 ==========
  // This is a loop head
  __t11 := true
  // [mir] falseUnwind -> [real: bb15, unwind: bb51]
  // ========== loop2_group3_loop14_group4_bb15 ==========
  __t12 := true
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] _22 = _19
  _22 := builtin$havoc_int()
  _22 := _19.val_int
  label l32
  // [mir] _21 = Le(move _22, const 100_usize)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_bool, write)
  _21.val_bool := _22 <= 100
  // [mir] StorageDead(_22)
  // [mir] switchInt(move _21) -> [0: bb32, otherwise: bb16]
  __t58 := _21.val_bool
  if (__t58) {
    goto loop2_group3_bb10
  }
  goto loop2_group2_bb4
  
  label l6
  // ========== l47 ==========
  // MIR edge bb37 --> bb49
  goto end_of_method
  
  label l7
  // ========== l48 ==========
  // MIR edge bb37 --> bb38
  // ========== loop36_group2b_bb38 ==========
  __t32 := true
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = const false
  _63 := builtin$havoc_ref()
  inhale acc(_63.val_bool, write)
  _63.val_bool := false
  // [mir] switchInt(move _63) -> [0: bb40, otherwise: bb39]
  __t66 := _63.val_bool
  // Ignore default target bb39, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop36_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb36
  inhale 0 <= (unfolding acc(usize(_56), write) in _56.val_int) &&
    (unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1))
  // ========== loop36_group3_bb40 ==========
  __t33 := true
  // [mir] _62 = const ()
  // [mir] goto -> bb41
  // ========== loop36_group3_bb41 ==========
  __t34 := true
  // [mir] StorageDead(_63)
  // [mir] StorageDead(_62)
  // [mir] StorageLive(_66)
  // [mir] StorageLive(_67)
  // [mir] _67 = const false
  _67 := builtin$havoc_ref()
  inhale acc(_67.val_bool, write)
  _67.val_bool := false
  // [mir] switchInt(move _67) -> [0: bb43, otherwise: bb42]
  __t67 := _67.val_bool
  // Ignore default target bb42, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop36_group3_bb43 ==========
  __t35 := true
  // [mir] _66 = const ()
  // [mir] goto -> bb44
  // ========== loop36_group3_bb44 ==========
  __t36 := true
  // [mir] StorageDead(_67)
  // [mir] StorageDead(_66)
  // [mir] StorageLive(_71)
  // [mir] StorageLive(_72)
  // [mir] StorageLive(_73)
  // [mir] _73 = &_1
  _73 := builtin$havoc_ref()
  inhale acc(_73.val_ref, write)
  _73.val_ref := _1
  exhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  inhale acc(struct$m_VecWrapper$bool(_73.val_ref), read$())
  label l49
  // [mir] StorageLive(_74)
  // [mir] _74 = _56
  _74 := builtin$havoc_int()
  unfold acc(usize(_56), write)
  _74 := _56.val_int
  label l50
  // [mir] _72 = VecWrapper::<bool>::index(move _73, move _74) -> [return: bb45, unwind: bb51]
  label l51
  assert 0 <= _74 &&
    _74 <
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_73.val_ref))
  assert true
  assert _74 >= 0 && 18446744073709551615 >= _74
  exhale acc(_73.val_ref, write) &&
    (_74 >= 0 && 18446744073709551615 >= _74)
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_ref, write) && acc(bool(_72.val_ref), read$())
  // transfer perm _73.val_ref --> old[l51](_73.val_ref) // unchecked: true
  inhale true
  label l52
  // ========== loop36_group3_bb45 ==========
  __t37 := true
  // [mir] StorageDead(_74)
  // [mir] StorageDead(_73)
  // [mir] _71 = (*_72)
  _71 := builtin$havoc_ref()
  inhale acc(_71.val_bool, write)
  unfold acc(bool(_72.val_ref), read$())
  _71.val_bool := _72.val_ref.val_bool
  label l53
  // expire_borrows ReborrowingDAG(L23,L24,L12,)

  if (__t36 && (__t36 && __t36)) {
    // expire loan L12
    // transfer perm old[l51](_73.val_ref) --> old[l49](_73.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapper$bool(old[l49](_73.val_ref)), read$())
    inhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  }
  // [mir] FakeRead(ForLet(None), _71)
  // [mir] StorageDead(_72)
  // [mir] StorageLive(_75)
  // [mir] StorageLive(_76)
  // [mir] _76 = _56
  _76 := builtin$havoc_int()
  _76 := _56.val_int
  label l54
  // [mir] StorageLive(_77)
  // [mir] _77 = _71
  _77 := builtin$havoc_ref()
  inhale acc(_77.val_bool, write)
  _77.val_bool := _71.val_bool
  label l55
  // [mir] _75 = print_door_state(move _76, move _77) -> [return: bb46, unwind: bb51]
  label l56
  assert true
  assert _76 >= 0 && 18446744073709551615 >= _76
  fold acc(bool(_77), write)
  exhale _76 >= 0 && 18446744073709551615 >= _76 && acc(bool(_77), write)
  _75 := builtin$havoc_ref()
  inhale acc(tuple0$(_75), write)
  inhale true
  label l57
  // ========== loop36_group3_bb46 ==========
  __t38 := true
  // [mir] StorageDead(_77)
  // [mir] StorageDead(_76)
  // [mir] StorageDead(_75)
  // [mir] _78 = CheckedAdd(_56, const 1_usize)
  _78 := builtin$havoc_ref()
  inhale acc(_78.tuple_0, write)
  inhale acc(_78.tuple_0.val_int, write)
  inhale acc(_78.tuple_1, write)
  inhale acc(_78.tuple_1.val_bool, write)
  _78.tuple_0.val_int := _56.val_int + 1
  _78.tuple_1.val_bool := _56.val_int + 1 < 0 ||
    _56.val_int + 1 > 18446744073709551615
  // [mir] assert(!move (_78.1: bool), "attempt to compute `{} + {}`, which would overflow", _56, const 1_usize) -> [success: bb47, unwind: bb51]
  __t68 := _78.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t68
  // ========== loop36_group3_bb47 ==========
  __t39 := true
  // [mir] _56 = move (_78.0: usize)
  _56 := _78.tuple_0
  label l58
  // [mir] StorageLive(_79)
  // [mir] _79 = _56
  _79 := builtin$havoc_int()
  _79 := _56.val_int
  label l59
  // [mir] StorageLive(_80)
  // [mir] StorageLive(_81)
  // [mir] _81 = &_1
  _81 := builtin$havoc_ref()
  inhale acc(_81.val_ref, write)
  _81.val_ref := _1
  exhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  inhale acc(struct$m_VecWrapper$bool(_81.val_ref), read$())
  label l60
  // [mir] _80 = VecWrapper::<bool>::len(move _81) -> [return: bb48, unwind: bb51]
  label l61
  _80 := builtin$havoc_int()
  inhale _80 >= 0 && 18446744073709551615 >= _80
  inhale _80 ==
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_81.val_ref))
  // transfer perm _81.val_ref --> old[l61](_81.val_ref) // unchecked: false
  // ========== l62 ==========
  // MIR edge bb47 --> bb48
  // Expire borrows
  // expire_borrows ReborrowingDAG(L16,L13,)

  if (__t39 && __t39) {
    // expire loan L13
    // transfer perm old[l61](_81.val_ref) --> old[l60](_81.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapper$bool(old[l60](_81.val_ref)), read$())
    inhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  }
  // ========== loop36_group3_bb48 ==========
  __t40 := true
  // [mir] StorageDead(_81)
  // [mir] _57 = Lt(move _79, move _80)
  inhale _80 >= 0 && 18446744073709551615 >= _80
  _57.val_bool := _79 < _80
  // [mir] StorageDead(_80)
  // [mir] StorageDead(_79)
  // [mir] _4 = const ()
  // [mir] StorageDead(_71)
  // [mir] StorageDead(_61)
  // [mir] goto -> bb36
  // ========== loop36_group4_bb36 ==========
  // This is a loop head
  __t30 := true
  // [mir] falseUnwind -> [real: bb37, unwind: bb51]
  // ========== loop36_group4_bb37 ==========
  __t31 := true
  // [mir] StorageLive(_61)
  // [mir] _61 = _57
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := _57.val_bool
  label l63
  // [mir] switchInt(move _61) -> [0: bb49, otherwise: bb38]
  __t69 := _61.val_bool
  if (__t69) {
    goto loop2_group3_bb7
  }
  goto loop2_group2b_bb4
  
  label loop2_group1_bb2
  // ========== l10 ==========
  // MIR edge bb15 --> bb32
  goto loop2_inv_pre
  
  label loop2_group1_bb3
  // ========== l11 ==========
  // MIR edge bb15 --> bb16
  // ========== loop2_group3_loop14_group2_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb18, otherwise: bb17]
  __t50 := _24.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb14)
  fold acc(usize(_19), write)
  // obtain acc(usize(_19), write)
  // obtain acc(struct$m_VecWrapper$bool(_1), write)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), read)
  assert (unfolding acc(usize(_19), write) in _19.val_int) <= 100 &&
    (1 <= (unfolding acc(usize(_19), write) in _19.val_int) &&
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1)) ==
    100)
  assert true
  exhale acc(usize(_19), write) &&
    (acc(struct$m_VecWrapper$bool(_1), write) && acc(usize(_2), read$()))
  _19 := builtin$havoc_ref()
  _21 := builtin$havoc_ref()
  _22 := builtin$havoc_int()
  _24 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _35 := builtin$havoc_ref()
  _36 := builtin$havoc_ref()
  _37 := builtin$havoc_ref()
  _38 := builtin$havoc_ref()
  _39 := builtin$havoc_int()
  _40 := builtin$havoc_ref()
  _41 := builtin$havoc_ref()
  _42 := builtin$havoc_ref()
  _43 := builtin$havoc_ref()
  _44 := builtin$havoc_int()
  _45 := builtin$havoc_ref()
  _46 := builtin$havoc_ref()
  _47 := builtin$havoc_int()
  _48 := builtin$havoc_ref()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_bool()
  __t58 := builtin$havoc_bool()
  __t59 := builtin$havoc_bool()
  // ========== loop2_group3_loop14_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb14
  inhale acc(usize(_19), write) &&
    (acc(struct$m_VecWrapper$bool(_1), write) && acc(usize(_2), read$()))
  inhale true
  // ========== loop2_group3_loop14_group2a_bb14 ==========
  // This is a loop head
  __t11 := true
  // [mir] falseUnwind -> [real: bb15, unwind: bb51]
  // ========== loop2_group3_loop14_group2a_bb15 ==========
  __t12 := true
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] _22 = _19
  _22 := builtin$havoc_int()
  unfold acc(usize(_19), write)
  _22 := _19.val_int
  label l12
  // [mir] _21 = Le(move _22, const 100_usize)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_bool, write)
  _21.val_bool := _22 <= 100
  // [mir] StorageDead(_22)
  // [mir] switchInt(move _21) -> [0: bb32, otherwise: bb16]
  __t51 := _21.val_bool
  if (__t51) {
    goto l4
  }
  goto l3
  
  label loop2_group2_bb4
  // ========== l33 ==========
  // MIR edge bb15 --> bb32
  // ========== l66 ==========
  // drop Acc(_48.tuple_1.val_bool, write) (Acc(_48.tuple_1.val_bool, write))
  // drop Acc(_40.tuple_1.val_bool, write) (Acc(_40.tuple_1.val_bool, write))
  // drop Acc(_39.val_int, write) (Acc(_39.val_int, write))
  // drop Acc(_45.tuple_1.val_bool, write) (Acc(_45.tuple_1.val_bool, write))
  // drop Acc(_24.val_bool, write) (Acc(_24.val_bool, write))
  // drop Acc(_44.val_int, write) (Acc(_44.val_int, write))
  // drop Acc(_35.val_bool, write) (Acc(_35.val_bool, write))
  // drop Acc(_40.tuple_0, write) (Acc(_40.tuple_0, write))
  // drop Acc(_45.tuple_0, write) (Acc(_45.tuple_0, write))
  // drop Acc(_41.val_ref, write) (Acc(_41.val_ref, write))
  // drop Acc(_47.val_int, write) (Acc(_47.val_int, write))
  // drop Acc(_32.val_bool, write) (Acc(_32.val_bool, write))
  // drop Acc(_28.val_bool, write) (Acc(_28.val_bool, write))
  // drop Acc(_48.tuple_0, write) (Acc(_48.tuple_0, write))
  // drop Pred(old[l20](_36.val_ref), read) (Pred(old[l20](_36.val_ref), read))
  // drop Acc(_40.tuple_1, write) (Acc(_40.tuple_1, write))
  // drop Acc(_48.tuple_1, write) (Acc(_48.tuple_1, write))
  // drop Acc(_45.tuple_1, write) (Acc(_45.tuple_1, write))
  goto loop2_inv_pre
  
  label loop2_group2a_bb2
  // ========== l44 ==========
  // MIR edge bb37 --> bb49
  goto loop2_group3_bb6
  
  label loop2_group2a_bb3
  // ========== l45 ==========
  // MIR edge bb37 --> bb38
  // ========== loop36_group2_bb38 ==========
  __t32 := true
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = const false
  _63 := builtin$havoc_ref()
  inhale acc(_63.val_bool, write)
  _63.val_bool := false
  // [mir] switchInt(move _63) -> [0: bb40, otherwise: bb39]
  __t64 := _63.val_bool
  // Ignore default target bb39, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop36_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb36)
  fold acc(usize(_56), write)
  // obtain acc(usize(_56), write)
  fold acc(bool(_57), write)
  // obtain acc(bool(_57), write)
  // obtain acc(struct$m_VecWrapper$bool(_1), read)
  assert 0 <= (unfolding acc(usize(_56), write) in _56.val_int) &&
    (unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1))
  assert true
  exhale acc(usize(_56), write) &&
    (acc(bool(_57), write) && acc(struct$m_VecWrapper$bool(_1), read$()))
  _56 := builtin$havoc_ref()
  _61 := builtin$havoc_ref()
  _63 := builtin$havoc_ref()
  _67 := builtin$havoc_ref()
  _71 := builtin$havoc_ref()
  _72 := builtin$havoc_ref()
  _73 := builtin$havoc_ref()
  _74 := builtin$havoc_int()
  _75 := builtin$havoc_ref()
  _76 := builtin$havoc_int()
  _77 := builtin$havoc_ref()
  _78 := builtin$havoc_ref()
  _79 := builtin$havoc_int()
  _80 := builtin$havoc_int()
  _81 := builtin$havoc_ref()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t65 := builtin$havoc_bool()
  __t66 := builtin$havoc_bool()
  __t67 := builtin$havoc_bool()
  __t68 := builtin$havoc_bool()
  __t69 := builtin$havoc_bool()
  __t70 := builtin$havoc_bool()
  // ========== loop36_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb36
  inhale acc(usize(_56), write) &&
    (acc(bool(_57), write) && acc(struct$m_VecWrapper$bool(_1), read$()))
  inhale true
  // ========== loop36_group2a_bb36 ==========
  // This is a loop head
  __t30 := true
  // [mir] falseUnwind -> [real: bb37, unwind: bb51]
  // ========== loop36_group2a_bb37 ==========
  __t31 := true
  // [mir] StorageLive(_61)
  // [mir] _61 = _57
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  unfold acc(bool(_57), write)
  _61.val_bool := _57.val_bool
  label l46
  // [mir] switchInt(move _61) -> [0: bb49, otherwise: bb38]
  __t65 := _61.val_bool
  if (__t65) {
    goto l7
  }
  goto l6
  
  label loop2_group2b_bb4
  // ========== l64 ==========
  // MIR edge bb37 --> bb49
  // ========== l69 ==========
  // drop Acc(old[l60](_81.val_ref), write) (Acc(old[l60](_81.val_ref), write))
  // drop Acc(_63.val_bool, write) (Acc(_63.val_bool, write))
  // drop Acc(_80.val_int, write) (Acc(_80.val_int, write))
  // drop Acc(_81.val_ref, write) (Acc(_81.val_ref, write))
  // drop Acc(_78.tuple_0, write) (Acc(_78.tuple_0, write))
  // drop Acc(_72.val_ref.val_bool, read) (Acc(_72.val_ref.val_bool, read))
  // drop Acc(_67.val_bool, write) (Acc(_67.val_bool, write))
  // drop Acc(_78.tuple_1.val_bool, write) (Acc(_78.tuple_1.val_bool, write))
  // drop Acc(_71.val_bool, write) (Acc(_71.val_bool, write))
  // drop Acc(_79.val_int, write) (Acc(_79.val_int, write))
  // drop Pred(_75, write) (Pred(_75, write))
  // drop Acc(_78.tuple_1, write) (Acc(_78.tuple_1, write))
  // drop Acc(_72.val_ref, write) (Acc(_72.val_ref, write))
  goto loop2_group3_bb6
  
  label loop2_group3_bb10
  // ========== l34 ==========
  // MIR edge bb15 --> bb16
  // ========== loop2_group3_loop14_group5_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb18, otherwise: bb17]
  __t59 := _24.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_loop14_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb14)
  fold acc(usize(_19), write)
  // obtain acc(usize(_19), write)
  // obtain acc(struct$m_VecWrapper$bool(_1), write)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), read)
  assert (unfolding acc(usize(_19), write) in _19.val_int) <= 100 &&
    (1 <= (unfolding acc(usize(_19), write) in _19.val_int) &&
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1)) ==
    100)
  assert true
  exhale acc(usize(_19), write) &&
    (acc(struct$m_VecWrapper$bool(_1), write) && acc(usize(_2), read$()))
  inhale false
  goto end_of_method
  
  label loop2_group3_bb6
  // ========== bb49 ==========
  __t41 := true
  // [mir] StorageLive(_83)
  // [mir] _0 = const ()
  // [mir] StorageDead(_83)
  // [mir] StorageDead(_61)
  // [mir] StorageDead(_57)
  // [mir] StorageDead(_56)
  // [mir] StorageDead(_2)
  // [mir] drop(_1) -> [return: bb50, unwind: bb52]
  // ========== bb50 ==========
  __t42 := true
  // [mir] StorageDead(_1)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l67
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_group3_bb7
  // ========== l65 ==========
  // MIR edge bb37 --> bb38
  // ========== loop36_group5_bb38 ==========
  __t32 := true
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = const false
  _63 := builtin$havoc_ref()
  inhale acc(_63.val_bool, write)
  _63.val_bool := false
  // [mir] switchInt(move _63) -> [0: bb40, otherwise: bb39]
  __t70 := _63.val_bool
  // Ignore default target bb39, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop36_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb36)
  fold acc(usize(_56), write)
  // obtain acc(usize(_56), write)
  fold acc(bool(_57), write)
  // obtain acc(bool(_57), write)
  // obtain acc(struct$m_VecWrapper$bool(_1), read)
  assert 0 <= (unfolding acc(usize(_56), write) in _56.val_int) &&
    (unfolding acc(usize(_56), write) in _56.val_int) <
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1))
  assert true
  exhale acc(usize(_56), write) &&
    (acc(bool(_57), write) && acc(struct$m_VecWrapper$bool(_1), read$()))
  inhale false
  goto end_of_method
  
  label loop2_group3_bb9
  // ========== l38 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb6, otherwise: bb5]
  __t62 := _8.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  // obtain acc(struct$m_VecWrapper$bool(_1), write)
  assert (unfolding acc(usize(_2), write) in _2.val_int) < 100 &&
    (1 <= (unfolding acc(usize(_2), write) in _2.val_int) &&
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1)) ==
    100)
  assert true
  exhale acc(usize(_2), write) && acc(struct$m_VecWrapper$bool(_1), write)
  inhale false
  goto end_of_method
  
  label loop2_inv_post_fnspc
  // ========== bb34 ==========
  __t28 := true
  // [mir] StorageLive(_54)
  // [mir] _3 = const ()
  // [mir] StorageDead(_54)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_3)
  // [mir] StorageLive(_56)
  // [mir] _56 = const 0_usize
  _56 := builtin$havoc_ref()
  inhale acc(_56.val_int, write)
  _56.val_int := 0
  // [mir] FakeRead(ForLet(None), _56)
  // [mir] StorageLive(_57)
  // [mir] StorageLive(_58)
  // [mir] _58 = _56
  _58 := builtin$havoc_int()
  _58 := _56.val_int
  label l39
  // [mir] StorageLive(_59)
  // [mir] StorageLive(_60)
  // [mir] _60 = &_1
  _60 := builtin$havoc_ref()
  inhale acc(_60.val_ref, write)
  _60.val_ref := _1
  exhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  inhale acc(struct$m_VecWrapper$bool(_60.val_ref), read$())
  label l40
  // [mir] _59 = VecWrapper::<bool>::len(move _60) -> [return: bb35, unwind: bb51]
  label l41
  _59 := builtin$havoc_int()
  inhale _59 >= 0 && 18446744073709551615 >= _59
  inhale _59 ==
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_60.val_ref))
  // transfer perm _60.val_ref --> old[l41](_60.val_ref) // unchecked: false
  // ========== l42 ==========
  // MIR edge bb34 --> bb35
  // Expire borrows
  // expire_borrows ReborrowingDAG(L22,L8,)

  if (__t28 && __t28) {
    // expire loan L8
    // transfer perm old[l41](_60.val_ref) --> old[l40](_60.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapper$bool(old[l40](_60.val_ref)), read$())
    inhale acc(struct$m_VecWrapper$bool(_1), write - read$())
  }
  // ========== bb35 ==========
  __t29 := true
  // [mir] StorageDead(_60)
  // [mir] _57 = Lt(move _58, move _59)
  _57 := builtin$havoc_ref()
  inhale acc(_57.val_bool, write)
  inhale _59 >= 0 && 18446744073709551615 >= _59
  _57.val_bool := _58 < _59
  // [mir] StorageDead(_59)
  // [mir] StorageDead(_58)
  // [mir] FakeRead(ForLet(None), _57)
  // [mir] goto -> bb36
  // ========== loop36_start ==========
  // ========== loop36_group1_bb36 ==========
  // This is a loop head
  __t30 := true
  // [mir] falseUnwind -> [real: bb37, unwind: bb51]
  // ========== loop36_group1_bb37 ==========
  __t31 := true
  // [mir] StorageLive(_61)
  // [mir] _61 = _57
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := _57.val_bool
  label l43
  // [mir] switchInt(move _61) -> [0: bb49, otherwise: bb38]
  __t63 := _61.val_bool
  if (__t63) {
    goto loop2_group2a_bb3
  }
  goto loop2_group2a_bb2
  
  label loop2_inv_post_perm
  // ========== l37 ==========
  // MIR edge bb3 --> bb34
  // ========== l68 ==========
  // drop Acc(_52.tuple_0, write) (Acc(_52.tuple_0, write))
  // drop Acc(_16.val_bool, write) (Acc(_16.val_bool, write))
  // drop Acc(_21.val_bool, write) (Acc(_21.val_bool, write))
  // drop Acc(_8.val_bool, write) (Acc(_8.val_bool, write))
  // drop Acc(_19.val_int, write) (Acc(_19.val_int, write))
  // drop Acc(_52.tuple_1.val_bool, write) (Acc(_52.tuple_1.val_bool, write))
  // drop Acc(_22.val_int, write) (Acc(_22.val_int, write))
  // drop Acc(_12.val_bool, write) (Acc(_12.val_bool, write))
  // drop Acc(_52.tuple_1, write) (Acc(_52.tuple_1, write))
  goto loop2_inv_post_fnspc
  
  label loop2_inv_pre
  // ========== loop2_group3_bb32 ==========
  __t26 := true
  // [mir] StorageLive(_50)
  // [mir] _20 = const ()
  // [mir] StorageDead(_50)
  // [mir] StorageDead(_21)
  // [mir] StorageDead(_20)
  // [mir] _52 = CheckedAdd(_2, const 1_usize)
  _52 := builtin$havoc_ref()
  inhale acc(_52.tuple_0, write)
  inhale acc(_52.tuple_0.val_int, write)
  inhale acc(_52.tuple_1, write)
  inhale acc(_52.tuple_1.val_bool, write)
  _52.tuple_0.val_int := _2.val_int + 1
  _52.tuple_1.val_bool := _2.val_int + 1 < 0 ||
    _2.val_int + 1 > 18446744073709551615
  // [mir] assert(!move (_52.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_usize) -> [success: bb33, unwind: bb51]
  __t60 := _52.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t60
  // ========== loop2_group3_bb33 ==========
  __t27 := true
  // [mir] _2 = move (_52.0: usize)
  _2 := _52.tuple_0
  label l35
  // [mir] _4 = const ()
  // [mir] StorageDead(_19)
  // [mir] StorageDead(_5)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb51]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _2
  _6 := builtin$havoc_int()
  _6 := _2.val_int
  label l36
  // [mir] _5 = Lt(move _6, const 100_usize)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < 100
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb34, otherwise: bb4]
  __t61 := _5.val_bool
  if (__t61) {
    goto loop2_group3_bb9
  }
  goto loop2_inv_post_perm
  
  label loop2_start
  // ========== l7 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2b_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = const false
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := false
  // [mir] switchInt(move _8) -> [0: bb6, otherwise: bb5]
  __t46 := _8.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  inhale _2.val_int < 100 &&
    (1 <= _2.val_int &&
    f_VecWrapper$$$openang$T$closeang$$$len__$TY$__bool$Snap$struct$m_VecWrapper$bool$$int$(snap$__$TY$__Snap$struct$m_VecWrapper$bool$struct$m_VecWrapper$bool$Snap$struct$m_VecWrapper$bool(_1)) ==
    100)
  // ========== loop2_group3_bb6 ==========
  __t5 := true
  // [mir] _7 = const ()
  // [mir] goto -> bb7
  // ========== loop2_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = const false
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_bool, write)
  _12.val_bool := false
  // [mir] switchInt(move _12) -> [0: bb9, otherwise: bb8]
  __t47 := _12.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb9 ==========
  __t7 := true
  // [mir] _11 = const ()
  // [mir] goto -> bb10
  // ========== loop2_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_12)
  // [mir] StorageDead(_11)
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] _16 = const false
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := false
  // [mir] switchInt(move _16) -> [0: bb12, otherwise: bb11]
  __t48 := _16.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb12 ==========
  __t9 := true
  // [mir] _15 = const ()
  // [mir] goto -> bb13
  // ========== loop2_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_15)
  // [mir] StorageLive(_19)
  // [mir] _19 = _2
  _19 := builtin$havoc_ref()
  inhale acc(_19.val_int, write)
  _19.val_int := _2.val_int
  label l8
  // [mir] FakeRead(ForLet(None), _19)
  // [mir] StorageLive(_20)
  // [mir] goto -> bb14
  // ========== loop2_group3_loop14_start ==========
  // ========== loop2_group3_loop14_group1_bb14 ==========
  // This is a loop head
  __t11 := true
  // [mir] falseUnwind -> [real: bb15, unwind: bb51]
  // ========== loop2_group3_loop14_group1_bb15 ==========
  __t12 := true
  // [mir] StorageLive(_21)
  // [mir] StorageLive(_22)
  // [mir] _22 = _19
  _22 := builtin$havoc_int()
  _22 := _19.val_int
  label l9
  // [mir] _21 = Le(move _22, const 100_usize)
  _21 := builtin$havoc_ref()
  inhale acc(_21.val_bool, write)
  _21.val_bool := _22 <= 100
  // [mir] StorageDead(_22)
  // [mir] switchInt(move _21) -> [0: bb32, otherwise: bb16]
  __t49 := _21.val_bool
  if (__t49) {
    goto loop2_group1_bb3
  }
  goto loop2_group1_bb2
  
  label return
  // ========== l3 ==========
  // MIR edge bb3 --> bb34
  goto loop2_inv_post_fnspc
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
