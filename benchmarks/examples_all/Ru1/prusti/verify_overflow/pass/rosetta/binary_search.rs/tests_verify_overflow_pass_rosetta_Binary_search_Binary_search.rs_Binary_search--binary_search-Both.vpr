domain MirrorDomain  {
  
  function mirror_simple$f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool 
  
  function mirror_simple$f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool 
  
  function mirror_simple$f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function mirror_simple$f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1: Snap$struct$m_VecWrapperI32): Int 
  
  function mirror_simple$f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1: Snap$struct$m_VecWrapperI32,
  _2: Int): Int 
}

domain Snap$m_Ordering$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self: Snap$m_Ordering$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  function cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  function cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(): Snap$m_Ordering$_beg_$_end_ 
  
  axiom Snap$m_Ordering$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_Ordering$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(self) <=
      2)
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    0
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    1
  }
  
  axiom Snap$m_Ordering$_beg_$_end_$2$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()) ==
    2
  }
}

domain Snap$m_UsizeOption$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0: Int): Snap$m_UsizeOption$_beg_$_end_ 
  
  function Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self: Snap$m_UsizeOption$_beg_$_end_): Int 
  
  function cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(): Snap$m_UsizeOption$_beg_$_end_ 
  
  axiom Snap$m_UsizeOption$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_UsizeOption$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_l_0),
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_r_0) }
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_l_0) ==
      cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$discriminant_axiom {
    (forall _0: Int ::
      { cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0) }
      discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) ==
      0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) }
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$0$field$f$0$valid {
    (forall self: Snap$m_UsizeOption$_beg_$_end_ ::
      { Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) }
      0 <=
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) &&
      Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(self) <=
      18446744073709551615)
  }
  
  axiom Snap$m_UsizeOption$_beg_$_end_$1$discriminant_axiom {
    discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_()) ==
    1
  }
}

domain Snap$struct$m_VecWrapperI32  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapperI32 
  
  function Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapperI32): Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapperI32$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapperI32$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0)) }
      Snap$struct$m_VecWrapperI32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$v: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function builtin$unreach__$TY$__$int$$$int$(): Int
  requires false


function f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1),
    true]
{
  !f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1)
}

function f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1: Snap$m_UsizeOption$_beg_$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1),
    true]
{
  discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(_1) ==
  0
}

function f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1: Snap$m_UsizeOption$_beg_$_end_): Int
  requires true
  requires f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(_1)
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1),
    true]
{
  (discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(_1) ==
  0 ?
    Snap$m_UsizeOption$_beg_$_end_$0$field$f$0__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(_1) :
    builtin$unreach__$TY$__$int$$$int$())
}

function f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1: Snap$struct$m_VecWrapperI32): Int
  requires true
  requires true
  ensures 0 <= result
  ensures result <= 18446744073709551615
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1),
    true]


function f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1: Snap$struct$m_VecWrapperI32,
  _2: Int): Int
  requires 0 <= _2
  requires _2 <= 18446744073709551615
  requires true
  requires 0 <= _2 &&
    _2 < f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(_1)
  ensures -2147483648 <= result
  ensures result <= 2147483647
  ensures true
  ensures [result ==
    mirror_simple$f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(_1,
    _2),
    true]


function m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_Ordering$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 2
  ensures discriminant$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Ordering$_beg_$_end_$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
    self.discriminant)
}

function m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_UsizeOption$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_Ordering$_beg_$_end_$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_(self: Ref): Snap$m_Ordering$_beg_$_end_
  requires acc(m_Ordering$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  2 ?
    cons$2$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_() :
    ((unfolding acc(m_Ordering$_beg_$_end_(self), read$()) in
      self.discriminant) ==
    1 ?
      cons$1$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_() :
      cons$0$__$TY$__Snap$m_Ordering$_beg_$_end_$Snap$m_Ordering$_beg_$_end_()))
}

function snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(self: Ref): Snap$m_UsizeOption$_beg_$_end_
  requires acc(m_UsizeOption$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_() :
    cons$0$__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$$Snap$m_UsizeOption$_beg_$_end_((unfolding acc(m_UsizeOption$_beg_$_end_(self), read$()) in
      (unfolding acc(m_UsizeOption$_beg_$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))))
}

function snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(self: Ref): Snap$struct$m_VecWrapperI32
  requires acc(struct$m_VecWrapperI32(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapperI32$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32((unfolding acc(struct$m_VecWrapperI32(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_Ordering$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 2)
}

predicate m_UsizeOption$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_UsizeOption$_beg_$_end_Some(self.enum_Some), write)))
}

predicate m_UsizeOption$_beg_$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate struct$m_VecWrapperI32(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$i32$struct$m_std$$alloc$$Global(self: Ref) 

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_binary_search() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var _preserve$0: Ref
  var _preserve$1: Ref
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var __t45: Bool
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var _old$l17$0: Ref
  var __t53: Int
  var __t54: Bool
  var __t55: Bool
  var __t56: Bool
  var __t57: Bool
  var _old$pre$0: Ref
  var _old$pre$1: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Int
  var _11: Ref
  var _13: Ref
  var _19: Ref
  var _24: Ref
  var _28: Ref
  var _32: Ref
  var _36: Ref
  var _40: Ref
  var _46: Ref
  var _54: Ref
  var _59: Int
  var _60: Int
  var _61: Ref
  var _62: Ref
  var _63: Int
  var _64: Int
  var _65: Ref
  var _66: Ref
  var _67: Ref
  var _68: Int
  var _69: Ref
  var _70: Ref
  var _71: Ref
  var _72: Ref
  var _73: Int
  var _74: Ref
  var _75: Ref
  var _76: Int
  var _77: Ref
  var _78: Ref
  var _79: Ref
  var _80: Int
  var _81: Ref
  var _82: Ref
  
  label start
  // ========== start ==========
  // Def path: "Binary_search::binary_search"
  // Span: tests/verify_overflow/pass/rosetta/Binary_search.rs:165:1: 211:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  __t32 := false
  __t33 := false
  __t34 := false
  __t35 := false
  __t36 := false
  __t37 := false
  __t38 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), write) &&
    (acc(_2.val_ref, write) && acc(i32(_2.val_ref), write)))
  inhale true
  inhale (forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0))))
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = &(*_1)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  _4.val_ref := _1.val_ref
  exhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  inhale acc(struct$m_VecWrapperI32(_4.val_ref), read$())
  label l0
  // [mir] _3 = VecWrapperI32::len(move _4) -> [return: bb1, unwind: bb48]
  label l1
  _3 := builtin$havoc_ref()
  inhale acc(usize(_3), write)
  inhale (unfolding acc(usize(_3), write) in _3.val_int) ==
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_4.val_ref))
  // transfer perm _4.val_ref --> old[l1](_4.val_ref) // unchecked: false
  // ========== l2 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L32,L0,)

  if (__t0 && __t0) {
    // expire loan L0
    // transfer perm old[l1](_4.val_ref) --> old[l0](_4.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32(old[l0](_4.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32(_1.val_ref), write - read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_4)
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_5)
  // [mir] _5 = const 0_usize
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_int, write)
  _5.val_int := 0
  // [mir] FakeRead(ForLet(None), _5)
  // [mir] StorageLive(_6)
  // [mir] _6 = UsizeOption::None
  _6 := builtin$havoc_ref()
  inhale acc(m_UsizeOption$_beg_$_end_(_6), write)
  inhale m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(_6) ==
    1
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = _3
  _8 := builtin$havoc_int()
  unfold acc(usize(_3), write)
  _8 := _3.val_int
  label l3
  // [mir] _7 = Gt(move _8, const 0_usize)
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_bool, write)
  _7.val_bool := _8 > 0
  // [mir] StorageDead(_8)
  // [mir] FakeRead(ForLet(None), _7)
  // [mir] StorageLive(_9)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb48]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _7
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := _7.val_bool
  label l4
  // [mir] switchInt(move _11) -> [0: bb47, otherwise: bb4]
  __t39 := _11.val_bool
  if (__t39) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l6 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb6, otherwise: bb5]
  __t40 := _13.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  _preserve$0 := _1.val_ref
  _preserve$1 := _2.val_ref
  // obtain acc(m_UsizeOption$_beg_$_end_(_6), write)
  fold acc(usize(_5), write)
  // obtain acc(usize(_5), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(bool(_7), write)
  // obtain acc(bool(_7), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), write)
  // obtain acc(_2.val_ref, read)
  // obtain acc(i32(_2.val_ref), write)
  assert !((unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <
    0 ||
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <=
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) ==
    old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0)))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((unfolding acc(i32(_2.val_ref), write) in
      (unfolding acc(usize(_5), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _5.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <
          _2.val_ref.val_int)))) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    (unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_5), write) in
        (unfolding acc(i32(_2.val_ref), write) in
          (let _LET_0 ==
            (_5.val_int + _3.val_int < 0 ||
            _5.val_int + _3.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_0 &&
              (!(_5.val_int + _3.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              _2.val_ref.val_int <
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6))) ==
    (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))))))))))
  assert true
  assert _preserve$0 == _1.val_ref && _preserve$1 == _2.val_ref
  exhale acc(m_UsizeOption$_beg_$_end_(_6), write) &&
    (acc(usize(_5), write) &&
    (acc(usize(_3), write) &&
    (acc(bool(_7), write) &&
    (acc(_1.val_ref, read$()) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), write) &&
    (acc(_2.val_ref, read$()) && acc(i32(_2.val_ref), write)))))))
  _11 := builtin$havoc_ref()
  _13 := builtin$havoc_ref()
  _19 := builtin$havoc_ref()
  _24 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _3 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _36 := builtin$havoc_ref()
  _40 := builtin$havoc_ref()
  _46 := builtin$havoc_ref()
  _5 := builtin$havoc_ref()
  _54 := builtin$havoc_ref()
  _59 := builtin$havoc_int()
  _6 := builtin$havoc_ref()
  _60 := builtin$havoc_int()
  _61 := builtin$havoc_ref()
  _62 := builtin$havoc_ref()
  _63 := builtin$havoc_int()
  _64 := builtin$havoc_int()
  _65 := builtin$havoc_ref()
  _66 := builtin$havoc_ref()
  _67 := builtin$havoc_ref()
  _68 := builtin$havoc_int()
  _69 := builtin$havoc_ref()
  _7 := builtin$havoc_ref()
  _70 := builtin$havoc_ref()
  _71 := builtin$havoc_ref()
  _72 := builtin$havoc_ref()
  _73 := builtin$havoc_int()
  _74 := builtin$havoc_ref()
  _75 := builtin$havoc_ref()
  _76 := builtin$havoc_int()
  _77 := builtin$havoc_ref()
  _78 := builtin$havoc_ref()
  _79 := builtin$havoc_ref()
  _80 := builtin$havoc_int()
  _81 := builtin$havoc_ref()
  _82 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t42 := builtin$havoc_bool()
  __t43 := builtin$havoc_bool()
  __t44 := builtin$havoc_bool()
  __t45 := builtin$havoc_bool()
  __t46 := builtin$havoc_bool()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t49 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_int()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(m_UsizeOption$_beg_$_end_(_6), write) &&
    (acc(usize(_5), write) &&
    (acc(usize(_3), write) &&
    (acc(bool(_7), write) &&
    (acc(_1.val_ref, read$()) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), write) &&
    (acc(_2.val_ref, read$()) && acc(i32(_2.val_ref), write)))))))
  inhale _preserve$0 == _1.val_ref && _preserve$1 == _2.val_ref
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb48]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _7
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  unfold acc(bool(_7), write)
  _11.val_bool := _7.val_bool
  label l7
  // [mir] switchInt(move _11) -> [0: bb47, otherwise: bb4]
  __t41 := _11.val_bool
  if (__t41) {
    goto bb1
  }
  goto l2
  
  label bb1
  // ========== l9 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group2b_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb6, otherwise: bb5]
  __t42 := _13.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  inhale !((unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <
    0 ||
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <=
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) ==
    old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0)))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((unfolding acc(i32(_2.val_ref), write) in
      (unfolding acc(usize(_5), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _5.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <
          _2.val_ref.val_int)))) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    (unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_5), write) in
        (unfolding acc(i32(_2.val_ref), write) in
          (let _LET_1 ==
            (_5.val_int + _3.val_int < 0 ||
            _5.val_int + _3.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_1 &&
              (!(_5.val_int + _3.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              _2.val_ref.val_int <
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6))) ==
    (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))))))))))
  // ========== loop2_group3_bb6 ==========
  __t5 := true
  // [mir] _12 = const ()
  // [mir] goto -> bb7
  // ========== loop2_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] StorageLive(_18)
  // [mir] StorageLive(_19)
  // [mir] _19 = const false
  _19 := builtin$havoc_ref()
  inhale acc(_19.val_bool, write)
  _19.val_bool := false
  // [mir] switchInt(move _19) -> [0: bb9, otherwise: bb8]
  __t43 := _19.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb9 ==========
  __t7 := true
  // [mir] _18 = const ()
  // [mir] goto -> bb10
  // ========== loop2_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_19)
  // [mir] StorageDead(_18)
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = const false
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_bool, write)
  _24.val_bool := false
  // [mir] switchInt(move _24) -> [0: bb12, otherwise: bb11]
  __t44 := _24.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb12 ==========
  __t9 := true
  // [mir] _23 = const ()
  // [mir] goto -> bb13
  // ========== loop2_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_24)
  // [mir] StorageDead(_23)
  // [mir] StorageLive(_27)
  // [mir] StorageLive(_28)
  // [mir] _28 = const false
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_bool, write)
  _28.val_bool := false
  // [mir] switchInt(move _28) -> [0: bb15, otherwise: bb14]
  __t45 := _28.val_bool
  // Ignore default target bb14, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb15 ==========
  __t11 := true
  // [mir] _27 = const ()
  // [mir] goto -> bb16
  // ========== loop2_group3_bb16 ==========
  __t12 := true
  // [mir] StorageDead(_28)
  // [mir] StorageDead(_27)
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] _32 = const false
  _32 := builtin$havoc_ref()
  inhale acc(_32.val_bool, write)
  _32.val_bool := false
  // [mir] switchInt(move _32) -> [0: bb18, otherwise: bb17]
  __t46 := _32.val_bool
  // Ignore default target bb17, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb18 ==========
  __t13 := true
  // [mir] _31 = const ()
  // [mir] goto -> bb19
  // ========== loop2_group3_bb19 ==========
  __t14 := true
  // [mir] StorageDead(_32)
  // [mir] StorageDead(_31)
  // [mir] StorageLive(_35)
  // [mir] StorageLive(_36)
  // [mir] _36 = const false
  _36 := builtin$havoc_ref()
  inhale acc(_36.val_bool, write)
  _36.val_bool := false
  // [mir] switchInt(move _36) -> [0: bb21, otherwise: bb20]
  __t47 := _36.val_bool
  // Ignore default target bb20, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb21 ==========
  __t15 := true
  // [mir] _35 = const ()
  // [mir] goto -> bb22
  // ========== loop2_group3_bb22 ==========
  __t16 := true
  // [mir] StorageDead(_36)
  // [mir] StorageDead(_35)
  // [mir] StorageLive(_39)
  // [mir] StorageLive(_40)
  // [mir] _40 = const false
  _40 := builtin$havoc_ref()
  inhale acc(_40.val_bool, write)
  _40.val_bool := false
  // [mir] switchInt(move _40) -> [0: bb24, otherwise: bb23]
  __t48 := _40.val_bool
  // Ignore default target bb23, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb24 ==========
  __t17 := true
  // [mir] _39 = const ()
  // [mir] goto -> bb25
  // ========== loop2_group3_bb25 ==========
  __t18 := true
  // [mir] StorageDead(_40)
  // [mir] StorageDead(_39)
  // [mir] StorageLive(_45)
  // [mir] StorageLive(_46)
  // [mir] _46 = const false
  _46 := builtin$havoc_ref()
  inhale acc(_46.val_bool, write)
  _46.val_bool := false
  // [mir] switchInt(move _46) -> [0: bb27, otherwise: bb26]
  __t49 := _46.val_bool
  // Ignore default target bb26, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb27 ==========
  __t19 := true
  // [mir] _45 = const ()
  // [mir] goto -> bb28
  // ========== loop2_group3_bb28 ==========
  __t20 := true
  // [mir] StorageDead(_46)
  // [mir] StorageDead(_45)
  // [mir] StorageLive(_53)
  // [mir] StorageLive(_54)
  // [mir] _54 = const false
  _54 := builtin$havoc_ref()
  inhale acc(_54.val_bool, write)
  _54.val_bool := false
  // [mir] switchInt(move _54) -> [0: bb30, otherwise: bb29]
  __t50 := _54.val_bool
  // Ignore default target bb29, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_group3_bb30 ==========
  __t21 := true
  // [mir] _53 = const ()
  // [mir] goto -> bb31
  // ========== loop2_group3_bb31 ==========
  __t22 := true
  // [mir] StorageDead(_54)
  // [mir] StorageDead(_53)
  // [mir] StorageLive(_59)
  // [mir] StorageLive(_60)
  // [mir] _60 = _3
  _60 := builtin$havoc_int()
  unfold acc(usize(_3), write)
  _60 := _3.val_int
  label l10
  // [mir] _61 = Eq(const 2_usize, const 0_usize)
  _61 := builtin$havoc_ref()
  inhale acc(_61.val_bool, write)
  _61.val_bool := false
  // [mir] assert(!move _61, "attempt to divide `{}` by zero", _60) -> [success: bb32, unwind: bb48]
  __t51 := _61.val_bool
  // Rust assertion: attempt to divide by zero
  assert !__t51
  // ========== loop2_group3_bb32 ==========
  __t23 := true
  // [mir] _59 = Div(move _60, const 2_usize)
  _59 := builtin$havoc_int()
  _59 := _60 / 2
  // [mir] StorageDead(_60)
  // [mir] FakeRead(ForLet(None), _59)
  // [mir] StorageLive(_62)
  // [mir] StorageLive(_63)
  // [mir] _63 = _5
  _63 := builtin$havoc_int()
  unfold acc(usize(_5), write)
  _63 := _5.val_int
  label l11
  // [mir] StorageLive(_64)
  // [mir] _64 = _59
  _64 := builtin$havoc_int()
  _64 := _59
  label l12
  // [mir] _65 = CheckedAdd(_63, _64)
  _65 := builtin$havoc_ref()
  inhale acc(_65.tuple_0, write)
  inhale acc(_65.tuple_0.val_int, write)
  inhale acc(_65.tuple_1, write)
  inhale acc(_65.tuple_1.val_bool, write)
  _65.tuple_0.val_int := _63 + _64
  _65.tuple_1.val_bool := _63 + _64 < 0 || _63 + _64 > 18446744073709551615
  // [mir] assert(!move (_65.1: bool), "attempt to compute `{} + {}`, which would overflow", move _63, move _64) -> [success: bb33, unwind: bb48]
  __t52 := _65.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t52
  // ========== loop2_group3_bb33 ==========
  __t24 := true
  // [mir] _62 = move (_65.0: usize)
  _62 := _65.tuple_0
  label l13
  // [mir] StorageDead(_64)
  // [mir] StorageDead(_63)
  // [mir] FakeRead(ForLet(None), _62)
  // [mir] StorageLive(_66)
  // [mir] StorageLive(_67)
  // [mir] _67 = &mut (*_1)
  _67 := builtin$havoc_ref()
  inhale acc(_67.val_ref, write)
  _67.val_ref := _1.val_ref
  label l14
  // [mir] StorageLive(_68)
  // [mir] _68 = _62
  _68 := builtin$havoc_int()
  _68 := _62.val_int
  label l15
  // [mir] _66 = VecWrapperI32::borrow(move _67, move _68) -> [return: bb34, unwind: bb48]
  label l16
  assert 0 <= _68 &&
    _68 <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_67.val_ref))
  assert true
  assert _68 >= 0 && 18446744073709551615 >= _68
  exhale acc(_67.val_ref, write) &&
    (acc(struct$m_VecWrapperI32(_67.val_ref), write) &&
    (_68 >= 0 && 18446744073709551615 >= _68))
  _66 := builtin$havoc_ref()
  inhale acc(_66.val_ref, write) && acc(i32(_66.val_ref), write)
  inhale true
  inhale (unfolding acc(i32(_66.val_ref), write) in
      _66.val_ref.val_int ==
      old[l16](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_67.val_ref),
      _68)))
  label l17
  // ========== loop2_group3_bb34 ==========
  __t25 := true
  // [mir] StorageDead(_68)
  // [mir] StorageDead(_67)
  // [mir] FakeRead(ForLet(None), _66)
  // [mir] StorageLive(_69)
  // [mir] StorageLive(_70)
  // [mir] _70 = &mut (*_66)
  _70 := builtin$havoc_ref()
  inhale acc(_70.val_ref, write)
  _70.val_ref := _66.val_ref
  label l18
  // [mir] StorageLive(_71)
  // [mir] _71 = &mut (*_2)
  _71 := builtin$havoc_ref()
  inhale acc(_71.val_ref, write)
  _71.val_ref := _2.val_ref
  label l19
  // [mir] _69 = cmp(move _70, move _71) -> [return: bb35, unwind: bb48]
  label l20
  assert true
  exhale acc(_70.val_ref, write) &&
    (acc(i32(_70.val_ref), write) &&
    (acc(_71.val_ref, write) && acc(i32(_71.val_ref), write)))
  _69 := builtin$havoc_ref()
  inhale acc(i32(old[l20](_70.val_ref)), write) &&
    acc(i32(old[l20](_71.val_ref)), write)
  inhale acc(m_Ordering$_beg_$_end_(_69), write)
  inhale true
  inhale (unfolding acc(i32(old[l20](_71.val_ref)), write) in
      (unfolding acc(i32(old[l20](_70.val_ref)), write) in
        (unfolding acc(m_Ordering$_beg_$_end_(_69), write) in
          old[l20](_70.val_ref).val_int ==
          old[l20]((unfolding acc(i32(_70.val_ref), write) in
            _70.val_ref.val_int)) &&
          (old[l20](_71.val_ref).val_int ==
          old[l20]((unfolding acc(i32(_71.val_ref), write) in
            _71.val_ref.val_int)) &&
          (_69.discriminant == 1 ?
            old[l20](_70.val_ref).val_int == old[l20](_71.val_ref).val_int :
            (_69.discriminant == 0 ?
              old[l20](_70.val_ref).val_int < old[l20](_71.val_ref).val_int :
              old[l20](_70.val_ref).val_int > old[l20](_71.val_ref).val_int))))))
  label l21
  // ========== l22 ==========
  // MIR edge bb34 --> bb35
  // Expire borrows
  // expire_borrows ReborrowingDAG(L34,L33,L23,L22,L29,L30,L21,)

  if (__t24 && (__t25 && __t25)) {
    // expire loan L29
    _old$l17$0 := _66.val_ref
    inhale acc(DeadBorrowToken$(29), write) && acc(i32(_old$l17$0), write) --*
      acc(struct$m_VecWrapperI32(old[l16](_67.val_ref)), write) &&
      (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref))) ==
      old[l16](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_67.val_ref))) &&
      (f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref)),
      old[l16](_68)) ==
      old[lhs]((unfolding acc(i32(_old$l17$0), write) in
        _old$l17$0.val_int)) &&
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref)))) ||
        (!(_0_quant_0 == old[l16](_68)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref)),
        _0_quant_0) ==
        old[l16](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_67.val_ref),
        _0_quant_0)))))))
    inhale acc(DeadBorrowToken$(29), write)
    apply acc(DeadBorrowToken$(29), write) && acc(i32(_old$l17$0), write) --*
      acc(struct$m_VecWrapperI32(old[l16](_67.val_ref)), write) &&
      (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref))) ==
      old[l16](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_67.val_ref))) &&
      (f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref)),
      old[l16](_68)) ==
      old[lhs]((unfolding acc(i32(_old$l17$0), write) in
        _old$l17$0.val_int)) &&
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        !(0 <= _0_quant_0) ||
        (!(_0_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref)))) ||
        (!(_0_quant_0 == old[l16](_68)) ==>
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(old[l16](_67.val_ref)),
        _0_quant_0) ==
        old[l16](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_67.val_ref),
        _0_quant_0)))))))
  }
  // ========== loop2_group3_bb35 ==========
  __t26 := true
  // [mir] StorageDead(_71)
  // [mir] StorageDead(_70)
  // [mir] FakeRead(ForLet(None), _69)
  // [mir] StorageLive(_72)
  // [mir] FakeRead(ForMatchedPlace(None), _69)
  // [mir] _73 = discriminant(_69)
  _73 := builtin$havoc_int()
  _73 := m_Ordering$_beg_$_end_$$discriminant$$__$TY$__m_Ordering$_beg_$_end_$$int$(_69)
  // [mir] switchInt(move _73) -> [0: bb36, 2: bb38, otherwise: bb37]
  __t53 := _73
  if (__t53 == 0) {
    goto loop2_group1_bb3
  }
  if (__t53 == 2) {
    goto loop2_group1_bb2
  }
  goto loop2_start
  
  label l2
  // ========== l8 ==========
  // MIR edge bb3 --> bb47
  goto end_of_method
  
  label l5
  // ========== loop2_group3_bb41 ==========
  __t32 := true
  // [mir] _5 = move _72
  _5 := _72
  label l32
  // [mir] StorageDead(_72)
  // [mir] StorageLive(_76)
  // [mir] _76 = _59
  _76 := builtin$havoc_int()
  _76 := _59
  label l33
  // [mir] _77 = CheckedSub(_3, _76)
  _77 := builtin$havoc_ref()
  inhale acc(_77.tuple_0, write)
  inhale acc(_77.tuple_0.val_int, write)
  inhale acc(_77.tuple_1, write)
  inhale acc(_77.tuple_1.val_bool, write)
  _77.tuple_0.val_int := _3.val_int - _76
  _77.tuple_1.val_bool := _3.val_int - _76 < 0 ||
    _3.val_int - _76 > 18446744073709551615
  // [mir] assert(!move (_77.1: bool), "attempt to compute `{} - {}`, which would overflow", _3, move _76) -> [success: bb42, unwind: bb48]
  __t54 := _77.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t54
  // ========== loop2_group3_bb42 ==========
  __t33 := true
  // [mir] _3 = move (_77.0: usize)
  _3 := _77.tuple_0
  label l34
  // [mir] StorageDead(_76)
  // [mir] StorageLive(_78)
  // [mir] StorageLive(_79)
  // [mir] StorageLive(_80)
  // [mir] _80 = _3
  _80 := builtin$havoc_int()
  _80 := _3.val_int
  label l35
  // [mir] _79 = Gt(move _80, const 0_usize)
  _79 := builtin$havoc_ref()
  inhale acc(_79.val_bool, write)
  _79.val_bool := _80 > 0
  // [mir] StorageDead(_80)
  // [mir] switchInt(move _79) -> [0: bb43, otherwise: bb44]
  __t55 := _79.val_bool
  if (!__t55) {
    goto loop2_group2_bb4
  }
  goto l6
  
  label l6
  // ========== l36 ==========
  // MIR edge bb42 --> bb44
  // ========== loop2_group3_bb44 ==========
  __t34 := true
  // [mir] StorageLive(_81)
  // [mir] StorageLive(_82)
  // [mir] _82 = &_6
  _82 := builtin$havoc_ref()
  inhale acc(_82.val_ref, write)
  _82.val_ref := _6
  exhale acc(m_UsizeOption$_beg_$_end_(_6), write - read$())
  inhale acc(m_UsizeOption$_beg_$_end_(_82.val_ref), read$())
  label l38
  // [mir] _81 = UsizeOption::is_none(move _82) -> [return: bb46, unwind: bb48]
  label l39
  _81 := builtin$havoc_ref()
  inhale acc(bool(_81), write)
  inhale (unfolding acc(bool(_81), write) in _81.val_bool) ==
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_82.val_ref))
  // transfer perm _82.val_ref --> old[l39](_82.val_ref) // unchecked: false
  // ========== l40 ==========
  // MIR edge bb44 --> bb46
  // Expire borrows
  // expire_borrows ReborrowingDAG(L31,L24,)

  if (__t34 && __t34) {
    // expire loan L24
    // transfer perm old[l39](_82.val_ref) --> old[l38](_82.val_ref) // unchecked: false
    exhale acc(m_UsizeOption$_beg_$_end_(old[l38](_82.val_ref)), read$())
    inhale acc(m_UsizeOption$_beg_$_end_(_6), write - read$())
  }
  // ========== loop2_group3_bb46 ==========
  __t35 := true
  // [mir] StorageDead(_82)
  // [mir] _78 = move _81
  _78 := _81
  label l41
  // [mir] goto -> bb45
  // ========== l49 ==========
  // drop Acc(old[l38](_82.val_ref), write) (Acc(old[l38](_82.val_ref), write))
  // drop Acc(_82.val_ref, write) (Acc(_82.val_ref, write))
  unfold acc(bool(_78), write)
  goto loop2_inv_pre
  
  label loop2_group1_bb2
  // ========== l25 ==========
  // MIR edge bb35 --> bb38
  // ========== loop2_group3_bb38 ==========
  __t28 := true
  // [mir] falseEdge -> [real: bb40, imaginary: bb37]
  // ========== loop2_group3_bb40 ==========
  __t29 := true
  // [mir] _72 = _5
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_int, write)
  _72.val_int := _5.val_int
  label l30
  // [mir] goto -> bb41
  goto l5
  
  label loop2_group1_bb3
  // ========== l24 ==========
  // MIR edge bb35 --> bb36
  // ========== loop2_group3_bb36 ==========
  __t30 := true
  // [mir] falseEdge -> [real: bb39, imaginary: bb38]
  // ========== loop2_group3_bb39 ==========
  __t31 := true
  // [mir] _72 = _62
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_int, write)
  _72.val_int := _62.val_int
  label l31
  // [mir] goto -> bb41
  goto l5
  
  label loop2_group2_bb4
  // ========== l37 ==========
  // MIR edge bb42 --> bb43
  // ========== loop2_group3_bb43 ==========
  __t36 := true
  // [mir] _78 = const false
  _78 := builtin$havoc_ref()
  inhale acc(_78.val_bool, write)
  _78.val_bool := false
  // [mir] goto -> bb45
  goto loop2_inv_pre
  
  label loop2_group2a_bb2
  // ========== l45 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = const false
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := false
  // [mir] switchInt(move _13) -> [0: bb6, otherwise: bb5]
  __t57 := _13.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  // obtain acc(m_UsizeOption$_beg_$_end_(_6), write)
  fold acc(usize(_5), write)
  // obtain acc(usize(_5), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  fold acc(bool(_7), write)
  // obtain acc(bool(_7), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), write)
  // obtain acc(_2.val_ref, read)
  // obtain acc(i32(_2.val_ref), write)
  assert !((unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <
    0 ||
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) >
    18446744073709551615) &&
    (unfolding acc(usize(_5), write) in _5.val_int) +
    (unfolding acc(usize(_3), write) in _3.val_int) <=
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) > 0 &&
    f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int) ==
    old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::0 <= _0_quant_0 &&
      (_0_quant_0 <= 18446744073709551615 &&
      (0 <= _1_quant_0 && _1_quant_0 <= 18446744073709551615)) ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) <=
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _1_quant_0)))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((unfolding acc(i32(_2.val_ref), write) in
      (unfolding acc(usize(_5), write) in
        (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
          _0_quant_0 <= 18446744073709551615 ==>
          !(0 <= _0_quant_0) ||
          (_0_quant_0 < _5.val_int ==>
          f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
          _0_quant_0) <
          _2.val_ref.val_int)))) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    (unfolding acc(usize(_3), write) in
      (unfolding acc(usize(_5), write) in
        (unfolding acc(i32(_2.val_ref), write) in
          (let _LET_2 ==
            (_5.val_int + _3.val_int < 0 ||
            _5.val_int + _3.val_int > 18446744073709551615) in
            (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
              _0_quant_0 <= 18446744073709551615 ==>
              !_LET_2 &&
              (!(_5.val_int + _3.val_int <= _0_quant_0) ||
              (_0_quant_0 <
              f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) ==>
              _2.val_ref.val_int <
              f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
              _0_quant_0))))))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_6))) ==
    (unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int))))))))))
  assert true
  assert _preserve$0 == _1.val_ref && _preserve$1 == _2.val_ref
  exhale acc(m_UsizeOption$_beg_$_end_(_6), write) &&
    (acc(usize(_5), write) &&
    (acc(usize(_3), write) &&
    (acc(bool(_7), write) &&
    (acc(_1.val_ref, read$()) &&
    (acc(struct$m_VecWrapperI32(_1.val_ref), write) &&
    (acc(_2.val_ref, read$()) && acc(i32(_2.val_ref), write)))))))
  inhale false
  goto end_of_method
  
  label loop2_inv_post_fnspc
  // ========== bb47 ==========
  __t38 := true
  // [mir] StorageLive(_84)
  // [mir] _9 = const ()
  // [mir] StorageDead(_84)
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_9)
  // [mir] _0 = move _6
  _0 := _6
  label l46
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_3)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l48
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(struct$m_VecWrapperI32(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // obtain acc(i32(_2.val_ref), write)
  _old$pre$1 := _2.val_ref
  // Fold the result
  // obtain acc(m_UsizeOption$_beg_$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==
    old[pre](f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref))) &&
    ((forall _0_quant_0: Int ::0 <= _0_quant_0 &&
      _0_quant_0 <= 18446744073709551615 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==>
      f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
      _0_quant_0) ==
      old[pre](f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_1.val_ref),
      _0_quant_0)))) &&
    ((unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int) ==
    old[pre]((unfolding acc(i32(_2.val_ref), write) in _2.val_ref.val_int)) &&
    ((f_UsizeOption$$is_none__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) ==>
    (unfolding acc(i32(_old$pre$1), write) in
      (forall _0_quant_0: Int ::0 <= _0_quant_0 &&
        _0_quant_0 <= 18446744073709551615 ==>
        !(0 <= _0_quant_0) ||
        (_0_quant_0 <
        f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) ==>
        !(_old$pre$1.val_int ==
        f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
        _0_quant_0)))))) &&
    (f_UsizeOption$$is_some__$TY$__Snap$m_UsizeOption$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) ==>
    0 <=
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) &&
    (f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0)) <
    f_VecWrapperI32$$len__$TY$__Snap$struct$m_VecWrapperI32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0)) &&
    f_VecWrapperI32$$lookup__$TY$__Snap$struct$m_VecWrapperI32$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32$struct$m_VecWrapperI32$Snap$struct$m_VecWrapperI32(_old$pre$0),
    f_UsizeOption$$peek__$TY$__Snap$m_UsizeOption$_beg_$_end_$$int$(snap$__$TY$__Snap$m_UsizeOption$_beg_$_end_$m_UsizeOption$_beg_$_end_$Snap$m_UsizeOption$_beg_$_end_(_0))) ==
    (unfolding acc(i32(_old$pre$1), write) in _old$pre$1.val_int))))))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_VecWrapperI32(_old$pre$0), write) &&
    acc(i32(_old$pre$1), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_UsizeOption$_beg_$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_inv_post_perm
  // ========== l44 ==========
  // MIR edge bb3 --> bb47
  // ========== l50 ==========
  // drop Acc(_13.val_bool, write) (Acc(_13.val_bool, write))
  // drop Acc(_19.val_bool, write) (Acc(_19.val_bool, write))
  // drop Acc(_80.val_int, write) (Acc(_80.val_int, write))
  // drop Acc(_77.tuple_0, write) (Acc(_77.tuple_0, write))
  // drop Acc(_64.val_int, write) (Acc(_64.val_int, write))
  // drop Acc(_63.val_int, write) (Acc(_63.val_int, write))
  // drop Acc(_24.val_bool, write) (Acc(_24.val_bool, write))
  // drop Acc(_61.val_bool, write) (Acc(_61.val_bool, write))
  // drop Acc(_59.val_int, write) (Acc(_59.val_int, write))
  // drop Acc(_65.tuple_0, write) (Acc(_65.tuple_0, write))
  // drop Acc(_40.val_bool, write) (Acc(_40.val_bool, write))
  // drop Acc(_73.val_int, write) (Acc(_73.val_int, write))
  // drop Acc(_79.val_bool, write) (Acc(_79.val_bool, write))
  // drop Acc(_60.val_int, write) (Acc(_60.val_int, write))
  // drop Acc(_28.val_bool, write) (Acc(_28.val_bool, write))
  // drop Acc(_54.val_bool, write) (Acc(_54.val_bool, write))
  // drop Acc(_62.val_int, write) (Acc(_62.val_int, write))
  // drop Acc(_77.tuple_1.val_bool, write) (Acc(_77.tuple_1.val_bool, write))
  // drop Acc(_66.val_ref, write) (Acc(_66.val_ref, write))
  // drop Acc(_46.val_bool, write) (Acc(_46.val_bool, write))
  // drop Acc(_32.val_bool, write) (Acc(_32.val_bool, write))
  // drop Acc(_36.val_bool, write) (Acc(_36.val_bool, write))
  // drop Acc(_65.tuple_1.val_bool, write) (Acc(_65.tuple_1.val_bool, write))
  // drop Acc(_76.val_int, write) (Acc(_76.val_int, write))
  // drop Pred(_69, write) (Pred(_69, write))
  // drop Acc(_65.tuple_1, write) (Acc(_65.tuple_1, write))
  // drop Acc(_77.tuple_1, write) (Acc(_77.tuple_1, write))
  goto loop2_inv_post_fnspc
  
  label loop2_inv_pre
  // ========== loop2_group3_bb45 ==========
  __t37 := true
  // [mir] StorageDead(_81)
  // [mir] StorageDead(_79)
  // [mir] _7 = move _78
  _7 := _78
  label l42
  // [mir] StorageDead(_78)
  // [mir] _10 = const ()
  // [mir] StorageDead(_69)
  // [mir] StorageDead(_66)
  // [mir] StorageDead(_62)
  // [mir] StorageDead(_59)
  // [mir] StorageDead(_11)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb48]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_11)
  // [mir] _11 = _7
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := _7.val_bool
  label l43
  // [mir] switchInt(move _11) -> [0: bb47, otherwise: bb4]
  __t56 := _11.val_bool
  if (__t56) {
    goto loop2_group2a_bb2
  }
  goto loop2_inv_post_perm
  
  label loop2_start
  // ========== l23 ==========
  // MIR edge bb35 --> bb37
  // ========== loop2_group3_bb37 ==========
  __t27 := true
  // [mir] StorageLive(_74)
  // [mir] StorageLive(_75)
  // [mir] _75 = _62
  _75 := builtin$havoc_ref()
  inhale acc(_75.val_int, write)
  _75.val_int := _62.val_int
  label l26
  // [mir] _74 = UsizeOption::Some(move _75)
  _74 := builtin$havoc_ref()
  inhale acc(m_UsizeOption$_beg_$_end_(_74), write)
  inhale m_UsizeOption$_beg_$_end_$$discriminant$$__$TY$__m_UsizeOption$_beg_$_end_$$int$(_74) ==
    0
  // downcast _74 to enum_Some

  unfold acc(m_UsizeOption$_beg_$_end_(_74), write)
  unfold acc(m_UsizeOption$_beg_$_end_Some(_74.enum_Some), write)
  _74.enum_Some.f$0 := _75
  label l27
  // [mir] StorageDead(_75)
  // [mir] _6 = move _74
  _6 := _74
  label l28
  // [mir] StorageDead(_74)
  // [mir] _72 = _5
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_int, write)
  _72.val_int := _5.val_int
  label l29
  // [mir] goto -> bb41
  // ========== l47 ==========
  fold acc(usize(_6.enum_Some.f$0), write)
  fold acc(m_UsizeOption$_beg_$_end_Some(_6.enum_Some), write)
  fold acc(m_UsizeOption$_beg_$_end_(_6), write)
  goto l5
  
  label return
  // ========== l5 ==========
  // MIR edge bb3 --> bb47
  goto loop2_inv_post_fnspc
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
