domain Snap$Array$10$i32  {
  
  function cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(data: Seq[Int]): Snap$Array$10$i32 
  
  function uncons$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$Seq$$int$(array: Snap$Array$10$i32): Seq[Int] 
  
  function read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(arr: Snap$Array$10$i32,
  idx: Int): Int 
  
  axiom Snap$Array$10$i32$injectivity {
    (forall data: Seq[Int] ::
      { cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(data) }
      uncons$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$Seq$$int$(cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(data)) ==
      data)
  }
  
  axiom Snap$Array$10$i32$surjectivity {
    (forall data: Snap$Array$10$i32 ::
      { uncons$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$Seq$$int$(data) }
      cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(uncons$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$Seq$$int$(data)) ==
      data)
  }
  
  axiom Snap$Array$10$i32$extensionality {
    (forall _l_data: Seq[Int], _r_data: Seq[Int] ::
      { cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(_l_data),
      cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(_r_data) }
      _l_data == _r_data ==>
      cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(_l_data) ==
      cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(_r_data))
  }
  
  axiom Array$10$i32$read_indices {
    (forall data: Seq[Int], idx: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(data),
      idx) }
      { data[idx] }
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(data),
      idx) ==
      data[idx])
  }
  
  axiom Snap$Array$10$i32$valid {
    (forall self: Snap$Array$10$i32, idx: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(self, idx) }
      -2147483648 <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(self, idx) &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(self, idx) <=
      2147483647)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function Slice$len__$TY$__i32$Slice$i32$$int$(self: Ref): Int
  requires acc(Slice$i32(self), read$())
  ensures result >= 0
  ensures result <= 18446744073709551615


function lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(self: Ref,
  idx: Int): Int
  requires acc(Array$10$i32(self), read$())
  requires 0 <= idx
  requires idx < 10


function lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(self: Ref, idx: Int): Int
  requires acc(Slice$i32(self), read$())
  requires 0 <= idx
  requires idx < Slice$len__$TY$__i32$Slice$i32$$int$(self)


function seq_collect$Array$10$i32$__$TY$__Array$10$i32$$int$$Seq$$int$(self: Ref,
  start: Int): Seq[Int]
  requires acc(Array$10$i32(self), read$())
  requires 0 <= start
  ensures start >= 10 ==> result == Seq[Int]()
  ensures start < 10 ==> |result| == 10 - start
  ensures start < 10 ==>
    result[0] ==
    lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(self, start)
  ensures start < 10 ==>
    (forall i: Int, j: Int ::
      { lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(self, i),
      result[j] }
      start <= i && i < 10 && (0 <= j && j < 10 - start && i == j + start) ==>
      lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(self, i) ==
      result[j])
{
  (start >= 10 ?
    Seq[Int]() :
    Seq(lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(self, start)) ++
    seq_collect$Array$10$i32$__$TY$__Array$10$i32$$int$$Seq$$int$(self, start +
    1))
}

function snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(self: Ref): Snap$Array$10$i32
  requires acc(Array$10$i32(self), read$())
  ensures (forall i: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(result,
      i) }
      { lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(self, i) }
      0 <= i && i < 10 ==>
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(result, i) ==
      lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(self, i))
{
  cons$Snap$Array$10$i32$__$TY$__Seq$$int$$Snap$Array$10$i32(seq_collect$Array$10$i32$__$TY$__Array$10$i32$$int$$Seq$$int$(self,
  0))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate Array$10$i32(self: Ref) 

predicate DeadBorrowToken$(borrow: Int) 

predicate Slice$i32(self: Ref) 

predicate i32(self: Ref) {
  acc(self.val_int, write)
}

predicate tuple0$(self: Ref) {
  true
}

predicate usize(self: Ref) {
  acc(self.val_int, write) && 0 <= self.val_int
}

method m_selection_sort() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var __t31: Bool
  var __t32: Bool
  var __t33: Bool
  var __t34: Bool
  var __t35: Bool
  var __t36: Bool
  var __t37: Bool
  var __t38: Bool
  var __t39: Bool
  var __t40: Bool
  var __t41: Bool
  var __t42: Bool
  var __t43: Bool
  var __t44: Bool
  var _preserve$0: Ref
  var __t45: Bool
  var __t46: Bool
  var __t47: Bool
  var __t48: Bool
  var __t49: Bool
  var _preserve$1: Ref
  var __t50: Bool
  var __t51: Bool
  var __t52: Bool
  var __t53: Bool
  var __t54: Bool
  var __t55: Bool
  var __t56: Bool
  var __t57: Ref
  var __t58: Bool
  var __t59: Ref
  var __t60: Bool
  var __t61: Bool
  var __t62: Bool
  var __t63: Bool
  var __t64: Bool
  var __t65: Ref
  var __t66: Bool
  var __t67: Ref
  var __t68: Bool
  var __t69: Bool
  var __t70: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _5: Ref
  var _6: Int
  var _7: Int
  var _8: Ref
  var _9: Ref
  var _11: Ref
  var _15: Ref
  var _20: Ref
  var _24: Ref
  var _25: Ref
  var _26: Int
  var _27: Ref
  var _29: Ref
  var _30: Int
  var _31: Int
  var _32: Ref
  var _33: Ref
  var _35: Ref
  var _39: Ref
  var _44: Ref
  var _49: Ref
  var _54: Ref
  var _59: Ref
  var _65: Ref
  var _72: Ref
  var _73: Int
  var _74: Int
  var _75: Int
  var _76: Ref
  var _77: Int
  var _78: Int
  var _79: Int
  var _80: Ref
  var _81: Ref
  var _82: Ref
  var _86: Int
  var _87: Int
  var _88: Int
  var _89: Ref
  var _90: Int
  var _91: Int
  var _92: Int
  var _93: Ref
  var _94: Ref
  var _95: Ref
  var _96: Int
  var _97: Ref
  var _98: Ref
  var _99: Ref
  var _100: Int
  var _101: Ref
  var _102: Ref
  
  label start
  // ========== start ==========
  // Def path: "selection_sort_2::selection_sort"
  // Span: tests/verify/pass/arrays/selection_sort-2.rs:13:1: 69:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  __t21 := false
  __t22 := false
  __t23 := false
  __t24 := false
  __t25 := false
  __t26 := false
  __t27 := false
  __t28 := false
  __t29 := false
  __t30 := false
  __t31 := false
  __t32 := false
  __t33 := false
  __t34 := false
  __t35 := false
  __t36 := false
  __t37 := false
  __t38 := false
  __t39 := false
  __t40 := false
  __t41 := false
  __t42 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) && acc(Array$10$i32(_1.val_ref), write)
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] _3 = const 0_usize
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_int, write)
  _3.val_int := 0
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] goto -> bb1
  // ========== loop1_start ==========
  // ========== loop1_group1_bb1 ==========
  // This is a loop head
  __t1 := true
  // [mir] falseUnwind -> [real: bb2, unwind: bb53]
  // ========== loop1_group1_bb2 ==========
  __t2 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _3
  _6 := builtin$havoc_int()
  _6 := _3.val_int
  label l0
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = &(*_1)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_ref, write)
  _9.val_ref := _1.val_ref
  exhale acc(Array$10$i32(_1.val_ref), write - read$())
  inhale acc(Array$10$i32(_9.val_ref), read$())
  label l1
  // [mir] _8 = move _9 as &[i32] (PointerCoercion(Unsize))
  label l2
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_ref, write)
  inhale acc(Slice$i32(_8.val_ref), read$())
  inhale Slice$len__$TY$__i32$Slice$i32$$int$(_8.val_ref) == 10
  inhale (forall i: Int ::
      { lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_9.val_ref,
      i) }
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_8.val_ref, i) }
      0 <= i && i < 10 ==>
      lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_9.val_ref,
      i) ==
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_8.val_ref, i))
  // [mir] StorageDead(_9)
  // [mir] _7 = core::slice::<impl [i32]>::len(move _8) -> [return: bb3, unwind: bb53]
  label l3
  _7 := builtin$havoc_int()
  _7 := Slice$len__$TY$__i32$Slice$i32$$int$(_8.val_ref)
  // transfer perm _8.val_ref --> old[l3](_8.val_ref) // unchecked: false
  // ========== l4 ==========
  // MIR edge bb2 --> bb3
  // Expire borrows
  // expire_borrows ReborrowingDAG(L30,L32,L0,)

  if (__t2 && (__t2 && __t2)) {
    // expire loan L0
    exhale acc(Array$10$i32(_9.val_ref), read$())
    inhale acc(Array$10$i32(_1.val_ref), write - read$())
  }
  // ========== loop1_group1_bb3 ==========
  __t3 := true
  // [mir] StorageDead(_8)
  // [mir] _5 = Lt(move _6, move _7)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < _7
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb52, otherwise: bb4]
  __t43 := _5.val_bool
  if (__t43) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l6 ==========
  // MIR edge bb3 --> bb4
  // ========== loop1_group2_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = const false
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := false
  // [mir] switchInt(move _11) -> [0: bb6, otherwise: bb5]
  __t44 := _11.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb1)
  _preserve$0 := _1.val_ref
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(Array$10$i32(_1.val_ref), write)
  assert 0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) < 10 &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0))))) &&
    (forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int)) ||
      (!((unfolding acc(usize(_3), write) in _3.val_int) <= _1_quant_0) ||
      (_1_quant_0 < 10 ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0)))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_3), write) &&
    (acc(_1.val_ref, read$()) && acc(Array$10$i32(_1.val_ref), write))
  _100 := builtin$havoc_int()
  _101 := builtin$havoc_ref()
  _102 := builtin$havoc_ref()
  _11 := builtin$havoc_ref()
  _15 := builtin$havoc_ref()
  _2 := builtin$havoc_ref()
  _20 := builtin$havoc_ref()
  _24 := builtin$havoc_ref()
  _25 := builtin$havoc_ref()
  _26 := builtin$havoc_int()
  _27 := builtin$havoc_ref()
  _29 := builtin$havoc_ref()
  _3 := builtin$havoc_ref()
  _30 := builtin$havoc_int()
  _31 := builtin$havoc_int()
  _32 := builtin$havoc_ref()
  _33 := builtin$havoc_ref()
  _35 := builtin$havoc_ref()
  _39 := builtin$havoc_ref()
  _44 := builtin$havoc_ref()
  _49 := builtin$havoc_ref()
  _5 := builtin$havoc_ref()
  _54 := builtin$havoc_ref()
  _59 := builtin$havoc_ref()
  _6 := builtin$havoc_int()
  _65 := builtin$havoc_ref()
  _7 := builtin$havoc_int()
  _72 := builtin$havoc_ref()
  _73 := builtin$havoc_int()
  _74 := builtin$havoc_int()
  _75 := builtin$havoc_int()
  _76 := builtin$havoc_ref()
  _77 := builtin$havoc_int()
  _78 := builtin$havoc_int()
  _79 := builtin$havoc_int()
  _8 := builtin$havoc_ref()
  _80 := builtin$havoc_ref()
  _81 := builtin$havoc_ref()
  _82 := builtin$havoc_ref()
  _86 := builtin$havoc_int()
  _87 := builtin$havoc_int()
  _88 := builtin$havoc_int()
  _89 := builtin$havoc_ref()
  _9 := builtin$havoc_ref()
  _90 := builtin$havoc_int()
  _91 := builtin$havoc_int()
  _92 := builtin$havoc_int()
  _93 := builtin$havoc_ref()
  _94 := builtin$havoc_ref()
  _95 := builtin$havoc_ref()
  _96 := builtin$havoc_int()
  _97 := builtin$havoc_ref()
  _98 := builtin$havoc_ref()
  _99 := builtin$havoc_ref()
  __t1 := builtin$havoc_bool()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t36 := builtin$havoc_bool()
  __t37 := builtin$havoc_bool()
  __t38 := builtin$havoc_bool()
  __t39 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t40 := builtin$havoc_bool()
  __t41 := builtin$havoc_bool()
  __t45 := builtin$havoc_bool()
  __t46 := builtin$havoc_bool()
  __t47 := builtin$havoc_bool()
  __t48 := builtin$havoc_bool()
  __t49 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_ref()
  __t58 := builtin$havoc_bool()
  __t59 := builtin$havoc_ref()
  __t6 := builtin$havoc_bool()
  __t60 := builtin$havoc_bool()
  __t61 := builtin$havoc_bool()
  __t62 := builtin$havoc_bool()
  __t63 := builtin$havoc_bool()
  __t64 := builtin$havoc_bool()
  __t65 := builtin$havoc_ref()
  __t66 := builtin$havoc_bool()
  __t67 := builtin$havoc_ref()
  __t68 := builtin$havoc_bool()
  __t69 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t70 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  _preserve$1 := builtin$havoc_ref()
  // ========== loop1_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb1
  inhale acc(usize(_3), write) &&
    (acc(_1.val_ref, read$()) && acc(Array$10$i32(_1.val_ref), write))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop1_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb1
  inhale 0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) < 10 &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0))))) &&
    (forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int)) ||
      (!((unfolding acc(usize(_3), write) in _3.val_int) <= _1_quant_0) ||
      (_1_quant_0 < 10 ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0)))))))
  // ========== loop1_group3_bb6 ==========
  __t5 := true
  // [mir] _10 = const ()
  // [mir] goto -> bb7
  // ========== loop1_group3_bb7 ==========
  __t6 := true
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_10)
  // [mir] StorageLive(_14)
  // [mir] StorageLive(_15)
  // [mir] _15 = const false
  _15 := builtin$havoc_ref()
  inhale acc(_15.val_bool, write)
  _15.val_bool := false
  // [mir] switchInt(move _15) -> [0: bb9, otherwise: bb8]
  __t45 := _15.val_bool
  // Ignore default target bb8, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_bb9 ==========
  __t7 := true
  // [mir] _14 = const ()
  // [mir] goto -> bb10
  // ========== loop1_group3_bb10 ==========
  __t8 := true
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_14)
  // [mir] StorageLive(_19)
  // [mir] StorageLive(_20)
  // [mir] _20 = const false
  _20 := builtin$havoc_ref()
  inhale acc(_20.val_bool, write)
  _20.val_bool := false
  // [mir] switchInt(move _20) -> [0: bb12, otherwise: bb11]
  __t46 := _20.val_bool
  // Ignore default target bb11, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_bb12 ==========
  __t9 := true
  // [mir] _19 = const ()
  // [mir] goto -> bb13
  // ========== loop1_group3_bb13 ==========
  __t10 := true
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_19)
  // [mir] StorageLive(_24)
  // [mir] _24 = _3
  _24 := builtin$havoc_ref()
  inhale acc(_24.val_int, write)
  unfold acc(usize(_3), write)
  _24.val_int := _3.val_int
  label l7
  // [mir] _2 = move _24
  _2 := _24
  label l8
  // [mir] StorageDead(_24)
  // [mir] StorageLive(_25)
  // [mir] StorageLive(_26)
  // [mir] _26 = _3
  _26 := builtin$havoc_int()
  _26 := _3.val_int
  label l9
  // [mir] _27 = CheckedAdd(_26, const 1_usize)
  _27 := builtin$havoc_ref()
  inhale acc(_27.tuple_0, write)
  inhale acc(_27.tuple_0.val_int, write)
  inhale acc(_27.tuple_1, write)
  inhale acc(_27.tuple_1.val_bool, write)
  _27.tuple_0.val_int := _26 + 1
  _27.tuple_1.val_bool := false
  // [mir] assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", move _26, const 1_usize) -> [success: bb14, unwind: bb53]
  __t47 := _27.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t47
  // ========== loop1_group3_bb14 ==========
  __t11 := true
  // [mir] _25 = move (_27.0: usize)
  _25 := _27.tuple_0
  label l10
  // [mir] StorageDead(_26)
  // [mir] FakeRead(ForLet(None), _25)
  // [mir] StorageLive(_28)
  // [mir] goto -> bb15
  // ========== loop1_group3_loop15_start ==========
  // ========== loop1_group3_loop15_group1_bb15 ==========
  // This is a loop head
  __t12 := true
  // [mir] falseUnwind -> [real: bb16, unwind: bb53]
  // ========== loop1_group3_loop15_group1_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_29)
  // [mir] StorageLive(_30)
  // [mir] _30 = _25
  _30 := builtin$havoc_int()
  _30 := _25.val_int
  label l11
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] StorageLive(_33)
  // [mir] _33 = &(*_1)
  _33 := builtin$havoc_ref()
  inhale acc(_33.val_ref, write)
  _33.val_ref := _1.val_ref
  exhale acc(Array$10$i32(_1.val_ref), write - read$())
  inhale acc(Array$10$i32(_33.val_ref), read$())
  label l12
  // [mir] _32 = move _33 as &[i32] (PointerCoercion(Unsize))
  label l13
  _32 := builtin$havoc_ref()
  inhale acc(_32.val_ref, write)
  inhale acc(Slice$i32(_32.val_ref), read$())
  inhale Slice$len__$TY$__i32$Slice$i32$$int$(_32.val_ref) == 10
  inhale (forall i: Int ::
      { lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_33.val_ref,
      i) }
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_32.val_ref,
      i) }
      0 <= i && i < 10 ==>
      lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_33.val_ref,
      i) ==
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_32.val_ref, i))
  // [mir] StorageDead(_33)
  // [mir] _31 = core::slice::<impl [i32]>::len(move _32) -> [return: bb17, unwind: bb53]
  label l14
  _31 := builtin$havoc_int()
  _31 := Slice$len__$TY$__i32$Slice$i32$$int$(_32.val_ref)
  // transfer perm _32.val_ref --> old[l14](_32.val_ref) // unchecked: false
  // ========== l15 ==========
  // MIR edge bb16 --> bb17
  // Expire borrows
  // expire_borrows ReborrowingDAG(L31,L28,L6,)

  if (__t13 && (__t13 && __t13)) {
    // expire loan L6
    exhale acc(Array$10$i32(_33.val_ref), read$())
    inhale acc(Array$10$i32(_1.val_ref), write - read$())
  }
  // ========== loop1_group3_loop15_group1_bb17 ==========
  __t14 := true
  // [mir] StorageDead(_32)
  // [mir] _29 = Lt(move _30, move _31)
  _29 := builtin$havoc_ref()
  inhale acc(_29.val_bool, write)
  _29.val_bool := _30 < _31
  // [mir] StorageDead(_31)
  // [mir] StorageDead(_30)
  // [mir] switchInt(move _29) -> [0: bb46, otherwise: bb18]
  __t48 := _29.val_bool
  if (__t48) {
    goto loop1_group1_bb1
  }
  goto loop1_start
  
  label l4
  // ========== l23 ==========
  // MIR edge bb41 --> bb43
  // ========== loop1_group3_loop15_group3_bb43 ==========
  __t33 := true
  // [mir] _71 = const ()
  // [mir] goto -> bb44
  goto loop1_group1_bb3
  
  label l5
  // ========== l32 ==========
  // MIR edge bb17 --> bb46
  // ========== l58 ==========
  // drop Acc(_73.val_int, write) (Acc(_73.val_int, write))
  // drop Acc(_82.tuple_0, write) (Acc(_82.tuple_0, write))
  // drop Acc(_49.val_bool, write) (Acc(_49.val_bool, write))
  // drop Acc(_77.val_int, write) (Acc(_77.val_int, write))
  // drop Acc(_54.val_bool, write) (Acc(_54.val_bool, write))
  // drop Acc(_80.val_bool, write) (Acc(_80.val_bool, write))
  // drop Acc(_39.val_bool, write) (Acc(_39.val_bool, write))
  // drop Acc(_72.val_bool, write) (Acc(_72.val_bool, write))
  // drop Acc(old[l30](_32.val_ref), write) (Acc(old[l30](_32.val_ref), write))
  // drop Acc(_78.val_int, write) (Acc(_78.val_int, write))
  // drop Acc(_79.val_int, write) (Acc(_79.val_int, write))
  // drop Acc(_65.val_bool, write) (Acc(_65.val_bool, write))
  // drop Acc(_74.val_int, write) (Acc(_74.val_int, write))
  // drop Acc(_75.val_int, write) (Acc(_75.val_int, write))
  // drop Acc(_59.val_bool, write) (Acc(_59.val_bool, write))
  // drop Acc(_44.val_bool, write) (Acc(_44.val_bool, write))
  // drop Acc(__t57.val_int, write) (Acc(__t57.val_int, write))
  // drop Acc(_82.tuple_1.val_bool, write) (Acc(_82.tuple_1.val_bool, write))
  unfold acc(usize(_3), write)
  // drop Acc(_76.val_bool, write) (Acc(_76.val_bool, write))
  // drop Acc(__t59.val_int, write) (Acc(__t59.val_int, write))
  // drop Pred(old[l30](_32.val_ref), read) (Pred(old[l30](_32.val_ref), read))
  // drop Acc(_82.tuple_1, write) (Acc(_82.tuple_1, write))
  goto l6
  
  label l6
  // ========== loop1_group3_bb46 ==========
  __t36 := true
  // [mir] StorageLive(_84)
  // [mir] _28 = const ()
  // [mir] StorageDead(_84)
  // [mir] StorageDead(_29)
  // [mir] StorageDead(_28)
  // [mir] StorageLive(_86)
  // [mir] StorageLive(_87)
  // [mir] _87 = _3
  _87 := builtin$havoc_int()
  _87 := _3.val_int
  label l34
  // [mir] _88 = Len((*_1))
  assert acc(Array$10$i32(_1.val_ref), read$())
  _88 := builtin$havoc_int()
  _88 := 10
  // [mir] _89 = Lt(_87, _88)
  _89 := builtin$havoc_ref()
  inhale acc(_89.val_bool, write)
  _89.val_bool := _87 < _88
  // [mir] assert(move _89, "index out of bounds: the length is {} but the index is {}", move _88, _87) -> [success: bb47, unwind: bb53]
  __t64 := _89.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _88, _87
  assert __t64
  // ========== loop1_group3_bb47 ==========
  __t37 := true
  // [mir] _86 = (*_1)[_87]
  __t65 := builtin$havoc_ref()
  inhale acc(i32(__t65), write)
  assert acc(Array$10$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_1.val_ref,
    _87) ==
    (unfolding acc(i32(__t65), write) in __t65.val_int)
  _86 := builtin$havoc_int()
  unfold acc(i32(__t65), write)
  _86 := __t65.val_int
  label l35
  // [mir] FakeRead(ForLet(None), _86)
  // [mir] StorageDead(_87)
  // [mir] StorageLive(_90)
  // [mir] StorageLive(_91)
  // [mir] _91 = _2
  _91 := builtin$havoc_int()
  _91 := _2.val_int
  label l36
  // [mir] _92 = Len((*_1))
  assert acc(Array$10$i32(_1.val_ref), read$())
  _92 := builtin$havoc_int()
  _92 := 10
  // [mir] _93 = Lt(_91, _92)
  _93 := builtin$havoc_ref()
  inhale acc(_93.val_bool, write)
  _93.val_bool := _91 < _92
  // [mir] assert(move _93, "index out of bounds: the length is {} but the index is {}", move _92, _91) -> [success: bb48, unwind: bb53]
  __t66 := _93.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _92, _91
  assert __t66
  // ========== loop1_group3_bb48 ==========
  __t38 := true
  // [mir] _90 = (*_1)[_91]
  __t67 := builtin$havoc_ref()
  inhale acc(i32(__t67), write)
  assert acc(Array$10$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_1.val_ref,
    _91) ==
    (unfolding acc(i32(__t67), write) in __t67.val_int)
  _90 := builtin$havoc_int()
  unfold acc(i32(__t67), write)
  _90 := __t67.val_int
  label l37
  // [mir] FakeRead(ForLet(None), _90)
  // [mir] StorageDead(_91)
  // [mir] StorageLive(_94)
  // [mir] StorageLive(_95)
  // [mir] _95 = &mut (*_1)
  _95 := builtin$havoc_ref()
  inhale acc(_95.val_ref, write)
  _95.val_ref := _1.val_ref
  label l38
  // [mir] StorageLive(_96)
  // [mir] _96 = _3
  _96 := builtin$havoc_int()
  _96 := _3.val_int
  label l39
  // [mir] StorageLive(_97)
  // [mir] _97 = _90
  _97 := builtin$havoc_ref()
  inhale acc(_97.val_int, write)
  _97.val_int := _90
  label l40
  // [mir] _94 = set(move _95, move _96, move _97) -> [return: bb49, unwind: bb53]
  label l41
  assert 0 <= _96 && _96 < 10
  assert true
  assert _96 >= 0
  fold acc(i32(_97), write)
  exhale acc(_95.val_ref, write) &&
    (acc(Array$10$i32(_95.val_ref), write) &&
    (_96 >= 0 && acc(i32(_97), write)))
  _94 := builtin$havoc_ref()
  inhale acc(Array$10$i32(old[l41](_95.val_ref)), write)
  inhale acc(tuple0$(_94), write)
  inhale true
  inhale (forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(old[l41](_95.val_ref)),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < 10) ||
      (!(_0_quant_0 == old[l41](_96)) ==>
      _0_quant_0 < 10 &&
      (_0_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(old[l41](_95.val_ref)),
      _0_quant_0) ==
      old[l41](read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_95.val_ref),
      _0_quant_0)))))) &&
    (old[l41](_96) < 10 &&
    read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(old[l41](_95.val_ref)),
    old[l41](_96)) ==
    old[l41](_97.val_int))
  label l42
  // ========== l43 ==========
  // MIR edge bb48 --> bb49
  // Expire borrows
  // expire_borrows ReborrowingDAG(L29,L23,)

  // ========== loop1_group3_bb49 ==========
  __t39 := true
  // [mir] StorageDead(_97)
  // [mir] StorageDead(_96)
  // [mir] StorageDead(_95)
  // [mir] StorageDead(_94)
  // [mir] StorageLive(_98)
  // [mir] StorageLive(_99)
  // [mir] _99 = &mut (*_1)
  _99 := builtin$havoc_ref()
  inhale acc(_99.val_ref, write)
  _99.val_ref := _1.val_ref
  label l44
  // [mir] StorageLive(_100)
  // [mir] _100 = _2
  _100 := builtin$havoc_int()
  _100 := _2.val_int
  label l45
  // [mir] StorageLive(_101)
  // [mir] _101 = _86
  _101 := builtin$havoc_ref()
  inhale acc(_101.val_int, write)
  _101.val_int := _86
  label l46
  // [mir] _98 = set(move _99, move _100, move _101) -> [return: bb50, unwind: bb53]
  label l47
  assert 0 <= _100 && _100 < 10
  assert true
  assert _100 >= 0
  fold acc(i32(_101), write)
  exhale acc(_99.val_ref, write) &&
    (acc(Array$10$i32(_99.val_ref), write) &&
    (_100 >= 0 && acc(i32(_101), write)))
  _98 := builtin$havoc_ref()
  inhale acc(Array$10$i32(old[l47](_99.val_ref)), write)
  inhale acc(tuple0$(_98), write)
  inhale true
  inhale (forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(old[l47](_99.val_ref)),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < 10) ||
      (!(_0_quant_0 == old[l47](_100)) ==>
      _0_quant_0 < 10 &&
      (_0_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(old[l47](_99.val_ref)),
      _0_quant_0) ==
      old[l47](read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_99.val_ref),
      _0_quant_0)))))) &&
    (old[l47](_100) < 10 &&
    read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(old[l47](_99.val_ref)),
    old[l47](_100)) ==
    old[l47](_101.val_int))
  label l48
  // ========== l49 ==========
  // MIR edge bb49 --> bb50
  // Expire borrows
  // expire_borrows ReborrowingDAG(L33,L24,)

  // ========== loop1_group3_bb50 ==========
  __t40 := true
  // [mir] StorageDead(_101)
  // [mir] StorageDead(_100)
  // [mir] StorageDead(_99)
  // [mir] StorageDead(_98)
  // [mir] _102 = CheckedAdd(_3, const 1_usize)
  _102 := builtin$havoc_ref()
  inhale acc(_102.tuple_0, write)
  inhale acc(_102.tuple_0.val_int, write)
  inhale acc(_102.tuple_1, write)
  inhale acc(_102.tuple_1.val_bool, write)
  _102.tuple_0.val_int := _3.val_int + 1
  _102.tuple_1.val_bool := false
  // [mir] assert(!move (_102.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb51, unwind: bb53]
  __t68 := _102.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t68
  // ========== loop1_group3_bb51 ==========
  __t41 := true
  // [mir] _3 = move (_102.0: usize)
  _3 := _102.tuple_0
  label l50
  // [mir] _4 = const ()
  // [mir] StorageDead(_90)
  // [mir] StorageDead(_86)
  // [mir] StorageDead(_25)
  // [mir] StorageDead(_5)
  // [mir] goto -> bb1
  // ========== loop1_group4_bb1 ==========
  // This is a loop head
  __t1 := true
  // [mir] falseUnwind -> [real: bb2, unwind: bb53]
  // ========== loop1_group4_bb2 ==========
  __t2 := true
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] _6 = _3
  _6 := builtin$havoc_int()
  _6 := _3.val_int
  label l51
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = &(*_1)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_ref, write)
  _9.val_ref := _1.val_ref
  exhale acc(Array$10$i32(_1.val_ref), write - read$())
  inhale acc(Array$10$i32(_9.val_ref), read$())
  label l52
  // [mir] _8 = move _9 as &[i32] (PointerCoercion(Unsize))
  label l53
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_ref, write)
  inhale acc(Slice$i32(_8.val_ref), read$())
  inhale Slice$len__$TY$__i32$Slice$i32$$int$(_8.val_ref) == 10
  inhale (forall i: Int ::
      { lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_9.val_ref,
      i) }
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_8.val_ref, i) }
      0 <= i && i < 10 ==>
      lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_9.val_ref,
      i) ==
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_8.val_ref, i))
  // [mir] StorageDead(_9)
  // [mir] _7 = core::slice::<impl [i32]>::len(move _8) -> [return: bb3, unwind: bb53]
  label l54
  _7 := builtin$havoc_int()
  _7 := Slice$len__$TY$__i32$Slice$i32$$int$(_8.val_ref)
  // transfer perm _8.val_ref --> old[l54](_8.val_ref) // unchecked: false
  // ========== l55 ==========
  // MIR edge bb2 --> bb3
  // Expire borrows
  // expire_borrows ReborrowingDAG(L30,L32,L0,)

  if (__t2 && (__t2 && __t2)) {
    // expire loan L0
    exhale acc(Array$10$i32(_9.val_ref), read$())
    inhale acc(Array$10$i32(_1.val_ref), write - read$())
  }
  // ========== loop1_group4_bb3 ==========
  __t3 := true
  // [mir] StorageDead(_8)
  // [mir] _5 = Lt(move _6, move _7)
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := _6 < _7
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb52, otherwise: bb4]
  __t69 := _5.val_bool
  if (__t69) {
    goto loop1_inv_post_perm
  }
  goto loop1_group2_bb4
  
  label loop1_group1_bb1
  // ========== l17 ==========
  // MIR edge bb17 --> bb18
  // ========== loop1_group3_loop15_group2_bb18 ==========
  __t15 := true
  // [mir] StorageLive(_34)
  // [mir] StorageLive(_35)
  // [mir] _35 = const false
  _35 := builtin$havoc_ref()
  inhale acc(_35.val_bool, write)
  _35.val_bool := false
  // [mir] switchInt(move _35) -> [0: bb20, otherwise: bb19]
  __t49 := _35.val_bool
  // Ignore default target bb19, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb15)
  _preserve$1 := _1.val_ref
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  fold acc(usize(_25), write)
  // obtain acc(usize(_25), write)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), read)
  // obtain acc(_1.val_ref, read)
  // obtain acc(Array$10$i32(_1.val_ref), read)
  assert 0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) < 10 &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0))))) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int)) ||
      (!((unfolding acc(usize(_3), write) in _3.val_int) <= _1_quant_0) ||
      (_1_quant_0 < 10 ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0)))))) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <
    (unfolding acc(usize(_25), write) in _25.val_int) &&
    (unfolding acc(usize(_25), write) in _25.val_int) < 10 &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <=
    (unfolding acc(usize(_2), write) in _2.val_int) &&
    (unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
    ((forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      ((unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      (unfolding acc(usize(_2), write) in _2.val_int))))) &&
    (forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !((unfolding acc(usize(_3), write) in _3.val_int) <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_25), write) in _25.val_int)) ||
      (_0_quant_0 < 10 ==>
      (unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
      (_0_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      (unfolding acc(usize(_2), write) in _2.val_int)) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0))))))))))
  assert true
  assert _preserve$1 == _1.val_ref
  exhale acc(usize(_2), write) &&
    (acc(usize(_25), write) &&
    (acc(usize(_3), read$()) &&
    (acc(_1.val_ref, read$()) && acc(Array$10$i32(_1.val_ref), read$()))))
  _2 := builtin$havoc_ref()
  _25 := builtin$havoc_ref()
  _29 := builtin$havoc_ref()
  _30 := builtin$havoc_int()
  _31 := builtin$havoc_int()
  _32 := builtin$havoc_ref()
  _33 := builtin$havoc_ref()
  _35 := builtin$havoc_ref()
  _39 := builtin$havoc_ref()
  _44 := builtin$havoc_ref()
  _49 := builtin$havoc_ref()
  _54 := builtin$havoc_ref()
  _59 := builtin$havoc_ref()
  _65 := builtin$havoc_ref()
  _72 := builtin$havoc_ref()
  _73 := builtin$havoc_int()
  _74 := builtin$havoc_int()
  _75 := builtin$havoc_int()
  _76 := builtin$havoc_ref()
  _77 := builtin$havoc_int()
  _78 := builtin$havoc_int()
  _79 := builtin$havoc_int()
  _80 := builtin$havoc_ref()
  _81 := builtin$havoc_ref()
  _82 := builtin$havoc_ref()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t19 := builtin$havoc_bool()
  __t20 := builtin$havoc_bool()
  __t21 := builtin$havoc_bool()
  __t22 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t31 := builtin$havoc_bool()
  __t32 := builtin$havoc_bool()
  __t33 := builtin$havoc_bool()
  __t34 := builtin$havoc_bool()
  __t35 := builtin$havoc_bool()
  __t50 := builtin$havoc_bool()
  __t51 := builtin$havoc_bool()
  __t52 := builtin$havoc_bool()
  __t53 := builtin$havoc_bool()
  __t54 := builtin$havoc_bool()
  __t55 := builtin$havoc_bool()
  __t56 := builtin$havoc_bool()
  __t57 := builtin$havoc_ref()
  __t58 := builtin$havoc_bool()
  __t59 := builtin$havoc_ref()
  __t60 := builtin$havoc_bool()
  __t61 := builtin$havoc_bool()
  __t62 := builtin$havoc_bool()
  __t63 := builtin$havoc_bool()
  // ========== loop1_group3_loop15_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb15
  inhale acc(usize(_2), write) &&
    (acc(usize(_25), write) &&
    (acc(usize(_3), read$()) &&
    (acc(_1.val_ref, read$()) && acc(Array$10$i32(_1.val_ref), read$()))))
  inhale _preserve$1 == _1.val_ref
  inhale true
  // ========== loop1_group3_loop15_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb15
  inhale 0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) < 10 &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0))))) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int)) ||
      (!((unfolding acc(usize(_3), write) in _3.val_int) <= _1_quant_0) ||
      (_1_quant_0 < 10 ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0)))))) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <
    (unfolding acc(usize(_25), write) in _25.val_int) &&
    (unfolding acc(usize(_25), write) in _25.val_int) < 10 &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <=
    (unfolding acc(usize(_2), write) in _2.val_int) &&
    (unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
    ((forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      ((unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      (unfolding acc(usize(_2), write) in _2.val_int))))) &&
    (forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !((unfolding acc(usize(_3), write) in _3.val_int) <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_25), write) in _25.val_int)) ||
      (_0_quant_0 < 10 ==>
      (unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
      (_0_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      (unfolding acc(usize(_2), write) in _2.val_int)) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0))))))))))
  // ========== loop1_group3_loop15_group3_bb20 ==========
  __t16 := true
  // [mir] _34 = const ()
  // [mir] goto -> bb21
  // ========== loop1_group3_loop15_group3_bb21 ==========
  __t17 := true
  // [mir] StorageDead(_35)
  // [mir] StorageDead(_34)
  // [mir] StorageLive(_38)
  // [mir] StorageLive(_39)
  // [mir] _39 = const false
  _39 := builtin$havoc_ref()
  inhale acc(_39.val_bool, write)
  _39.val_bool := false
  // [mir] switchInt(move _39) -> [0: bb23, otherwise: bb22]
  __t50 := _39.val_bool
  // Ignore default target bb22, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_group3_bb23 ==========
  __t18 := true
  // [mir] _38 = const ()
  // [mir] goto -> bb24
  // ========== loop1_group3_loop15_group3_bb24 ==========
  __t19 := true
  // [mir] StorageDead(_39)
  // [mir] StorageDead(_38)
  // [mir] StorageLive(_43)
  // [mir] StorageLive(_44)
  // [mir] _44 = const false
  _44 := builtin$havoc_ref()
  inhale acc(_44.val_bool, write)
  _44.val_bool := false
  // [mir] switchInt(move _44) -> [0: bb26, otherwise: bb25]
  __t51 := _44.val_bool
  // Ignore default target bb25, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_group3_bb26 ==========
  __t20 := true
  // [mir] _43 = const ()
  // [mir] goto -> bb27
  // ========== loop1_group3_loop15_group3_bb27 ==========
  __t21 := true
  // [mir] StorageDead(_44)
  // [mir] StorageDead(_43)
  // [mir] StorageLive(_48)
  // [mir] StorageLive(_49)
  // [mir] _49 = const false
  _49 := builtin$havoc_ref()
  inhale acc(_49.val_bool, write)
  _49.val_bool := false
  // [mir] switchInt(move _49) -> [0: bb29, otherwise: bb28]
  __t52 := _49.val_bool
  // Ignore default target bb28, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_group3_bb29 ==========
  __t22 := true
  // [mir] _48 = const ()
  // [mir] goto -> bb30
  // ========== loop1_group3_loop15_group3_bb30 ==========
  __t23 := true
  // [mir] StorageDead(_49)
  // [mir] StorageDead(_48)
  // [mir] StorageLive(_53)
  // [mir] StorageLive(_54)
  // [mir] _54 = const false
  _54 := builtin$havoc_ref()
  inhale acc(_54.val_bool, write)
  _54.val_bool := false
  // [mir] switchInt(move _54) -> [0: bb32, otherwise: bb31]
  __t53 := _54.val_bool
  // Ignore default target bb31, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_group3_bb32 ==========
  __t24 := true
  // [mir] _53 = const ()
  // [mir] goto -> bb33
  // ========== loop1_group3_loop15_group3_bb33 ==========
  __t25 := true
  // [mir] StorageDead(_54)
  // [mir] StorageDead(_53)
  // [mir] StorageLive(_58)
  // [mir] StorageLive(_59)
  // [mir] _59 = const false
  _59 := builtin$havoc_ref()
  inhale acc(_59.val_bool, write)
  _59.val_bool := false
  // [mir] switchInt(move _59) -> [0: bb35, otherwise: bb34]
  __t54 := _59.val_bool
  // Ignore default target bb34, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_group3_bb35 ==========
  __t26 := true
  // [mir] _58 = const ()
  // [mir] goto -> bb36
  // ========== loop1_group3_loop15_group3_bb36 ==========
  __t27 := true
  // [mir] StorageDead(_59)
  // [mir] StorageDead(_58)
  // [mir] StorageLive(_64)
  // [mir] StorageLive(_65)
  // [mir] _65 = const false
  _65 := builtin$havoc_ref()
  inhale acc(_65.val_bool, write)
  _65.val_bool := false
  // [mir] switchInt(move _65) -> [0: bb38, otherwise: bb37]
  __t55 := _65.val_bool
  // Ignore default target bb37, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_group3_bb38 ==========
  __t28 := true
  // [mir] _64 = const ()
  // [mir] goto -> bb39
  // ========== loop1_group3_loop15_group3_bb39 ==========
  __t29 := true
  // [mir] StorageDead(_65)
  // [mir] StorageDead(_64)
  // [mir] StorageLive(_71)
  // [mir] StorageLive(_72)
  // [mir] StorageLive(_73)
  // [mir] StorageLive(_74)
  // [mir] _74 = _25
  _74 := builtin$havoc_int()
  unfold acc(usize(_25), write)
  _74 := _25.val_int
  label l18
  // [mir] _75 = Len((*_1))
  assert acc(Array$10$i32(_1.val_ref), read$())
  _75 := builtin$havoc_int()
  _75 := 10
  // [mir] _76 = Lt(_74, _75)
  _76 := builtin$havoc_ref()
  inhale acc(_76.val_bool, write)
  _76.val_bool := _74 < _75
  // [mir] assert(move _76, "index out of bounds: the length is {} but the index is {}", move _75, _74) -> [success: bb40, unwind: bb53]
  __t56 := _76.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _75, _74
  assert __t56
  // ========== loop1_group3_loop15_group3_bb40 ==========
  __t30 := true
  // [mir] _73 = (*_1)[_74]
  __t57 := builtin$havoc_ref()
  inhale acc(i32(__t57), write)
  assert acc(Array$10$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_1.val_ref,
    _74) ==
    (unfolding acc(i32(__t57), write) in __t57.val_int)
  _73 := builtin$havoc_int()
  unfold acc(i32(__t57), write)
  _73 := __t57.val_int
  label l19
  // [mir] StorageLive(_77)
  // [mir] StorageLive(_78)
  // [mir] _78 = _2
  _78 := builtin$havoc_int()
  unfold acc(usize(_2), write)
  _78 := _2.val_int
  label l20
  // [mir] _79 = Len((*_1))
  assert acc(Array$10$i32(_1.val_ref), read$())
  _79 := builtin$havoc_int()
  _79 := 10
  // [mir] _80 = Lt(_78, _79)
  _80 := builtin$havoc_ref()
  inhale acc(_80.val_bool, write)
  _80.val_bool := _78 < _79
  // [mir] assert(move _80, "index out of bounds: the length is {} but the index is {}", move _79, _78) -> [success: bb41, unwind: bb53]
  __t58 := _80.val_bool
  // Rust assertion: "index out of bounds: the length is {} but the index is {}", move _79, _78
  assert __t58
  // ========== loop1_group3_loop15_group3_bb41 ==========
  __t31 := true
  // [mir] _77 = (*_1)[_78]
  __t59 := builtin$havoc_ref()
  inhale acc(i32(__t59), write)
  assert acc(Array$10$i32(_1.val_ref), read$())
  inhale lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_1.val_ref,
    _78) ==
    (unfolding acc(i32(__t59), write) in __t59.val_int)
  _77 := builtin$havoc_int()
  unfold acc(i32(__t59), write)
  _77 := __t59.val_int
  label l21
  // [mir] _72 = Lt(move _73, move _77)
  _72 := builtin$havoc_ref()
  inhale acc(_72.val_bool, write)
  _72.val_bool := _73 < _77
  // [mir] StorageDead(_78)
  // [mir] StorageDead(_77)
  // [mir] StorageDead(_74)
  // [mir] StorageDead(_73)
  // [mir] switchInt(move _72) -> [0: bb43, otherwise: bb42]
  __t60 := _72.val_bool
  if (!__t60) {
    goto l4
  }
  goto loop1_group1_bb2
  
  label loop1_group1_bb2
  // ========== l22 ==========
  // MIR edge bb41 --> bb42
  // ========== loop1_group3_loop15_group3_bb42 ==========
  __t32 := true
  // [mir] StorageLive(_81)
  // [mir] _81 = _25
  _81 := builtin$havoc_ref()
  inhale acc(_81.val_int, write)
  _81.val_int := _25.val_int
  label l24
  // [mir] _2 = move _81
  _2 := _81
  label l25
  // [mir] StorageDead(_81)
  // [mir] _71 = const ()
  // [mir] goto -> bb44
  goto loop1_group1_bb3
  
  label loop1_group1_bb3
  // ========== loop1_group3_loop15_group3_bb44 ==========
  __t34 := true
  // [mir] StorageDead(_72)
  // [mir] StorageDead(_71)
  // [mir] _82 = CheckedAdd(_25, const 1_usize)
  _82 := builtin$havoc_ref()
  inhale acc(_82.tuple_0, write)
  inhale acc(_82.tuple_0.val_int, write)
  inhale acc(_82.tuple_1, write)
  inhale acc(_82.tuple_1.val_bool, write)
  _82.tuple_0.val_int := _25.val_int + 1
  _82.tuple_1.val_bool := false
  // [mir] assert(!move (_82.1: bool), "attempt to compute `{} + {}`, which would overflow", _25, const 1_usize) -> [success: bb45, unwind: bb53]
  __t61 := _82.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t61
  // ========== loop1_group3_loop15_group3_bb45 ==========
  __t35 := true
  // [mir] _25 = move (_82.0: usize)
  _25 := _82.tuple_0
  label l26
  // [mir] _4 = const ()
  // [mir] StorageDead(_29)
  // [mir] goto -> bb15
  // ========== loop1_group3_loop15_group4_bb15 ==========
  // This is a loop head
  __t12 := true
  // [mir] falseUnwind -> [real: bb16, unwind: bb53]
  // ========== loop1_group3_loop15_group4_bb16 ==========
  __t13 := true
  // [mir] StorageLive(_29)
  // [mir] StorageLive(_30)
  // [mir] _30 = _25
  _30 := builtin$havoc_int()
  _30 := _25.val_int
  label l27
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] StorageLive(_33)
  // [mir] _33 = &(*_1)
  _33 := builtin$havoc_ref()
  inhale acc(_33.val_ref, write)
  _33.val_ref := _1.val_ref
  exhale acc(Array$10$i32(_1.val_ref), write - read$())
  inhale acc(Array$10$i32(_33.val_ref), read$())
  label l28
  // [mir] _32 = move _33 as &[i32] (PointerCoercion(Unsize))
  label l29
  _32 := builtin$havoc_ref()
  inhale acc(_32.val_ref, write)
  inhale acc(Slice$i32(_32.val_ref), read$())
  inhale Slice$len__$TY$__i32$Slice$i32$$int$(_32.val_ref) == 10
  inhale (forall i: Int ::
      { lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_33.val_ref,
      i) }
      { lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_32.val_ref,
      i) }
      0 <= i && i < 10 ==>
      lookup_pure__$TY$__Array$10$i32$i32$Array$10$i32$$int$$$int$(_33.val_ref,
      i) ==
      lookup_pure__$TY$__Slice$i32$i32$Slice$i32$$int$$$int$(_32.val_ref, i))
  // [mir] StorageDead(_33)
  // [mir] _31 = core::slice::<impl [i32]>::len(move _32) -> [return: bb17, unwind: bb53]
  label l30
  _31 := builtin$havoc_int()
  _31 := Slice$len__$TY$__i32$Slice$i32$$int$(_32.val_ref)
  // transfer perm _32.val_ref --> old[l30](_32.val_ref) // unchecked: false
  // ========== l31 ==========
  // MIR edge bb16 --> bb17
  // Expire borrows
  // expire_borrows ReborrowingDAG(L31,L28,L6,)

  if (__t13 && (__t13 && __t13)) {
    // expire loan L6
    exhale acc(Array$10$i32(_33.val_ref), read$())
    inhale acc(Array$10$i32(_1.val_ref), write - read$())
  }
  // ========== loop1_group3_loop15_group4_bb17 ==========
  __t14 := true
  // [mir] StorageDead(_32)
  // [mir] _29 = Lt(move _30, move _31)
  _29 := builtin$havoc_ref()
  inhale acc(_29.val_bool, write)
  _29.val_bool := _30 < _31
  // [mir] StorageDead(_31)
  // [mir] StorageDead(_30)
  // [mir] switchInt(move _29) -> [0: bb46, otherwise: bb18]
  __t62 := _29.val_bool
  if (__t62) {
    goto loop1_inv_post_fnspc
  }
  goto l5
  
  label loop1_group2_bb4
  // ========== l56 ==========
  // MIR edge bb3 --> bb52
  // ========== l60 ==========
  // drop Acc(_88.val_int, write) (Acc(_88.val_int, write))
  // drop Acc(_89.val_bool, write) (Acc(_89.val_bool, write))
  // drop Acc(_102.tuple_0, write) (Acc(_102.tuple_0, write))
  // drop Acc(_102.tuple_1.val_bool, write) (Acc(_102.tuple_1.val_bool, write))
  // drop Acc(_91.val_int, write) (Acc(_91.val_int, write))
  // drop Acc(_30.val_int, write) (Acc(_30.val_int, write))
  // drop Acc(_87.val_int, write) (Acc(_87.val_int, write))
  // drop Acc(_29.val_bool, write) (Acc(_29.val_bool, write))
  // drop Acc(_25.val_int, write) (Acc(_25.val_int, write))
  // drop Acc(_93.val_bool, write) (Acc(_93.val_bool, write))
  // drop Acc(_90.val_int, write) (Acc(_90.val_int, write))
  // drop Acc(_20.val_bool, write) (Acc(_20.val_bool, write))
  // drop Acc(_2.val_int, write) (Acc(_2.val_int, write))
  // drop Acc(_27.tuple_1.val_bool, write) (Acc(_27.tuple_1.val_bool, write))
  // drop Acc(_15.val_bool, write) (Acc(_15.val_bool, write))
  // drop Acc(_33.val_ref, write) (Acc(_33.val_ref, write))
  // drop Acc(_27.tuple_0, write) (Acc(_27.tuple_0, write))
  // drop Acc(_31.val_int, write) (Acc(_31.val_int, write))
  // drop Acc(old[l14](_32.val_ref), write) (Acc(old[l14](_32.val_ref), write))
  // drop Acc(__t65.val_int, write) (Acc(__t65.val_int, write))
  // drop Acc(_86.val_int, write) (Acc(_86.val_int, write))
  // drop Acc(old[l54](_8.val_ref), write) (Acc(old[l54](_8.val_ref), write))
  // drop Acc(_26.val_int, write) (Acc(_26.val_int, write))
  // drop Acc(_32.val_ref, write) (Acc(_32.val_ref, write))
  // drop Acc(_92.val_int, write) (Acc(_92.val_int, write))
  // drop Acc(__t67.val_int, write) (Acc(__t67.val_int, write))
  // drop Pred(_98, write) (Pred(_98, write))
  // drop Pred(_94, write) (Pred(_94, write))
  // drop Pred(old[l54](_8.val_ref), read) (Pred(old[l54](_8.val_ref), read))
  // drop Pred(old[l14](_32.val_ref), read) (Pred(old[l14](_32.val_ref), read))
  // drop Acc(_102.tuple_1, write) (Acc(_102.tuple_1, write))
  // drop Acc(_27.tuple_1, write) (Acc(_27.tuple_1, write))
  goto loop1_inv_pre
  
  label loop1_inv_post_fnspc
  // ========== l33 ==========
  // MIR edge bb17 --> bb18
  // ========== loop1_group3_loop15_group5_bb18 ==========
  __t15 := true
  // [mir] StorageLive(_34)
  // [mir] StorageLive(_35)
  // [mir] _35 = const false
  _35 := builtin$havoc_ref()
  inhale acc(_35.val_bool, write)
  _35.val_bool := false
  // [mir] switchInt(move _35) -> [0: bb20, otherwise: bb19]
  __t63 := _35.val_bool
  // Ignore default target bb19, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_group3_loop15_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb15)
  fold acc(usize(_2), write)
  // obtain acc(usize(_2), write)
  fold acc(usize(_25), write)
  // obtain acc(usize(_25), write)
  // obtain acc(usize(_3), read)
  // obtain acc(_1.val_ref, read)
  // obtain acc(Array$10$i32(_1.val_ref), read)
  assert 0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) < 10 &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0))))) &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int)) ||
      (!((unfolding acc(usize(_3), write) in _3.val_int) <= _1_quant_0) ||
      (_1_quant_0 < 10 ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0)))))) &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <
    (unfolding acc(usize(_25), write) in _25.val_int) &&
    (unfolding acc(usize(_25), write) in _25.val_int) < 10 &&
    ((unfolding acc(usize(_3), write) in _3.val_int) <=
    (unfolding acc(usize(_2), write) in _2.val_int) &&
    (unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
    ((forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      ((unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      (unfolding acc(usize(_2), write) in _2.val_int))))) &&
    (forall _0_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) }
      0 <= _0_quant_0 ==>
      !((unfolding acc(usize(_3), write) in _3.val_int) <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_25), write) in _25.val_int)) ||
      (_0_quant_0 < 10 ==>
      (unfolding acc(usize(_2), write) in _2.val_int) < 10 &&
      (_0_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      (unfolding acc(usize(_2), write) in _2.val_int)) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0))))))))))
  assert true
  assert _preserve$1 == _1.val_ref
  exhale acc(usize(_2), write) &&
    (acc(usize(_25), write) &&
    (acc(usize(_3), read$()) &&
    (acc(_1.val_ref, read$()) && acc(Array$10$i32(_1.val_ref), read$()))))
  inhale false
  goto end_of_method
  
  label loop1_inv_post_perm
  // ========== l57 ==========
  // MIR edge bb3 --> bb4
  // ========== loop1_group5_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = const false
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := false
  // [mir] switchInt(move _11) -> [0: bb6, otherwise: bb5]
  __t70 := _11.val_bool
  // Ignore default target bb5, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop1_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb1)
  fold acc(usize(_3), write)
  // obtain acc(usize(_3), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(Array$10$i32(_1.val_ref), write)
  assert 0 <= (unfolding acc(usize(_3), write) in _3.val_int) &&
    (unfolding acc(usize(_3), write) in _3.val_int) < 10 &&
    ((forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int) ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0))))) &&
    (forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < (unfolding acc(usize(_3), write) in _3.val_int)) ||
      (!((unfolding acc(usize(_3), write) in _3.val_int) <= _1_quant_0) ||
      (_1_quant_0 < 10 ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_1.val_ref),
      _1_quant_0)))))))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(usize(_3), write) &&
    (acc(_1.val_ref, read$()) && acc(Array$10$i32(_1.val_ref), write))
  inhale false
  goto end_of_method
  
  label loop1_inv_pre
  // ========== bb52 ==========
  __t42 := true
  // [mir] StorageLive(_104)
  // [mir] _0 = const ()
  // [mir] StorageDead(_104)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_3)
  // [mir] StorageDead(_2)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l59
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(Array$10$i32(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert (forall _0_quant_0: Int, _1_quant_0: Int ::
      { read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_old$pre$0),
      _0_quant_0), read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_old$pre$0),
      _1_quant_0) }
      0 <= _0_quant_0 && 0 <= _1_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (!(_0_quant_0 < _1_quant_0) ||
      (_1_quant_0 < 10 ==>
      _0_quant_0 < 10 &&
      (_1_quant_0 < 10 &&
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_old$pre$0),
      _0_quant_0) <=
      read$Snap$Array$10$i32$__$TY$__Snap$Array$10$i32$$int$$$int$(snap$__$TY$__Snap$Array$10$i32$Array$10$i32$Snap$Array$10$i32(_old$pre$0),
      _1_quant_0)))))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(Array$10$i32(_old$pre$0), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop1_start
  // ========== l16 ==========
  // MIR edge bb17 --> bb46
  goto l6
  
  label return
  // ========== l5 ==========
  // MIR edge bb3 --> bb52
  goto loop1_inv_pre
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
