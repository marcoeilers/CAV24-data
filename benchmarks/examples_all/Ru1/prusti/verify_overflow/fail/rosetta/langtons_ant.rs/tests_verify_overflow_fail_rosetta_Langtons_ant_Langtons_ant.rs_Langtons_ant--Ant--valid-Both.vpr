domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$dir: Ref

field f$x: Ref

field f$y: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate m_Direction$_beg_$_end_(self: Ref) 

predicate struct$m_Ant(self: Ref) {
  acc(self.f$x, write) &&
  (acc(usize(self.f$x), write) &&
  (acc(self.f$y, write) &&
  (acc(usize(self.f$y), write) &&
  (acc(self.f$dir, write) &&
  acc(m_Direction$_beg_$_end_(self.f$dir), write)))))
}

predicate usize(self: Ref) {
  acc(self.val_int, write) &&
  (0 <= self.val_int && self.val_int <= 18446744073709551615)
}

method m_Ant$$valid() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Int
  var _3: Int
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Int
  var _8: Ref
  var _9: Int
  var _10: Int
  var _11: Ref
  var _12: Int
  var _13: Ref
  var _14: Int
  var _15: Int
  
  label start
  // ========== start ==========
  // Def path: "Langtons_ant::{impl#1}::valid"
  // Span: tests/verify_overflow/fail/rosetta/Langtons_ant.rs:99:5: 102:6 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(struct$m_Ant(_1.val_ref), read$()) &&
    (_2 >= 0 && 18446744073709551615 >= _2 &&
    (_3 >= 0 && 18446744073709551615 >= _3)))
  inhale _2 >= 0 && _3 >= 0
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_4)
  // [mir] StorageLive(_5)
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] _7 = ((*_1).1: usize)
  _7 := builtin$havoc_int()
  unfold acc(struct$m_Ant(_1.val_ref), read$())
  unfold acc(usize(_1.val_ref.f$y), read$())
  _7 := _1.val_ref.f$y.val_int
  label l0
  // [mir] _6 = Le(const 0_usize, move _7)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_bool, write)
  _6.val_bool := 0 <= _7
  // [mir] StorageDead(_7)
  // [mir] switchInt(move _6) -> [0: bb7, otherwise: bb8]
  __t10 := _6.val_bool
  if (!__t10) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l2 ==========
  // MIR edge bb0 --> bb7
  // ========== bb7 ==========
  __t2 := true
  // [mir] _5 = const false
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_bool, write)
  _5.val_bool := false
  // [mir] goto -> bb9
  // ========== l17 ==========
  inhale _2 >= 0 && 18446744073709551615 >= _2
  goto l1
  
  label bb7
  // ========== bb6 ==========
  __t6 := true
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_5)
  // [mir] switchInt(move _4) -> [0: bb1, otherwise: bb2]
  __t12 := _4.val_bool
  if (!__t12) {
    goto l6
  }
  goto bb9
  
  label bb8
  // ========== l7 ==========
  // MIR edge bb9 --> bb4
  // ========== bb4 ==========
  __t5 := true
  // [mir] _4 = const false
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_bool, write)
  _4.val_bool := false
  // [mir] goto -> bb6
  // ========== l19 ==========
  unfold acc(usize(_1.val_ref.f$x), read$())
  goto bb7
  
  label bb9
  // ========== l10 ==========
  // MIR edge bb6 --> bb2
  // ========== bb2 ==========
  __t7 := true
  // [mir] StorageLive(_13)
  // [mir] StorageLive(_14)
  // [mir] _14 = ((*_1).0: usize)
  _14 := builtin$havoc_int()
  _14 := _1.val_ref.f$x.val_int
  label l12
  // [mir] StorageLive(_15)
  // [mir] _15 = _3
  _15 := builtin$havoc_int()
  inhale _3 >= 0 && 18446744073709551615 >= _3
  _15 := _3
  label l13
  // [mir] _13 = Lt(move _14, move _15)
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_bool, write)
  _13.val_bool := _14 < _15
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_14)
  // [mir] _0 = move _13
  _0 := _13
  label l14
  // [mir] goto -> bb3
  // ========== l20 ==========
  // drop Acc(_14.val_int, write) (Acc(_14.val_int, write))
  // drop Acc(_15.val_int, write) (Acc(_15.val_int, write))
  goto l7
  
  label l1
  // ========== bb9 ==========
  __t3 := true
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_6)
  // [mir] switchInt(move _5) -> [0: bb4, otherwise: bb5]
  __t11 := _5.val_bool
  if (!__t11) {
    goto bb8
  }
  goto l2
  
  label l2
  // ========== l6 ==========
  // MIR edge bb9 --> bb5
  // ========== bb5 ==========
  __t4 := true
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = ((*_1).0: usize)
  _12 := builtin$havoc_int()
  unfold acc(usize(_1.val_ref.f$x), read$())
  _12 := _1.val_ref.f$x.val_int
  label l8
  // [mir] _11 = Le(const 0_usize, move _12)
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_bool, write)
  _11.val_bool := 0 <= _12
  // [mir] StorageDead(_12)
  // [mir] _4 = move _11
  _4 := _11
  label l9
  // [mir] goto -> bb6
  // ========== l18 ==========
  // drop Acc(_12.val_int, write) (Acc(_12.val_int, write))
  goto bb7
  
  label l6
  // ========== l11 ==========
  // MIR edge bb6 --> bb1
  // ========== bb1 ==========
  __t8 := true
  // [mir] _0 = const false
  _0 := builtin$havoc_ref()
  inhale acc(_0.val_bool, write)
  _0.val_bool := false
  // [mir] goto -> bb3
  // ========== l21 ==========
  inhale _3 >= 0 && 18446744073709551615 >= _3
  goto l7
  
  label l7
  // ========== bb3 ==========
  __t9 := true
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_4)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l16
  // Fold predicates for &mut args and transfer borrow permissions to old
  fold acc(usize(_1.val_ref.f$y), read$())
  fold acc(usize(_1.val_ref.f$x), read$())
  fold acc(struct$m_Ant(_1.val_ref), read$())
  // obtain acc(struct$m_Ant(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(bool(_0), write)
  // obtain acc(bool(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_Ant(_old$pre$0), read$())
  // Exhale permissions of postcondition (2/3)
  exhale acc(bool(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label return
  // ========== l1 ==========
  // MIR edge bb0 --> bb8
  // ========== bb8 ==========
  __t1 := true
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = ((*_1).1: usize)
  _9 := builtin$havoc_int()
  _9 := _1.val_ref.f$y.val_int
  label l3
  // [mir] StorageLive(_10)
  // [mir] _10 = _2
  _10 := builtin$havoc_int()
  inhale _2 >= 0 && 18446744073709551615 >= _2
  _10 := _2
  label l4
  // [mir] _8 = Lt(move _9, move _10)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := _9 < _10
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_9)
  // [mir] _5 = move _8
  _5 := _8
  label l5
  // [mir] goto -> bb9
  // ========== l15 ==========
  // drop Acc(_10.val_int, write) (Acc(_10.val_int, write))
  // drop Acc(_9.val_int, write) (Acc(_9.val_int, write))
  goto l1
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
