domain Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0: Snap$struct$m_tree$$Node): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_): Snap$struct$m_tree$$Node 
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$injectivity {
    (forall _l_0: Snap$struct$m_tree$$Node, _r_0: Snap$struct$m_tree$$Node ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$discriminant_axiom {
    (forall _0: Snap$struct$m_tree$$Node ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0$axiom {
    (forall _0: Snap$struct$m_tree$$Node ::
      { Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0)) ==
      _0)
  }
}

domain Snap$struct$m_tree$$Node  {
  
  function cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0: Int,
  _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
  _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_): Snap$struct$m_tree$$Node 
  
  function Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self: Snap$struct$m_tree$$Node): Int 
  
  function Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Snap$struct$m_tree$$Node): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  function Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Snap$struct$m_tree$$Node): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  axiom Snap$struct$m_tree$$Node$0$injectivity {
    (forall _l_0: Int, _l_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _l_2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _r_0: Int, _r_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _r_2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_l_0,
      _l_1, _l_2), cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_r_0,
      _r_1, _r_2) }
      cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_l_0,
      _l_1, _l_2) ==
      cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_r_0,
      _r_1, _r_2) ==>
      _l_0 == _r_0 && (_l_1 == _r_1 && _l_2 == _r_2))
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$value$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) }
      Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) ==
      _0)
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$value$valid {
    (forall self: Snap$struct$m_tree$$Node ::
      { Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self) }
      -2147483648 <=
      Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self) &&
      Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self) <=
      2147483647)
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$left$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) }
      Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) ==
      _1)
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$right$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) }
      Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) ==
      _2)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$left: Ref

field f$right: Ref

field f$value: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_
  requires acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_((unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(self.enum_Some.f$0), read$()) in
          snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(self.enum_Some.f$0.val_ref))))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_())
}

function snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(self: Ref): Snap$struct$m_tree$$Node
  requires acc(struct$m_tree$$Node(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node((unfolding acc(struct$m_tree$$Node(self), read$()) in
    (unfolding acc(i32(self.f$value), read$()) in self.f$value.val_int)), (unfolding acc(struct$m_tree$$Node(self), read$()) in
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$left)),
  (unfolding acc(struct$m_tree$$Node(self), read$()) in
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$right)))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(self: Ref) {
  acc(self.f$0, write) &&
  acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(self.f$0), write)
}

predicate struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.val_ref, write) && acc(struct$m_tree$$Node(self.val_ref), write)
}

predicate struct$m_tree$$Node(self: Ref) {
  acc(self.f$value, write) &&
  (acc(i32(self.f$value), write) &&
  (acc(self.f$left, write) &&
  (acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$left), write) &&
  (acc(self.f$right, write) &&
  acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$right), write)))))
}

method m_tree$$Node$$in_range() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Int
  var __t13: Int
  var __t14: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Int
  var _6: Ref
  var _7: Int
  var _8: Int
  var _9: Ref
  var _10: Ref
  var _11: Int
  var _12: Ref
  var _13: Int
  var _14: Int
  var _15: Ref
  var _16: Ref
  
  label start
  // ========== start ==========
  // Def path: "binary_search_tree::tree::{impl#0}::in_range"
  // Span: tests/verify_overflow/fail/mut-borrows/binary_search_tree.rs:26:9: 34:10 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(struct$m_tree$$Node(_1.val_ref), read$()) && acc(i32(_2), write))
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = &((*_1).1: std::option::Option<std::boxed::Box<tree::Node>>)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  unfold acc(struct$m_tree$$Node(_1.val_ref), read$())
  _4.val_ref := _1.val_ref.f$left
  inhale acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_4.val_ref), read$())
  label l0
  // [mir] FakeRead(ForMatchedPlace(None), _4)
  // [mir] _5 = discriminant((*_4))
  _5 := builtin$havoc_int()
  _5 := m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(_4.val_ref)
  // [mir] switchInt(move _5) -> [1: bb1, otherwise: bb3]
  __t12 := _5
  if (__t12 == 1) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l2 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t2 := true
  // [mir] falseEdge -> [real: bb2, imaginary: bb3]
  // ========== bb2 ==========
  __t3 := true
  // [mir] StorageLive(_6)
  // [mir] _6 = &(((*_4) as Some).0: std::boxed::Box<tree::Node>)
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_ref, write)
  unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_4.val_ref), read$())
  unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(_4.val_ref.enum_Some), read$())
  _6.val_ref := _4.val_ref.enum_Some.f$0
  inhale acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_6.val_ref), read$())
  label l3
  // [mir] StorageLive(_7)
  // [mir] _7 = ((*(*_6)).0: i32)
  _7 := builtin$havoc_int()
  unfold acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_6.val_ref), read$())
  unfold acc(struct$m_tree$$Node(_6.val_ref.val_ref), read$())
  unfold acc(i32(_6.val_ref.val_ref.f$value), read$())
  _7 := _6.val_ref.val_ref.f$value.val_int
  label l4
  // expire_borrows ReborrowingDAG(L5,L3,)

  if (__t3) {
    // expire loan L5
    fold acc(i32(_6.val_ref.val_ref.f$value), read$())
    fold acc(struct$m_tree$$Node(_6.val_ref.val_ref), read$())
    fold acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_6.val_ref), read$())
    exhale acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_6.val_ref), read$())
  }
  if (__t0 && __t3) {
    // expire loan L3
    fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(_4.val_ref.enum_Some), read$())
    fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_4.val_ref), read$())
    exhale acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_4.val_ref), read$())
  }
  // [mir] StorageLive(_8)
  // [mir] _8 = _2
  _8 := builtin$havoc_int()
  unfold acc(i32(_2), write)
  _8 := _2.val_int
  label l5
  // [mir] _3 = Lt(move _7, move _8)
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_bool, write)
  _3.val_bool := _7 < _8
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] goto -> bb4
  // ========== l19 ==========
  // drop Acc(_8.val_int, write) (Acc(_8.val_int, write))
  // drop Acc(_7.val_int, write) (Acc(_7.val_int, write))
  // drop Acc(_6.val_ref, write) (Acc(_6.val_ref, write))
  goto l1
  
  label bb1
  // ========== bb8 ==========
  __t8 := true
  // [mir] FakeRead(ForLet(None), _9)
  // [mir] StorageDead(_10)
  // [mir] StorageLive(_15)
  // [mir] _15 = _3
  _15 := builtin$havoc_ref()
  inhale acc(_15.val_bool, write)
  _15.val_bool := _3.val_bool
  label l12
  // [mir] switchInt(move _15) -> [0: bb9, otherwise: bb10]
  __t14 := _15.val_bool
  if (!__t14) {
    goto bb4
  }
  goto bb2
  
  label bb2
  // ========== l13 ==========
  // MIR edge bb8 --> bb10
  // ========== bb10 ==========
  __t9 := true
  // [mir] StorageLive(_16)
  // [mir] _16 = _9
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := _9.val_bool
  label l15
  // [mir] _0 = move _16
  _0 := _16
  label l16
  // [mir] goto -> bb11
  goto l7
  
  label bb3
  // ========== l8 ==========
  // MIR edge bb4 --> bb5
  // ========== bb5 ==========
  __t6 := true
  // [mir] falseEdge -> [real: bb6, imaginary: bb7]
  // ========== bb6 ==========
  __t7 := true
  // [mir] StorageLive(_12)
  // [mir] _12 = &(((*_10) as Some).0: std::boxed::Box<tree::Node>)
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_ref, write)
  unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_10.val_ref), read$())
  unfold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(_10.val_ref.enum_Some), read$())
  _12.val_ref := _10.val_ref.enum_Some.f$0
  inhale acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_12.val_ref), read$())
  label l9
  // [mir] StorageLive(_13)
  // [mir] _13 = ((*(*_12)).0: i32)
  _13 := builtin$havoc_int()
  unfold acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_12.val_ref), read$())
  unfold acc(struct$m_tree$$Node(_12.val_ref.val_ref), read$())
  unfold acc(i32(_12.val_ref.val_ref.f$value), read$())
  _13 := _12.val_ref.val_ref.f$value.val_int
  label l10
  // expire_borrows ReborrowingDAG(L4,L6,)

  if (__t7) {
    // expire loan L4
    fold acc(i32(_12.val_ref.val_ref.f$value), read$())
    fold acc(struct$m_tree$$Node(_12.val_ref.val_ref), read$())
    fold acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_12.val_ref), read$())
    exhale acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(_12.val_ref), read$())
  }
  if (__t4 && __t7) {
    // expire loan L6
    fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(_10.val_ref.enum_Some), read$())
    fold acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_10.val_ref), read$())
    exhale acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_10.val_ref), read$())
  }
  // [mir] StorageLive(_14)
  // [mir] _14 = _2
  _14 := builtin$havoc_int()
  _14 := _2.val_int
  label l11
  // [mir] _9 = Ge(move _13, move _14)
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := _13 >= _14
  // [mir] StorageDead(_14)
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] goto -> bb8
  // ========== l20 ==========
  // drop Acc(_12.val_ref, write) (Acc(_12.val_ref, write))
  // drop Acc(_14.val_int, write) (Acc(_14.val_int, write))
  // drop Acc(_13.val_int, write) (Acc(_13.val_int, write))
  goto bb1
  
  label bb4
  // ========== l14 ==========
  // MIR edge bb8 --> bb9
  // ========== bb9 ==========
  __t10 := true
  // [mir] _0 = const false
  _0 := builtin$havoc_ref()
  inhale acc(_0.val_bool, write)
  _0.val_bool := false
  // [mir] goto -> bb11
  goto l7
  
  label l1
  // ========== bb4 ==========
  __t4 := true
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageDead(_4)
  // [mir] StorageLive(_9)
  // [mir] StorageLive(_10)
  // [mir] _10 = &((*_1).2: std::option::Option<std::boxed::Box<tree::Node>>)
  _10 := builtin$havoc_ref()
  inhale acc(_10.val_ref, write)
  _10.val_ref := _1.val_ref.f$right
  inhale acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_10.val_ref), read$())
  label l6
  // [mir] FakeRead(ForMatchedPlace(None), _10)
  // [mir] _11 = discriminant((*_10))
  _11 := builtin$havoc_int()
  _11 := m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(_10.val_ref)
  // [mir] switchInt(move _11) -> [1: bb5, otherwise: bb7]
  __t13 := _11
  if (__t13 == 1) {
    goto bb3
  }
  goto l2
  
  label l2
  // ========== l7 ==========
  // MIR edge bb4 --> bb7
  // Expire borrows
  // expire_borrows ReborrowingDAG(L6,)

  if (__t4) {
    // expire loan L6
    exhale acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_10.val_ref), read$())
  }
  // ========== bb7 ==========
  __t5 := true
  // [mir] _9 = const true
  _9 := builtin$havoc_ref()
  inhale acc(_9.val_bool, write)
  _9.val_bool := true
  // [mir] goto -> bb8
  goto bb1
  
  label l7
  // ========== bb11 ==========
  __t11 := true
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_15)
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_3)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l18
  // Fold predicates for &mut args and transfer borrow permissions to old
  fold acc(struct$m_tree$$Node(_1.val_ref), read$())
  // obtain acc(struct$m_tree$$Node(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(bool(_0), write)
  // obtain acc(bool(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_tree$$Node(_old$pre$0), read$())
  // Exhale permissions of postcondition (2/3)
  exhale acc(bool(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label return
  // ========== l1 ==========
  // MIR edge bb0 --> bb3
  // Expire borrows
  // expire_borrows ReborrowingDAG(L3,)

  if (__t0) {
    // expire loan L3
    exhale acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_4.val_ref), read$())
  }
  // ========== bb3 ==========
  __t1 := true
  // [mir] _3 = const true
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_bool, write)
  _3.val_bool := true
  // [mir] goto -> bb4
  // ========== l17 ==========
  unfold acc(i32(_2), write)
  goto l1
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
