domain MirrorDomain  {
  
  function mirror_simple$f_tree$$Node$$in_range__$TY$__Snap$struct$m_tree$$Node$$int$$$bool$(_1: Snap$struct$m_tree$$Node,
  _2: Int): Bool 
  
  function mirror_simple$f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(_1: Snap$struct$m_tree$$Node): Bool 
}

domain Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0: Snap$struct$m_tree$$Node): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_): Snap$struct$m_tree$$Node 
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$injectivity {
    (forall _l_0: Snap$struct$m_tree$$Node, _r_0: Snap$struct$m_tree$$Node ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$discriminant_axiom {
    (forall _0: Snap$struct$m_tree$$Node ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0$axiom {
    (forall _0: Snap$struct$m_tree$$Node ::
      { Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_0)) ==
      _0)
  }
}

domain Snap$struct$m_tree$$Node  {
  
  function cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0: Int,
  _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
  _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_): Snap$struct$m_tree$$Node 
  
  function Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self: Snap$struct$m_tree$$Node): Int 
  
  function Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Snap$struct$m_tree$$Node): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  function Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Snap$struct$m_tree$$Node): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ 
  
  axiom Snap$struct$m_tree$$Node$0$injectivity {
    (forall _l_0: Int, _l_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _l_2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _r_0: Int, _r_1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _r_2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_l_0,
      _l_1, _l_2), cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_r_0,
      _r_1, _r_2) }
      cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_l_0,
      _l_1, _l_2) ==
      cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_r_0,
      _r_1, _r_2) ==>
      _l_0 == _r_0 && (_l_1 == _r_1 && _l_2 == _r_2))
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$value$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) }
      Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) ==
      _0)
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$value$valid {
    (forall self: Snap$struct$m_tree$$Node ::
      { Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self) }
      -2147483648 <=
      Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self) &&
      Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(self) <=
      2147483647)
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$left$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) }
      Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) ==
      _1)
  }
  
  axiom Snap$struct$m_tree$$Node$0$field$f$right$axiom {
    (forall _0: Int, _1: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_,
    _2: Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_ ::
      { Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) }
      Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(_0,
      _1, _2)) ==
      _2)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$left: Ref

field f$right: Ref

field f$value: Ref

field val_int: Int

field val_ref: Ref

function f_tree$$Node$$in_range__$TY$__Snap$struct$m_tree$$Node$$int$$$bool$(_1: Snap$struct$m_tree$$Node,
  _2: Int): Bool
  requires -2147483648 <= _2
  requires _2 <= 2147483647
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_tree$$Node$$in_range__$TY$__Snap$struct$m_tree$$Node$$int$$$bool$(_1,
    _2),
    true]
{
  (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1 ==>
  (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1 ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  _2 &&
  (Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  _2 ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) >=
  _2)) &&
  (!(discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1) ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  _2)) &&
  (!(discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1) ==>
  discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1 ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) >=
  _2)
}

function f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(_1: Snap$struct$m_tree$$Node): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(_1),
    true]
{
  (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1 ==>
  (!f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1 ==>
  (!f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  false) &&
  (f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  false)) &&
  (!(discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1) ==>
  false)) &&
  (f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  (discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1 ==>
  (!f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(_1) &&
  !(Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(_1))) &&
  (f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(_1) &&
  (Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(_1) ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) >=
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(_1)))) &&
  (!(discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1) ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) <
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(_1)))) &&
  (!(discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$left__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1) ==>
  discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$$int$(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1)) ==
  1 ==>
  (!f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  false) &&
  (f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) ==>
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node(Snap$struct$m_tree$$Node$0$field$f$right__$TY$__Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(_1))) >=
  Snap$struct$m_tree$$Node$0$field$f$value__$TY$__Snap$struct$m_tree$$Node$$int$(_1)))
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_
  requires acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_((unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(self.enum_Some.f$0), read$()) in
          snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(self.enum_Some.f$0.val_ref))))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_())
}

function snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(self: Ref): Snap$struct$m_tree$$Node
  requires acc(struct$m_tree$$Node(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_tree$$Node$$int$$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$struct$m_tree$$Node((unfolding acc(struct$m_tree$$Node(self), read$()) in
    (unfolding acc(i32(self.f$value), read$()) in self.f$value.val_int)), (unfolding acc(struct$m_tree$$Node(self), read$()) in
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$left)),
  (unfolding acc(struct$m_tree$$Node(self), read$()) in
    snap$__$TY$__Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_$Snap$m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$right)))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate i32(self: Ref) {
  acc(self.val_int, write) &&
  (-2147483648 <= self.val_int && self.val_int <= 2147483647)
}

predicate m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_Some(self: Ref) {
  acc(self.f$0, write) &&
  acc(struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(self.f$0), write)
}

predicate struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.val_ref, write) && acc(struct$m_tree$$Node(self.val_ref), write)
}

predicate struct$m_tree$$Node(self: Ref) {
  acc(self.f$value, write) &&
  (acc(i32(self.f$value), write) &&
  (acc(self.f$left, write) &&
  (acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$left), write) &&
  (acc(self.f$right, write) &&
  acc(m_std$$option$$Option$_beg_$struct$m_std$$boxed$$Box$struct$m_tree$$Node$struct$m_std$$alloc$$Global$_end_(self.f$right), write)))))
}

predicate tuple0$(self: Ref) {
  true
}

method m_test1() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var _old$l2$0: Ref
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  
  label start
  // ========== start ==========
  // Def path: "binary_search_tree::test1"
  // Span: tests/verify_overflow/fail/mut-borrows/binary_search_tree.rs:51:1: 54:2 (#0)
  __t0 := false
  __t1 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    acc(struct$m_tree$$Node(_1.val_ref), write)
  inhale true
  inhale f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(_1.val_ref))
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] _3 = &mut (*_1)
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_ref, write)
  _3.val_ref := _1.val_ref
  label l0
  // [mir] _2 = tree::Node::borrow_value(move _3) -> [return: bb1, unwind: bb2]
  label l1
  assert f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(_3.val_ref))
  assert true
  exhale acc(_3.val_ref, write) &&
    acc(struct$m_tree$$Node(_3.val_ref), write)
  _2 := builtin$havoc_ref()
  inhale acc(_2.val_ref, write) && acc(i32(_2.val_ref), write)
  inhale true
  inhale (unfolding acc(i32(_2.val_ref), write) in
      _2.val_ref.val_int ==
      old[l1]((unfolding acc(struct$m_tree$$Node(_3.val_ref), write) in
        (unfolding acc(i32(_3.val_ref.f$value), write) in
          _3.val_ref.f$value.val_int))))
  label l2
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_3)
  // [mir] FakeRead(ForLet(None), _2)
  // [mir] (*_2) = const 5_i32
  unfold acc(i32(_2.val_ref), write)
  _2.val_ref.val_int := 5
  // expire_borrows ReborrowingDAG(L4,L5,L0,)

  if (__t0) {
    // expire loan L4
    _old$l2$0 := _2.val_ref
    inhale acc(DeadBorrowToken$(4), write) &&
      (acc(i32(_old$l2$0), write) &&
      f_tree$$Node$$in_range__$TY$__Snap$struct$m_tree$$Node$$int$$$bool$(old[l1](snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(_3.val_ref)),
      (unfolding acc(i32(_old$l2$0), write) in _old$l2$0.val_int))) --*
      acc(struct$m_tree$$Node(old[l1](_3.val_ref)), write) &&
      f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(old[l1](_3.val_ref)))
    fold acc(i32(_old$l2$0), write)
    inhale acc(DeadBorrowToken$(4), write)
    apply acc(DeadBorrowToken$(4), write) &&
      (acc(i32(_old$l2$0), write) &&
      f_tree$$Node$$in_range__$TY$__Snap$struct$m_tree$$Node$$int$$$bool$(old[l1](snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(_3.val_ref)),
      (unfolding acc(i32(_old$l2$0), write) in _old$l2$0.val_int))) --*
      acc(struct$m_tree$$Node(old[l1](_3.val_ref)), write) &&
      f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(old[l1](_3.val_ref)))
  }
  // [mir] _0 = const ()
  // [mir] StorageDead(_2)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l4
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(struct$m_tree$$Node(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  assert f_tree$$Node$$sorted__$TY$__Snap$struct$m_tree$$Node$$bool$(snap$__$TY$__Snap$struct$m_tree$$Node$struct$m_tree$$Node$Snap$struct$m_tree$$Node(_old$pre$0))
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_tree$$Node(_old$pre$0), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
