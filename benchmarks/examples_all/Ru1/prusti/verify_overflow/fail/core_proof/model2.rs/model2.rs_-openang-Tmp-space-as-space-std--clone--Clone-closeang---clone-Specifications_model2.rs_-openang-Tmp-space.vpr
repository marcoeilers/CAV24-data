domain Address  {
  
  function field_address$$struct$m_Tmp$$$f$x(_0: Address): Address 
}

domain Bytes  {
  
  
}

domain Lifetime  {
  
  function included(_0: Lifetime, _1: Lifetime): Bool 
  
  function intersect(_0: Set[Lifetime]): Lifetime 
  
  axiom included_in_itself$ {
    (forall lft: Lifetime :: { included(lft, lft) } included(lft, lft))
  }
  
  axiom included_intersect$1 {
    (forall lft_1: Set[Lifetime], lft_2: Set[Lifetime] ::
      { included(intersect(lft_1), intersect(lft_2)) }
      included(intersect(lft_1), intersect(lft_2)) == (lft_2 subset lft_1))
  }
  
  axiom included_intersect$2 {
    (forall lft_1: Set[Lifetime], lft_2: Lifetime ::
      { included(intersect(lft_1), lft_2) }
      included(intersect(lft_1), lft_2) == (lft_2 in lft_1))
  }
  
  axiom intersect_singleton$ {
    (forall lft: Lifetime ::
      { intersect(Set(lft)) }
      intersect(Set(lft)) == lft)
  }
}

domain MarkerCalls  {
  
  function basic_block_marker$start_label$marker(): Bool 
  
  function basic_block_marker$label_entry$marker(): Bool 
  
  function basic_block_marker$label_bb0$marker(): Bool 
  
  function basic_block_marker$return_label$marker(): Bool 
  
  function basic_block_marker$end_label$marker(): Bool 
}

domain Place  {
  
  unique function _1$place(): Place 
  
  function deref_reference_place(_0: Place): Place 
  
  function field_place$$struct$m_Tmp$$$f$x(_0: Place): Place 
  
  unique function _0$place(): Place 
}

domain Size  {
  
  function Size$struct$m_Tmp$$(): Snap$Usize 
  
  function PaddingSize$struct$m_Tmp$$(): Snap$Usize 
  
  function Size$I32$(): Snap$Usize 
  
  function Size$ref$Shared$struct$m_Tmp$$(): Snap$Usize 
}

domain Snap$Bool  {
  
  function constructor$Snap$Bool$(value: Bool): Snap$Bool 
  
  function destructor$Snap$Bool$$value(value: Snap$Bool): Bool 
  
  function valid$Snap$Bool(_0: Snap$Bool): Bool 
  
  axiom constructor$Snap$Bool$$bottom_up_injectivity_axiom {
    (forall value: Bool ::
      { constructor$Snap$Bool$(value) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$(value)) == value)
  }
  
  axiom constructor$Snap$Bool$$top_down_injectivity_axiom {
    (forall value: Snap$Bool ::
      { valid$Snap$Bool(value) }
      valid$Snap$Bool(value) ==>
      value == constructor$Snap$Bool$(destructor$Snap$Bool$$value(value)))
  }
  
  axiom Snap$Bool$$validity_axiom_bottom_up_alternative {
    (forall value: Bool ::
      { valid$Snap$Bool(constructor$Snap$Bool$(value)) }
      valid$Snap$Bool(constructor$Snap$Bool$(value)))
  }
}

domain Snap$I32  {
  
  function constructor$Snap$I32$(value: Int): Snap$I32 
  
  function destructor$Snap$I32$$value(value: Snap$I32): Int 
  
  function valid$Snap$I32(_0: Snap$I32): Bool 
  
  function to_bytes$I32(snapshot: Snap$I32): Bytes 
  
  axiom constructor$Snap$I32$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$I32$(value) }
      destructor$Snap$I32$$value(constructor$Snap$I32$(value)) == value)
  }
  
  axiom constructor$Snap$I32$$top_down_injectivity_axiom {
    (forall value: Snap$I32 ::
      { valid$Snap$I32(value) }
      valid$Snap$I32(value) ==>
      value == constructor$Snap$I32$(destructor$Snap$I32$$value(value)))
  }
  
  axiom Snap$I32$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$I32(constructor$Snap$I32$(value)) }
      valid$Snap$I32(constructor$Snap$I32$(value)) ==
      (-2147483648 <= value && value <= 2147483647))
  }
}

domain Snap$Usize  {
  
  function constructor$Snap$Usize$(value: Int): Snap$Usize 
  
  function destructor$Snap$Usize$$value(value: Snap$Usize): Int 
  
  function valid$Snap$Usize(_0: Snap$Usize): Bool 
  
  axiom constructor$Snap$Usize$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$Usize$(value) }
      destructor$Snap$Usize$$value(constructor$Snap$Usize$(value)) == value)
  }
  
  axiom constructor$Snap$Usize$$top_down_injectivity_axiom {
    (forall value: Snap$Usize ::
      { valid$Snap$Usize(value) }
      valid$Snap$Usize(value) ==>
      value == constructor$Snap$Usize$(destructor$Snap$Usize$$value(value)))
  }
  
  axiom Snap$Usize$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$Usize(constructor$Snap$Usize$(value)) }
      valid$Snap$Usize(constructor$Snap$Usize$(value)) ==
      (0 <= value && value <= 18446744073709551615))
  }
}

domain Snap$ptr$struct$m_Tmp$  {
  
  function to_bytes$ptr$struct$m_Tmp$(snapshot: Snap$ptr$struct$m_Tmp$): Bytes 
  
  function constructor$Snap$ptr$struct$m_Tmp$$(value: Address): Snap$ptr$struct$m_Tmp$ 
  
  function destructor$Snap$ptr$struct$m_Tmp$$$value(value: Snap$ptr$struct$m_Tmp$): Address 
  
  function valid$Snap$ptr$struct$m_Tmp$(_0: Snap$ptr$struct$m_Tmp$): Bool 
  
  axiom constructor$Snap$ptr$struct$m_Tmp$$$bottom_up_injectivity_axiom {
    (forall value: Address ::
      { constructor$Snap$ptr$struct$m_Tmp$$(value) }
      destructor$Snap$ptr$struct$m_Tmp$$$value(constructor$Snap$ptr$struct$m_Tmp$$(value)) ==
      value)
  }
  
  axiom constructor$Snap$ptr$struct$m_Tmp$$$top_down_injectivity_axiom {
    (forall value: Snap$ptr$struct$m_Tmp$ ::
      { valid$Snap$ptr$struct$m_Tmp$(value) }
      valid$Snap$ptr$struct$m_Tmp$(value) ==>
      value ==
      constructor$Snap$ptr$struct$m_Tmp$$(destructor$Snap$ptr$struct$m_Tmp$$$value(value)))
  }
  
  axiom Snap$ptr$struct$m_Tmp$$$validity_axiom_bottom_up_alternative {
    (forall value: Address ::
      { valid$Snap$ptr$struct$m_Tmp$(constructor$Snap$ptr$struct$m_Tmp$$(value)) }
      valid$Snap$ptr$struct$m_Tmp$(constructor$Snap$ptr$struct$m_Tmp$$(value)))
  }
}

domain Snap$ref$Shared$struct$m_Tmp$  {
  
  function constructor$Snap$ref$Shared$struct$m_Tmp$$(address: Address, target_current: Snap$struct$m_Tmp$): Snap$ref$Shared$struct$m_Tmp$ 
  
  function destructor$Snap$ref$Shared$struct$m_Tmp$$$address(value: Snap$ref$Shared$struct$m_Tmp$): Address 
  
  function destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(value: Snap$ref$Shared$struct$m_Tmp$): Snap$struct$m_Tmp$ 
  
  function valid$Snap$ref$Shared$struct$m_Tmp$(_0: Snap$ref$Shared$struct$m_Tmp$): Bool 
  
  function constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc(target_current: Snap$struct$m_Tmp$): Snap$ref$Shared$struct$m_Tmp$ 
  
  function to_bytes$ref$Shared$struct$m_Tmp$(snapshot: Snap$ref$Shared$struct$m_Tmp$): Bytes 
  
  axiom constructor$Snap$ref$Shared$struct$m_Tmp$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$struct$m_Tmp$ ::
      { constructor$Snap$ref$Shared$struct$m_Tmp$$(address, target_current) }
      { constructor$Snap$ref$Shared$struct$m_Tmp$$(address, target_current) }
      destructor$Snap$ref$Shared$struct$m_Tmp$$$address(constructor$Snap$ref$Shared$struct$m_Tmp$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(constructor$Snap$ref$Shared$struct$m_Tmp$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_Tmp$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$struct$m_Tmp$ ::
      { valid$Snap$ref$Shared$struct$m_Tmp$(value), destructor$Snap$ref$Shared$struct$m_Tmp$$$address(value) }
      { valid$Snap$ref$Shared$struct$m_Tmp$(value), destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(value) }
      valid$Snap$ref$Shared$struct$m_Tmp$(value) ==>
      value ==
      constructor$Snap$ref$Shared$struct$m_Tmp$$(destructor$Snap$ref$Shared$struct$m_Tmp$$$address(value),
      destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$struct$m_Tmp$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$struct$m_Tmp$ ::
      { valid$Snap$ref$Shared$struct$m_Tmp$(snapshot), destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(snapshot) }
      valid$Snap$ref$Shared$struct$m_Tmp$(snapshot) ==
      valid$Snap$struct$m_Tmp$(destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$struct$m_Tmp$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$struct$m_Tmp$ ::
      { valid$Snap$ref$Shared$struct$m_Tmp$(constructor$Snap$ref$Shared$struct$m_Tmp$$(address,
      target_current)), valid$Snap$struct$m_Tmp$(target_current) }
      valid$Snap$ref$Shared$struct$m_Tmp$(constructor$Snap$ref$Shared$struct$m_Tmp$$(address,
      target_current)) ==
      valid$Snap$struct$m_Tmp$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$struct$m_Tmp$ ::
      { constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$struct$m_Tmp$ ::
      { valid$Snap$ref$Shared$struct$m_Tmp$(value) }
      valid$Snap$ref$Shared$struct$m_Tmp$(value) ==>
      value ==
      constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc(destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$struct$m_Tmp$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$struct$m_Tmp$ ::
      { valid$Snap$ref$Shared$struct$m_Tmp$(snapshot), destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(snapshot) }
      valid$Snap$ref$Shared$struct$m_Tmp$(snapshot) ==
      valid$Snap$struct$m_Tmp$(destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$struct$m_Tmp$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$struct$m_Tmp$ ::
      { valid$Snap$ref$Shared$struct$m_Tmp$(constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc(target_current)),
      valid$Snap$struct$m_Tmp$(target_current) }
      valid$Snap$ref$Shared$struct$m_Tmp$(constructor$Snap$ref$Shared$struct$m_Tmp$$no_alloc(target_current)) ==
      valid$Snap$struct$m_Tmp$(target_current))
  }
}

domain Snap$struct$m_Tmp$  {
  
  function constructor$Snap$struct$m_Tmp$$(f$x: Snap$I32): Snap$struct$m_Tmp$ 
  
  function destructor$Snap$struct$m_Tmp$$$f$x(value: Snap$struct$m_Tmp$): Snap$I32 
  
  function valid$Snap$struct$m_Tmp$(_0: Snap$struct$m_Tmp$): Bool 
  
  function to_bytes$struct$m_Tmp$(snapshot: Snap$struct$m_Tmp$): Bytes 
  
  axiom constructor$Snap$struct$m_Tmp$$$bottom_up_injectivity_axiom {
    (forall f$x: Snap$I32 ::
      { constructor$Snap$struct$m_Tmp$$(f$x) }
      destructor$Snap$struct$m_Tmp$$$f$x(constructor$Snap$struct$m_Tmp$$(f$x)) ==
      f$x)
  }
  
  axiom constructor$Snap$struct$m_Tmp$$$top_down_injectivity_axiom {
    (forall value: Snap$struct$m_Tmp$ ::
      { valid$Snap$struct$m_Tmp$(value) }
      valid$Snap$struct$m_Tmp$(value) ==>
      value ==
      constructor$Snap$struct$m_Tmp$$(destructor$Snap$struct$m_Tmp$$$f$x(value)))
  }
  
  axiom Snap$struct$m_Tmp$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$struct$m_Tmp$ ::
      { valid$Snap$struct$m_Tmp$(snapshot), destructor$Snap$struct$m_Tmp$$$f$x(snapshot) }
      valid$Snap$struct$m_Tmp$(snapshot) ==
      valid$Snap$I32(destructor$Snap$struct$m_Tmp$$$f$x(snapshot)))
  }
  
  axiom Snap$struct$m_Tmp$$$validity_axiom_bottom_up_alternative {
    (forall f$x: Snap$I32 ::
      { valid$Snap$struct$m_Tmp$(constructor$Snap$struct$m_Tmp$$(f$x)), valid$Snap$I32(f$x) }
      valid$Snap$struct$m_Tmp$(constructor$Snap$struct$m_Tmp$$(f$x)) ==
      valid$Snap$I32(f$x))
  }
}

domain ComputeAddress  {
  
  function compute_address(place: Place, address: Address): Address 
  
  axiom root$1$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_1$place(), address) }
      compute_address(_1$place(), address) == address)
  }
  
  axiom struct$m_Tmp$$f$x$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$struct$m_Tmp$$$f$x(place), address) }
      compute_address(field_place$$struct$m_Tmp$$$f$x(place), address) ==
      field_address$$struct$m_Tmp$$$f$x(compute_address(place, address)))
  }
  
  axiom root$2$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_0$place(), address) }
      compute_address(_0$place(), address) == address)
  }
  
  axiom ref$Shared$struct$m_Tmp$$compute_address_axiom {
    (forall place: Place, snapshot: Snap$ref$Shared$struct$m_Tmp$ ::
      { compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$struct$m_Tmp$$$address(snapshot)) }
      compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$struct$m_Tmp$$$address(snapshot)) ==
      destructor$Snap$ref$Shared$struct$m_Tmp$$$address(snapshot))
  }
}

method m_$openang$Tmp$space$as$space$std$$clone$$Clone$closeang$$$clone$Specifications()
{
  var _0$address: Address
  var _0$snapshot$0: Snap$struct$m_Tmp$
  var _0$snapshot$1: Snap$struct$m_Tmp$
  var _1$address: Address
  var _1$snapshot$0: Snap$ref$Shared$struct$m_Tmp$
  var bw0$snapshot$0: Lifetime
  var bw1$snapshot$0: Lifetime
  var bw2$snapshot$0: Lifetime
  var end_label$marker: Bool
  var label_bb0$marker: Bool
  var label_entry$marker: Bool
  var lft_0$snapshot$1: Lifetime
  var lft_1$snapshot$1: Lifetime
  var lft_2$snapshot$1: Lifetime
  var lft_3$alive$snapshot$0: Bool
  var lft_3$snapshot$1: Lifetime
  var lifetime_token_perm_amount$0$snapshot$0: Perm
  var return_label$marker: Bool
  var start_label$marker: Bool
  var tmp_frac_ref_perm$1$snapshot$0: Perm
  label start_label
  lft_3$alive$snapshot$0 := true
  start_label$marker := false
  label_entry$marker := false
  label_bb0$marker := false
  return_label$marker := false
  end_label$marker := false
  start_label$marker := true
  inhale basic_block_marker$start_label$marker()
  // Lifetime preconditions.
  inhale lifetime_token_perm_amount$0$snapshot$0 > none
  inhale lifetime_token_perm_amount$0$snapshot$0 < write
  inhale true
  inhale true
  inhale true
  lft_0$snapshot$1 := bw0$snapshot$0
  lft_1$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    10)
  lft_2$snapshot$1 := lft_tok_sep_take$3(bw0$snapshot$0, bw1$snapshot$0, bw2$snapshot$0,
    lifetime_token_perm_amount$0$snapshot$0 / 10)
  lft_3$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    10)
  // Allocate the parameters.
  inhale valid$Snap$ref$Shared$struct$m_Tmp$(_1$snapshot$0)
  // Assume functional preconditions.
  // Allocate the return place.
  inhale true
  // Allocate implicitly allocated statements.
  goto label_entry
  label label_entry
  label_entry$marker := true
  inhale basic_block_marker$label_entry$marker()
  goto label_bb0
  label label_bb0
  label_bb0$marker := true
  inhale basic_block_marker$label_bb0$marker()
  // Prepare lifetimes for statement mid bb0[0]
  // bb0[0] _0 = (*_1)
  inhale valid$Snap$ref$Shared$struct$m_Tmp$(_1$snapshot$0)
  tmp_frac_ref_perm$1$snapshot$0 := frac_bor_atomic_acc$struct$m_Tmp$(lft_3$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 10, deref_reference_place(_1$place()),
    destructor$Snap$ref$Shared$struct$m_Tmp$$$address(_1$snapshot$0), destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(_1$snapshot$0))
  inhale _0$snapshot$1 ==
    destructor$Snap$ref$Shared$struct$m_Tmp$$$target_current(_1$snapshot$0)
  exhale true
  // Prepare lifetimes for statement mid bb0[1]
  // bb0[1] return
  goto return_label
  label return_label
  return_label$marker := true
  inhale basic_block_marker$return_label$marker()
  // Assert functional postconditions.
  // Deallocate the parameters.
  exhale true
  // Deallocate the return place.
  exhale valid$Snap$struct$m_Tmp$(_0$snapshot$1)
  // Lifetime postconditions.
  lft_tok_sep_return$2(lft_1$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    10)
  lft_tok_sep_return$3(lft_2$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, bw2$snapshot$0,
    lifetime_token_perm_amount$0$snapshot$0 / 10)
  lft_tok_sep_return$2(lft_3$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    10)
  exhale true
  exhale true
  exhale true
  goto end_label
  label end_label
  end_label$marker := true
  inhale basic_block_marker$end_label$marker()
  goto end_of_method
  label end_of_method
}

method frac_bor_atomic_acc$struct$m_Tmp$(lifetime: Lifetime, lifetime_perm: Perm,
  place: Place, root_address: Address, current_snapshot: Snap$struct$m_Tmp$)
  returns (owned_perm: Perm)
  requires none < lifetime_perm
  requires true
  requires true
  ensures owned_perm < write
  ensures none < owned_perm
  ensures true
  ensures true --* true


method lft_tok_sep_return$2(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  rd_perm: Perm)
  requires none < rd_perm
  requires true
  requires lft == intersect(Set(lft_1, lft_2))
  ensures true
  ensures true


method lft_tok_sep_return$3(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  lft_3: Lifetime, rd_perm: Perm)
  requires none < rd_perm
  requires true
  requires lft == intersect(Set(lft_1, lft_2, lft_3))
  ensures true
  ensures true
  ensures true


method lft_tok_sep_take$2(lft_1: Lifetime, lft_2: Lifetime, rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires true
  requires true
  ensures true
  ensures lft == intersect(Set(lft_1, lft_2))


method lft_tok_sep_take$3(lft_1: Lifetime, lft_2: Lifetime, lft_3: Lifetime,
  rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires true
  requires true
  requires true
  ensures true
  ensures lft == intersect(Set(lft_1, lft_2, lft_3))
