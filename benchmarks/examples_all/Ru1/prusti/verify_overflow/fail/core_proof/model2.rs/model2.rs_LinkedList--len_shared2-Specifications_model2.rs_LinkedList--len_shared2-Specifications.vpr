domain Address  {
  
  function field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_0: Address): Address 
  
  function field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_0: Address): Address 
  
  function field_address$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(_0: Address): Address 
  
  function field_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(_0: Address): Address 
  
  function variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(_0: Address): Address 
  
  function variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(_0: Address): Address 
  
  function field_address$$struct$m_LinkedList$$$f$val(_0: Address): Address 
  
  function field_address$$struct$m_LinkedList$$$f$next(_0: Address): Address 
}

domain Bytes  {
  
  
}

domain FunctionGas  {
  
  function function_no_gas$(): FunctionGas 
  
  function function_gas_level$(_0: FunctionGas): FunctionGas 
}

domain Functions  {
  
  function m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_0: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  _1: FunctionGas): Snap$ref$Shared$struct$m_LinkedList$ 
  
  axiom m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$$definitional_axiom {
    (forall _1: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$,
    gas$: FunctionGas ::
      { m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_1,
      function_gas_level$(gas$)) }
      (valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_1) ==>
      valid$Snap$ref$Shared$struct$m_LinkedList$(m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_1,
      function_gas_level$(gas$)))) &&
      m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_1, function_gas_level$(gas$)) ==
      m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_1, gas$))
  }
}

domain Lifetime  {
  
  function included(_0: Lifetime, _1: Lifetime): Bool 
  
  function intersect(_0: Set[Lifetime]): Lifetime 
  
  axiom included_in_itself$ {
    (forall lft: Lifetime :: { included(lft, lft) } included(lft, lft))
  }
  
  axiom included_intersect$1 {
    (forall lft_1: Set[Lifetime], lft_2: Set[Lifetime] ::
      { included(intersect(lft_1), intersect(lft_2)) }
      included(intersect(lft_1), intersect(lft_2)) == (lft_2 subset lft_1))
  }
  
  axiom included_intersect$2 {
    (forall lft_1: Set[Lifetime], lft_2: Lifetime ::
      { included(intersect(lft_1), lft_2) }
      included(intersect(lft_1), lft_2) == (lft_2 in lft_1))
  }
  
  axiom intersect_singleton$ {
    (forall lft: Lifetime ::
      { intersect(Set(lft)) }
      intersect(Set(lft)) == lft)
  }
}

domain MarkerCalls  {
  
  function basic_block_marker$start_label$marker(): Bool 
  
  function basic_block_marker$label_entry$marker(): Bool 
  
  function basic_block_marker$label_bb0$marker(): Bool 
  
  function basic_block_marker$label_4_custom$marker(): Bool 
  
  function basic_block_marker$label_bb3$marker(): Bool 
  
  function basic_block_marker$label_3_custom$marker(): Bool 
  
  function basic_block_marker$label_bb2$marker(): Bool 
  
  function basic_block_marker$label_7_custom$marker(): Bool 
  
  function basic_block_marker$label_6_custom$marker(): Bool 
  
  function basic_block_marker$label_bb5$marker(): Bool 
  
  function basic_block_marker$label_9_custom$marker(): Bool 
  
  function basic_block_marker$label_bb6$marker(): Bool 
  
  function basic_block_marker$label_bb7$marker(): Bool 
  
  function basic_block_marker$label_2_custom$marker(): Bool 
  
  function basic_block_marker$label_bb1$marker(): Bool 
  
  function basic_block_marker$label_bb4$marker(): Bool 
  
  function basic_block_marker$label_bb8$marker(): Bool 
  
  function basic_block_marker$return_label$marker(): Bool 
  
  function basic_block_marker$label_10_custom$marker(): Bool 
  
  function basic_block_marker$label_bb9$marker(): Bool 
  
  function basic_block_marker$resume_panic_label$marker(): Bool 
  
  function basic_block_marker$end_label$marker(): Bool 
}

domain Place  {
  
  unique function _1$place(): Place 
  
  function deref_reference_place(_0: Place): Place 
  
  unique function _2$place(): Place 
  
  function field_place$$struct$m_LinkedList$$$f$next(_0: Place): Place 
  
  unique function _3$place(): Place 
  
  function field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(_0: Place): Place 
  
  function variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(_0: Place): Place 
  
  unique function _4$place(): Place 
  
  function field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(_0: Place): Place 
  
  unique function _8$place(): Place 
  
  unique function _7$place(): Place 
  
  unique function _6$place(): Place 
  
  unique function _5$place(): Place 
  
  function field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_0: Place): Place 
  
  function field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_0: Place): Place 
  
  unique function _9$place(): Place 
  
  unique function _0$place(): Place 
  
  function variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(_0: Place): Place 
  
  function field_place$$struct$m_LinkedList$$$f$val(_0: Place): Place 
}

domain Size  {
  
  function Size$Usize$(): Snap$Usize 
  
  function Size$Isize$(): Snap$Usize 
  
  function Size$Tuple$$Usize$Bool$$Usize$Bool$$(): Snap$Usize 
  
  function Size$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(): Snap$Usize 
  
  function Size$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(): Snap$Usize 
  
  function Size$ref$Shared$struct$m_LinkedList$$(): Snap$Usize 
  
  function PaddingSize$Tuple$$Usize$Bool$$Usize$Bool$$(): Snap$Usize 
  
  function Size$Bool$(): Snap$Usize 
  
  function PaddingSize$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(): Snap$Usize 
  
  function PaddingSize$struct$m_LinkedList$$(): Snap$Usize 
  
  function Size$I64$(): Snap$Usize 
}

domain Snap$Bool  {
  
  function constructor$Snap$Bool$(value: Bool): Snap$Bool 
  
  function destructor$Snap$Bool$$value(value: Snap$Bool): Bool 
  
  function valid$Snap$Bool(_0: Snap$Bool): Bool 
  
  function constructor$Snap$Bool$EqCmp_Isize(left: Snap$Isize, right: Snap$Isize): Snap$Bool 
  
  function destructor$Snap$Bool$EqCmp_Isize$left(value: Snap$Bool): Snap$Isize 
  
  function destructor$Snap$Bool$EqCmp_Isize$right(value: Snap$Bool): Snap$Isize 
  
  function constructor$Snap$Bool$EqCmp_ref$Shared$struct$m_LinkedList$(left: Snap$ref$Shared$struct$m_LinkedList$,
  right: Snap$ref$Shared$struct$m_LinkedList$): Snap$Bool 
  
  function destructor$Snap$Bool$EqCmp_ref$Shared$struct$m_LinkedList$$left(value: Snap$Bool): Snap$ref$Shared$struct$m_LinkedList$ 
  
  function destructor$Snap$Bool$EqCmp_ref$Shared$struct$m_LinkedList$$right(value: Snap$Bool): Snap$ref$Shared$struct$m_LinkedList$ 
  
  function to_bytes$Bool(snapshot: Snap$Bool): Bytes 
  
  axiom constructor$Snap$Bool$$bottom_up_injectivity_axiom {
    (forall value: Bool ::
      { constructor$Snap$Bool$(value) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$(value)) == value)
  }
  
  axiom constructor$Snap$Bool$$top_down_injectivity_axiom {
    (forall value: Snap$Bool ::
      { valid$Snap$Bool(value) }
      valid$Snap$Bool(value) ==>
      value == constructor$Snap$Bool$(destructor$Snap$Bool$$value(value)))
  }
  
  axiom Snap$Bool$$validity_axiom_bottom_up_alternative {
    (forall value: Bool ::
      { valid$Snap$Bool(constructor$Snap$Bool$(value)) }
      valid$Snap$Bool(constructor$Snap$Bool$(value)))
  }
  
  axiom EqCmp_Isize$simplification_axiom {
    (forall left: Int, right: Int ::
      { constructor$Snap$Bool$EqCmp_Isize(constructor$Snap$Isize$(left), constructor$Snap$Isize$(right)) }
      valid$Snap$Isize(constructor$Snap$Isize$(left)) &&
      valid$Snap$Isize(constructor$Snap$Isize$(right)) ==>
      constructor$Snap$Bool$EqCmp_Isize(constructor$Snap$Isize$(left), constructor$Snap$Isize$(right)) ==
      constructor$Snap$Bool$(left == right))
  }
  
  axiom EqCmp_Isize$eval_axiom {
    (forall left: Snap$Isize, right: Snap$Isize ::
      { destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(left,
      right)) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(left, right)) ==
      (destructor$Snap$Isize$$value(left) ==
      destructor$Snap$Isize$$value(right)))
  }
  
  axiom EqCmp_ref$Shared$struct$m_LinkedList$$simplification_axiom {
    (forall left: Snap$ref$Shared$struct$m_LinkedList$, right: Snap$ref$Shared$struct$m_LinkedList$ ::
      { constructor$Snap$Bool$EqCmp_ref$Shared$struct$m_LinkedList$(left, right) }
      constructor$Snap$Bool$EqCmp_ref$Shared$struct$m_LinkedList$(left, right) ==
      constructor$Snap$Bool$(left == right))
  }
}

domain Snap$I64  {
  
  function constructor$Snap$I64$(value: Int): Snap$I64 
  
  function destructor$Snap$I64$$value(value: Snap$I64): Int 
  
  function valid$Snap$I64(_0: Snap$I64): Bool 
  
  function to_bytes$I64(snapshot: Snap$I64): Bytes 
  
  axiom constructor$Snap$I64$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$I64$(value) }
      destructor$Snap$I64$$value(constructor$Snap$I64$(value)) == value)
  }
  
  axiom constructor$Snap$I64$$top_down_injectivity_axiom {
    (forall value: Snap$I64 ::
      { valid$Snap$I64(value) }
      valid$Snap$I64(value) ==>
      value == constructor$Snap$I64$(destructor$Snap$I64$$value(value)))
  }
  
  axiom Snap$I64$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$I64(constructor$Snap$I64$(value)) }
      valid$Snap$I64(constructor$Snap$I64$(value)) ==
      (-9223372036854775808 <= value && value <= 9223372036854775807))
  }
}

domain Snap$Isize  {
  
  function constructor$Snap$Isize$(value: Int): Snap$Isize 
  
  function destructor$Snap$Isize$$value(value: Snap$Isize): Int 
  
  function valid$Snap$Isize(_0: Snap$Isize): Bool 
  
  function to_bytes$Isize(snapshot: Snap$Isize): Bytes 
  
  axiom constructor$Snap$Isize$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$Isize$(value) }
      destructor$Snap$Isize$$value(constructor$Snap$Isize$(value)) == value)
  }
  
  axiom constructor$Snap$Isize$$top_down_injectivity_axiom {
    (forall value: Snap$Isize ::
      { valid$Snap$Isize(value) }
      valid$Snap$Isize(value) ==>
      value == constructor$Snap$Isize$(destructor$Snap$Isize$$value(value)))
  }
  
  axiom Snap$Isize$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$Isize(constructor$Snap$Isize$(value)) }
      valid$Snap$Isize(constructor$Snap$Isize$(value)) ==
      (-9223372036854775808 <= value && value <= 9223372036854775807))
  }
}

domain Snap$Tuple$$Usize$Bool$$Usize$Bool$  {
  
  function constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0: Snap$Usize,
  tuple_1: Snap$Bool): Snap$Tuple$$Usize$Bool$$Usize$Bool$ 
  
  function destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(value: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Snap$Usize 
  
  function destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(value: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Snap$Bool 
  
  function valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(_0: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Bool 
  
  function to_bytes$Tuple$$Usize$Bool$$Usize$Bool$(snapshot: Snap$Tuple$$Usize$Bool$$Usize$Bool$): Bytes 
  
  axiom constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$bottom_up_injectivity_axiom {
    (forall tuple_0: Snap$Usize, tuple_1: Snap$Bool ::
      { constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0, tuple_1) }
      { constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0, tuple_1) }
      destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)) ==
      tuple_0 &&
      destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)) ==
      tuple_1)
  }
  
  axiom constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$top_down_injectivity_axiom {
    (forall value: Snap$Tuple$$Usize$Bool$$Usize$Bool$ ::
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(value), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(value) }
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(value), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(value) }
      valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(value) ==>
      value ==
      constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(value),
      destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(value)))
  }
  
  axiom Snap$Tuple$$Usize$Bool$$Usize$Bool$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$Tuple$$Usize$Bool$$Usize$Bool$ ::
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(snapshot), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(snapshot) }
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(snapshot), destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(snapshot) }
      valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(snapshot) ==
      (valid$Snap$Usize(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(snapshot)) &&
      valid$Snap$Bool(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(snapshot))))
  }
  
  axiom Snap$Tuple$$Usize$Bool$$Usize$Bool$$$validity_axiom_bottom_up_alternative {
    (forall tuple_0: Snap$Usize, tuple_1: Snap$Bool ::
      { valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)), valid$Snap$Usize(tuple_0), valid$Snap$Bool(tuple_1) }
      valid$Snap$Tuple$$Usize$Bool$$Usize$Bool$(constructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$(tuple_0,
      tuple_1)) ==
      (valid$Snap$Usize(tuple_0) && valid$Snap$Bool(tuple_1)))
  }
}

domain Snap$Usize  {
  
  function constructor$Snap$Usize$(value: Int): Snap$Usize 
  
  function destructor$Snap$Usize$$value(value: Snap$Usize): Int 
  
  function valid$Snap$Usize(_0: Snap$Usize): Bool 
  
  function to_bytes$Usize(snapshot: Snap$Usize): Bytes 
  
  function constructor$Snap$Usize$Add_Usize(left: Snap$Usize, right: Snap$Usize): Snap$Usize 
  
  function destructor$Snap$Usize$Add_Usize$left(value: Snap$Usize): Snap$Usize 
  
  function destructor$Snap$Usize$Add_Usize$right(value: Snap$Usize): Snap$Usize 
  
  axiom constructor$Snap$Usize$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$Usize$(value) }
      destructor$Snap$Usize$$value(constructor$Snap$Usize$(value)) == value)
  }
  
  axiom constructor$Snap$Usize$$top_down_injectivity_axiom {
    (forall value: Snap$Usize ::
      { valid$Snap$Usize(value) }
      valid$Snap$Usize(value) ==>
      value == constructor$Snap$Usize$(destructor$Snap$Usize$$value(value)))
  }
  
  axiom Snap$Usize$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$Usize(constructor$Snap$Usize$(value)) }
      valid$Snap$Usize(constructor$Snap$Usize$(value)) ==
      (0 <= value && value <= 18446744073709551615))
  }
  
  axiom Add_Usize$simplification_axiom {
    (forall left: Int, right: Int ::
      { constructor$Snap$Usize$Add_Usize(constructor$Snap$Usize$(left), constructor$Snap$Usize$(right)) }
      valid$Snap$Usize(constructor$Snap$Usize$(left)) &&
      valid$Snap$Usize(constructor$Snap$Usize$(right)) ==>
      constructor$Snap$Usize$Add_Usize(constructor$Snap$Usize$(left), constructor$Snap$Usize$(right)) ==
      constructor$Snap$Usize$(left + right))
  }
  
  axiom Add_Usize$eval_axiom {
    (forall left: Snap$Usize, right: Snap$Usize ::
      { destructor$Snap$Usize$$value(constructor$Snap$Usize$Add_Usize(left,
      right)) }
      destructor$Snap$Usize$$value(constructor$Snap$Usize$Add_Usize(left, right)) ==
      destructor$Snap$Usize$$value(left) +
      destructor$Snap$Usize$$value(right))
  }
}

domain Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(): Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function to_bytes$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_bottom_up_alternative_no_parameters {
    valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$$())
  }
}

domain Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function to_bytes$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$bottom_up_injectivity_axiom {
    (forall f$0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0) }
      destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0)) ==
      f$0)
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$top_down_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(value)))
  }
  
  axiom Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(snapshot) }
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(snapshot)))
  }
  
  axiom Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_bottom_up_alternative {
    (forall f$0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0)),
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(f$0) }
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(f$0)) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(f$0))
  }
}

domain Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(value: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Int 
  
  function to_bytes$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$bottom_up_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(value) }
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(value)) ==
      value)
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$top_down_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) &&
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==
      0 ==>
      value ==
      constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(value)))
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$bottom_up_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(value) }
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(value)) ==
      value)
  }
  
  axiom constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$top_down_injectivity_axiom {
    (forall value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) &&
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==
      1 ==>
      value ==
      constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(value)))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_top_down_enum {
    (forall snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(snapshot) }
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(snapshot) }
      { valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      (0 <=
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) &&
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) <=
      1 &&
      ((discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      0 ==>
      valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$value(snapshot))) &&
      (discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      1 ==>
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(snapshot))))))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$validity_axiom_bottom_up_enum_variant {
    (forall variant: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant),
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant)) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant)) ==
      valid$Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$discriminant_axiom {
    (forall variant: Snap$enum$m_std$$option$$Option$None$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant) }
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None(variant)) ==
      0)
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$validity_axiom_bottom_up_enum_variant {
    (forall variant: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant),
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant)) }
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant)) ==
      valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(variant))
  }
  
  axiom Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$discriminant_axiom {
    (forall variant: Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant) }
      discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some(variant)) ==
      1)
  }
}

domain Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function to_bytes$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  function constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value: Address): Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$value(value: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Address 
  
  function valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  axiom constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$bottom_up_injectivity_axiom {
    (forall value: Address ::
      { constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value) }
      destructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$value(constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value)) ==
      value)
  }
  
  axiom constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$top_down_injectivity_axiom {
    (forall value: Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(destructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$value(value)))
  }
  
  axiom Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_bottom_up_alternative {
    (forall value: Address ::
      { valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value)) }
      valid$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ptr$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(value)))
  }
}

domain Snap$ptr$struct$m_LinkedList$  {
  
  function to_bytes$ptr$struct$m_LinkedList$(snapshot: Snap$ptr$struct$m_LinkedList$): Bytes 
  
  function constructor$Snap$ptr$struct$m_LinkedList$$(value: Address): Snap$ptr$struct$m_LinkedList$ 
  
  function destructor$Snap$ptr$struct$m_LinkedList$$$value(value: Snap$ptr$struct$m_LinkedList$): Address 
  
  function valid$Snap$ptr$struct$m_LinkedList$(_0: Snap$ptr$struct$m_LinkedList$): Bool 
  
  axiom constructor$Snap$ptr$struct$m_LinkedList$$$bottom_up_injectivity_axiom {
    (forall value: Address ::
      { constructor$Snap$ptr$struct$m_LinkedList$$(value) }
      destructor$Snap$ptr$struct$m_LinkedList$$$value(constructor$Snap$ptr$struct$m_LinkedList$$(value)) ==
      value)
  }
  
  axiom constructor$Snap$ptr$struct$m_LinkedList$$$top_down_injectivity_axiom {
    (forall value: Snap$ptr$struct$m_LinkedList$ ::
      { valid$Snap$ptr$struct$m_LinkedList$(value) }
      valid$Snap$ptr$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$ptr$struct$m_LinkedList$$(destructor$Snap$ptr$struct$m_LinkedList$$$value(value)))
  }
  
  axiom Snap$ptr$struct$m_LinkedList$$$validity_axiom_bottom_up_alternative {
    (forall value: Address ::
      { valid$Snap$ptr$struct$m_LinkedList$(constructor$Snap$ptr$struct$m_LinkedList$$(value)) }
      valid$Snap$ptr$struct$m_LinkedList$(constructor$Snap$ptr$struct$m_LinkedList$$(value)))
  }
}

domain Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$  {
  
  function to_bytes$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bytes 
  
  function constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value: Address): Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function destructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$value(value: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$): Address 
  
  function valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(_0: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bool 
  
  axiom constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$bottom_up_injectivity_axiom {
    (forall value: Address ::
      { constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      destructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$value(constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value)) ==
      value)
  }
  
  axiom constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$top_down_injectivity_axiom {
    (forall value: Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) }
      valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) ==>
      value ==
      constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$value(value)))
  }
  
  axiom Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_bottom_up_alternative {
    (forall value: Address ::
      { valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value)) }
      valid$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ptr$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value)))
  }
}

domain Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$  {
  
  function constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address: Address,
  target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Address 
  
  function destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_0: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bool 
  
  function constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function to_bytes$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Bytes 
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current) }
      { constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current) }
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(value) }
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(value),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)), valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$(address,
      target_current)) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot),
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(snapshot) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current)),
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current) }
      valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(constructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$no_alloc(target_current)) ==
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(target_current))
  }
}

domain Snap$ref$Shared$struct$m_LinkedList$  {
  
  function constructor$Snap$ref$Shared$struct$m_LinkedList$$(address: Address,
  target_current: Snap$struct$m_LinkedList$): Snap$ref$Shared$struct$m_LinkedList$ 
  
  function destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(value: Snap$ref$Shared$struct$m_LinkedList$): Address 
  
  function destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value: Snap$ref$Shared$struct$m_LinkedList$): Snap$struct$m_LinkedList$ 
  
  function valid$Snap$ref$Shared$struct$m_LinkedList$(_0: Snap$ref$Shared$struct$m_LinkedList$): Bool 
  
  function constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current: Snap$struct$m_LinkedList$): Snap$ref$Shared$struct$m_LinkedList$ 
  
  function to_bytes$ref$Shared$struct$m_LinkedList$(snapshot: Snap$ref$Shared$struct$m_LinkedList$): Bytes 
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$struct$m_LinkedList$ ::
      { constructor$Snap$ref$Shared$struct$m_LinkedList$$(address, target_current) }
      { constructor$Snap$ref$Shared$struct$m_LinkedList$$(address, target_current) }
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(value), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(value) }
      { valid$Snap$ref$Shared$struct$m_LinkedList$(value), destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$ref$Shared$struct$m_LinkedList$$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(value),
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot), destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot) ==
      valid$Snap$struct$m_LinkedList$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)), valid$Snap$struct$m_LinkedList$(target_current) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$(address,
      target_current)) ==
      valid$Snap$struct$m_LinkedList$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$struct$m_LinkedList$ ::
      { constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(value) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot), destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(snapshot) ==
      valid$Snap$struct$m_LinkedList$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$struct$m_LinkedList$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$struct$m_LinkedList$ ::
      { valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current)),
      valid$Snap$struct$m_LinkedList$(target_current) }
      valid$Snap$ref$Shared$struct$m_LinkedList$(constructor$Snap$ref$Shared$struct$m_LinkedList$$no_alloc(target_current)) ==
      valid$Snap$struct$m_LinkedList$(target_current))
  }
}

domain Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$  {
  
  function constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address: Address,
  target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Address 
  
  function destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_0: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bool 
  
  function constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ 
  
  function to_bytes$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bytes 
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current) }
      { constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current) }
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(value) }
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(value),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)), valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$(address,
      target_current)) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot),
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current)),
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current) }
      valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(constructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$no_alloc(target_current)) ==
      valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(target_current))
  }
}

domain Snap$struct$m_LinkedList$  {
  
  function constructor$Snap$struct$m_LinkedList$$(f$val: Snap$I64, f$next: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$): Snap$struct$m_LinkedList$ 
  
  function destructor$Snap$struct$m_LinkedList$$$f$val(value: Snap$struct$m_LinkedList$): Snap$I64 
  
  function destructor$Snap$struct$m_LinkedList$$$f$next(value: Snap$struct$m_LinkedList$): Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ 
  
  function valid$Snap$struct$m_LinkedList$(_0: Snap$struct$m_LinkedList$): Bool 
  
  function to_bytes$struct$m_LinkedList$(snapshot: Snap$struct$m_LinkedList$): Bytes 
  
  axiom constructor$Snap$struct$m_LinkedList$$$bottom_up_injectivity_axiom {
    (forall f$val: Snap$I64, f$next: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { constructor$Snap$struct$m_LinkedList$$(f$val, f$next) }
      { constructor$Snap$struct$m_LinkedList$$(f$val, f$next) }
      destructor$Snap$struct$m_LinkedList$$$f$val(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)) ==
      f$val &&
      destructor$Snap$struct$m_LinkedList$$$f$next(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)) ==
      f$next)
  }
  
  axiom constructor$Snap$struct$m_LinkedList$$$top_down_injectivity_axiom {
    (forall value: Snap$struct$m_LinkedList$ ::
      { valid$Snap$struct$m_LinkedList$(value), destructor$Snap$struct$m_LinkedList$$$f$val(value) }
      { valid$Snap$struct$m_LinkedList$(value), destructor$Snap$struct$m_LinkedList$$$f$next(value) }
      valid$Snap$struct$m_LinkedList$(value) ==>
      value ==
      constructor$Snap$struct$m_LinkedList$$(destructor$Snap$struct$m_LinkedList$$$f$val(value),
      destructor$Snap$struct$m_LinkedList$$$f$next(value)))
  }
  
  axiom Snap$struct$m_LinkedList$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$struct$m_LinkedList$ ::
      { valid$Snap$struct$m_LinkedList$(snapshot), destructor$Snap$struct$m_LinkedList$$$f$val(snapshot) }
      { valid$Snap$struct$m_LinkedList$(snapshot), destructor$Snap$struct$m_LinkedList$$$f$next(snapshot) }
      valid$Snap$struct$m_LinkedList$(snapshot) ==
      (valid$Snap$I64(destructor$Snap$struct$m_LinkedList$$$f$val(snapshot)) &&
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$struct$m_LinkedList$$$f$next(snapshot))))
  }
  
  axiom Snap$struct$m_LinkedList$$$validity_axiom_bottom_up_alternative {
    (forall f$val: Snap$I64, f$next: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { valid$Snap$struct$m_LinkedList$(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)), valid$Snap$I64(f$val), valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(f$next) }
      valid$Snap$struct$m_LinkedList$(constructor$Snap$struct$m_LinkedList$$(f$val,
      f$next)) ==
      (valid$Snap$I64(f$val) &&
      valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(f$next)))
  }
}

domain Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$  {
  
  function valid$Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$(_0: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bool 
  
  function to_bytes$trusted$m_BoxWrapper$struct$m_LinkedList$$(snapshot: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$): Bytes 
}

domain ComputeAddress  {
  
  function compute_address(place: Place, address: Address): Address 
  
  axiom root$1$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_1$place(), address) }
      compute_address(_1$place(), address) == address)
  }
  
  axiom ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$compute_address_axiom {
    (forall place: Place, snapshot: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$ ::
      { compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot)) }
      compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot)) ==
      destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(snapshot))
  }
  
  axiom root$2$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_2$place(), address) }
      compute_address(_2$place(), address) == address)
  }
  
  axiom root$3$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_3$place(), address) }
      compute_address(_3$place(), address) == address)
  }
  
  axiom ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$compute_address_axiom {
    (forall place: Place, snapshot: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$ ::
      { compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot)) }
      compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot)) ==
      destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(snapshot))
  }
  
  axiom root$4$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_4$place(), address) }
      compute_address(_4$place(), address) == address)
  }
  
  axiom root$5$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_8$place(), address) }
      compute_address(_8$place(), address) == address)
  }
  
  axiom root$6$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_7$place(), address) }
      compute_address(_7$place(), address) == address)
  }
  
  axiom ref$Shared$struct$m_LinkedList$$compute_address_axiom {
    (forall place: Place, snapshot: Snap$ref$Shared$struct$m_LinkedList$ ::
      { compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot)) }
      compute_address(deref_reference_place(place), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot)) ==
      destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(snapshot))
  }
  
  axiom root$7$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_6$place(), address) }
      compute_address(_6$place(), address) == address)
  }
  
  axiom root$8$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_5$place(), address) }
      compute_address(_5$place(), address) == address)
  }
  
  axiom Tuple$$Usize$Bool$$Usize$Bool$$tuple_0$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(place),
      address) }
      compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(place),
      address) ==
      field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(compute_address(place,
      address)))
  }
  
  axiom Tuple$$Usize$Bool$$Usize$Bool$$tuple_1$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(place),
      address) }
      compute_address(field_place$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(place),
      address) ==
      field_address$$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(compute_address(place,
      address)))
  }
  
  axiom root$9$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_9$place(), address) }
      compute_address(_9$place(), address) == address)
  }
  
  axiom root$10$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_0$place(), address) }
      compute_address(_0$place(), address) == address)
  }
  
  axiom enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$f$0$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(place),
      address) }
      compute_address(field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(place),
      address) ==
      field_address$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(compute_address(place,
      address)))
  }
  
  axiom enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$discriminant$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(place),
      address) }
      compute_address(field_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(place),
      address) ==
      field_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$discriminant(compute_address(place,
      address)))
  }
  
  axiom enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$None$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(place),
      address) }
      compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(place),
      address) ==
      variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$None(compute_address(place,
      address)))
  }
  
  axiom enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(place),
      address) }
      compute_address(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(place),
      address) ==
      variant_address$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(compute_address(place,
      address)))
  }
  
  axiom struct$m_LinkedList$$f$val$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$struct$m_LinkedList$$$f$val(place), address) }
      compute_address(field_place$$struct$m_LinkedList$$$f$val(place), address) ==
      field_address$$struct$m_LinkedList$$$f$val(compute_address(place, address)))
  }
  
  axiom struct$m_LinkedList$$f$next$compute_address_axiom {
    (forall place: Place, address: Address ::
      { compute_address(field_place$$struct$m_LinkedList$$$f$next(place), address) }
      compute_address(field_place$$struct$m_LinkedList$$$f$next(place), address) ==
      field_address$$struct$m_LinkedList$$$f$next(compute_address(place, address)))
  }
}

function caller_for$m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_1: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$): Snap$ref$Shared$struct$m_LinkedList$
  requires true
  requires valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_1)
  ensures true
  ensures valid$Snap$ref$Shared$struct$m_LinkedList$(result)
{
  m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_1, function_gas_level$(function_gas_level$(function_no_gas$())))
}

method m_LinkedList$$len_shared2$Specifications()
{
  var _0$address: Address
  var _0$snapshot$0: Snap$Usize
  var _0$snapshot$1: Snap$Usize
  var _0$snapshot$2: Snap$Usize
  var _0$snapshot$3: Snap$Usize
  var _0$snapshot$4: Snap$Usize
  var _1$address: Address
  var _1$snapshot$0: Snap$ref$Shared$struct$m_LinkedList$
  var _2$address: Address
  var _2$snapshot$0: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$
  var _2$snapshot$1: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$
  var _3$address: Address
  var _3$snapshot$1: Snap$Isize
  var _4$address: Address
  var _4$snapshot$0: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$1: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$2: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$3: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _4$snapshot$4: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _5$address: Address
  var _5$snapshot$0: Snap$Usize
  var _6$address: Address
  var _6$snapshot$0: Snap$ref$Shared$struct$m_LinkedList$
  var _6$snapshot$1: Snap$ref$Shared$struct$m_LinkedList$
  var _6$snapshot$2: Snap$ref$Shared$struct$m_LinkedList$
  var _6$snapshot$3: Snap$ref$Shared$struct$m_LinkedList$
  var _6$snapshot$4: Snap$ref$Shared$struct$m_LinkedList$
  var _6$snapshot$5: Snap$ref$Shared$struct$m_LinkedList$
  var _7$address: Address
  var _7$snapshot$0: Snap$ref$Shared$struct$m_LinkedList$
  var _8$address: Address
  var _8$snapshot$0: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _8$snapshot$1: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _8$snapshot$2: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _8$snapshot$3: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _8$snapshot$4: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var _9$address: Address
  var _9$snapshot$0: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _9$snapshot$1: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _9$snapshot$2: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _9$snapshot$3: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _9$snapshot$4: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var _9$snapshot$5: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var bw0$snapshot$0: Lifetime
  var bw1$snapshot$0: Lifetime
  var bw2$snapshot$0: Lifetime
  var end_label$marker: Bool
  var label_10_custom$marker: Bool
  var label_2_custom$marker: Bool
  var label_3_custom$marker: Bool
  var label_4_custom$marker: Bool
  var label_6_custom$marker: Bool
  var label_7_custom$marker: Bool
  var label_9_custom$marker: Bool
  var label_bb0$marker: Bool
  var label_bb1$marker: Bool
  var label_bb2$marker: Bool
  var label_bb3$marker: Bool
  var label_bb4$marker: Bool
  var label_bb5$marker: Bool
  var label_bb6$marker: Bool
  var label_bb7$marker: Bool
  var label_bb8$marker: Bool
  var label_bb9$marker: Bool
  var label_entry$marker: Bool
  var lft_0$snapshot$1: Lifetime
  var lft_1$snapshot$1: Lifetime
  var lft_10$alive$snapshot$0: Bool
  var lft_10$snapshot$0: Lifetime
  var lft_10$snapshot$1: Lifetime
  var lft_10$snapshot$2: Lifetime
  var lft_10$snapshot$3: Lifetime
  var lft_10$snapshot$4: Lifetime
  var lft_10$snapshot$5: Lifetime
  var lft_11$alive$snapshot$0: Bool
  var lft_11$snapshot$0: Lifetime
  var lft_11$snapshot$1: Lifetime
  var lft_11$snapshot$2: Lifetime
  var lft_11$snapshot$3: Lifetime
  var lft_11$snapshot$4: Lifetime
  var lft_12$alive$snapshot$0: Bool
  var lft_12$snapshot$0: Lifetime
  var lft_12$snapshot$1: Lifetime
  var lft_12$snapshot$2: Lifetime
  var lft_12$snapshot$3: Lifetime
  var lft_12$snapshot$4: Lifetime
  var lft_13$snapshot$0: Lifetime
  var lft_13$snapshot$1: Lifetime
  var lft_13$snapshot$2: Lifetime
  var lft_13$snapshot$3: Lifetime
  var lft_13$snapshot$4: Lifetime
  var lft_14$snapshot$0: Lifetime
  var lft_14$snapshot$1: Lifetime
  var lft_14$snapshot$2: Lifetime
  var lft_14$snapshot$3: Lifetime
  var lft_14$snapshot$4: Lifetime
  var lft_14$snapshot$5: Lifetime
  var lft_2$snapshot$1: Lifetime
  var lft_3$snapshot$1: Lifetime
  var lft_4$snapshot$0: Lifetime
  var lft_4$snapshot$1: Lifetime
  var lft_4$snapshot$2: Lifetime
  var lft_4$snapshot$3: Lifetime
  var lft_4$snapshot$4: Lifetime
  var lft_5$snapshot$0: Lifetime
  var lft_5$snapshot$1: Lifetime
  var lft_5$snapshot$2: Lifetime
  var lft_5$snapshot$3: Lifetime
  var lft_5$snapshot$4: Lifetime
  var lft_6$snapshot$0: Lifetime
  var lft_6$snapshot$1: Lifetime
  var lft_6$snapshot$2: Lifetime
  var lft_6$snapshot$3: Lifetime
  var lft_6$snapshot$4: Lifetime
  var lft_6$snapshot$5: Lifetime
  var lft_7$alive$snapshot$0: Bool
  var lft_7$snapshot$1: Lifetime
  var lft_8$alive$snapshot$0: Bool
  var lft_8$snapshot$1: Lifetime
  var lft_9$alive$snapshot$0: Bool
  var lft_9$snapshot$0: Lifetime
  var lft_9$snapshot$1: Lifetime
  var lft_9$snapshot$2: Lifetime
  var lft_9$snapshot$3: Lifetime
  var lft_9$snapshot$4: Lifetime
  var lft_function_call_1$snapshot$0: Lifetime
  var lft_function_call_1$snapshot$1: Lifetime
  var lft_function_call_1$snapshot$2: Lifetime
  var lft_function_call_1$snapshot$3: Lifetime
  var lft_function_call_1$snapshot$4: Lifetime
  var lft_function_call_2$snapshot$0: Lifetime
  var lft_function_call_2$snapshot$1: Lifetime
  var lft_function_call_2$snapshot$2: Lifetime
  var lft_function_call_2$snapshot$3: Lifetime
  var lft_function_call_2$snapshot$4: Lifetime
  var lft_function_call_2$snapshot$5: Lifetime
  var lifetime_token_perm_amount$0$snapshot$0: Perm
  var old_lft_11_2$snapshot$0: Lifetime
  var old_lft_11_2$snapshot$1: Lifetime
  var old_lft_11_2$snapshot$2: Lifetime
  var old_lft_11_2$snapshot$3: Lifetime
  var old_lft_11_2$snapshot$4: Lifetime
  var old_lft_11_2$snapshot$5: Lifetime
  var old_lft_8_0$snapshot$0: Lifetime
  var old_lft_8_0$snapshot$1: Lifetime
  var old_lft_8_0$snapshot$2: Lifetime
  var old_lft_8_0$snapshot$3: Lifetime
  var old_lft_8_1$snapshot$0: Lifetime
  var old_lft_8_1$snapshot$1: Lifetime
  var old_lft_8_1$snapshot$2: Lifetime
  var old_lft_8_1$snapshot$3: Lifetime
  var old_lft_8_1$snapshot$4: Lifetime
  var resume_panic_label$marker: Bool
  var return_label$marker: Bool
  var start_label$marker: Bool
  var tmp$0: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$
  var tmp$1: Snap$Isize
  var tmp$2: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var tmp$3: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$
  var tmp$4: Bool
  var tmp$5: Snap$ref$Shared$struct$m_LinkedList$
  var tmp$6: Bool
  var tmp$7: Snap$Tuple$$Usize$Bool$$Usize$Bool$
  var tmp_frac_ref_perm$1$snapshot$0: Perm
  label start_label
  lft_10$alive$snapshot$0 := true
  lft_11$alive$snapshot$0 := true
  lft_12$alive$snapshot$0 := true
  lft_7$alive$snapshot$0 := true
  lft_8$alive$snapshot$0 := true
  lft_9$alive$snapshot$0 := true
  start_label$marker := false
  label_entry$marker := false
  label_bb0$marker := false
  label_4_custom$marker := false
  label_bb3$marker := false
  label_3_custom$marker := false
  label_bb2$marker := false
  label_7_custom$marker := false
  label_6_custom$marker := false
  label_bb5$marker := false
  label_9_custom$marker := false
  label_bb6$marker := false
  label_bb7$marker := false
  label_2_custom$marker := false
  label_bb1$marker := false
  label_bb4$marker := false
  label_bb8$marker := false
  return_label$marker := false
  label_10_custom$marker := false
  label_bb9$marker := false
  resume_panic_label$marker := false
  end_label$marker := false
  start_label$marker := true
  inhale basic_block_marker$start_label$marker()
  // Lifetime preconditions.
  inhale lifetime_token_perm_amount$0$snapshot$0 > none
  inhale lifetime_token_perm_amount$0$snapshot$0 < write
  inhale true
  inhale true
  inhale true
  lft_0$snapshot$1 := bw0$snapshot$0
  lft_1$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_2$snapshot$1 := lft_tok_sep_take$3(bw0$snapshot$0, bw1$snapshot$0, bw2$snapshot$0,
    lifetime_token_perm_amount$0$snapshot$0 / 21)
  lft_7$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // Allocate the parameters.
  inhale valid$Snap$ref$Shared$struct$m_LinkedList$(_1$snapshot$0)
  // Assume functional preconditions.
  // Allocate the return place.
  inhale true
  // Allocate implicitly allocated statements.
  inhale true
  inhale true
  goto label_entry
  label label_entry
  label_entry$marker := true
  inhale basic_block_marker$label_entry$marker()
  goto label_bb0
  label label_bb0
  label_bb0$marker := true
  inhale basic_block_marker$label_bb0$marker()
  // Prepare lifetimes for statement mid bb0[0]
  // bb0[0] StorageLive(_2)
  inhale true
  inhale true
  // Prepare lifetimes for statement start bb0[1]
  // Prepare lifetimes for statement mid bb0[1]
  lft_3$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_8$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // bb0[1] _2 = &((*_1).1: std::option::Option<BoxWrapper<LinkedList>>)
  inhale valid$Snap$ref$Shared$struct$m_LinkedList$(_1$snapshot$0)
  inhale valid$Snap$struct$m_LinkedList$(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_1$snapshot$0))
  tmp$0 := assign$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Reborrow$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_3$$(_2$place(),
    _2$address, field_place$$struct$m_LinkedList$$$f$next(deref_reference_place(_1$place())),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_1$snapshot$0),
    destructor$Snap$struct$m_LinkedList$$$f$next(destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_1$snapshot$0)),
    lft_7$snapshot$1, lft_3$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  inhale _2$snapshot$1 == tmp$0
  // Prepare lifetimes for statement start bb0[2]
  lft_tok_sep_return$2(lft_3$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // Prepare lifetimes for statement mid bb0[2]
  // bb0[2] FakeRead(ForMatchedPlace(None), _2)
  // encode_statement: not encoded
  // Prepare lifetimes for statement start bb0[3]
  // Prepare lifetimes for statement mid bb0[3]
  // bb0[3] _3 = discriminant((*_2))
  inhale valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(_2$snapshot$1)
  tmp_frac_ref_perm$1$snapshot$0 := frac_bor_atomic_acc$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft_8$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 21, deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
  if (false) {
    inhale _3$snapshot$1 ==
      constructor$Snap$Isize$(discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)))
  } else {
    tmp$1 := assign$Isize$Discriminant$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_8$$(_3$place(),
      _3$address, deref_reference_place(_2$place()), destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
      tmp_frac_ref_perm$1$snapshot$0, destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
    inhale _3$snapshot$1 == tmp$1
  }
  // Prepare lifetimes for statement mid bb0[4]
  // bb0[4] switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb3]
  if (destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(_3$snapshot$1,
  constructor$Snap$Isize$(0)))) {
    goto label_2_custom
  }
  if (destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_Isize(_3$snapshot$1,
  constructor$Snap$Isize$(1)))) {
    goto label_3_custom
  }
  if (true) {
    goto label_4_custom
  }
  assert false
  label label_4_custom
  label_4_custom$marker := true
  inhale basic_block_marker$label_4_custom$marker()
  // Prepare lifetimes for block bb3
  lft_tok_sep_return$2(lft_8$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  goto label_bb3
  label label__from__label_bb3__to__resume_panic_label
  inhale _4$snapshot$3 == _4$snapshot$0
  inhale _6$snapshot$4 == _6$snapshot$0
  inhale _8$snapshot$3 == _8$snapshot$0
  inhale _9$snapshot$4 == _9$snapshot$0
  inhale lft_10$snapshot$4 == lft_10$snapshot$0
  inhale lft_11$snapshot$3 == lft_11$snapshot$0
  inhale lft_12$snapshot$3 == lft_12$snapshot$0
  inhale lft_13$snapshot$3 == lft_13$snapshot$0
  inhale lft_14$snapshot$4 == lft_14$snapshot$0
  inhale lft_4$snapshot$3 == lft_4$snapshot$0
  inhale lft_5$snapshot$3 == lft_5$snapshot$0
  inhale lft_6$snapshot$4 == lft_6$snapshot$0
  inhale lft_9$snapshot$3 == lft_9$snapshot$0
  inhale lft_function_call_1$snapshot$3 == lft_function_call_1$snapshot$0
  inhale lft_function_call_2$snapshot$4 == lft_function_call_2$snapshot$0
  inhale old_lft_11_2$snapshot$4 == old_lft_11_2$snapshot$0
  inhale old_lft_8_1$snapshot$3 == old_lft_8_1$snapshot$0
  goto resume_panic_label
  label label_bb3
  label_bb3$marker := true
  inhale basic_block_marker$label_bb3$marker()
  // Prepare lifetimes for statement mid bb3[0]
  // bb3[0] unreachable
  // Target marked as unreachable by the compiler
  assert false
  goto label__from__label_bb3__to__resume_panic_label
  label label_3_custom
  label_3_custom$marker := true
  inhale basic_block_marker$label_3_custom$marker()
  // Prepare lifetimes for block bb2
  old_lft_8_1$snapshot$1 := lft_8$snapshot$1
  bor_shorten$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft_8$snapshot$1,
    old_lft_8_1$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 21, deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
  goto label_bb2
  label label_bb2
  label_bb2$marker := true
  inhale basic_block_marker$label_bb2$marker()
  // Prepare lifetimes for statement mid bb2[0]
  // bb2[0] StorageLive(_4)
  inhale true
  inhale true
  // Prepare lifetimes for statement start bb2[1]
  // Prepare lifetimes for statement mid bb2[1]
  lft_4$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_9$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // bb2[1] _4 = &(((*_2) as Some).0: BoxWrapper<LinkedList>)
  inhale valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)) &&
    (discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)) ==
    0 ||
    discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)) ==
    1)
  inhale valid$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1)))
  tmp$2 := assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_4$$(_4$place(),
    _4$address, field_place$$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(variant_place$$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$Some(deref_reference_place(_2$place()))),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$enum$m_std$$option$$Option$Some$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$f$0(destructor$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Some$value(destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))),
    lft_8$snapshot$1, lft_4$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  inhale _4$snapshot$1 == tmp$2
  // Prepare lifetimes for statement start bb2[2]
  lft_tok_sep_return$2(lft_4$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_8$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // Prepare lifetimes for statement mid bb2[2]
  // bb2[2] StorageLive(_5)
  inhale true
  inhale true
  // Prepare lifetimes for statement start bb2[3]
  // Prepare lifetimes for statement mid bb2[3]
  // bb2[3] StorageLive(_6)
  inhale true
  inhale true
  // Prepare lifetimes for statement start bb2[4]
  // Prepare lifetimes for statement mid bb2[4]
  // bb2[4] StorageLive(_7)
  inhale true
  inhale true
  // Prepare lifetimes for statement start bb2[5]
  // Prepare lifetimes for statement mid bb2[5]
  // bb2[5] StorageLive(_8)
  inhale true
  inhale true
  // Prepare lifetimes for statement start bb2[6]
  // Prepare lifetimes for statement mid bb2[6]
  lft_12$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_5$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // bb2[6] _8 = &(*_4)
  inhale valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_4$snapshot$1)
  tmp$3 := assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_5$$(_8$place(),
    _8$address, deref_reference_place(_4$place()), destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(_4$snapshot$1),
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(_4$snapshot$1),
    lft_9$snapshot$1, lft_5$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  inhale _8$snapshot$1 == tmp$3
  exhale true
  // Prepare lifetimes for statement mid bb2[7]
  lft_tok_sep_return$2(lft_5$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_9$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_11$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_13$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // bb2[7] _7 = BoxWrapper::<LinkedList>::deref(move _8) -> [return: bb5, unwind: bb9]
  lft_function_call_1$snapshot$1 := lft_tok_sep_take$2(lft_2$snapshot$1, lft_12$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 42)
  assert included(lft_13$snapshot$1, lft_12$snapshot$1)
  consume$Move$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(_8$place(),
    _8$address, _8$snapshot$1, lft_12$alive$snapshot$0, lft_12$snapshot$1)
  exhale true
  exhale true
  exhale true
  exhale true
  if (tmp$4) {
    goto label_6_custom
  }
  if (!tmp$4) {
    goto label_7_custom
  }
  assert false
  label label__from__label_7_custom__to__label_bb9
  inhale _6$snapshot$3 == _6$snapshot$0
  inhale _9$snapshot$3 == _9$snapshot$0
  inhale lft_10$snapshot$3 == lft_10$snapshot$0
  inhale lft_14$snapshot$3 == lft_14$snapshot$0
  inhale lft_6$snapshot$3 == lft_6$snapshot$0
  inhale lft_function_call_2$snapshot$3 == lft_function_call_2$snapshot$0
  inhale old_lft_11_2$snapshot$3 == old_lft_11_2$snapshot$0
  goto label_bb9
  label label_7_custom
  label_7_custom$marker := true
  inhale basic_block_marker$label_7_custom$marker()
  inhale true
  inhale true
  inhale true
  inhale true
  lft_tok_sep_return$2(lft_function_call_1$snapshot$1, lft_2$snapshot$1, lft_12$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 42)
  // Prepare lifetimes for block bb9
  lft_tok_sep_return$2(lft_11$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_12$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_13$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  goto label__from__label_7_custom__to__label_bb9
  label label_6_custom
  label_6_custom$marker := true
  inhale basic_block_marker$label_6_custom$marker()
  inhale valid$Snap$ref$Shared$struct$m_LinkedList$(_7$snapshot$0)
  inhale true
  inhale true
  inhale true
  lft_tok_sep_return$2(lft_function_call_1$snapshot$1, lft_2$snapshot$1, lft_12$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 42)
  // Prepare lifetimes for block bb5
  old_lft_11_2$snapshot$1 := lft_11$snapshot$1
  lft_tok_sep_return$2(lft_12$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_13$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  inhale valid$Snap$ref$Shared$struct$m_LinkedList$(_7$snapshot$0)
  bor_shorten$ref$Shared$struct$m_LinkedList$(lft_11$snapshot$1, old_lft_11_2$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 21, deref_reference_place(_7$place()),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_7$snapshot$0),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_7$snapshot$0))
  inhale destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_ref$Shared$struct$m_LinkedList$(_7$snapshot$0,
    caller_for$m_BoxWrapper$$$openang$T$closeang$$$deref$struct$m_LinkedList$$(_8$snapshot$1)))
  goto label_bb5
  label label_bb5
  label_bb5$marker := true
  inhale basic_block_marker$label_bb5$marker()
  // Prepare lifetimes for statement mid bb5[0]
  lft_10$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_6$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // bb5[0] _6 = &(*_7)
  tmp$5 := assign$ref$Shared$struct$m_LinkedList$$Reborrow$struct$m_LinkedList$$$lft_6$$(_6$place(),
    _6$address, deref_reference_place(_7$place()), destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(_7$snapshot$0),
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(_7$snapshot$0),
    lft_11$snapshot$1, lft_6$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  inhale _6$snapshot$1 == tmp$5
  exhale true
  // Prepare lifetimes for statement start bb5[1]
  lft_tok_sep_return$2(lft_11$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_6$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // Prepare lifetimes for statement mid bb5[1]
  // bb5[1] StorageDead(_8)
  exhale true
  exhale true
  // Prepare lifetimes for statement mid bb5[2]
  lft_14$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  // bb5[2] _5 = LinkedList::len_shared2(move _6) -> [return: bb6, unwind: bb9]
  lft_function_call_2$snapshot$1 := lft_tok_sep_take$2(lft_2$snapshot$1, lft_10$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 42)
  assert included(lft_14$snapshot$1, lft_10$snapshot$1)
  consume$Move$ref$Shared$struct$m_LinkedList$(_6$place(), _6$address, _6$snapshot$1,
    lft_10$alive$snapshot$0, lft_10$snapshot$1)
  exhale true
  exhale true
  exhale true
  exhale true
  if (tmp$6) {
    goto label_9_custom
  }
  if (!tmp$6) {
    goto label_10_custom
  }
  assert false
  label label_9_custom
  label_9_custom$marker := true
  inhale basic_block_marker$label_9_custom$marker()
  inhale valid$Snap$Usize(_5$snapshot$0)
  inhale true
  inhale true
  inhale true
  lft_tok_sep_return$2(lft_function_call_2$snapshot$1, lft_2$snapshot$1, lft_10$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 42)
  // Prepare lifetimes for block bb6
  lft_tok_sep_return$2(lft_10$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_14$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  goto label_bb6
  label label__from__label_bb6__to__label_bb9
  inhale _6$snapshot$3 == _6$snapshot$1
  inhale _9$snapshot$3 == _9$snapshot$1
  inhale lft_10$snapshot$3 == lft_10$snapshot$1
  inhale lft_14$snapshot$3 == lft_14$snapshot$1
  inhale lft_6$snapshot$3 == lft_6$snapshot$1
  inhale lft_function_call_2$snapshot$3 == lft_function_call_2$snapshot$1
  inhale old_lft_11_2$snapshot$3 == old_lft_11_2$snapshot$1
  goto label_bb9
  label label_bb6
  label_bb6$marker := true
  inhale basic_block_marker$label_bb6$marker()
  // Prepare lifetimes for statement mid bb6[0]
  // bb6[0] StorageDead(_6)
  exhale true
  exhale true
  // Prepare lifetimes for statement start bb6[1]
  // Prepare lifetimes for statement mid bb6[1]
  // bb6[1] _9 = CheckedAdd(_5, const 1_usize)
  tmp$7 := assign$Tuple$$Usize$Bool$$Usize$Bool$$CheckedBinaryOp$Add$Copy$Usize$Constant$Usize$$$$(_9$place(),
    _9$address, _5$place(), _5$address, _5$snapshot$0, constructor$Snap$Usize$(1))
  inhale _9$snapshot$1 == tmp$7
  // Prepare lifetimes for statement mid bb6[2]
  // bb6[2] assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_usize) -> [success: bb7, unwind: bb9]
  // Rust assertion: attempt to add with overflow
  assert !destructor$Snap$Bool$$value(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_9$snapshot$1))
  if (!destructor$Snap$Bool$$value(destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(_9$snapshot$1))) {
    goto label_bb7
  }
  if (true) {
    goto label__from__label_bb6__to__label_bb9
  }
  assert false
  label label__from__label_bb7__to__label_bb8
  inhale _0$snapshot$3 == _0$snapshot$1
  inhale _4$snapshot$2 == _4$snapshot$1
  inhale _6$snapshot$2 == _6$snapshot$1
  inhale _8$snapshot$2 == _8$snapshot$1
  inhale _9$snapshot$2 == _9$snapshot$1
  inhale lft_10$snapshot$2 == lft_10$snapshot$1
  inhale lft_11$snapshot$2 == lft_11$snapshot$1
  inhale lft_12$snapshot$2 == lft_12$snapshot$1
  inhale lft_13$snapshot$2 == lft_13$snapshot$1
  inhale lft_14$snapshot$2 == lft_14$snapshot$1
  inhale lft_4$snapshot$2 == lft_4$snapshot$1
  inhale lft_5$snapshot$2 == lft_5$snapshot$1
  inhale lft_6$snapshot$2 == lft_6$snapshot$1
  inhale lft_9$snapshot$2 == lft_9$snapshot$1
  inhale lft_function_call_1$snapshot$2 == lft_function_call_1$snapshot$1
  inhale lft_function_call_2$snapshot$2 == lft_function_call_2$snapshot$1
  inhale old_lft_11_2$snapshot$2 == old_lft_11_2$snapshot$1
  inhale old_lft_8_0$snapshot$2 == old_lft_8_0$snapshot$0
  inhale old_lft_8_1$snapshot$2 == old_lft_8_1$snapshot$1
  goto label_bb8
  label label_bb7
  label_bb7$marker := true
  inhale basic_block_marker$label_bb7$marker()
  // Prepare lifetimes for statement mid bb7[0]
  // bb7[0] _0 = move (_9.0: usize)
  inhale _0$snapshot$1 ==
    destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(_9$snapshot$1)
  // Prepare lifetimes for statement start bb7[1]
  // Prepare lifetimes for statement mid bb7[1]
  // bb7[1] StorageDead(_5)
  exhale true
  exhale true
  // Prepare lifetimes for statement start bb7[2]
  // Prepare lifetimes for statement mid bb7[2]
  // bb7[2] StorageDead(_7)
  exhale true
  exhale true
  // Prepare lifetimes for statement start bb7[3]
  // Prepare lifetimes for statement mid bb7[3]
  // bb7[3] StorageDead(_4)
  exhale true
  exhale true
  // Prepare lifetimes for statement mid bb7[4]
  // bb7[4] goto -> bb8
  // Prepare lifetimes for block bb8
  goto label__from__label_bb7__to__label_bb8
  label label_2_custom
  label_2_custom$marker := true
  inhale basic_block_marker$label_2_custom$marker()
  // Prepare lifetimes for block bb1
  old_lft_8_0$snapshot$1 := lft_8$snapshot$1
  bor_shorten$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft_8$snapshot$1,
    old_lft_8_0$snapshot$1, lifetime_token_perm_amount$0$snapshot$0 / 21, deref_reference_place(_2$place()),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(_2$snapshot$1),
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(_2$snapshot$1))
  goto label_bb1
  label label_bb1
  label_bb1$marker := true
  inhale basic_block_marker$label_bb1$marker()
  // Prepare lifetimes for statement mid bb1[0]
  // bb1[0] falseEdge -> [real: bb4, imaginary: bb2]
  // Prepare lifetimes for block bb4
  lft_tok_sep_return$2(lft_8$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  goto label_bb4
  label label__from__label_bb4__to__label_bb8
  inhale _0$snapshot$3 == _0$snapshot$2
  inhale _4$snapshot$2 == _4$snapshot$0
  inhale _6$snapshot$2 == _6$snapshot$0
  inhale _8$snapshot$2 == _8$snapshot$0
  inhale _9$snapshot$2 == _9$snapshot$0
  inhale lft_10$snapshot$2 == lft_10$snapshot$0
  inhale lft_11$snapshot$2 == lft_11$snapshot$0
  inhale lft_12$snapshot$2 == lft_12$snapshot$0
  inhale lft_13$snapshot$2 == lft_13$snapshot$0
  inhale lft_14$snapshot$2 == lft_14$snapshot$0
  inhale lft_4$snapshot$2 == lft_4$snapshot$0
  inhale lft_5$snapshot$2 == lft_5$snapshot$0
  inhale lft_6$snapshot$2 == lft_6$snapshot$0
  inhale lft_9$snapshot$2 == lft_9$snapshot$0
  inhale lft_function_call_1$snapshot$2 == lft_function_call_1$snapshot$0
  inhale lft_function_call_2$snapshot$2 == lft_function_call_2$snapshot$0
  inhale old_lft_11_2$snapshot$2 == old_lft_11_2$snapshot$0
  inhale old_lft_8_0$snapshot$2 == old_lft_8_0$snapshot$1
  inhale old_lft_8_1$snapshot$2 == old_lft_8_1$snapshot$0
  goto label_bb8
  label label_bb4
  label_bb4$marker := true
  inhale basic_block_marker$label_bb4$marker()
  // Prepare lifetimes for statement mid bb4[0]
  // bb4[0] _0 = const 1_usize
  inhale _0$snapshot$2 == constructor$Snap$Usize$(1)
  // Prepare lifetimes for statement mid bb4[1]
  // bb4[1] goto -> bb8
  // Prepare lifetimes for block bb8
  goto label__from__label_bb4__to__label_bb8
  label label_bb8
  label_bb8$marker := true
  inhale basic_block_marker$label_bb8$marker()
  // Prepare lifetimes for statement mid bb8[0]
  // bb8[0] StorageDead(_2)
  exhale true
  exhale true
  // Prepare lifetimes for statement mid bb8[1]
  // bb8[1] return
  goto return_label
  label label__from__return_label__to__end_label
  inhale _0$snapshot$4 == _0$snapshot$3
  inhale _4$snapshot$4 == _4$snapshot$2
  inhale _6$snapshot$5 == _6$snapshot$2
  inhale _8$snapshot$4 == _8$snapshot$2
  inhale _9$snapshot$5 == _9$snapshot$2
  inhale lft_10$snapshot$5 == lft_10$snapshot$2
  inhale lft_11$snapshot$4 == lft_11$snapshot$2
  inhale lft_12$snapshot$4 == lft_12$snapshot$2
  inhale lft_13$snapshot$4 == lft_13$snapshot$2
  inhale lft_14$snapshot$5 == lft_14$snapshot$2
  inhale lft_4$snapshot$4 == lft_4$snapshot$2
  inhale lft_5$snapshot$4 == lft_5$snapshot$2
  inhale lft_6$snapshot$5 == lft_6$snapshot$2
  inhale lft_9$snapshot$4 == lft_9$snapshot$2
  inhale lft_function_call_1$snapshot$4 == lft_function_call_1$snapshot$2
  inhale lft_function_call_2$snapshot$5 == lft_function_call_2$snapshot$2
  inhale old_lft_11_2$snapshot$5 == old_lft_11_2$snapshot$2
  inhale old_lft_8_0$snapshot$3 == old_lft_8_0$snapshot$2
  inhale old_lft_8_1$snapshot$4 == old_lft_8_1$snapshot$2
  goto end_label
  label return_label
  return_label$marker := true
  inhale basic_block_marker$return_label$marker()
  // Assert functional postconditions.
  // Deallocate the parameters.
  exhale true
  // Deallocate the return place.
  exhale valid$Snap$Usize(_0$snapshot$3)
  // Lifetime postconditions.
  lft_tok_sep_return$2(lft_1$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$3(lft_2$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, bw2$snapshot$0,
    lifetime_token_perm_amount$0$snapshot$0 / 21)
  lft_tok_sep_return$2(lft_7$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  exhale true
  exhale true
  exhale true
  if (label_bb4$marker && label_bb8$marker) {
  }
  if (label_bb7$marker && label_bb8$marker) {
  }
  exhale true
  if (label_bb7$marker && label_bb8$marker) {
  }
  if (label_bb7$marker && label_bb8$marker) {
  }
  exhale true
  goto label__from__return_label__to__end_label
  label label__from__label_10_custom__to__label_bb9
  inhale _6$snapshot$3 == _6$snapshot$1
  inhale _9$snapshot$3 == _9$snapshot$0
  inhale lft_10$snapshot$3 == lft_10$snapshot$1
  inhale lft_14$snapshot$3 == lft_14$snapshot$1
  inhale lft_6$snapshot$3 == lft_6$snapshot$1
  inhale lft_function_call_2$snapshot$3 == lft_function_call_2$snapshot$1
  inhale old_lft_11_2$snapshot$3 == old_lft_11_2$snapshot$1
  goto label_bb9
  label label_10_custom
  label_10_custom$marker := true
  inhale basic_block_marker$label_10_custom$marker()
  inhale true
  inhale true
  inhale true
  inhale true
  lft_tok_sep_return$2(lft_function_call_2$snapshot$1, lft_2$snapshot$1, lft_10$snapshot$1,
    lifetime_token_perm_amount$0$snapshot$0 / 42)
  // Prepare lifetimes for block bb9
  lft_tok_sep_return$2(lft_10$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  lft_tok_sep_return$2(lft_14$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    21)
  goto label__from__label_10_custom__to__label_bb9
  label label__from__label_bb9__to__resume_panic_label
  inhale _4$snapshot$3 == _4$snapshot$1
  inhale _6$snapshot$4 == _6$snapshot$3
  inhale _8$snapshot$3 == _8$snapshot$1
  inhale _9$snapshot$4 == _9$snapshot$3
  inhale lft_10$snapshot$4 == lft_10$snapshot$3
  inhale lft_11$snapshot$3 == lft_11$snapshot$1
  inhale lft_12$snapshot$3 == lft_12$snapshot$1
  inhale lft_13$snapshot$3 == lft_13$snapshot$1
  inhale lft_14$snapshot$4 == lft_14$snapshot$3
  inhale lft_4$snapshot$3 == lft_4$snapshot$1
  inhale lft_5$snapshot$3 == lft_5$snapshot$1
  inhale lft_6$snapshot$4 == lft_6$snapshot$3
  inhale lft_9$snapshot$3 == lft_9$snapshot$1
  inhale lft_function_call_1$snapshot$3 == lft_function_call_1$snapshot$1
  inhale lft_function_call_2$snapshot$4 == lft_function_call_2$snapshot$3
  inhale old_lft_11_2$snapshot$4 == old_lft_11_2$snapshot$3
  inhale old_lft_8_1$snapshot$3 == old_lft_8_1$snapshot$1
  goto resume_panic_label
  label label_bb9
  label_bb9$marker := true
  inhale basic_block_marker$label_bb9$marker()
  // Prepare lifetimes for statement mid bb9[0]
  // bb9[0] resume
  goto label__from__label_bb9__to__resume_panic_label
  label label__from__resume_panic_label__to__end_label
  inhale _0$snapshot$4 == _0$snapshot$0
  inhale _4$snapshot$4 == _4$snapshot$3
  inhale _6$snapshot$5 == _6$snapshot$4
  inhale _8$snapshot$4 == _8$snapshot$3
  inhale _9$snapshot$5 == _9$snapshot$4
  inhale lft_10$snapshot$5 == lft_10$snapshot$4
  inhale lft_11$snapshot$4 == lft_11$snapshot$3
  inhale lft_12$snapshot$4 == lft_12$snapshot$3
  inhale lft_13$snapshot$4 == lft_13$snapshot$3
  inhale lft_14$snapshot$5 == lft_14$snapshot$4
  inhale lft_4$snapshot$4 == lft_4$snapshot$3
  inhale lft_5$snapshot$4 == lft_5$snapshot$3
  inhale lft_6$snapshot$5 == lft_6$snapshot$4
  inhale lft_9$snapshot$4 == lft_9$snapshot$3
  inhale lft_function_call_1$snapshot$4 == lft_function_call_1$snapshot$3
  inhale lft_function_call_2$snapshot$5 == lft_function_call_2$snapshot$4
  inhale old_lft_11_2$snapshot$5 == old_lft_11_2$snapshot$4
  inhale old_lft_8_0$snapshot$3 == old_lft_8_0$snapshot$0
  inhale old_lft_8_1$snapshot$4 == old_lft_8_1$snapshot$3
  goto end_label
  label resume_panic_label
  resume_panic_label$marker := true
  inhale basic_block_marker$resume_panic_label$marker()
  goto label__from__resume_panic_label__to__end_label
  label end_label
  end_label$marker := true
  inhale basic_block_marker$end_label$marker()
  goto end_of_method
  label end_of_method
}

method assign$Isize$Discriminant$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_8$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_address: Address, operand_permission: Perm,
  operand_value: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  returns (result_value: Snap$Isize)
  requires true
  requires none < operand_permission
  requires true
  requires valid$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_value)
  ensures true
  ensures true
  ensures result_value ==
    constructor$Snap$Isize$(discriminant$Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(operand_value))
  ensures valid$Snap$Isize(result_value)


method assign$Tuple$$Usize$Bool$$Usize$Bool$$CheckedBinaryOp$Add$Copy$Usize$Constant$Usize$$$$(target_place: Place,
  target_address: Address, operand1_place: Place, operand1_root_address: Address,
  operand1_value: Snap$Usize, operand2_value: Snap$Usize)
  returns (result_value: Snap$Tuple$$Usize$Bool$$Usize$Bool$)
  requires true
  requires true
  requires valid$Snap$Usize(operand1_value)
  requires valid$Snap$Usize(operand2_value)
  ensures true
  ensures true
  ensures true
  ensures true
  ensures valid$Snap$Usize(constructor$Snap$Usize$Add_Usize(operand1_value,
    operand2_value)) ==>
    destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_0(result_value) ==
    constructor$Snap$Usize$Add_Usize(operand1_value, operand2_value)
  ensures destructor$Snap$Tuple$$Usize$Bool$$Usize$Bool$$$tuple_1(result_value) ==
    constructor$Snap$Bool$(!valid$Snap$Usize(constructor$Snap$Usize$Add_Usize(operand1_value,
    operand2_value)))
  ensures true


method assign$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$Reborrow$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$lft_3$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$,
  lft_7: Lifetime, lft_3: Lifetime, lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  requires true
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_3, lft_7)
  requires true
  requires true
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$$$target_current(result_value)
  ensures true
  ensures true
  ensures valid$Snap$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(result_value)
  ensures true


method assign$ref$Shared$struct$m_LinkedList$$Reborrow$struct$m_LinkedList$$$lft_6$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$struct$m_LinkedList$, lft_11: Lifetime, lft_6: Lifetime,
  lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$struct$m_LinkedList$)
  requires true
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_6, lft_11)
  requires true
  requires true
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$struct$m_LinkedList$$$target_current(result_value)
  ensures true
  ensures true
  ensures valid$Snap$ref$Shared$struct$m_LinkedList$(result_value)
  ensures true


method assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_4$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  lft_8: Lifetime, lft_4: Lifetime, lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$)
  requires true
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_4, lft_8)
  requires true
  requires true
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(result_value)
  ensures true
  ensures true
  ensures valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(result_value)
  ensures true


method assign$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$Reborrow$trusted$m_BoxWrapper$struct$m_LinkedList$$$$lft_5$$(target_place: Place,
  target_address: Address, operand_place: Place, operand_root_address: Address,
  operand_snapshot_current: Snap$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  lft_9: Lifetime, lft_5: Lifetime, lifetime_perm: Perm)
  returns (result_value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$)
  requires true
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft_5, lft_9)
  requires true
  requires true
  ensures operand_root_address ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$address(result_value)
  ensures operand_snapshot_current ==
    destructor$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$$$target_current(result_value)
  ensures true
  ensures true
  ensures valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(result_value)
  ensures true


method bor_shorten$ref$Shared$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lft: Lifetime,
  old_lft: Lifetime, lifetime_perm: Perm, place: Place, root_address: Address,
  current_snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft, old_lft)
  requires true
  requires true
  ensures true
  ensures true


method bor_shorten$ref$Shared$struct$m_LinkedList$(lft: Lifetime, old_lft: Lifetime,
  lifetime_perm: Perm, place: Place, root_address: Address, current_snapshot: Snap$struct$m_LinkedList$)
  requires none < lifetime_perm
  requires lifetime_perm < write
  requires included(lft, old_lft)
  requires true
  requires true
  ensures true
  ensures true


method consume$Move$ref$Shared$struct$m_LinkedList$(operand1_place: Place, operand1_root_address: Address,
  operand1_value: Snap$ref$Shared$struct$m_LinkedList$, lft_10$alive: Bool,
  lft_10: Lifetime)
  requires true
  requires valid$Snap$ref$Shared$struct$m_LinkedList$(operand1_value)
  ensures true


method consume$Move$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand1_place: Place,
  operand1_root_address: Address, operand1_value: Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$,
  lft_12$alive: Bool, lft_12: Lifetime)
  requires true
  requires valid$Snap$ref$Shared$trusted$m_BoxWrapper$struct$m_LinkedList$$(operand1_value)
  ensures true


method frac_bor_atomic_acc$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$(lifetime: Lifetime,
  lifetime_perm: Perm, place: Place, root_address: Address, current_snapshot: Snap$enum$m_std$$option$$Option$_$trusted$m_BoxWrapper$struct$m_LinkedList$$$)
  returns (owned_perm: Perm)
  requires none < lifetime_perm
  requires true
  requires true
  ensures owned_perm < write
  ensures none < owned_perm
  ensures true
  ensures true --* true


method lft_tok_sep_return$2(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  rd_perm: Perm)
  requires none < rd_perm
  requires true
  requires lft == intersect(Set(lft_1, lft_2))
  ensures true
  ensures true


method lft_tok_sep_return$3(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  lft_3: Lifetime, rd_perm: Perm)
  requires none < rd_perm
  requires true
  requires lft == intersect(Set(lft_1, lft_2, lft_3))
  ensures true
  ensures true
  ensures true


method lft_tok_sep_take$2(lft_1: Lifetime, lft_2: Lifetime, rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires true
  requires true
  ensures true
  ensures lft == intersect(Set(lft_1, lft_2))


method lft_tok_sep_take$3(lft_1: Lifetime, lft_2: Lifetime, lft_3: Lifetime,
  rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires true
  requires true
  requires true
  ensures true
  ensures lft == intersect(Set(lft_1, lft_2, lft_3))
