domain Address  {
  
  
}

domain Bytes  {
  
  
}

domain FunctionGas  {
  
  function function_no_gas$(): FunctionGas 
  
  function function_gas_level$(_0: FunctionGas): FunctionGas 
}

domain Functions  {
  
  function m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(_0: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$,
  _1: FunctionGas): Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$ 
  
  axiom m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$$definitional_axiom {
    (forall _1: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$, gas$: FunctionGas ::
      { m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(_1,
      function_gas_level$(gas$)) }
      (valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(_1) ==>
      valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(_1,
      function_gas_level$(gas$)))) &&
      m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(_1,
      function_gas_level$(gas$)) ==
      m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(_1,
      gas$))
  }
}

domain Lifetime  {
  
  function included(_0: Lifetime, _1: Lifetime): Bool 
  
  function intersect(_0: Set[Lifetime]): Lifetime 
  
  axiom included_in_itself$ {
    (forall lft: Lifetime :: { included(lft, lft) } included(lft, lft))
  }
  
  axiom included_intersect$1 {
    (forall lft_1: Set[Lifetime], lft_2: Set[Lifetime] ::
      { included(intersect(lft_1), intersect(lft_2)) }
      included(intersect(lft_1), intersect(lft_2)) == (lft_2 subset lft_1))
  }
  
  axiom included_intersect$2 {
    (forall lft_1: Set[Lifetime], lft_2: Lifetime ::
      { included(intersect(lft_1), lft_2) }
      included(intersect(lft_1), lft_2) == (lft_2 in lft_1))
  }
  
  axiom intersect_singleton$ {
    (forall lft: Lifetime ::
      { intersect(Set(lft)) }
      intersect(Set(lft)) == lft)
  }
}

domain MarkerCalls  {
  
  function basic_block_marker$start_label$marker(): Bool 
  
  function basic_block_marker$label_entry$marker(): Bool 
  
  function basic_block_marker$label_bb0$marker(): Bool 
  
  function basic_block_marker$label_2_custom$marker(): Bool 
  
  function basic_block_marker$label_bb2$marker(): Bool 
  
  function basic_block_marker$resume_panic_label$marker(): Bool 
  
  function basic_block_marker$label_1_custom$marker(): Bool 
  
  function basic_block_marker$label_bb1$marker(): Bool 
  
  function basic_block_marker$return_label$marker(): Bool 
  
  function basic_block_marker$end_label$marker(): Bool 
}

domain Place  {
  
  unique function _1$place(): Place 
  
  unique function _0$place(): Place 
}

domain Size  {
  
  function Size$Tuple$$$$(): Snap$Usize 
  
  function Size$trusted$m_VecWrapper$struct$m_Tmp$$$(): Snap$Usize 
  
  function PaddingSize$Tuple$$$$(): Snap$Usize 
}

domain Snap$Bool  {
  
  function constructor$Snap$Bool$(value: Bool): Snap$Bool 
  
  function destructor$Snap$Bool$$value(value: Snap$Bool): Bool 
  
  function valid$Snap$Bool(_0: Snap$Bool): Bool 
  
  function constructor$Snap$Bool$EqCmp_I32(left: Snap$I32, right: Snap$I32): Snap$Bool 
  
  function destructor$Snap$Bool$EqCmp_I32$left(value: Snap$Bool): Snap$I32 
  
  function destructor$Snap$Bool$EqCmp_I32$right(value: Snap$Bool): Snap$I32 
  
  axiom constructor$Snap$Bool$$bottom_up_injectivity_axiom {
    (forall value: Bool ::
      { constructor$Snap$Bool$(value) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$(value)) == value)
  }
  
  axiom constructor$Snap$Bool$$top_down_injectivity_axiom {
    (forall value: Snap$Bool ::
      { valid$Snap$Bool(value) }
      valid$Snap$Bool(value) ==>
      value == constructor$Snap$Bool$(destructor$Snap$Bool$$value(value)))
  }
  
  axiom Snap$Bool$$validity_axiom_bottom_up_alternative {
    (forall value: Bool ::
      { valid$Snap$Bool(constructor$Snap$Bool$(value)) }
      valid$Snap$Bool(constructor$Snap$Bool$(value)))
  }
  
  axiom EqCmp_I32$simplification_axiom {
    (forall left: Int, right: Int ::
      { constructor$Snap$Bool$EqCmp_I32(constructor$Snap$I32$(left), constructor$Snap$I32$(right)) }
      valid$Snap$I32(constructor$Snap$I32$(left)) &&
      valid$Snap$I32(constructor$Snap$I32$(right)) ==>
      constructor$Snap$Bool$EqCmp_I32(constructor$Snap$I32$(left), constructor$Snap$I32$(right)) ==
      constructor$Snap$Bool$(left == right))
  }
  
  axiom EqCmp_I32$eval_axiom {
    (forall left: Snap$I32, right: Snap$I32 ::
      { destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_I32(left, right)) }
      destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_I32(left, right)) ==
      (destructor$Snap$I32$$value(left) ==
      destructor$Snap$I32$$value(right)))
  }
}

domain Snap$I32  {
  
  function constructor$Snap$I32$(value: Int): Snap$I32 
  
  function destructor$Snap$I32$$value(value: Snap$I32): Int 
  
  function valid$Snap$I32(_0: Snap$I32): Bool 
  
  axiom constructor$Snap$I32$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$I32$(value) }
      destructor$Snap$I32$$value(constructor$Snap$I32$(value)) == value)
  }
  
  axiom constructor$Snap$I32$$top_down_injectivity_axiom {
    (forall value: Snap$I32 ::
      { valid$Snap$I32(value) }
      valid$Snap$I32(value) ==>
      value == constructor$Snap$I32$(destructor$Snap$I32$$value(value)))
  }
  
  axiom Snap$I32$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$I32(constructor$Snap$I32$(value)) }
      valid$Snap$I32(constructor$Snap$I32$(value)) ==
      (-2147483648 <= value && value <= 2147483647))
  }
}

domain Snap$Tuple$$$  {
  
  function constructor$Snap$Tuple$$$$(): Snap$Tuple$$$ 
  
  function valid$Snap$Tuple$$$(_0: Snap$Tuple$$$): Bool 
  
  function to_bytes$Tuple$$$(snapshot: Snap$Tuple$$$): Bytes 
  
  axiom Snap$Tuple$$$$validity_axiom_bottom_up_alternative_no_parameters {
    valid$Snap$Tuple$$$(constructor$Snap$Tuple$$$$())
  }
}

domain Snap$Usize  {
  
  function constructor$Snap$Usize$(value: Int): Snap$Usize 
  
  function destructor$Snap$Usize$$value(value: Snap$Usize): Int 
  
  function valid$Snap$Usize(_0: Snap$Usize): Bool 
  
  axiom constructor$Snap$Usize$$bottom_up_injectivity_axiom {
    (forall value: Int ::
      { constructor$Snap$Usize$(value) }
      destructor$Snap$Usize$$value(constructor$Snap$Usize$(value)) == value)
  }
  
  axiom constructor$Snap$Usize$$top_down_injectivity_axiom {
    (forall value: Snap$Usize ::
      { valid$Snap$Usize(value) }
      valid$Snap$Usize(value) ==>
      value == constructor$Snap$Usize$(destructor$Snap$Usize$$value(value)))
  }
  
  axiom Snap$Usize$$validity_axiom_bottom_up_alternative {
    (forall value: Int ::
      { valid$Snap$Usize(constructor$Snap$Usize$(value)) }
      valid$Snap$Usize(constructor$Snap$Usize$(value)) ==
      (0 <= value && value <= 18446744073709551615))
  }
}

domain Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$  {
  
  function constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(address: Address,
  target_current: Snap$trusted$m_VecWrapper$struct$m_Tmp$$): Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$ 
  
  function destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$address(value: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$): Address 
  
  function destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(value: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$): Snap$trusted$m_VecWrapper$struct$m_Tmp$$ 
  
  function valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(_0: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$): Bool 
  
  function constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc(target_current: Snap$trusted$m_VecWrapper$struct$m_Tmp$$): Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$ 
  
  axiom constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$bottom_up_injectivity_axiom {
    (forall address: Address, target_current: Snap$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(address,
      target_current) }
      { constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(address,
      target_current) }
      destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$address(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(address,
      target_current)) ==
      address &&
      destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(address,
      target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(value), destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$address(value) }
      { valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(value), destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(value) }
      valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$address(value),
      destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(snapshot),
      destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(snapshot) ==
      valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$validity_axiom_bottom_up_alternative {
    (forall address: Address, target_current: Snap$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(address,
      target_current)), valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(target_current) }
      valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$(address,
      target_current)) ==
      valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(target_current))
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc$bottom_up_injectivity_axiom {
    (forall target_current: Snap$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc(target_current) }
      destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc(target_current)) ==
      target_current)
  }
  
  axiom constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc$top_down_injectivity_axiom {
    (forall value: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(value) }
      valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(value) ==>
      value ==
      constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc(destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(value)))
  }
  
  axiom Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(snapshot),
      destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(snapshot) }
      valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(snapshot) ==
      valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(destructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$$target_current(snapshot)))
  }
  
  axiom Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc$validity_axiom_bottom_up_alternative {
    (forall target_current: Snap$trusted$m_VecWrapper$struct$m_Tmp$$ ::
      { valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc(target_current)),
      valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(target_current) }
      valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc(target_current)) ==
      valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(target_current))
  }
}

domain Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$  {
  
  function constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$(f$last_pushed: Snap$struct$m_Tmp$): Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$ 
  
  function destructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$f$last_pushed(value: Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$): Snap$struct$m_Tmp$ 
  
  function valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(_0: Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$): Bool 
  
  axiom constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$bottom_up_injectivity_axiom {
    (forall f$last_pushed: Snap$struct$m_Tmp$ ::
      { constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$(f$last_pushed) }
      destructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$f$last_pushed(constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$(f$last_pushed)) ==
      f$last_pushed)
  }
  
  axiom constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$top_down_injectivity_axiom {
    (forall value: Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$ ::
      { valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(value) }
      valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(value) ==>
      value ==
      constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$(destructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$f$last_pushed(value)))
  }
  
  axiom Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$ ::
      { valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(snapshot),
      destructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$f$last_pushed(snapshot) }
      valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(snapshot) ==
      valid$Snap$struct$m_Tmp$(destructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$f$last_pushed(snapshot)))
  }
  
  axiom Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$validity_axiom_bottom_up_alternative {
    (forall f$last_pushed: Snap$struct$m_Tmp$ ::
      { valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$(f$last_pushed)),
      valid$Snap$struct$m_Tmp$(f$last_pushed) }
      valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(constructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$(f$last_pushed)) ==
      valid$Snap$struct$m_Tmp$(f$last_pushed))
  }
}

domain Snap$struct$m_Tmp$  {
  
  function constructor$Snap$struct$m_Tmp$$(f$x: Snap$I32): Snap$struct$m_Tmp$ 
  
  function destructor$Snap$struct$m_Tmp$$$f$x(value: Snap$struct$m_Tmp$): Snap$I32 
  
  function valid$Snap$struct$m_Tmp$(_0: Snap$struct$m_Tmp$): Bool 
  
  axiom constructor$Snap$struct$m_Tmp$$$bottom_up_injectivity_axiom {
    (forall f$x: Snap$I32 ::
      { constructor$Snap$struct$m_Tmp$$(f$x) }
      destructor$Snap$struct$m_Tmp$$$f$x(constructor$Snap$struct$m_Tmp$$(f$x)) ==
      f$x)
  }
  
  axiom constructor$Snap$struct$m_Tmp$$$top_down_injectivity_axiom {
    (forall value: Snap$struct$m_Tmp$ ::
      { valid$Snap$struct$m_Tmp$(value) }
      valid$Snap$struct$m_Tmp$(value) ==>
      value ==
      constructor$Snap$struct$m_Tmp$$(destructor$Snap$struct$m_Tmp$$$f$x(value)))
  }
  
  axiom Snap$struct$m_Tmp$$$validity_axiom_top_down_alternative {
    (forall snapshot: Snap$struct$m_Tmp$ ::
      { valid$Snap$struct$m_Tmp$(snapshot), destructor$Snap$struct$m_Tmp$$$f$x(snapshot) }
      valid$Snap$struct$m_Tmp$(snapshot) ==
      valid$Snap$I32(destructor$Snap$struct$m_Tmp$$$f$x(snapshot)))
  }
  
  axiom Snap$struct$m_Tmp$$$validity_axiom_bottom_up_alternative {
    (forall f$x: Snap$I32 ::
      { valid$Snap$struct$m_Tmp$(constructor$Snap$struct$m_Tmp$$(f$x)), valid$Snap$I32(f$x) }
      valid$Snap$struct$m_Tmp$(constructor$Snap$struct$m_Tmp$$(f$x)) ==
      valid$Snap$I32(f$x))
  }
}

domain Snap$trusted$m_VecWrapper$struct$m_Tmp$$  {
  
  function valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(_0: Snap$trusted$m_VecWrapper$struct$m_Tmp$$): Bool 
  
  function to_bytes$trusted$m_VecWrapper$struct$m_Tmp$$(snapshot: Snap$trusted$m_VecWrapper$struct$m_Tmp$$): Bytes 
}

domain ComputeAddress  {
  
  function compute_address(place: Place, address: Address): Address 
  
  axiom root$1$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_1$place(), address) }
      compute_address(_1$place(), address) == address)
  }
  
  axiom root$2$compute_address_axiom {
    (forall address: Address ::
      { compute_address(_0$place(), address) }
      compute_address(_0$place(), address) == address)
  }
}

function caller_for$m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(_1: Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$): Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$
  requires true
  requires valid$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$(_1)
  ensures true
  ensures valid$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$(result)
{
  m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(_1,
  function_gas_level$(function_gas_level$(function_no_gas$())))
}

method m_len$Specifications()
{
  var _0$address: Address
  var _0$snapshot$0: Snap$Tuple$$$
  var _0$snapshot$1: Snap$Tuple$$$
  var _1$address: Address
  var _1$snapshot$0: Snap$trusted$m_VecWrapper$struct$m_Tmp$$
  var bw0$snapshot$0: Lifetime
  var bw1$snapshot$0: Lifetime
  var end_label$marker: Bool
  var label_1_custom$marker: Bool
  var label_2_custom$marker: Bool
  var label_bb0$marker: Bool
  var label_bb1$marker: Bool
  var label_bb2$marker: Bool
  var label_entry$marker: Bool
  var lft_0$snapshot$1: Lifetime
  var lft_1$snapshot$1: Lifetime
  var lifetime_token_perm_amount$0$snapshot$0: Perm
  var resume_panic_label$marker: Bool
  var return_label$marker: Bool
  var start_label$marker: Bool
  var tmp$0: Snap$Tuple$$$
  var tmp$1: Bool
  label start_label
  start_label$marker := false
  label_entry$marker := false
  label_bb0$marker := false
  label_2_custom$marker := false
  label_bb2$marker := false
  resume_panic_label$marker := false
  label_1_custom$marker := false
  label_bb1$marker := false
  return_label$marker := false
  end_label$marker := false
  start_label$marker := true
  inhale basic_block_marker$start_label$marker()
  // Lifetime preconditions.
  inhale lifetime_token_perm_amount$0$snapshot$0 > none
  inhale lifetime_token_perm_amount$0$snapshot$0 < write
  inhale true
  inhale true
  lft_0$snapshot$1 := bw0$snapshot$0
  lft_1$snapshot$1 := lft_tok_sep_take$2(bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    6)
  // Allocate the parameters.
  inhale valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(_1$snapshot$0)
  // Assume functional preconditions.
  // Allocate the return place.
  inhale true
  // Allocate implicitly allocated statements.
  goto label_entry
  label label_entry
  label_entry$marker := true
  inhale basic_block_marker$label_entry$marker()
  goto label_bb0
  label label_bb0
  label_bb0$marker := true
  inhale basic_block_marker$label_bb0$marker()
  // Prepare lifetimes for statement mid bb0[0]
  // bb0[0] _0 = ()
  tmp$0 := assign$Tuple$$$$Aggregate$Tuple$$$$$$$(_0$place(), _0$address)
  inhale _0$snapshot$1 == tmp$0
  // Prepare lifetimes for statement mid bb0[1]
  // bb0[1] drop(_1) -> [return: bb1, unwind: bb2]
  consume$Move$trusted$m_VecWrapper$struct$m_Tmp$$(_1$place(), _1$address, _1$snapshot$0)
  if (tmp$1) {
    goto label_1_custom
  }
  if (!tmp$1) {
    goto label_2_custom
  }
  assert false
  label label_2_custom
  label_2_custom$marker := true
  inhale basic_block_marker$label_2_custom$marker()
  // Prepare lifetimes for block bb2
  goto label_bb2
  label label_bb2
  label_bb2$marker := true
  inhale basic_block_marker$label_bb2$marker()
  // Prepare lifetimes for statement mid bb2[0]
  // bb2[0] resume
  goto resume_panic_label
  label resume_panic_label
  resume_panic_label$marker := true
  inhale basic_block_marker$resume_panic_label$marker()
  goto end_label
  label label_1_custom
  label_1_custom$marker := true
  inhale basic_block_marker$label_1_custom$marker()
  // Prepare lifetimes for block bb1
  goto label_bb1
  label label_bb1
  label_bb1$marker := true
  inhale basic_block_marker$label_bb1$marker()
  // Prepare lifetimes for statement mid bb1[0]
  // bb1[0] return
  goto return_label
  label return_label
  return_label$marker := true
  inhale basic_block_marker$return_label$marker()
  // Assert functional postconditions.
  assert destructor$Snap$Bool$$value(constructor$Snap$Bool$EqCmp_I32(destructor$Snap$struct$m_Tmp$$$f$x(destructor$Snap$struct$m_PrustiVecWrapperTmpModel_db9fec63670f40ac84eb877b7f2fb705$$$f$last_pushed(caller_for$m_PrustiVecWrapperTmpToModel_db9fec63670f40ac84eb877b7f2fb705$$model$trusted$m_VecWrapper$struct$m_Tmp$$$(constructor$Snap$ref$Shared$trusted$m_VecWrapper$struct$m_Tmp$$$no_alloc(_1$snapshot$0)))),
    constructor$Snap$I32$(5)))
  // Deallocate the parameters.
  exhale true
  // Deallocate the return place.
  exhale valid$Snap$Tuple$$$(_0$snapshot$1)
  // Lifetime postconditions.
  lft_tok_sep_return$2(lft_1$snapshot$1, bw0$snapshot$0, bw1$snapshot$0, lifetime_token_perm_amount$0$snapshot$0 /
    6)
  exhale true
  exhale true
  goto end_label
  label end_label
  end_label$marker := true
  inhale basic_block_marker$end_label$marker()
  goto end_of_method
  label end_of_method
}

method assign$Tuple$$$$Aggregate$Tuple$$$$$$$(target_place: Place, target_address: Address)
  returns (result_value: Snap$Tuple$$$)
  requires true
  ensures true
  ensures valid$Snap$Tuple$$$(constructor$Snap$Tuple$$$$())
  ensures result_value == constructor$Snap$Tuple$$$$()
  ensures valid$Snap$Tuple$$$(result_value)


method consume$Move$trusted$m_VecWrapper$struct$m_Tmp$$(operand1_place: Place,
  operand1_root_address: Address, operand1_value: Snap$trusted$m_VecWrapper$struct$m_Tmp$$)
  requires true
  requires valid$Snap$trusted$m_VecWrapper$struct$m_Tmp$$(operand1_value)
  ensures true


method lft_tok_sep_return$2(lft: Lifetime, lft_1: Lifetime, lft_2: Lifetime,
  rd_perm: Perm)
  requires none < rd_perm
  requires true
  requires lft == intersect(Set(lft_1, lft_2))
  ensures true
  ensures true


method lft_tok_sep_take$2(lft_1: Lifetime, lft_2: Lifetime, rd_perm: Perm)
  returns (lft: Lifetime)
  requires none < rd_perm
  requires true
  requires true
  ensures true
  ensures lft == intersect(Set(lft_1, lft_2))
