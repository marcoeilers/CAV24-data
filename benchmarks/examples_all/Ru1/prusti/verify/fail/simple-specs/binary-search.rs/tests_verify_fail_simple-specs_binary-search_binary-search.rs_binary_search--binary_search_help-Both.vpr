domain MirrorDomain  {
  
  function mirror_simple$f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(_1: Snap$struct$m_VecWrapperusize): Int 
  
  function mirror_simple$f_VecWrapperusize$$lookup__$TY$__Snap$struct$m_VecWrapperusize$$int$$$int$(_1: Snap$struct$m_VecWrapperusize,
  _2: Int): Int 
}

domain Snap$m_std$$option$$Option$_beg_$usize$_end_  {
  
  function discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0: Int): Snap$m_std$$option$$Option$_beg_$usize$_end_ 
  
  function Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Snap$m_std$$option$$Option$_beg_$usize$_end_): Int 
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$discriminant_range {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_()) ==
    0
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$injectivity {
    (forall _l_0: Int, _r_0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0),
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$discriminant_axiom {
    (forall _0: Int ::
      { cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0) }
      discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$axiom {
    (forall _0: Int ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) }
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_(_0)) ==
      _0)
  }
  
  axiom Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0$valid {
    (forall self: Snap$m_std$$option$$Option$_beg_$usize$_end_ ::
      { Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) }
      0 <=
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) &&
      Snap$m_std$$option$$Option$_beg_$usize$_end_$1$field$f$0__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(self) <=
      18446744073709551615)
  }
}

domain Snap$struct$m_VecWrapperusize  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapperusize 
  
  function Snap$struct$m_VecWrapperusize$0$field$f$v__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapperusize): Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapperusize$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapperusize$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapperusize$0$field$f$v__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_0)) }
      Snap$struct$m_VecWrapperusize$0$field$f$v__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_Some: Ref

field f$0: Ref

field f$v: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(_1: Snap$struct$m_VecWrapperusize): Int
  requires true
  requires true
  ensures true
  ensures 0 <= result
  ensures [result ==
    mirror_simple$f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(_1),
    true]


function f_VecWrapperusize$$lookup__$TY$__Snap$struct$m_VecWrapperusize$$int$$$int$(_1: Snap$struct$m_VecWrapperusize,
  _2: Int): Int
  requires true
  requires 0 <= _2 &&
    _2 <
    f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(_1)
  requires 0 <= _2
  ensures true
  ensures 0 <= result
  ensures [result ==
    mirror_simple$f_VecWrapperusize$$lookup__$TY$__Snap$struct$m_VecWrapperusize$$int$$$int$(_1,
    _2),
    true]


function m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(self: Ref): Int
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$(snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self)) ==
    result
{
  (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant)
}

function snap$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_(self: Ref): Snap$m_std$$option$$Option$_beg_$usize$_end_
  requires acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$())
{
  ((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
    self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$$int$$Snap$m_std$$option$$Option$_beg_$usize$_end_((unfolding acc(m_std$$option$$Option$_beg_$usize$_end_(self), read$()) in
      (unfolding acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), read$()) in
        (unfolding acc(usize(self.enum_Some.f$0), read$()) in
          self.enum_Some.f$0.val_int)))) :
    cons$0$__$TY$__Snap$m_std$$option$$Option$_beg_$usize$_end_$Snap$m_std$$option$$Option$_beg_$usize$_end_())
}

function snap$__$TY$__Snap$struct$m_VecWrapperusize$struct$m_VecWrapperusize$Snap$struct$m_VecWrapperusize(self: Ref): Snap$struct$m_VecWrapperusize
  requires acc(struct$m_VecWrapperusize(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize((unfolding acc(struct$m_VecWrapperusize(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate m_std$$option$$Option$_beg_$usize$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_Some, write) &&
  acc(m_std$$option$$Option$_beg_$usize$_end_Some(self.enum_Some), write)))
}

predicate m_std$$option$$Option$_beg_$usize$_end_Some(self: Ref) {
  acc(self.f$0, write) && acc(usize(self.f$0), write)
}

predicate struct$m_VecWrapperusize(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self: Ref) 

predicate usize(self: Ref) {
  acc(self.val_int, write) && 0 <= self.val_int
}

method m_binary_search_help() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var _1: Ref
  var _2: Int
  var _3: Int
  var _4: Int
  var _7: Ref
  var _8: Int
  var _9: Int
  var _10: Int
  var _11: Ref
  var _12: Int
  var _13: Int
  var _14: Ref
  var _15: Ref
  var _16: Ref
  var _17: Int
  var _18: Ref
  var _19: Int
  var _20: Int
  var _22: Ref
  var _23: Ref
  var _24: Int
  var _25: Ref
  var _26: Int
  var _27: Int
  var _28: Ref
  var _29: Int
  var _30: Ref
  var _31: Int
  var _32: Int
  var _34: Ref
  var _35: Int
  var _36: Ref
  var _37: Int
  var _38: Ref
  var _39: Int
  var _41: Ref
  
  label start
  // ========== start ==========
  // Def path: "binary_search::binary_search_help"
  // Span: tests/verify/fail/simple-specs/binary-search.rs:50:1: 62:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  // Preconditions:
  inhale acc(struct$m_VecWrapperusize(_1), write) &&
    (_2 >= 0 && (_3 >= 0 && _4 >= 0))
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] StorageLive(_8)
  // [mir] _8 = _2
  _8 := builtin$havoc_int()
  inhale _2 >= 0
  _8 := _2
  label l0
  // [mir] StorageLive(_9)
  // [mir] _9 = _3
  _9 := builtin$havoc_int()
  inhale _3 >= 0
  _9 := _3
  label l1
  // [mir] _7 = Le(move _8, move _9)
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_bool, write)
  _7.val_bool := _8 <= _9
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_8)
  // [mir] switchInt(move _7) -> [0: bb14, otherwise: bb1]
  __t19 := _7.val_bool
  if (__t19) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l3 ==========
  // MIR edge bb0 --> bb1
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] _12 = _2
  _12 := builtin$havoc_int()
  _12 := _2
  label l4
  // [mir] StorageLive(_13)
  // [mir] _13 = _3
  _13 := builtin$havoc_int()
  _13 := _3
  label l5
  // [mir] _14 = CheckedAdd(_12, _13)
  _14 := builtin$havoc_ref()
  inhale acc(_14.tuple_0, write)
  inhale acc(_14.tuple_0.val_int, write)
  inhale acc(_14.tuple_1, write)
  inhale acc(_14.tuple_1.val_bool, write)
  _14.tuple_0.val_int := _12 + _13
  _14.tuple_1.val_bool := false
  // [mir] assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _12, move _13) -> [success: bb2, unwind: bb21]
  __t20 := _14.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t20
  // ========== bb2 ==========
  __t2 := true
  // [mir] _11 = move (_14.0: usize)
  _11 := _14.tuple_0
  label l6
  // [mir] StorageDead(_13)
  // [mir] StorageDead(_12)
  // [mir] _15 = Eq(const 2_usize, const 0_usize)
  _15 := builtin$havoc_ref()
  inhale acc(_15.val_bool, write)
  _15.val_bool := false
  // [mir] assert(!move _15, "attempt to divide `{}` by zero", _11) -> [success: bb3, unwind: bb21]
  __t21 := _15.val_bool
  // Rust assertion: attempt to divide by zero
  assert !__t21
  // ========== bb3 ==========
  __t3 := true
  // [mir] _10 = Div(move _11, const 2_usize)
  _10 := builtin$havoc_int()
  _10 := _11.val_int / 2
  // [mir] StorageDead(_11)
  // [mir] FakeRead(ForLet(None), _10)
  // [mir] StorageLive(_16)
  // [mir] StorageLive(_17)
  // [mir] StorageLive(_18)
  // [mir] _18 = &_1
  _18 := builtin$havoc_ref()
  inhale acc(_18.val_ref, write)
  _18.val_ref := _1
  exhale acc(struct$m_VecWrapperusize(_1), write - read$())
  inhale acc(struct$m_VecWrapperusize(_18.val_ref), read$())
  label l7
  // [mir] StorageLive(_19)
  // [mir] _19 = _10
  _19 := builtin$havoc_int()
  _19 := _10
  label l8
  // [mir] _17 = VecWrapperusize::lookup(move _18, move _19) -> [return: bb4, unwind: bb21]
  label l9
  _17 := builtin$havoc_int()
  inhale _17 >= 0
  inhale _17 ==
    f_VecWrapperusize$$lookup__$TY$__Snap$struct$m_VecWrapperusize$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperusize$struct$m_VecWrapperusize$Snap$struct$m_VecWrapperusize(_18.val_ref),
    _19)
  // transfer perm _18.val_ref --> old[l9](_18.val_ref) // unchecked: false
  // ========== l10 ==========
  // MIR edge bb3 --> bb4
  // Expire borrows
  // expire_borrows ReborrowingDAG(L5,L0,)

  if (__t3 && __t3) {
    // expire loan L0
    // transfer perm old[l9](_18.val_ref) --> old[l7](_18.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperusize(old[l7](_18.val_ref)), read$())
    inhale acc(struct$m_VecWrapperusize(_1), write - read$())
  }
  // ========== bb4 ==========
  __t4 := true
  // [mir] StorageDead(_19)
  // [mir] StorageDead(_18)
  // [mir] StorageLive(_20)
  // [mir] _20 = _4
  _20 := builtin$havoc_int()
  inhale _4 >= 0
  _20 := _4
  label l11
  // [mir] _16 = Lt(move _17, move _20)
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  inhale _17 >= 0
  _16.val_bool := _17 < _20
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_17)
  // [mir] switchInt(move _16) -> [0: bb8, otherwise: bb5]
  __t22 := _16.val_bool
  if (__t22) {
    goto bb3
  }
  goto l2
  
  label bb1
  // ========== l27 ==========
  // MIR edge bb9 --> bb10
  // ========== bb10 ==========
  __t10 := true
  // [mir] StorageLive(_34)
  // [mir] _34 = move _1
  _34 := _1
  label l28
  // [mir] StorageLive(_35)
  // [mir] _35 = _2
  _35 := builtin$havoc_int()
  _35 := _2
  label l29
  // [mir] StorageLive(_36)
  // [mir] StorageLive(_37)
  // [mir] _37 = _10
  _37 := builtin$havoc_int()
  _37 := _10
  label l30
  // [mir] _38 = CheckedSub(_37, const 1_usize)
  _38 := builtin$havoc_ref()
  inhale acc(_38.tuple_0, write)
  inhale acc(_38.tuple_0.val_int, write)
  inhale acc(_38.tuple_1, write)
  inhale acc(_38.tuple_1.val_bool, write)
  _38.tuple_0.val_int := _37 - 1
  _38.tuple_1.val_bool := false
  // [mir] assert(!move (_38.1: bool), "attempt to compute `{} - {}`, which would overflow", move _37, const 1_usize) -> [success: bb11, unwind: bb19]
  __t25 := _38.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t25
  // ========== bb11 ==========
  __t11 := true
  // [mir] _36 = move (_38.0: usize)
  _36 := _38.tuple_0
  label l31
  // [mir] StorageDead(_37)
  // [mir] StorageLive(_39)
  // [mir] _39 = _4
  _39 := builtin$havoc_int()
  _39 := _4
  label l32
  // [mir] _0 = binary_search_help(move _34, move _35, move _36, move _39) -> [return: bb12, unwind: bb19]
  label l33
  assert true
  assert _35 >= 0
  fold acc(usize(_36), write)
  assert _39 >= 0
  exhale acc(struct$m_VecWrapperusize(_34), write) &&
    (_35 >= 0 && (acc(usize(_36), write) && _39 >= 0))
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale true
  label l34
  // ========== bb12 ==========
  __t12 := true
  // [mir] StorageDead(_39)
  // [mir] StorageDead(_36)
  // [mir] StorageDead(_35)
  // [mir] StorageDead(_34)
  // [mir] goto -> bb15
  // ========== l37 ==========
  // drop Acc(_38.tuple_0, write) (Acc(_38.tuple_0, write))
  // drop Acc(_37.val_int, write) (Acc(_37.val_int, write))
  // drop Acc(_38.tuple_1.val_bool, write) (Acc(_38.tuple_1.val_bool, write))
  // drop Acc(_38.tuple_1, write) (Acc(_38.tuple_1, write))
  goto bb2
  
  label bb2
  // ========== bb15 ==========
  __t14 := true
  // [mir] StorageDead(_28)
  // [mir] goto -> bb16
  // ========== l41 ==========
  // drop Acc(_29.val_int, write) (Acc(_29.val_int, write))
  // drop Acc(_30.val_ref, write) (Acc(_30.val_ref, write))
  // drop Acc(_31.val_int, write) (Acc(_31.val_int, write))
  // drop Acc(old[l21](_30.val_ref), write) (Acc(old[l21](_30.val_ref), write))
  // drop Acc(_28.val_bool, write) (Acc(_28.val_bool, write))
  // drop Acc(_32.val_int, write) (Acc(_32.val_int, write))
  goto l10
  
  label bb3
  // ========== l13 ==========
  // MIR edge bb4 --> bb5
  // ========== bb5 ==========
  __t5 := true
  // [mir] StorageLive(_22)
  // [mir] _22 = move _1
  _22 := _1
  label l14
  // [mir] StorageLive(_23)
  // [mir] StorageLive(_24)
  // [mir] _24 = _10
  _24 := builtin$havoc_int()
  _24 := _10
  label l15
  // [mir] _25 = CheckedAdd(_24, const 1_usize)
  _25 := builtin$havoc_ref()
  inhale acc(_25.tuple_0, write)
  inhale acc(_25.tuple_0.val_int, write)
  inhale acc(_25.tuple_1, write)
  inhale acc(_25.tuple_1.val_bool, write)
  _25.tuple_0.val_int := _24 + 1
  _25.tuple_1.val_bool := false
  // [mir] assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", move _24, const 1_usize) -> [success: bb6, unwind: bb20]
  __t23 := _25.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t23
  // ========== bb6 ==========
  __t6 := true
  // [mir] _23 = move (_25.0: usize)
  _23 := _25.tuple_0
  label l16
  // [mir] StorageDead(_24)
  // [mir] StorageLive(_26)
  // [mir] _26 = _3
  _26 := builtin$havoc_int()
  _26 := _3
  label l17
  // [mir] StorageLive(_27)
  // [mir] _27 = _4
  _27 := builtin$havoc_int()
  _27 := _4
  label l18
  // [mir] _0 = binary_search_help(move _22, move _23, move _26, move _27) -> [return: bb7, unwind: bb20]
  label l19
  assert true
  fold acc(usize(_23), write)
  assert _26 >= 0
  assert _27 >= 0
  exhale acc(struct$m_VecWrapperusize(_22), write) &&
    (acc(usize(_23), write) && (_26 >= 0 && _27 >= 0))
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale true
  label l20
  // ========== bb7 ==========
  __t7 := true
  // [mir] StorageDead(_27)
  // [mir] StorageDead(_26)
  // [mir] StorageDead(_23)
  // [mir] StorageDead(_22)
  // [mir] goto -> bb16
  // ========== l40 ==========
  // drop Acc(_25.tuple_0, write) (Acc(_25.tuple_0, write))
  // drop Acc(_24.val_int, write) (Acc(_24.val_int, write))
  // drop Acc(_25.tuple_1.val_bool, write) (Acc(_25.tuple_1.val_bool, write))
  // drop Acc(_25.tuple_1, write) (Acc(_25.tuple_1, write))
  goto l10
  
  label bb4
  // ========== bb17 ==========
  __t17 := true
  // [mir] drop(_1) -> [return: bb18, unwind: bb22]
  // ========== bb18 ==========
  __t18 := true
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l38
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l10
  // ========== bb16 ==========
  __t15 := true
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] goto -> bb17
  // ========== l42 ==========
  // drop Acc(_16.val_bool, write) (Acc(_16.val_bool, write))
  // drop Acc(_10.val_int, write) (Acc(_10.val_int, write))
  // drop Acc(old[l7](_18.val_ref), write) (Acc(old[l7](_18.val_ref), write))
  // drop Acc(_14.tuple_1.val_bool, write) (Acc(_14.tuple_1.val_bool, write))
  // drop Acc(_15.val_bool, write) (Acc(_15.val_bool, write))
  // drop Acc(_20.val_int, write) (Acc(_20.val_int, write))
  // drop Acc(_19.val_int, write) (Acc(_19.val_int, write))
  // drop Acc(_13.val_int, write) (Acc(_13.val_int, write))
  // drop Acc(_17.val_int, write) (Acc(_17.val_int, write))
  // drop Acc(_14.tuple_0, write) (Acc(_14.tuple_0, write))
  // drop Acc(_12.val_int, write) (Acc(_12.val_int, write))
  // drop Acc(_11.val_int, write) (Acc(_11.val_int, write))
  // drop Acc(_18.val_ref, write) (Acc(_18.val_ref, write))
  // drop Acc(_14.tuple_1, write) (Acc(_14.tuple_1, write))
  goto bb4
  
  label l2
  // ========== l12 ==========
  // MIR edge bb4 --> bb8
  // ========== bb8 ==========
  __t8 := true
  // [mir] StorageLive(_28)
  // [mir] StorageLive(_29)
  // [mir] StorageLive(_30)
  // [mir] _30 = &_1
  _30 := builtin$havoc_ref()
  inhale acc(_30.val_ref, write)
  _30.val_ref := _1
  exhale acc(struct$m_VecWrapperusize(_1), write - read$())
  inhale acc(struct$m_VecWrapperusize(_30.val_ref), read$())
  label l21
  // [mir] StorageLive(_31)
  // [mir] _31 = _10
  _31 := builtin$havoc_int()
  _31 := _10
  label l22
  // [mir] _29 = VecWrapperusize::lookup(move _30, move _31) -> [return: bb9, unwind: bb21]
  label l23
  _29 := builtin$havoc_int()
  inhale _29 >= 0
  inhale _29 ==
    f_VecWrapperusize$$lookup__$TY$__Snap$struct$m_VecWrapperusize$$int$$$int$(snap$__$TY$__Snap$struct$m_VecWrapperusize$struct$m_VecWrapperusize$Snap$struct$m_VecWrapperusize(_30.val_ref),
    _31)
  // transfer perm _30.val_ref --> old[l23](_30.val_ref) // unchecked: false
  // ========== l24 ==========
  // MIR edge bb8 --> bb9
  // Expire borrows
  // expire_borrows ReborrowingDAG(L4,L1,)

  if (__t8 && __t8) {
    // expire loan L1
    // transfer perm old[l23](_30.val_ref) --> old[l21](_30.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperusize(old[l21](_30.val_ref)), read$())
    inhale acc(struct$m_VecWrapperusize(_1), write - read$())
  }
  // ========== bb9 ==========
  __t9 := true
  // [mir] StorageDead(_31)
  // [mir] StorageDead(_30)
  // [mir] StorageLive(_32)
  // [mir] _32 = _4
  _32 := builtin$havoc_int()
  _32 := _4
  label l25
  // [mir] _28 = Gt(move _29, move _32)
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_bool, write)
  inhale _29 >= 0
  _28.val_bool := _29 > _32
  // [mir] StorageDead(_32)
  // [mir] StorageDead(_29)
  // [mir] switchInt(move _28) -> [0: bb13, otherwise: bb10]
  __t24 := _28.val_bool
  if (__t24) {
    goto bb1
  }
  goto l3
  
  label l3
  // ========== l26 ==========
  // MIR edge bb9 --> bb13
  // ========== bb13 ==========
  __t13 := true
  // [mir] StorageLive(_41)
  // [mir] _41 = _10
  _41 := builtin$havoc_ref()
  inhale acc(_41.val_int, write)
  _41.val_int := _10
  label l35
  // [mir] _0 = std::option::Option::<usize>::Some(move _41)
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_0) ==
    1
  // downcast _0 to enum_Some

  unfold acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  unfold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_0.enum_Some), write)
  _0.enum_Some.f$0 := _41
  label l36
  // [mir] StorageDead(_41)
  // [mir] goto -> bb15
  // ========== l39 ==========
  fold acc(usize(_0.enum_Some.f$0), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_Some(_0.enum_Some), write)
  fold acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // drop Pred(_1, write) (Pred(_1, write))
  goto bb2
  
  label return
  // ========== l2 ==========
  // MIR edge bb0 --> bb14
  // ========== bb14 ==========
  __t16 := true
  // [mir] _6 = const ()
  // [mir] StorageDead(_7)
  // [mir] StorageDead(_6)
  // [mir] _0 = std::option::Option::<usize>::None
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale m_std$$option$$Option$_beg_$usize$_end_$$discriminant$$__$TY$__m_std$$option$$Option$_beg_$usize$_end_$$int$(_0) ==
    0
  // [mir] goto -> bb17
  // ========== l43 ==========
  inhale _4 >= 0
  // drop Pred(_1, write) (Pred(_1, write))
  goto bb4
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
