domain MirrorDomain  {
  
  function mirror_simple$f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(_1: Snap$struct$m_VecWrapperusize): Int 
}

domain Snap$struct$m_VecWrapperusize  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapperusize 
  
  function Snap$struct$m_VecWrapperusize$0$field$f$v__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapperusize): Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapperusize$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapperusize$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapperusize$0$field$f$v__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_0)) }
      Snap$struct$m_VecWrapperusize$0$field$f$v__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$v: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(_1: Snap$struct$m_VecWrapperusize): Int
  requires true
  requires true
  ensures true
  ensures 0 <= result
  ensures [result ==
    mirror_simple$f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(_1),
    true]


function snap$__$TY$__Snap$struct$m_VecWrapperusize$struct$m_VecWrapperusize$Snap$struct$m_VecWrapperusize(self: Ref): Snap$struct$m_VecWrapperusize
  requires acc(struct$m_VecWrapperusize(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapperusize$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperusize((unfolding acc(struct$m_VecWrapperusize(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate m_std$$option$$Option$_beg_$usize$_end_(self: Ref) 

predicate struct$m_VecWrapperusize(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$usize$struct$m_std$$alloc$$Global(self: Ref) 

predicate usize(self: Ref) {
  acc(self.val_int, write) && 0 <= self.val_int
}

method m_binary_search_rec() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var _1: Ref
  var _2: Int
  var _3: Int
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Int
  var _8: Ref
  var _9: Int
  var _t10: Int
  
  label start
  // ========== start ==========
  // Def path: "binary_search::binary_search_rec"
  // Span: tests/verify/fail/simple-specs/binary-search.rs:45:1: 48:2 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  // Preconditions:
  inhale acc(struct$m_VecWrapperusize(_1), write) && _2 >= 0
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = &_1
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  _4.val_ref := _1
  exhale acc(struct$m_VecWrapperusize(_1), write - read$())
  inhale acc(struct$m_VecWrapperusize(_4.val_ref), read$())
  label l0
  // [mir] _3 = VecWrapperusize::len(move _4) -> [return: bb1, unwind: bb6]
  label l1
  _3 := builtin$havoc_int()
  inhale _3 >= 0
  inhale _3 ==
    f_VecWrapperusize$$len__$TY$__Snap$struct$m_VecWrapperusize$$int$(snap$__$TY$__Snap$struct$m_VecWrapperusize$struct$m_VecWrapperusize$Snap$struct$m_VecWrapperusize(_4.val_ref))
  // transfer perm _4.val_ref --> old[l1](_4.val_ref) // unchecked: false
  // ========== l2 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L3,L0,)

  if (__t0 && __t0) {
    // expire loan L0
    // transfer perm old[l1](_4.val_ref) --> old[l0](_4.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperusize(old[l0](_4.val_ref)), read$())
    inhale acc(struct$m_VecWrapperusize(_1), write - read$())
  }
  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_4)
  // [mir] FakeRead(ForLet(None), _3)
  // [mir] StorageLive(_5)
  // [mir] _5 = move _1
  _5 := _1
  label l3
  // [mir] StorageLive(_6)
  // [mir] StorageLive(_7)
  // [mir] _7 = _3
  _7 := builtin$havoc_int()
  inhale _3 >= 0
  _7 := _3
  label l4
  // [mir] _8 = CheckedSub(_7, const 1_usize)
  _8 := builtin$havoc_ref()
  inhale acc(_8.tuple_0, write)
  inhale acc(_8.tuple_0.val_int, write)
  inhale acc(_8.tuple_1, write)
  inhale acc(_8.tuple_1.val_bool, write)
  _8.tuple_0.val_int := _7 - 1
  _8.tuple_1.val_bool := false
  // [mir] assert(!move (_8.1: bool), "attempt to compute `{} - {}`, which would overflow", move _7, const 1_usize) -> [success: bb2, unwind: bb5]
  __t5 := _8.tuple_1.val_bool
  // Rust assertion: attempt to subtract with overflow
  assert !__t5
  // ========== bb2 ==========
  __t2 := true
  // [mir] _6 = move (_8.0: usize)
  _6 := _8.tuple_0
  label l5
  // [mir] StorageDead(_7)
  // [mir] StorageLive(_9)
  // [mir] _9 = _2
  _9 := builtin$havoc_int()
  inhale _2 >= 0
  _9 := _2
  label l6
  // [mir] _0 = binary_search_help(move _5, const 0_usize, move _6, move _9) -> [return: bb3, unwind: bb5]
  label l7
  _t10 := builtin$havoc_int()
  inhale _t10 >= 0
  assert true
  fold acc(usize(_6), write)
  assert _9 >= 0
  exhale acc(struct$m_VecWrapperusize(_5), write) &&
    (_t10 >= 0 && (acc(usize(_6), write) && _9 >= 0))
  _0 := builtin$havoc_ref()
  inhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  inhale true
  label l8
  // ========== bb3 ==========
  __t3 := true
  // [mir] StorageDead(_9)
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_3)
  // [mir] drop(_1) -> [return: bb4, unwind: bb7]
  // ========== bb4 ==========
  __t4 := true
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l10
  // Fold predicates for &mut args and transfer borrow permissions to old
  // Fold the result
  // obtain acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  // Exhale permissions of postcondition (2/3)
  exhale acc(m_std$$option$$Option$_beg_$usize$_end_(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
