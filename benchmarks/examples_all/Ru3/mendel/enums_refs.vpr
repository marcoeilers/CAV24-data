domain Address$Adt$enums_refs$$A$2$$  {
  
  function deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base: Address$Adt$enums_refs$$A$2$$,
  version: Version): MemorySnapshot$Adt$enums_refs$$A$2$$ 
  
  function id_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$$int$(base: Address$Adt$enums_refs$$A$2$$,
  version: Version): Int 
  
  function get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(base: Address$Adt$enums_refs$$A$2$$): Address$SharedRef$I32 
  
  function get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(base: Address$Adt$enums_refs$$A$2$$): Address$Adt$enums_refs$$B 
  
  function get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(base: Address$Adt$enums_refs$$A$2$$): Address$Adt$enums_refs$$C 
  
  function get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(base: Address$Adt$enums_refs$$A$2$$): Address$SharedRef$Adt$enums_refs$$D$1$ 
  
  function get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(base: Address$Adt$enums_refs$$A$2$$): Address$MutRef$Adt$enums_refs$$D$1$ 
  
  function get_base_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$SharedRef$I32$Address$Adt$enums_refs$$A$2$$(field_addr: Address$SharedRef$I32): Address$Adt$enums_refs$$A$2$$ 
  
  function get_base_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$B$Address$Adt$enums_refs$$A$2$$(field_addr: Address$Adt$enums_refs$$B): Address$Adt$enums_refs$$A$2$$ 
  
  function get_base_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$C$Address$Adt$enums_refs$$A$2$$(field_addr: Address$Adt$enums_refs$$C): Address$Adt$enums_refs$$A$2$$ 
  
  function get_base_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$A$2$$(field_addr: Address$SharedRef$Adt$enums_refs$$D$1$): Address$Adt$enums_refs$$A$2$$ 
  
  function get_base_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$A$2$$(field_addr: Address$MutRef$Adt$enums_refs$$D$1$): Address$Adt$enums_refs$$A$2$$ 
  
  // The base address is determined by the address of field f$a1
  axiom base_of_field_of_Adt$enums_refs$$A$2$$_variant$0_field$0 {
    (forall base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(base_addr) }
      base_addr ==
      get_base_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$SharedRef$I32$Address$Adt$enums_refs$$A$2$$(get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(base_addr)))
  }
  
  // The base address is determined by the address of field f$a2
  axiom base_of_field_of_Adt$enums_refs$$A$2$$_variant$0_field$1 {
    (forall base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(base_addr) }
      base_addr ==
      get_base_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$B$Address$Adt$enums_refs$$A$2$$(get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(base_addr)))
  }
  
  // The base address is determined by the address of field f$a3
  axiom base_of_field_of_Adt$enums_refs$$A$2$$_variant$0_field$2 {
    (forall base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(base_addr) }
      base_addr ==
      get_base_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$C$Address$Adt$enums_refs$$A$2$$(get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(base_addr)))
  }
  
  // The base address is determined by the address of field f$a4
  axiom base_of_field_of_Adt$enums_refs$$A$2$$_variant$0_field$3 {
    (forall base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(base_addr) }
      base_addr ==
      get_base_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$A$2$$(get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(base_addr)))
  }
  
  // The base address is determined by the address of field f$a5
  axiom base_of_field_of_Adt$enums_refs$$A$2$$_variant$0_field$4 {
    (forall base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(base_addr) }
      base_addr ==
      get_base_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$A$2$$(get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(base_addr)))
  }
}

domain Address$Adt$enums_refs$$B  {
  
  function deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(base: Address$Adt$enums_refs$$B,
  version: Version): MemorySnapshot$Adt$enums_refs$$B 
  
  function id_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$$int$(base: Address$Adt$enums_refs$$B,
  version: Version): Int 
  
  function get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(base: Address$Adt$enums_refs$$B): Address$U32 
  
  function get_base_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$U32$Address$Adt$enums_refs$$B(field_addr: Address$U32): Address$Adt$enums_refs$$B 
  
  // The base address is determined by the address of field v$B_f$0
  axiom base_of_field_of_Adt$enums_refs$$B_variant$0_field$0 {
    (forall base_addr: Address$Adt$enums_refs$$B ::
      { get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(base_addr) }
      base_addr ==
      get_base_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$U32$Address$Adt$enums_refs$$B(get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(base_addr)))
  }
}

domain Address$Adt$enums_refs$$C  {
  
  function deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(base: Address$Adt$enums_refs$$C,
  version: Version): MemorySnapshot$Adt$enums_refs$$C 
  
  function id_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$$int$(base: Address$Adt$enums_refs$$C,
  version: Version): Int 
  
  function get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(base: Address$Adt$enums_refs$$C): Address$Usize 
  
  function get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(base: Address$Adt$enums_refs$$C): Address$Isize 
  
  function get_base_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Usize$Address$Adt$enums_refs$$C(field_addr: Address$Usize): Address$Adt$enums_refs$$C 
  
  function get_base_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Isize$Address$Adt$enums_refs$$C(field_addr: Address$Isize): Address$Adt$enums_refs$$C 
  
  // The base address is determined by the address of field v$C1_f$0
  axiom base_of_field_of_Adt$enums_refs$$C_variant$0_field$0 {
    (forall base_addr: Address$Adt$enums_refs$$C ::
      { get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(base_addr) }
      base_addr ==
      get_base_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Usize$Address$Adt$enums_refs$$C(get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(base_addr)))
  }
  
  // The base address is determined by the address of field v$C2_f$0
  axiom base_of_field_of_Adt$enums_refs$$C_variant$1_field$0 {
    (forall base_addr: Address$Adt$enums_refs$$C ::
      { get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(base_addr) }
      base_addr ==
      get_base_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Isize$Address$Adt$enums_refs$$C(get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(base_addr)))
  }
}

domain Address$Adt$enums_refs$$D$1$  {
  
  function deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base: Address$Adt$enums_refs$$D$1$,
  version: Version): MemorySnapshot$Adt$enums_refs$$D$1$ 
  
  function id_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$$int$(base: Address$Adt$enums_refs$$D$1$,
  version: Version): Int 
  
  function get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(base: Address$Adt$enums_refs$$D$1$): Address$SharedRef$I32 
  
  function get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(base: Address$Adt$enums_refs$$D$1$): Address$I8 
  
  function get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(base: Address$Adt$enums_refs$$D$1$): Address$U8 
  
  function get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(base: Address$Adt$enums_refs$$D$1$): Address$U64 
  
  function get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(base: Address$Adt$enums_refs$$D$1$): Address$I64 
  
  function get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(base: Address$Adt$enums_refs$$D$1$): Address$MutRef$Adt$enums_refs$$C 
  
  function get_base_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$I32$Address$Adt$enums_refs$$D$1$(field_addr: Address$SharedRef$I32): Address$Adt$enums_refs$$D$1$ 
  
  function get_base_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$I8$Address$Adt$enums_refs$$D$1$(field_addr: Address$I8): Address$Adt$enums_refs$$D$1$ 
  
  function get_base_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$U8$Address$Adt$enums_refs$$D$1$(field_addr: Address$U8): Address$Adt$enums_refs$$D$1$ 
  
  function get_base_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$U64$Address$Adt$enums_refs$$D$1$(field_addr: Address$U64): Address$Adt$enums_refs$$D$1$ 
  
  function get_base_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$I64$Address$Adt$enums_refs$$D$1$(field_addr: Address$I64): Address$Adt$enums_refs$$D$1$ 
  
  function get_base_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$D$1$(field_addr: Address$MutRef$Adt$enums_refs$$C): Address$Adt$enums_refs$$D$1$ 
  
  // The base address is determined by the address of field v$D1_f$0
  axiom base_of_field_of_Adt$enums_refs$$D$1$_variant$0_field$0 {
    (forall base_addr: Address$Adt$enums_refs$$D$1$ ::
      { get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(base_addr) }
      base_addr ==
      get_base_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$I32$Address$Adt$enums_refs$$D$1$(get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(base_addr)))
  }
  
  // The base address is determined by the address of field v$D2_f$0
  axiom base_of_field_of_Adt$enums_refs$$D$1$_variant$1_field$0 {
    (forall base_addr: Address$Adt$enums_refs$$D$1$ ::
      { get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(base_addr) }
      base_addr ==
      get_base_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$I8$Address$Adt$enums_refs$$D$1$(get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(base_addr)))
  }
  
  // The base address is determined by the address of field v$D2_f$1
  axiom base_of_field_of_Adt$enums_refs$$D$1$_variant$1_field$1 {
    (forall base_addr: Address$Adt$enums_refs$$D$1$ ::
      { get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(base_addr) }
      base_addr ==
      get_base_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$U8$Address$Adt$enums_refs$$D$1$(get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(base_addr)))
  }
  
  // The base address is determined by the address of field v$D2_f$2
  axiom base_of_field_of_Adt$enums_refs$$D$1$_variant$1_field$2 {
    (forall base_addr: Address$Adt$enums_refs$$D$1$ ::
      { get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(base_addr) }
      base_addr ==
      get_base_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$U64$Address$Adt$enums_refs$$D$1$(get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(base_addr)))
  }
  
  // The base address is determined by the address of field v$D2_f$3
  axiom base_of_field_of_Adt$enums_refs$$D$1$_variant$1_field$3 {
    (forall base_addr: Address$Adt$enums_refs$$D$1$ ::
      { get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(base_addr) }
      base_addr ==
      get_base_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$I64$Address$Adt$enums_refs$$D$1$(get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(base_addr)))
  }
  
  // The base address is determined by the address of field v$D3_f$0
  axiom base_of_field_of_Adt$enums_refs$$D$1$_variant$2_field$0 {
    (forall base_addr: Address$Adt$enums_refs$$D$1$ ::
      { get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(base_addr) }
      base_addr ==
      get_base_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$D$1$(get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(base_addr)))
  }
}

domain Address$I32  {
  
  function deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(base: Address$I32,
  version: Version): MemorySnapshot$I32 
  
  function id_I32__$TY$__Address$I32$Version$$int$(base: Address$I32, version: Version): Int 
  
  function _dummy_base_to_field_of_I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_I32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$I64  {
  
  function deref_I64__$TY$__Address$I64$Version$MemorySnapshot$I64(base: Address$I64,
  version: Version): MemorySnapshot$I64 
  
  function id_I64__$TY$__Address$I64$Version$$int$(base: Address$I64, version: Version): Int 
  
  function _dummy_base_to_field_of_I64_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_I64_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$I8  {
  
  function deref_I8__$TY$__Address$I8$Version$MemorySnapshot$I8(base: Address$I8,
  version: Version): MemorySnapshot$I8 
  
  function id_I8__$TY$__Address$I8$Version$$int$(base: Address$I8, version: Version): Int 
  
  function _dummy_base_to_field_of_I8_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_I8_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$Isize  {
  
  function deref_Isize__$TY$__Address$Isize$Version$MemorySnapshot$Isize(base: Address$Isize,
  version: Version): MemorySnapshot$Isize 
  
  function id_Isize__$TY$__Address$Isize$Version$$int$(base: Address$Isize,
  version: Version): Int 
  
  function _dummy_base_to_field_of_Isize_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Isize_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutRef$Adt$enums_refs$$C  {
  
  function deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(base: Address$MutRef$Adt$enums_refs$$C,
  version: Version): MemorySnapshot$MutRef$Adt$enums_refs$$C 
  
  function id_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$$int$(base: Address$MutRef$Adt$enums_refs$$C,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$enums_refs$$C_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$enums_refs$$C_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$enums_refs$$C_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$enums_refs$$C_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$MutRef$Adt$enums_refs$$D$1$  {
  
  function deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(base: Address$MutRef$Adt$enums_refs$$D$1$,
  version: Version): MemorySnapshot$MutRef$Adt$enums_refs$$D$1$ 
  
  function id_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$$int$(base: Address$MutRef$Adt$enums_refs$$D$1$,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$enums_refs$$D$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$enums_refs$$D$1$_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$enums_refs$$D$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$enums_refs$$D$1$_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$SharedRef$Adt$enums_refs$$D$1$  {
  
  function deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(base: Address$SharedRef$Adt$enums_refs$$D$1$,
  version: Version): MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$ 
  
  function id_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$$int$(base: Address$SharedRef$Adt$enums_refs$$D$1$,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$enums_refs$$D$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$enums_refs$$D$1$_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$enums_refs$$D$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$enums_refs$$D$1$_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$SharedRef$I32  {
  
  function deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(base: Address$SharedRef$I32,
  version: Version): MemorySnapshot$SharedRef$I32 
  
  function id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(base: Address$SharedRef$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Tuple0  {
  
  function deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(base: Address$Tuple0,
  version: Version): MemorySnapshot$Tuple0 
  
  function id_Tuple0__$TY$__Address$Tuple0$Version$$int$(base: Address$Tuple0,
  version: Version): Int 
}

domain Address$U32  {
  
  function deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(base: Address$U32,
  version: Version): MemorySnapshot$U32 
  
  function id_U32__$TY$__Address$U32$Version$$int$(base: Address$U32, version: Version): Int 
  
  function _dummy_base_to_field_of_U32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_U32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$U64  {
  
  function deref_U64__$TY$__Address$U64$Version$MemorySnapshot$U64(base: Address$U64,
  version: Version): MemorySnapshot$U64 
  
  function id_U64__$TY$__Address$U64$Version$$int$(base: Address$U64, version: Version): Int 
  
  function _dummy_base_to_field_of_U64_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_U64_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$U8  {
  
  function deref_U8__$TY$__Address$U8$Version$MemorySnapshot$U8(base: Address$U8,
  version: Version): MemorySnapshot$U8 
  
  function id_U8__$TY$__Address$U8$Version$$int$(base: Address$U8, version: Version): Int 
  
  function _dummy_base_to_field_of_U8_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_U8_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$Usize  {
  
  function deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(base: Address$Usize,
  version: Version): MemorySnapshot$Usize 
  
  function id_Usize__$TY$__Address$Usize$Version$$int$(base: Address$Usize,
  version: Version): Int 
  
  function _dummy_base_to_field_of_Usize_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Usize_variant$0_field$0__$TY$__$int$(): Int 
}

domain MemorySnapshot$Adt$enums_refs$$A$2$$  {
  
  function new_memory_snap_of_Adt$enums_refs$$A$2$$__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$Adt$enums_refs$$B$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$A$2$$(f$a1: MemorySnapshot$SharedRef$I32,
  f$a2: MemorySnapshot$Adt$enums_refs$$B, f$a3: MemorySnapshot$Adt$enums_refs$$C,
  f$a4: MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$, f$a5: MemorySnapshot$MutRef$Adt$enums_refs$$D$1$): MemorySnapshot$Adt$enums_refs$$A$2$$ 
  
  function get_memory_field_f$a1_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$SharedRef$I32(snap: MemorySnapshot$Adt$enums_refs$$A$2$$): MemorySnapshot$SharedRef$I32 
  
  function get_memory_field_f$a2_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$Adt$enums_refs$$B(snap: MemorySnapshot$Adt$enums_refs$$A$2$$): MemorySnapshot$Adt$enums_refs$$B 
  
  function get_memory_field_f$a3_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$Adt$enums_refs$$C(snap: MemorySnapshot$Adt$enums_refs$$A$2$$): MemorySnapshot$Adt$enums_refs$$C 
  
  function get_memory_field_f$a4_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(snap: MemorySnapshot$Adt$enums_refs$$A$2$$): MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$ 
  
  function get_memory_field_f$a5_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(snap: MemorySnapshot$Adt$enums_refs$$A$2$$): MemorySnapshot$MutRef$Adt$enums_refs$$D$1$ 
}

domain MemorySnapshot$Adt$enums_refs$$B  {
  
  function new_memory_snap_v$B_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$U32$MemorySnapshot$Adt$enums_refs$$B(v$B_f$0: MemorySnapshot$U32): MemorySnapshot$Adt$enums_refs$$B 
  
  function get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(snap: MemorySnapshot$Adt$enums_refs$$B): Int 
  
  function get_memory_field_v$B_f$0_of_Adt$enums_refs$$B_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$B$MemorySnapshot$U32(snap: MemorySnapshot$Adt$enums_refs$$B): MemorySnapshot$U32 
  
  // Definition of all possible values of the discriminant
  axiom memory_snapshot_valid_discriminants_of_Adt$enums_refs$$B {
    (forall self: MemorySnapshot$Adt$enums_refs$$B ::
      { get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(self) }
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(self) ==
      0)
  }
  
  // Definition of discriminant of variant B
  axiom memory_snapshot_discriminant_of_Adt$enums_refs$$B_variant$0 {
    (forall f$v$B_f$0: MemorySnapshot$U32 ::
      { new_memory_snap_v$B_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$U32$MemorySnapshot$Adt$enums_refs$$B(f$v$B_f$0) }
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(new_memory_snap_v$B_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$U32$MemorySnapshot$Adt$enums_refs$$B(f$v$B_f$0)) ==
      0)
  }
}

domain MemorySnapshot$Adt$enums_refs$$C  {
  
  function new_memory_snap_v$C1_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Usize$MemorySnapshot$Adt$enums_refs$$C(v$C1_f$0: MemorySnapshot$Usize): MemorySnapshot$Adt$enums_refs$$C 
  
  function new_memory_snap_v$C2_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Isize$MemorySnapshot$Adt$enums_refs$$C(v$C2_f$0: MemorySnapshot$Isize): MemorySnapshot$Adt$enums_refs$$C 
  
  function get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(snap: MemorySnapshot$Adt$enums_refs$$C): Int 
  
  function get_memory_field_v$C1_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$Usize(snap: MemorySnapshot$Adt$enums_refs$$C): MemorySnapshot$Usize 
  
  function get_memory_field_v$C2_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$Isize(snap: MemorySnapshot$Adt$enums_refs$$C): MemorySnapshot$Isize 
  
  // Definition of all possible values of the discriminant
  axiom memory_snapshot_valid_discriminants_of_Adt$enums_refs$$C {
    (forall self: MemorySnapshot$Adt$enums_refs$$C ::
      { get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(self) }
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(self) ==
      0 ||
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(self) ==
      1)
  }
  
  // Definition of discriminant of variant C1
  axiom memory_snapshot_discriminant_of_Adt$enums_refs$$C_variant$0 {
    (forall f$v$C1_f$0: MemorySnapshot$Usize ::
      { new_memory_snap_v$C1_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Usize$MemorySnapshot$Adt$enums_refs$$C(f$v$C1_f$0) }
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(new_memory_snap_v$C1_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Usize$MemorySnapshot$Adt$enums_refs$$C(f$v$C1_f$0)) ==
      0)
  }
  
  // Definition of discriminant of variant C2
  axiom memory_snapshot_discriminant_of_Adt$enums_refs$$C_variant$1 {
    (forall f$v$C2_f$0: MemorySnapshot$Isize ::
      { new_memory_snap_v$C2_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Isize$MemorySnapshot$Adt$enums_refs$$C(f$v$C2_f$0) }
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(new_memory_snap_v$C2_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Isize$MemorySnapshot$Adt$enums_refs$$C(f$v$C2_f$0)) ==
      1)
  }
}

domain MemorySnapshot$Adt$enums_refs$$D$1$  {
  
  function new_memory_snap_v$D1_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$Adt$enums_refs$$D$1$(v$D1_f$0: MemorySnapshot$SharedRef$I32): MemorySnapshot$Adt$enums_refs$$D$1$ 
  
  function new_memory_snap_v$D2_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$I8$MemorySnapshot$U8$MemorySnapshot$U64$MemorySnapshot$I64$MemorySnapshot$Adt$enums_refs$$D$1$(v$D2_f$0: MemorySnapshot$I8,
  v$D2_f$1: MemorySnapshot$U8, v$D2_f$2: MemorySnapshot$U64, v$D2_f$3: MemorySnapshot$I64): MemorySnapshot$Adt$enums_refs$$D$1$ 
  
  function new_memory_snap_v$D3_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$D$1$(v$D3_f$0: MemorySnapshot$MutRef$Adt$enums_refs$$C): MemorySnapshot$Adt$enums_refs$$D$1$ 
  
  function get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(snap: MemorySnapshot$Adt$enums_refs$$D$1$): Int 
  
  function get_memory_field_v$D1_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$I32(snap: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$SharedRef$I32 
  
  function get_memory_field_v$D2_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$I8(snap: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$I8 
  
  function get_memory_field_v$D2_f$1_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$U8(snap: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$U8 
  
  function get_memory_field_v$D2_f$2_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$U64(snap: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$U64 
  
  function get_memory_field_v$D2_f$3_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$I64(snap: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$I64 
  
  function get_memory_field_v$D3_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$C(snap: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$MutRef$Adt$enums_refs$$C 
  
  // Definition of all possible values of the discriminant
  axiom memory_snapshot_valid_discriminants_of_Adt$enums_refs$$D$1$ {
    (forall self: MemorySnapshot$Adt$enums_refs$$D$1$ ::
      { get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(self) }
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      0 ||
      (get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      1 ||
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      2))
  }
  
  // Definition of discriminant of variant D1
  axiom memory_snapshot_discriminant_of_Adt$enums_refs$$D$1$_variant$0 {
    (forall f$v$D1_f$0: MemorySnapshot$SharedRef$I32 ::
      { new_memory_snap_v$D1_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$Adt$enums_refs$$D$1$(f$v$D1_f$0) }
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(new_memory_snap_v$D1_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$Adt$enums_refs$$D$1$(f$v$D1_f$0)) ==
      0)
  }
  
  // Definition of discriminant of variant D2
  axiom memory_snapshot_discriminant_of_Adt$enums_refs$$D$1$_variant$1 {
    (forall f$v$D2_f$0: MemorySnapshot$I8, f$v$D2_f$1: MemorySnapshot$U8, f$v$D2_f$2: MemorySnapshot$U64,
    f$v$D2_f$3: MemorySnapshot$I64 ::
      { new_memory_snap_v$D2_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$I8$MemorySnapshot$U8$MemorySnapshot$U64$MemorySnapshot$I64$MemorySnapshot$Adt$enums_refs$$D$1$(f$v$D2_f$0,
      f$v$D2_f$1, f$v$D2_f$2, f$v$D2_f$3) }
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(new_memory_snap_v$D2_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$I8$MemorySnapshot$U8$MemorySnapshot$U64$MemorySnapshot$I64$MemorySnapshot$Adt$enums_refs$$D$1$(f$v$D2_f$0,
      f$v$D2_f$1, f$v$D2_f$2, f$v$D2_f$3)) ==
      1)
  }
  
  // Definition of discriminant of variant D3
  axiom memory_snapshot_discriminant_of_Adt$enums_refs$$D$1$_variant$2 {
    (forall f$v$D3_f$0: MemorySnapshot$MutRef$Adt$enums_refs$$C ::
      { new_memory_snap_v$D3_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$D$1$(f$v$D3_f$0) }
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(new_memory_snap_v$D3_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$D$1$(f$v$D3_f$0)) ==
      2)
  }
}

domain MemorySnapshot$I32  {
  
  function new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(value: Int): MemorySnapshot$I32 
  
  function get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(snap: MemorySnapshot$I32): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_I32_variant$0 {
    (forall self: MemorySnapshot$I32 ::
      { get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self) }
      self ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value) }
      get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$I64  {
  
  function new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(value: Int): MemorySnapshot$I64 
  
  function get_memory_field_value_of_I64__$TY$__MemorySnapshot$I64$$int$(snap: MemorySnapshot$I64): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_I64_variant$0 {
    (forall self: MemorySnapshot$I64 ::
      { get_memory_field_value_of_I64__$TY$__MemorySnapshot$I64$$int$(self) }
      self ==
      new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(get_memory_field_value_of_I64__$TY$__MemorySnapshot$I64$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_I64_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(f$value) }
      get_memory_field_value_of_I64__$TY$__MemorySnapshot$I64$$int$(new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$I8  {
  
  function new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(value: Int): MemorySnapshot$I8 
  
  function get_memory_field_value_of_I8__$TY$__MemorySnapshot$I8$$int$(snap: MemorySnapshot$I8): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_I8_variant$0 {
    (forall self: MemorySnapshot$I8 ::
      { get_memory_field_value_of_I8__$TY$__MemorySnapshot$I8$$int$(self) }
      self ==
      new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(get_memory_field_value_of_I8__$TY$__MemorySnapshot$I8$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_I8_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(f$value) }
      get_memory_field_value_of_I8__$TY$__MemorySnapshot$I8$$int$(new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$Isize  {
  
  function new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(value: Int): MemorySnapshot$Isize 
  
  function get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(snap: MemorySnapshot$Isize): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Isize_variant$0 {
    (forall self: MemorySnapshot$Isize ::
      { get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(self) }
      self ==
      new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Isize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value) }
      get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$MutRef$Adt$enums_refs$$C  {
  
  function new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(target_address: Address$Adt$enums_refs$$C,
  target_snapshot: MemorySnapshot$Adt$enums_refs$$C): MemorySnapshot$MutRef$Adt$enums_refs$$C 
  
  function get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(snap: MemorySnapshot$MutRef$Adt$enums_refs$$C): Address$Adt$enums_refs$$C 
  
  function get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(snap: MemorySnapshot$MutRef$Adt$enums_refs$$C): MemorySnapshot$Adt$enums_refs$$C 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$Adt$enums_refs$$C_variant$0 {
    (forall self: MemorySnapshot$MutRef$Adt$enums_refs$$C ::
      { get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(self) }
      { get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(self) }
      self ==
      new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(self),
      get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$Adt$enums_refs$$C_variant$0_field$0 {
    (forall f$target_address: Address$Adt$enums_refs$$C, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$C ::
      { new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$Adt$enums_refs$$C_variant$0_field$1 {
    (forall f$target_address: Address$Adt$enums_refs$$C, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$C ::
      { new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$MutRef$Adt$enums_refs$$D$1$  {
  
  function new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(target_address: Address$Adt$enums_refs$$D$1$,
  target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$MutRef$Adt$enums_refs$$D$1$ 
  
  function get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(snap: MemorySnapshot$MutRef$Adt$enums_refs$$D$1$): Address$Adt$enums_refs$$D$1$ 
  
  function get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(snap: MemorySnapshot$MutRef$Adt$enums_refs$$D$1$): MemorySnapshot$Adt$enums_refs$$D$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$Adt$enums_refs$$D$1$_variant$0 {
    (forall self: MemorySnapshot$MutRef$Adt$enums_refs$$D$1$ ::
      { get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(self) }
      { get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(self) }
      self ==
      new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(self),
      get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$Adt$enums_refs$$D$1$_variant$0_field$0 {
    (forall f$target_address: Address$Adt$enums_refs$$D$1$, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$ ::
      { new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$Adt$enums_refs$$D$1$_variant$0_field$1 {
    (forall f$target_address: Address$Adt$enums_refs$$D$1$, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$ ::
      { new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$  {
  
  function new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(target_address: Address$Adt$enums_refs$$D$1$,
  target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$): MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$ 
  
  function get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(snap: MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$): Address$Adt$enums_refs$$D$1$ 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(snap: MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$): MemorySnapshot$Adt$enums_refs$$D$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$enums_refs$$D$1$_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$ ::
      { get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$enums_refs$$D$1$_variant$0_field$0 {
    (forall f$target_address: Address$Adt$enums_refs$$D$1$, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$ ::
      { new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$enums_refs$$D$1$_variant$0_field$1 {
    (forall f$target_address: Address$Adt$enums_refs$$D$1$, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$ ::
      { new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$I32  {
  
  function new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(target_address: Address$I32,
  target_snapshot: MemorySnapshot$I32): MemorySnapshot$SharedRef$I32 
  
  function get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(snap: MemorySnapshot$SharedRef$I32): Address$I32 
  
  function get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(snap: MemorySnapshot$SharedRef$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$I32_variant$0 {
    (forall self: MemorySnapshot$SharedRef$I32 ::
      { get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(self) }
      { get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(self) }
      self ==
      new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(self),
      get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$I32_variant$0_field$0 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$I32_variant$0_field$1 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Tuple0  {
  
  function new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0(): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: MemorySnapshot$Tuple0 ::self ==
      new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0())
  }
}

domain MemorySnapshot$U32  {
  
  function new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(value: Int): MemorySnapshot$U32 
  
  function get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(snap: MemorySnapshot$U32): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_U32_variant$0 {
    (forall self: MemorySnapshot$U32 ::
      { get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(self) }
      self ==
      new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_U32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value) }
      get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$U64  {
  
  function new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(value: Int): MemorySnapshot$U64 
  
  function get_memory_field_value_of_U64__$TY$__MemorySnapshot$U64$$int$(snap: MemorySnapshot$U64): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_U64_variant$0 {
    (forall self: MemorySnapshot$U64 ::
      { get_memory_field_value_of_U64__$TY$__MemorySnapshot$U64$$int$(self) }
      self ==
      new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(get_memory_field_value_of_U64__$TY$__MemorySnapshot$U64$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_U64_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(f$value) }
      get_memory_field_value_of_U64__$TY$__MemorySnapshot$U64$$int$(new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$U8  {
  
  function new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(value: Int): MemorySnapshot$U8 
  
  function get_memory_field_value_of_U8__$TY$__MemorySnapshot$U8$$int$(snap: MemorySnapshot$U8): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_U8_variant$0 {
    (forall self: MemorySnapshot$U8 ::
      { get_memory_field_value_of_U8__$TY$__MemorySnapshot$U8$$int$(self) }
      self ==
      new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(get_memory_field_value_of_U8__$TY$__MemorySnapshot$U8$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_U8_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(f$value) }
      get_memory_field_value_of_U8__$TY$__MemorySnapshot$U8$$int$(new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$Usize  {
  
  function new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(value: Int): MemorySnapshot$Usize 
  
  function get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(snap: MemorySnapshot$Usize): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Usize_variant$0 {
    (forall self: MemorySnapshot$Usize ::
      { get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(self) }
      self ==
      new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Usize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value) }
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) ==
      f$value)
  }
}

domain Ownership$Adt$enums_refs$$A$2$$  {
  
  function owns_as_WriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_Local_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_Immutable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$A$2$$, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a: Address$Adt$enums_refs$$A$2$$,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Address$Adt$enums_refs$$A$2$$$Version$$bool$(a1: Address$Adt$enums_refs$$A$2$$,
  v1: Version, a2: Address$Adt$enums_refs$$A$2$$, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$a1
  axiom agree_snap_addr_of_Adt$enums_refs$$A$2$$_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v) }
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(base_addr),
      v) ==
      get_memory_field_f$a1_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$SharedRef$I32(deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$a2
  axiom agree_snap_addr_of_Adt$enums_refs$$A$2$$_variant$0_field$1 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v) }
      deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(base_addr),
      v) ==
      get_memory_field_f$a2_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$Adt$enums_refs$$B(deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$a3
  axiom agree_snap_addr_of_Adt$enums_refs$$A$2$$_variant$0_field$2 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v) }
      deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(base_addr),
      v) ==
      get_memory_field_f$a3_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$Adt$enums_refs$$C(deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$a4
  axiom agree_snap_addr_of_Adt$enums_refs$$A$2$$_variant$0_field$3 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v) }
      deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(base_addr),
      v) ==
      get_memory_field_f$a4_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$a5
  axiom agree_snap_addr_of_Adt$enums_refs$$A$2$$_variant$0_field$4 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$A$2$$ ::
      { deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v) }
      deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(base_addr),
      v) ==
      get_memory_field_f$a5_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_ReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Local_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v), owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v), owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$a1: Allocated ==> Allocated
  axiom ownership_of_field_f$a1_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(a),
      v))
  }
  
  // Ownership across statement of field f$a1: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$a1_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$a1: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$a1_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(a),
      v, v2))
  }
  
  // Ownership of field f$a2: Allocated ==> Allocated
  axiom ownership_of_field_f$a2_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(a),
      v))
  }
  
  // Ownership across statement of field f$a2: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$a2_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(a),
      v, v2))
  }
  
  // Ownership across call of field f$a2: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$a2_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(a),
      v, v2))
  }
  
  // Ownership of field f$a3: Allocated ==> Allocated
  axiom ownership_of_field_f$a3_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(a),
      v))
  }
  
  // Ownership across statement of field f$a3: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$a3_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(a),
      v, v2))
  }
  
  // Ownership across call of field f$a3: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$a3_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(a),
      v, v2))
  }
  
  // Ownership of field f$a4: Allocated ==> Allocated
  axiom ownership_of_field_f$a4_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(a),
      v))
  }
  
  // Ownership across statement of field f$a4: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$a4_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(a),
      v, v2))
  }
  
  // Ownership across call of field f$a4: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$a4_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(a),
      v, v2))
  }
  
  // Ownership of field f$a5: Allocated ==> Allocated
  axiom ownership_of_field_f$a5_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall r: Int, a: Address$Adt$enums_refs$$A$2$$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(a),
      v))
  }
  
  // Ownership across statement of field f$a5: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$a5_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(a),
      v, v2))
  }
  
  // Ownership across call of field f$a5: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$a5_from_Allocated_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$A$2$$
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$A$2$$
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$A$2$$
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$A$2$$
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$enums_refs$$A$2$$
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$enums_refs$$A$2$$
  axiom framing_definition_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(a,
      v1) ==
      deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$enums_refs$$A$2$$
  axiom same_id_shallow_definition_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$$int$(a,
      v1) ==
      id_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$enums_refs$$A$2$$
  axiom same_id_shallow_definition_of_variant_0_of_Adt$enums_refs$$A$2$$ {
    (forall a: Address$Adt$enums_refs$$A$2$$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(a),
      v1, v2) &&
      (same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(a),
      v1, v2) &&
      (same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(a),
      v1, v2) &&
      (same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(a),
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(a),
      v1, v2)))))
  }
  
  // Move definition of Adt$enums_refs$$A$2$$
  axiom moved_definition_of_Adt$enums_refs$$A$2$$ {
    (forall a1: Address$Adt$enums_refs$$A$2$$, a2: Address$Adt$enums_refs$$A$2$$,
    v1: Version, v2: Version ::
      { move__Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Address$Adt$enums_refs$$A$2$$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Address$Adt$enums_refs$$A$2$$$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$$int$(a1,
      v1) ==
      id_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$$int$(a2,
      v2) &&
      deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(a1,
      v1) ==
      deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$enums_refs$$A$2$$
  axiom moved_definition_of_variant_0_of_Adt$enums_refs$$A$2$$ {
    (forall a1: Address$Adt$enums_refs$$A$2$$, a2: Address$Adt$enums_refs$$A$2$$,
    v1: Version, v2: Version ::
      { move__Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Address$Adt$enums_refs$$A$2$$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$Address$Adt$enums_refs$$A$2$$$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(a1),
      v1, get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(a2),
      v2) &&
      (move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(a1),
      v1, get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(a2),
      v2) &&
      (move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(a1),
      v1, get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(a2),
      v2) &&
      (move__SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(a1),
      v1, get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(a2),
      v2) &&
      move__MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(a1),
      v1, get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(a2),
      v2)))))
  }
}

domain Ownership$Adt$enums_refs$$B  {
  
  function owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_Local_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_Immutable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$B, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a: Address$Adt$enums_refs$$B,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(a1: Address$Adt$enums_refs$$B,
  v1: Version, a2: Address$Adt$enums_refs$$B, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field v$B_f$0
  axiom agree_snap_addr_of_Adt$enums_refs$$B_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$B ::
      { deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(base_addr,
      v) }
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(base_addr),
      v) ==
      get_memory_field_v$B_f$0_of_Adt$enums_refs$$B_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$B$MemorySnapshot$U32(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_ReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Local_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$enums_refs$$B {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v), owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$enums_refs$$B {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v), owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$enums_refs$$B {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_NoReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$enums_refs$$B {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_NoWriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field v$B_f$0: Allocated ==> Allocated
  axiom ownership_of_field_v$B_f$0_from_Allocated_of_Adt$enums_refs$$B {
    (forall r: Int, a: Address$Adt$enums_refs$$B, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v)) ==
      0 ==>
      owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(a),
      v))
  }
  
  // Ownership across statement of field v$B_f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$B_f$0_from_Allocated_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v)) ==
      0 ==>
      frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(a),
      v, v2))
  }
  
  // Ownership across call of field v$B_f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$B_f$0_from_Allocated_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v)) ==
      0 ==>
      frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$B
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$B
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$B
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$B
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$enums_refs$$B
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$enums_refs$$B
  axiom framing_definition_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v1) ==
      deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$enums_refs$$B
  axiom same_id_shallow_definition_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$$int$(a,
      v1) ==
      id_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$enums_refs$$B
  axiom same_id_shallow_definition_of_variant_0_of_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v1)) ==
      0 ==>
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(a),
      v1, v2))
  }
  
  // Move definition of Adt$enums_refs$$B
  axiom moved_definition_of_Adt$enums_refs$$B {
    (forall a1: Address$Adt$enums_refs$$B, a2: Address$Adt$enums_refs$$B, v1: Version,
    v2: Version ::
      { move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$$int$(a1,
      v1) ==
      id_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$$int$(a2,
      v2) &&
      deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a1,
      v1) ==
      deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$enums_refs$$B
  axiom moved_definition_of_variant_0_of_Adt$enums_refs$$B {
    (forall a1: Address$Adt$enums_refs$$B, a2: Address$Adt$enums_refs$$B, v1: Version,
    v2: Version ::
      { move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(a1,
      v1, a2, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a1,
      v1)) ==
      0 ==>
      move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(a1),
      v1, get_addr_v$B_f$0_of_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Address$U32(a2),
      v2))
  }
  
  // Framing across stmt of a shallowly unreachable place Adt$enums_refs$$B
  axiom framing_across_stmt_of_shallowly_unreachable_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place Adt$enums_refs$$B
  axiom framing_across_call_of_shallowly_unreachable_Adt$enums_refs$$B {
    (forall a: Address$Adt$enums_refs$$B, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$$int$(deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(a,
      v2)))
  }
}

domain Ownership$Adt$enums_refs$$C  {
  
  function owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Local_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Immutable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$C, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(a1: Address$Adt$enums_refs$$C,
  v1: Version, a2: Address$Adt$enums_refs$$C, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field v$C1_f$0
  axiom agree_snap_addr_of_Adt$enums_refs$$C_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$C ::
      { deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(base_addr,
      v) }
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(base_addr),
      v) ==
      get_memory_field_v$C1_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$Usize(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field v$C2_f$0
  axiom agree_snap_addr_of_Adt$enums_refs$$C_variant$1_field$0 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$C ::
      { deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(base_addr,
      v) }
      deref_Isize__$TY$__Address$Isize$Version$MemorySnapshot$Isize(get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(base_addr),
      v) ==
      get_memory_field_v$C2_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$Isize(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Local_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_NoReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_NoWriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field v$C1_f$0: Allocated ==> Allocated
  axiom ownership_of_field_v$C1_f$0_from_Allocated_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v)) ==
      0 ==>
      owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(a),
      v))
  }
  
  // Ownership across statement of field v$C1_f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$C1_f$0_from_Allocated_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v)) ==
      0 ==>
      frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(a),
      v, v2))
  }
  
  // Ownership across call of field v$C1_f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$C1_f$0_from_Allocated_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v)) ==
      0 ==>
      frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(a),
      v, v2))
  }
  
  // Ownership of field v$C2_f$0: Allocated ==> Allocated
  axiom ownership_of_field_v$C2_f$0_from_Allocated_of_Adt$enums_refs$$C {
    (forall r: Int, a: Address$Adt$enums_refs$$C, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v)) ==
      1 ==>
      owns_as_Allocated_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(a),
      v))
  }
  
  // Ownership across statement of field v$C2_f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$C2_f$0_from_Allocated_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v)) ==
      1 ==>
      frame_across_stmt_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(a),
      v, v2))
  }
  
  // Ownership across call of field v$C2_f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$C2_f$0_from_Allocated_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v)) ==
      1 ==>
      frame_across_call_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$C
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$C
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$C
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$C
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$enums_refs$$C
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$enums_refs$$C
  axiom framing_definition_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v1) ==
      deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$enums_refs$$C
  axiom same_id_shallow_definition_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$$int$(a,
      v1) ==
      id_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$enums_refs$$C
  axiom same_id_shallow_definition_of_variant_0_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v1)) ==
      0 ==>
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(a),
      v1, v2))
  }
  
  // Shallow id framing definition of variant 1 of Adt$enums_refs$$C
  axiom same_id_shallow_definition_of_variant_1_of_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v1)) ==
      1 ==>
      same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(a),
      v1, v2))
  }
  
  // Move definition of Adt$enums_refs$$C
  axiom moved_definition_of_Adt$enums_refs$$C {
    (forall a1: Address$Adt$enums_refs$$C, a2: Address$Adt$enums_refs$$C, v1: Version,
    v2: Version ::
      { move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$$int$(a1,
      v1) ==
      id_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$$int$(a2,
      v2) &&
      deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a1,
      v1) ==
      deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$enums_refs$$C
  axiom moved_definition_of_variant_0_of_Adt$enums_refs$$C {
    (forall a1: Address$Adt$enums_refs$$C, a2: Address$Adt$enums_refs$$C, v1: Version,
    v2: Version ::
      { move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a1,
      v1)) ==
      0 ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(a1),
      v1, get_addr_v$C1_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Usize(a2),
      v2))
  }
  
  // Move definition of variant 1 of Adt$enums_refs$$C
  axiom moved_definition_of_variant_1_of_Adt$enums_refs$$C {
    (forall a1: Address$Adt$enums_refs$$C, a2: Address$Adt$enums_refs$$C, v1: Version,
    v2: Version ::
      { move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a1,
      v1)) ==
      1 ==>
      move__Isize__$TY$__Address$Isize$Version$Address$Isize$Version$$bool$(get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(a1),
      v1, get_addr_v$C2_f$0_of_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Address$Isize(a2),
      v2))
  }
  
  // Framing across stmt of a shallowly unreachable place Adt$enums_refs$$C
  axiom framing_across_stmt_of_shallowly_unreachable_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place Adt$enums_refs$$C
  axiom framing_across_call_of_shallowly_unreachable_Adt$enums_refs$$C {
    (forall a: Address$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$$int$(deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(a,
      v2)))
  }
}

domain Ownership$Adt$enums_refs$$D$1$  {
  
  function owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Local_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Immutable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1: Address$Adt$enums_refs$$D$1$,
  v1: Version, a2: Address$Adt$enums_refs$$D$1$, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field v$D1_f$0
  axiom agree_snap_addr_of_Adt$enums_refs$$D$1$_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$D$1$ ::
      { deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v) }
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(base_addr),
      v) ==
      get_memory_field_v$D1_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$I32(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field v$D2_f$0
  axiom agree_snap_addr_of_Adt$enums_refs$$D$1$_variant$1_field$0 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$D$1$ ::
      { deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v) }
      deref_I8__$TY$__Address$I8$Version$MemorySnapshot$I8(get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(base_addr),
      v) ==
      get_memory_field_v$D2_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$I8(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field v$D2_f$1
  axiom agree_snap_addr_of_Adt$enums_refs$$D$1$_variant$1_field$1 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$D$1$ ::
      { deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v) }
      deref_U8__$TY$__Address$U8$Version$MemorySnapshot$U8(get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(base_addr),
      v) ==
      get_memory_field_v$D2_f$1_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$U8(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field v$D2_f$2
  axiom agree_snap_addr_of_Adt$enums_refs$$D$1$_variant$1_field$2 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$D$1$ ::
      { deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v) }
      deref_U64__$TY$__Address$U64$Version$MemorySnapshot$U64(get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(base_addr),
      v) ==
      get_memory_field_v$D2_f$2_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$U64(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field v$D2_f$3
  axiom agree_snap_addr_of_Adt$enums_refs$$D$1$_variant$1_field$3 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$D$1$ ::
      { deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v) }
      deref_I64__$TY$__Address$I64$Version$MemorySnapshot$I64(get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(base_addr),
      v) ==
      get_memory_field_v$D2_f$3_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$I64(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field v$D3_f$0
  axiom agree_snap_addr_of_Adt$enums_refs$$D$1$_variant$2_field$0 {
    (forall v: Version, base_addr: Address$Adt$enums_refs$$D$1$ ::
      { deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v) }
      deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(base_addr),
      v) ==
      get_memory_field_v$D3_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$C(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Local_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Immutable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_NoReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field v$D1_f$0: Allocated ==> Allocated
  axiom ownership_of_field_v$D1_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      0 ==>
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$D1_f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$D1_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      0 ==>
      frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$D1_f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$D1_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      0 ==>
      frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(a),
      v, v2))
  }
  
  // Ownership of field v$D2_f$0: Allocated ==> Allocated
  axiom ownership_of_field_v$D2_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      owns_as_Allocated_I8__$TY$__$int$$Address$I8$Version$$bool$(r, get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(a),
      v))
  }
  
  // Ownership across statement of field v$D2_f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$D2_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_stmt_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(a),
      v, v2))
  }
  
  // Ownership across call of field v$D2_f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$D2_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_call_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(a),
      v, v2))
  }
  
  // Ownership of field v$D2_f$1: Allocated ==> Allocated
  axiom ownership_of_field_v$D2_f$1_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      owns_as_Allocated_U8__$TY$__$int$$Address$U8$Version$$bool$(r, get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(a),
      v))
  }
  
  // Ownership across statement of field v$D2_f$1: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$D2_f$1_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_stmt_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(a),
      v, v2))
  }
  
  // Ownership across call of field v$D2_f$1: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$D2_f$1_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_call_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(a),
      v, v2))
  }
  
  // Ownership of field v$D2_f$2: Allocated ==> Allocated
  axiom ownership_of_field_v$D2_f$2_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      owns_as_Allocated_U64__$TY$__$int$$Address$U64$Version$$bool$(r, get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(a),
      v))
  }
  
  // Ownership across statement of field v$D2_f$2: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$D2_f$2_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_stmt_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(a),
      v, v2))
  }
  
  // Ownership across call of field v$D2_f$2: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$D2_f$2_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_call_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(a),
      v, v2))
  }
  
  // Ownership of field v$D2_f$3: Allocated ==> Allocated
  axiom ownership_of_field_v$D2_f$3_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      owns_as_Allocated_I64__$TY$__$int$$Address$I64$Version$$bool$(r, get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(a),
      v))
  }
  
  // Ownership across statement of field v$D2_f$3: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$D2_f$3_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_stmt_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(a),
      v, v2))
  }
  
  // Ownership across call of field v$D2_f$3: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$D2_f$3_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      1 ==>
      frame_across_call_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(a),
      v, v2))
  }
  
  // Ownership of field v$D3_f$0: Allocated ==> Allocated
  axiom ownership_of_field_v$D3_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      2 ==>
      owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(a),
      v))
  }
  
  // Ownership across statement of field v$D3_f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$D3_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      2 ==>
      frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(a),
      v, v2))
  }
  
  // Ownership across call of field v$D3_f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$D3_f$0_from_Allocated_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v)) ==
      2 ==>
      frame_across_call_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$D$1$
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$enums_refs$$D$1$
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$D$1$
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$enums_refs$$D$1$
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$enums_refs$$D$1$
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$enums_refs$$D$1$
  axiom framing_definition_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v1) ==
      deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$$int$(a,
      v1) ==
      id_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_variant_0_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v1)) ==
      0 ==>
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(a),
      v1, v2))
  }
  
  // Shallow id framing definition of variant 1 of Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_variant_1_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v1)) ==
      1 ==>
      same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(a),
      v1, v2) &&
      (same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(a),
      v1, v2) &&
      (same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(a),
      v1, v2) &&
      same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(a),
      v1, v2))))
  }
  
  // Shallow id framing definition of variant 2 of Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_variant_2_of_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v1)) ==
      2 ==>
      same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(a),
      v1, v2))
  }
  
  // Move definition of Adt$enums_refs$$D$1$
  axiom moved_definition_of_Adt$enums_refs$$D$1$ {
    (forall a1: Address$Adt$enums_refs$$D$1$, a2: Address$Adt$enums_refs$$D$1$,
    v1: Version, v2: Version ::
      { move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$$int$(a1,
      v1) ==
      id_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$$int$(a2,
      v2) &&
      deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a1,
      v1) ==
      deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$enums_refs$$D$1$
  axiom moved_definition_of_variant_0_of_Adt$enums_refs$$D$1$ {
    (forall a1: Address$Adt$enums_refs$$D$1$, a2: Address$Adt$enums_refs$$D$1$,
    v1: Version, v2: Version ::
      { move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a1,
      v1)) ==
      0 ==>
      move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(a1),
      v1, get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(a2),
      v2))
  }
  
  // Move definition of variant 1 of Adt$enums_refs$$D$1$
  axiom moved_definition_of_variant_1_of_Adt$enums_refs$$D$1$ {
    (forall a1: Address$Adt$enums_refs$$D$1$, a2: Address$Adt$enums_refs$$D$1$,
    v1: Version, v2: Version ::
      { move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a1,
      v1)) ==
      1 ==>
      move__I8__$TY$__Address$I8$Version$Address$I8$Version$$bool$(get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(a1),
      v1, get_addr_v$D2_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I8(a2),
      v2) &&
      (move__U8__$TY$__Address$U8$Version$Address$U8$Version$$bool$(get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(a1),
      v1, get_addr_v$D2_f$1_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U8(a2),
      v2) &&
      (move__U64__$TY$__Address$U64$Version$Address$U64$Version$$bool$(get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(a1),
      v1, get_addr_v$D2_f$2_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$U64(a2),
      v2) &&
      move__I64__$TY$__Address$I64$Version$Address$I64$Version$$bool$(get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(a1),
      v1, get_addr_v$D2_f$3_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$I64(a2),
      v2))))
  }
  
  // Move definition of variant 2 of Adt$enums_refs$$D$1$
  axiom moved_definition_of_variant_2_of_Adt$enums_refs$$D$1$ {
    (forall a1: Address$Adt$enums_refs$$D$1$, a2: Address$Adt$enums_refs$$D$1$,
    v1: Version, v2: Version ::
      { move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Address$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) &&
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a1,
      v1)) ==
      2 ==>
      move__MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(a1),
      v1, get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(a2),
      v2))
  }
  
  // Framing across stmt of a shallowly unreachable place Adt$enums_refs$$D$1$
  axiom framing_across_stmt_of_shallowly_unreachable_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place Adt$enums_refs$$D$1$
  axiom framing_across_call_of_shallowly_unreachable_Adt$enums_refs$$D$1$ {
    (forall a: Address$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$$int$(deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(a,
      v2)))
  }
}

domain Ownership$I32  {
  
  function owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1: Address$I32,
  v1: Version, a2: Address$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v),
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) &&
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of I32
  axiom framing_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) }
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v2))
  }
  
  // Shallow id framing definition of I32
  axiom same_id_shallow_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of I32
  axiom same_id_shallow_definition_of_variant_0_of_I32 {
    true
  }
  
  // Move definition of I32
  axiom moved_definition_of_I32 {
    (forall a1: Address$I32, a2: Address$I32, v1: Version, v2: Version ::
      { move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a1, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a2, v2) &&
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a1, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a2, v2))
  }
  
  // Move definition of variant 0 of I32
  axiom moved_definition_of_variant_0_of_I32 {
    true
  }
}

domain Ownership$I64  {
  
  function owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_LocalRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_ReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_Local_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_Immutable_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_Allocated_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_NoReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function owns_as_NoWriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r: Int,
  a: Address$I64, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a: Address$I64,
  v1: Version, v2: Version): Bool 
  
  function move__I64__$TY$__Address$I64$Version$Address$I64$Version$$bool$(a1: Address$I64,
  v1: Version, a2: Address$I64, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_LocalRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Local_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Local_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_LocalRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Local_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Local_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_ReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Immutable_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_Local_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_Local_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_Immutable_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) }
      { owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_Immutable_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      { owns_as_Allocated_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) }
      owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_DeeplyUnreachable_I64__$TY$__$int$$Address$I64$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I64__$TY$__$int$$Address$I64$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_DeeplyUnreachable_I64__$TY$__$int$$Address$I64$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I64__$TY$__$int$$Address$I64$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_I64 {
    (forall r: Int, a: Address$I64, v: Version ::
      { owns_as_DeeplyUnreachable_I64__$TY$__$int$$Address$I64$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I64__$TY$__$int$$Address$I64$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_I64 {
    (forall a: Address$I64, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_I64 {
    (forall r: Int, o: Int, a: Address$I64, v: Version ::
      { owns_as_Immutable_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v), owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) &&
      owns_as_Write_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_I64 {
    (forall r: Int, o: Int, a: Address$I64, v: Version ::
      { owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v),
      owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a, v) &&
      owns_as_Read_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_I64 {
    (forall r: Int, o: Int, a: Address$I64, v: Version ::
      { owns_as_NoReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v), owns_as_ReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_I64 {
    (forall r: Int, o: Int, a: Address$I64, v: Version ::
      { owns_as_NoWriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v), owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_I64__$TY$__$int$$Address$I64$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> I64
  axiom framing_across_Call_implied_by_ownership_Immutable_of_I64 {
    (forall a: Address$I64, v1: Version, v2: Version ::
      { frame_across_call_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> I64
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_I64 {
    (forall a: Address$I64, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I64
  axiom framing_across_Call_implied_by_ownership_Unique_of_I64 {
    (forall a: Address$I64, v1: Version, v2: Version ::
      { frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I64
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_I64 {
    (forall a: Address$I64, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> I64
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_I64 {
    (forall a: Address$I64, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_I64__$TY$__Address$I64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of I64
  axiom framing_definition_of_I64 {
    (forall a: Address$I64, v1: Version, v2: Version ::
      { same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) }
      same_snap_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) ==>
      deref_I64__$TY$__Address$I64$Version$MemorySnapshot$I64(a, v1) ==
      deref_I64__$TY$__Address$I64$Version$MemorySnapshot$I64(a, v2))
  }
  
  // Shallow id framing definition of I64
  axiom same_id_shallow_definition_of_I64 {
    (forall a: Address$I64, v1: Version, v2: Version ::
      { same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_I64__$TY$__Address$I64$Version$Version$$bool$(a, v1, v2) ==>
      id_I64__$TY$__Address$I64$Version$$int$(a, v1) ==
      id_I64__$TY$__Address$I64$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of I64
  axiom same_id_shallow_definition_of_variant_0_of_I64 {
    true
  }
  
  // Move definition of I64
  axiom moved_definition_of_I64 {
    (forall a1: Address$I64, a2: Address$I64, v1: Version, v2: Version ::
      { move__I64__$TY$__Address$I64$Version$Address$I64$Version$$bool$(a1,
      v1, a2, v2) }
      move__I64__$TY$__Address$I64$Version$Address$I64$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_I64__$TY$__Address$I64$Version$$int$(a1, v1) ==
      id_I64__$TY$__Address$I64$Version$$int$(a2, v2) &&
      deref_I64__$TY$__Address$I64$Version$MemorySnapshot$I64(a1, v1) ==
      deref_I64__$TY$__Address$I64$Version$MemorySnapshot$I64(a2, v2))
  }
  
  // Move definition of variant 0 of I64
  axiom moved_definition_of_variant_0_of_I64 {
    true
  }
}

domain Ownership$I8  {
  
  function owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_LocalRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_ReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_Local_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int, a: Address$I8,
  v: Version): Bool 
  
  function owns_as_Immutable_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int, a: Address$I8,
  v: Version): Bool 
  
  function owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int, a: Address$I8,
  v: Version): Bool 
  
  function owns_as_Allocated_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_NoReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function owns_as_NoWriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r: Int,
  a: Address$I8, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a: Address$I8,
  v1: Version, v2: Version): Bool 
  
  function move__I8__$TY$__Address$I8$Version$Address$I8$Version$$bool$(a1: Address$I8,
  v1: Version, a2: Address$I8, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_LocalRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Local_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Local_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_LocalRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Local_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Local_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_ReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Immutable_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_ReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_Local_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_Local_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_Immutable_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_Immutable_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      { owns_as_Allocated_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_DeeplyUnreachable_I8__$TY$__$int$$Address$I8$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I8__$TY$__$int$$Address$I8$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_DeeplyUnreachable_I8__$TY$__$int$$Address$I8$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I8__$TY$__$int$$Address$I8$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_I8 {
    (forall r: Int, a: Address$I8, v: Version ::
      { owns_as_DeeplyUnreachable_I8__$TY$__$int$$Address$I8$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I8__$TY$__$int$$Address$I8$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_I8 {
    (forall a: Address$I8, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_I8 {
    (forall r: Int, o: Int, a: Address$I8, v: Version ::
      { owns_as_Immutable_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v),
      owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) &&
      owns_as_Write_I8__$TY$__$int$$Address$I8$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_I8 {
    (forall r: Int, o: Int, a: Address$I8, v: Version ::
      { owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v), owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) &&
      owns_as_Read_I8__$TY$__$int$$Address$I8$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_I8 {
    (forall r: Int, o: Int, a: Address$I8, v: Version ::
      { owns_as_NoReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v),
      owns_as_ReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) &&
      owns_as_ReadRef_I8__$TY$__$int$$Address$I8$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_I8 {
    (forall r: Int, o: Int, a: Address$I8, v: Version ::
      { owns_as_NoWriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v),
      owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(r, a, v) &&
      owns_as_WriteRef_I8__$TY$__$int$$Address$I8$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> I8
  axiom framing_across_Call_implied_by_ownership_Immutable_of_I8 {
    (forall a: Address$I8, v1: Version, v2: Version ::
      { frame_across_call_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> I8
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_I8 {
    (forall a: Address$I8, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I8
  axiom framing_across_Call_implied_by_ownership_Unique_of_I8 {
    (forall a: Address$I8, v1: Version, v2: Version ::
      { frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I8
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_I8 {
    (forall a: Address$I8, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> I8
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_I8 {
    (forall a: Address$I8, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_I8__$TY$__Address$I8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of I8
  axiom framing_definition_of_I8 {
    (forall a: Address$I8, v1: Version, v2: Version ::
      { same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) }
      same_snap_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) ==>
      deref_I8__$TY$__Address$I8$Version$MemorySnapshot$I8(a, v1) ==
      deref_I8__$TY$__Address$I8$Version$MemorySnapshot$I8(a, v2))
  }
  
  // Shallow id framing definition of I8
  axiom same_id_shallow_definition_of_I8 {
    (forall a: Address$I8, v1: Version, v2: Version ::
      { same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) }
      same_id_shallow_I8__$TY$__Address$I8$Version$Version$$bool$(a, v1, v2) ==>
      id_I8__$TY$__Address$I8$Version$$int$(a, v1) ==
      id_I8__$TY$__Address$I8$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of I8
  axiom same_id_shallow_definition_of_variant_0_of_I8 {
    true
  }
  
  // Move definition of I8
  axiom moved_definition_of_I8 {
    (forall a1: Address$I8, a2: Address$I8, v1: Version, v2: Version ::
      { move__I8__$TY$__Address$I8$Version$Address$I8$Version$$bool$(a1, v1,
      a2, v2) }
      move__I8__$TY$__Address$I8$Version$Address$I8$Version$$bool$(a1, v1, a2,
      v2) ==>
      id_I8__$TY$__Address$I8$Version$$int$(a1, v1) ==
      id_I8__$TY$__Address$I8$Version$$int$(a2, v2) &&
      deref_I8__$TY$__Address$I8$Version$MemorySnapshot$I8(a1, v1) ==
      deref_I8__$TY$__Address$I8$Version$MemorySnapshot$I8(a2, v2))
  }
  
  // Move definition of variant 0 of I8
  axiom moved_definition_of_variant_0_of_I8 {
    true
  }
}

domain Ownership$Isize  {
  
  function owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_LocalRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_ReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_Local_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_Immutable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_Allocated_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_NoReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function owns_as_NoWriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r: Int,
  a: Address$Isize, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a: Address$Isize,
  v1: Version, v2: Version): Bool 
  
  function move__Isize__$TY$__Address$Isize$Version$Address$Isize$Version$$bool$(a1: Address$Isize,
  v1: Version, a2: Address$Isize, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) ==>
      owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_LocalRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_LocalRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) ==>
      owns_as_Local_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) ==>
      owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_ReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) }
      owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_Local_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) }
      owns_as_Local_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_Immutable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) }
      owns_as_Immutable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_DeeplyUnreachable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_DeeplyUnreachable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Isize {
    (forall r: Int, a: Address$Isize, v: Version ::
      { owns_as_DeeplyUnreachable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Isize {
    (forall a: Address$Isize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Isize {
    (forall r: Int, o: Int, a: Address$Isize, v: Version ::
      { owns_as_Immutable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v), owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Isize {
    (forall r: Int, o: Int, a: Address$Isize, v: Version ::
      { owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v), owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Unique_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r, a,
      v) &&
      owns_as_Read_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Isize {
    (forall r: Int, o: Int, a: Address$Isize, v: Version ::
      { owns_as_NoReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v), owns_as_ReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o, a,
      v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Isize {
    (forall r: Int, o: Int, a: Address$Isize, v: Version ::
      { owns_as_NoWriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v), owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Isize__$TY$__$int$$Address$Isize$Version$$bool$(o, a,
      v)))
  }
  
  // Framing implied by ownership: Immutable ==> Isize
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Isize {
    (forall a: Address$Isize, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Isize
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Isize {
    (forall a: Address$Isize, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Isize
  axiom framing_across_Call_implied_by_ownership_Unique_of_Isize {
    (forall a: Address$Isize, v1: Version, v2: Version ::
      { frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Isize
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Isize {
    (forall a: Address$Isize, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Isize
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Isize {
    (forall a: Address$Isize, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Isize
  axiom framing_definition_of_Isize {
    (forall a: Address$Isize, v1: Version, v2: Version ::
      { same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1, v2) }
      same_snap_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1, v2) ==>
      deref_Isize__$TY$__Address$Isize$Version$MemorySnapshot$Isize(a, v1) ==
      deref_Isize__$TY$__Address$Isize$Version$MemorySnapshot$Isize(a, v2))
  }
  
  // Shallow id framing definition of Isize
  axiom same_id_shallow_definition_of_Isize {
    (forall a: Address$Isize, v1: Version, v2: Version ::
      { same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Isize__$TY$__Address$Isize$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Isize__$TY$__Address$Isize$Version$$int$(a, v1) ==
      id_Isize__$TY$__Address$Isize$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Isize
  axiom same_id_shallow_definition_of_variant_0_of_Isize {
    true
  }
  
  // Move definition of Isize
  axiom moved_definition_of_Isize {
    (forall a1: Address$Isize, a2: Address$Isize, v1: Version, v2: Version ::
      { move__Isize__$TY$__Address$Isize$Version$Address$Isize$Version$$bool$(a1,
      v1, a2, v2) }
      move__Isize__$TY$__Address$Isize$Version$Address$Isize$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Isize__$TY$__Address$Isize$Version$$int$(a1, v1) ==
      id_Isize__$TY$__Address$Isize$Version$$int$(a2, v2) &&
      deref_Isize__$TY$__Address$Isize$Version$MemorySnapshot$Isize(a1, v1) ==
      deref_Isize__$TY$__Address$Isize$Version$MemorySnapshot$Isize(a2, v2))
  }
  
  // Move definition of variant 0 of Isize
  axiom moved_definition_of_variant_0_of_Isize {
    true
  }
}

domain Ownership$MutRef$Adt$enums_refs$$C  {
  
  function owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Local_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$C, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(a1: Address$MutRef$Adt$enums_refs$$C,
  v1: Version, a2: Address$MutRef$Adt$enums_refs$$C, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Local_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Immutable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Immutable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$enums_refs$$C
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$enums_refs$$C
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$enums_refs$$C
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$enums_refs$$C
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$Adt$enums_refs$$C
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$Adt$enums_refs$$C
  axiom framing_definition_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v1) ==
      deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$Adt$enums_refs$$C
  axiom same_id_shallow_definition_of_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$$int$(a,
      v1) ==
      id_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$Adt$enums_refs$$C
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$Adt$enums_refs$$C {
    true
  }
  
  // Move definition of MutRef$Adt$enums_refs$$C
  axiom moved_definition_of_MutRef$Adt$enums_refs$$C {
    (forall a1: Address$MutRef$Adt$enums_refs$$C, a2: Address$MutRef$Adt$enums_refs$$C,
    v1: Version, v2: Version ::
      { move__MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$$int$(a1,
      v1) ==
      id_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$$int$(a2,
      v2) &&
      deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a1,
      v1) ==
      deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$Adt$enums_refs$$C
  axiom moved_definition_of_variant_0_of_MutRef$Adt$enums_refs$$C {
    true
  }
  
  // Invariant of the owning type MutRef$Adt$enums_refs$$C
  axiom owning_type_invariant_of_MutRef$Adt$enums_refs$$C {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$C, v: Version ::
      { owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(r,
      a, v) ==>
      deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$Adt$enums_refs$$C {
    (forall a: Address$MutRef$Adt$enums_refs$$C, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(a,
      v2)))
  }
}

domain Ownership$MutRef$Adt$enums_refs$$D$1$  {
  
  function owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(a1: Address$MutRef$Adt$enums_refs$$D$1$,
  v1: Version, a2: Address$MutRef$Adt$enums_refs$$D$1$, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$enums_refs$$D$1$
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$enums_refs$$D$1$
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$enums_refs$$D$1$
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$enums_refs$$D$1$
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$Adt$enums_refs$$D$1$
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$Adt$enums_refs$$D$1$
  axiom framing_definition_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v1) ==
      deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$$int$(a,
      v1) ==
      id_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$Adt$enums_refs$$D$1$ {
    true
  }
  
  // Move definition of MutRef$Adt$enums_refs$$D$1$
  axiom moved_definition_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall a1: Address$MutRef$Adt$enums_refs$$D$1$, a2: Address$MutRef$Adt$enums_refs$$D$1$,
    v1: Version, v2: Version ::
      { move__MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$$int$(a1,
      v1) ==
      id_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$$int$(a2,
      v2) &&
      deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a1,
      v1) ==
      deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$Adt$enums_refs$$D$1$
  axiom moved_definition_of_variant_0_of_MutRef$Adt$enums_refs$$D$1$ {
    true
  }
  
  // Invariant of the owning type MutRef$Adt$enums_refs$$D$1$
  axiom owning_type_invariant_of_MutRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$MutRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$MutRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(a,
      v2)))
  }
}

domain Ownership$SharedRef$Adt$enums_refs$$D$1$  {
  
  function owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(a1: Address$SharedRef$Adt$enums_refs$$D$1$,
  v1: Version, a2: Address$SharedRef$Adt$enums_refs$$D$1$, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$enums_refs$$D$1$
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$enums_refs$$D$1$
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$enums_refs$$D$1$
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$enums_refs$$D$1$
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$Adt$enums_refs$$D$1$
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$Adt$enums_refs$$D$1$
  axiom framing_definition_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v1) ==
      deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$$int$(a,
      v1) ==
      id_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$Adt$enums_refs$$D$1$
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$Adt$enums_refs$$D$1$ {
    true
  }
  
  // Move definition of SharedRef$Adt$enums_refs$$D$1$
  axiom moved_definition_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a1: Address$SharedRef$Adt$enums_refs$$D$1$, a2: Address$SharedRef$Adt$enums_refs$$D$1$,
    v1: Version, v2: Version ::
      { move__SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$$int$(a1,
      v1) ==
      id_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$$int$(a2,
      v2) &&
      deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a1,
      v1) ==
      deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$Adt$enums_refs$$D$1$
  axiom moved_definition_of_variant_0_of_SharedRef$Adt$enums_refs$$D$1$ {
    true
  }
  
  // Invariant of the owning type SharedRef$Adt$enums_refs$$D$1$
  axiom owning_type_invariant_of_SharedRef$Adt$enums_refs$$D$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$enums_refs$$D$1$, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(r,
      a, v) ==>
      deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$Adt$enums_refs$$D$1$ {
    (forall a: Address$SharedRef$Adt$enums_refs$$D$1$, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(a,
      v2)))
  }
}

domain Ownership$SharedRef$I32  {
  
  function owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(a1: Address$SharedRef$I32,
  v1: Version, a2: Address$SharedRef$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$I32
  axiom framing_definition_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v1) ==
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$I32
  axiom same_id_shallow_definition_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a, v1) ==
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$I32
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$I32 {
    true
  }
  
  // Move definition of SharedRef$I32
  axiom moved_definition_of_SharedRef$I32 {
    (forall a1: Address$SharedRef$I32, a2: Address$SharedRef$I32, v1: Version,
    v2: Version ::
      { move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a1, v1) ==
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a2, v2) &&
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a1,
      v1) ==
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$I32
  axiom moved_definition_of_variant_0_of_SharedRef$I32 {
    true
  }
  
  // Invariant of the owning type SharedRef$I32
  axiom owning_type_invariant_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v2)))
  }
}

domain Ownership$Tuple0  {
  
  function owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1: Address$Tuple0,
  v1: Version, a2: Address$Tuple0, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Tuple0
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Tuple0
  axiom framing_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1,
      v2) }
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) ==>
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v2))
  }
  
  // Shallow id framing definition of Tuple0
  axiom same_id_shallow_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Tuple0
  axiom same_id_shallow_definition_of_variant_0_of_Tuple0 {
    true
  }
  
  // Move definition of Tuple0
  axiom moved_definition_of_Tuple0 {
    (forall a1: Address$Tuple0, a2: Address$Tuple0, v1: Version, v2: Version ::
      { move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a1, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a2, v2) &&
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a1, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a2, v2))
  }
  
  // Move definition of variant 0 of Tuple0
  axiom moved_definition_of_variant_0_of_Tuple0 {
    true
  }
}

domain Ownership$U32  {
  
  function owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1: Address$U32,
  v1: Version, a2: Address$U32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v),
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) &&
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> U32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> U32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U32
  axiom framing_across_Call_implied_by_ownership_Unique_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> U32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of U32
  axiom framing_definition_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) }
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) ==>
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a, v1) ==
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a, v2))
  }
  
  // Shallow id framing definition of U32
  axiom same_id_shallow_definition_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) ==>
      id_U32__$TY$__Address$U32$Version$$int$(a, v1) ==
      id_U32__$TY$__Address$U32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of U32
  axiom same_id_shallow_definition_of_variant_0_of_U32 {
    true
  }
  
  // Move definition of U32
  axiom moved_definition_of_U32 {
    (forall a1: Address$U32, a2: Address$U32, v1: Version, v2: Version ::
      { move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1,
      v1, a2, v2) }
      move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_U32__$TY$__Address$U32$Version$$int$(a1, v1) ==
      id_U32__$TY$__Address$U32$Version$$int$(a2, v2) &&
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a1, v1) ==
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a2, v2))
  }
  
  // Move definition of variant 0 of U32
  axiom moved_definition_of_variant_0_of_U32 {
    true
  }
}

domain Ownership$U64  {
  
  function owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_LocalRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_ReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_Local_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_Immutable_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_Allocated_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_NoReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function owns_as_NoWriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r: Int,
  a: Address$U64, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a: Address$U64,
  v1: Version, v2: Version): Bool 
  
  function move__U64__$TY$__Address$U64$Version$Address$U64$Version$$bool$(a1: Address$U64,
  v1: Version, a2: Address$U64, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_LocalRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Local_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Local_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_LocalRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Local_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Local_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_ReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Immutable_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_Local_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_Local_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_Immutable_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) }
      { owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_Immutable_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      { owns_as_Allocated_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) }
      owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_DeeplyUnreachable_U64__$TY$__$int$$Address$U64$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_U64__$TY$__$int$$Address$U64$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_DeeplyUnreachable_U64__$TY$__$int$$Address$U64$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U64__$TY$__$int$$Address$U64$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_U64 {
    (forall r: Int, a: Address$U64, v: Version ::
      { owns_as_DeeplyUnreachable_U64__$TY$__$int$$Address$U64$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U64__$TY$__$int$$Address$U64$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_U64 {
    (forall a: Address$U64, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_U64 {
    (forall r: Int, o: Int, a: Address$U64, v: Version ::
      { owns_as_Immutable_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v), owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) &&
      owns_as_Write_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_U64 {
    (forall r: Int, o: Int, a: Address$U64, v: Version ::
      { owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v),
      owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a, v) &&
      owns_as_Read_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_U64 {
    (forall r: Int, o: Int, a: Address$U64, v: Version ::
      { owns_as_NoReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v), owns_as_ReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_U64 {
    (forall r: Int, o: Int, a: Address$U64, v: Version ::
      { owns_as_NoWriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v), owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_U64__$TY$__$int$$Address$U64$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> U64
  axiom framing_across_Call_implied_by_ownership_Immutable_of_U64 {
    (forall a: Address$U64, v1: Version, v2: Version ::
      { frame_across_call_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> U64
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_U64 {
    (forall a: Address$U64, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U64
  axiom framing_across_Call_implied_by_ownership_Unique_of_U64 {
    (forall a: Address$U64, v1: Version, v2: Version ::
      { frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U64
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_U64 {
    (forall a: Address$U64, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> U64
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_U64 {
    (forall a: Address$U64, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_U64__$TY$__Address$U64$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of U64
  axiom framing_definition_of_U64 {
    (forall a: Address$U64, v1: Version, v2: Version ::
      { same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) }
      same_snap_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) ==>
      deref_U64__$TY$__Address$U64$Version$MemorySnapshot$U64(a, v1) ==
      deref_U64__$TY$__Address$U64$Version$MemorySnapshot$U64(a, v2))
  }
  
  // Shallow id framing definition of U64
  axiom same_id_shallow_definition_of_U64 {
    (forall a: Address$U64, v1: Version, v2: Version ::
      { same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_U64__$TY$__Address$U64$Version$Version$$bool$(a, v1, v2) ==>
      id_U64__$TY$__Address$U64$Version$$int$(a, v1) ==
      id_U64__$TY$__Address$U64$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of U64
  axiom same_id_shallow_definition_of_variant_0_of_U64 {
    true
  }
  
  // Move definition of U64
  axiom moved_definition_of_U64 {
    (forall a1: Address$U64, a2: Address$U64, v1: Version, v2: Version ::
      { move__U64__$TY$__Address$U64$Version$Address$U64$Version$$bool$(a1,
      v1, a2, v2) }
      move__U64__$TY$__Address$U64$Version$Address$U64$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_U64__$TY$__Address$U64$Version$$int$(a1, v1) ==
      id_U64__$TY$__Address$U64$Version$$int$(a2, v2) &&
      deref_U64__$TY$__Address$U64$Version$MemorySnapshot$U64(a1, v1) ==
      deref_U64__$TY$__Address$U64$Version$MemorySnapshot$U64(a2, v2))
  }
  
  // Move definition of variant 0 of U64
  axiom moved_definition_of_variant_0_of_U64 {
    true
  }
}

domain Ownership$U8  {
  
  function owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_LocalRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_ReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_Local_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int, a: Address$U8,
  v: Version): Bool 
  
  function owns_as_Immutable_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int, a: Address$U8,
  v: Version): Bool 
  
  function owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int, a: Address$U8,
  v: Version): Bool 
  
  function owns_as_Allocated_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_NoReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function owns_as_NoWriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r: Int,
  a: Address$U8, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a: Address$U8,
  v1: Version, v2: Version): Bool 
  
  function move__U8__$TY$__Address$U8$Version$Address$U8$Version$$bool$(a1: Address$U8,
  v1: Version, a2: Address$U8, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_LocalRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Local_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Local_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_LocalRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Local_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Local_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_ReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Immutable_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_ReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_Local_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_Local_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_Immutable_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_Immutable_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      { owns_as_Allocated_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_DeeplyUnreachable_U8__$TY$__$int$$Address$U8$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_U8__$TY$__$int$$Address$U8$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_DeeplyUnreachable_U8__$TY$__$int$$Address$U8$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_U8__$TY$__$int$$Address$U8$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_U8 {
    (forall r: Int, a: Address$U8, v: Version ::
      { owns_as_DeeplyUnreachable_U8__$TY$__$int$$Address$U8$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_U8__$TY$__$int$$Address$U8$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_U8 {
    (forall a: Address$U8, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_U8 {
    (forall r: Int, o: Int, a: Address$U8, v: Version ::
      { owns_as_Immutable_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v),
      owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) &&
      owns_as_Write_U8__$TY$__$int$$Address$U8$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_U8 {
    (forall r: Int, o: Int, a: Address$U8, v: Version ::
      { owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v), owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) &&
      owns_as_Read_U8__$TY$__$int$$Address$U8$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_U8 {
    (forall r: Int, o: Int, a: Address$U8, v: Version ::
      { owns_as_NoReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v),
      owns_as_ReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) &&
      owns_as_ReadRef_U8__$TY$__$int$$Address$U8$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_U8 {
    (forall r: Int, o: Int, a: Address$U8, v: Version ::
      { owns_as_NoWriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v),
      owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(r, a, v) &&
      owns_as_WriteRef_U8__$TY$__$int$$Address$U8$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> U8
  axiom framing_across_Call_implied_by_ownership_Immutable_of_U8 {
    (forall a: Address$U8, v1: Version, v2: Version ::
      { frame_across_call_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> U8
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_U8 {
    (forall a: Address$U8, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U8
  axiom framing_across_Call_implied_by_ownership_Unique_of_U8 {
    (forall a: Address$U8, v1: Version, v2: Version ::
      { frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U8
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_U8 {
    (forall a: Address$U8, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> U8
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_U8 {
    (forall a: Address$U8, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_U8__$TY$__Address$U8$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of U8
  axiom framing_definition_of_U8 {
    (forall a: Address$U8, v1: Version, v2: Version ::
      { same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) }
      same_snap_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) ==>
      deref_U8__$TY$__Address$U8$Version$MemorySnapshot$U8(a, v1) ==
      deref_U8__$TY$__Address$U8$Version$MemorySnapshot$U8(a, v2))
  }
  
  // Shallow id framing definition of U8
  axiom same_id_shallow_definition_of_U8 {
    (forall a: Address$U8, v1: Version, v2: Version ::
      { same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) }
      same_id_shallow_U8__$TY$__Address$U8$Version$Version$$bool$(a, v1, v2) ==>
      id_U8__$TY$__Address$U8$Version$$int$(a, v1) ==
      id_U8__$TY$__Address$U8$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of U8
  axiom same_id_shallow_definition_of_variant_0_of_U8 {
    true
  }
  
  // Move definition of U8
  axiom moved_definition_of_U8 {
    (forall a1: Address$U8, a2: Address$U8, v1: Version, v2: Version ::
      { move__U8__$TY$__Address$U8$Version$Address$U8$Version$$bool$(a1, v1,
      a2, v2) }
      move__U8__$TY$__Address$U8$Version$Address$U8$Version$$bool$(a1, v1, a2,
      v2) ==>
      id_U8__$TY$__Address$U8$Version$$int$(a1, v1) ==
      id_U8__$TY$__Address$U8$Version$$int$(a2, v2) &&
      deref_U8__$TY$__Address$U8$Version$MemorySnapshot$U8(a1, v1) ==
      deref_U8__$TY$__Address$U8$Version$MemorySnapshot$U8(a2, v2))
  }
  
  // Move definition of variant 0 of U8
  axiom moved_definition_of_variant_0_of_U8 {
    true
  }
}

domain Ownership$Usize  {
  
  function owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1: Address$Usize,
  v1: Version, a2: Address$Usize, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v), owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) &&
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v)))
  }
  
  // Framing implied by ownership: Immutable ==> Usize
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Usize
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Usize
  axiom framing_across_Call_implied_by_ownership_Unique_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Usize
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Usize
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Usize
  axiom framing_definition_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) }
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) ==>
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a, v1) ==
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a, v2))
  }
  
  // Shallow id framing definition of Usize
  axiom same_id_shallow_definition_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Usize__$TY$__Address$Usize$Version$$int$(a, v1) ==
      id_Usize__$TY$__Address$Usize$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Usize
  axiom same_id_shallow_definition_of_variant_0_of_Usize {
    true
  }
  
  // Move definition of Usize
  axiom moved_definition_of_Usize {
    (forall a1: Address$Usize, a2: Address$Usize, v1: Version, v2: Version ::
      { move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1,
      v1, a2, v2) }
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Usize__$TY$__Address$Usize$Version$$int$(a1, v1) ==
      id_Usize__$TY$__Address$Usize$Version$$int$(a2, v2) &&
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a1, v1) ==
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a2, v2))
  }
  
  // Move definition of variant 0 of Usize
  axiom moved_definition_of_variant_0_of_Usize {
    true
  }
}

domain ValueSnapshot$Adt$enums_refs$$A$2$$  {
  
  function new_value_snap_of_Adt$enums_refs$$A$2$$__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$Adt$enums_refs$$B$ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$A$2$$(f$a1: ValueSnapshot$SharedRef$I32,
  f$a2: ValueSnapshot$Adt$enums_refs$$B, f$a3: ValueSnapshot$Adt$enums_refs$$C,
  f$a4: ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$, f$a5: ValueSnapshot$MutRef$Adt$enums_refs$$D$1$): ValueSnapshot$Adt$enums_refs$$A$2$$ 
  
  function get_value_field_f$a1_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$SharedRef$I32(snap: ValueSnapshot$Adt$enums_refs$$A$2$$): ValueSnapshot$SharedRef$I32 
  
  function get_value_field_f$a2_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$Adt$enums_refs$$B(snap: ValueSnapshot$Adt$enums_refs$$A$2$$): ValueSnapshot$Adt$enums_refs$$B 
  
  function get_value_field_f$a3_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$Adt$enums_refs$$C(snap: ValueSnapshot$Adt$enums_refs$$A$2$$): ValueSnapshot$Adt$enums_refs$$C 
  
  function get_value_field_f$a4_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(snap: ValueSnapshot$Adt$enums_refs$$A$2$$): ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$ 
  
  function get_value_field_f$a5_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(snap: ValueSnapshot$Adt$enums_refs$$A$2$$): ValueSnapshot$MutRef$Adt$enums_refs$$D$1$ 
  
  function convert_from_memory_of_Adt$enums_refs$$A$2$$__$TY$__MemorySnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$Adt$enums_refs$$A$2$$(snap: MemorySnapshot$Adt$enums_refs$$A$2$$): ValueSnapshot$Adt$enums_refs$$A$2$$ 
  
  // Definition of the existence of the constructor of variant A
  axiom value_snapshot_existence_of_Adt$enums_refs$$A$2$$_variant$0 {
    (forall self: ValueSnapshot$Adt$enums_refs$$A$2$$ ::
      { get_value_field_f$a1_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$SharedRef$I32(self) }
      { get_value_field_f$a2_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$Adt$enums_refs$$B(self) }
      { get_value_field_f$a3_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$Adt$enums_refs$$C(self) }
      { get_value_field_f$a4_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(self) }
      { get_value_field_f$a5_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(self) }
      self ==
      new_value_snap_of_Adt$enums_refs$$A$2$$__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$Adt$enums_refs$$B$ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$A$2$$(get_value_field_f$a1_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$SharedRef$I32(self),
      get_value_field_f$a2_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$Adt$enums_refs$$B(self),
      get_value_field_f$a3_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$Adt$enums_refs$$C(self),
      get_value_field_f$a4_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(self),
      get_value_field_f$a5_of_Adt$enums_refs$$A$2$$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$A$2$$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(self)))
  }
}

domain ValueSnapshot$Adt$enums_refs$$B  {
  
  function new_value_snap_v$B_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$U32$ValueSnapshot$Adt$enums_refs$$B(v$B_f$0: ValueSnapshot$U32): ValueSnapshot$Adt$enums_refs$$B 
  
  function get_value_field_discriminant_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$$int$(snap: ValueSnapshot$Adt$enums_refs$$B): Int 
  
  function get_value_field_v$B_f$0_of_Adt$enums_refs$$B_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$B$ValueSnapshot$U32(snap: ValueSnapshot$Adt$enums_refs$$B): ValueSnapshot$U32 
  
  function convert_from_memory_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$ValueSnapshot$Adt$enums_refs$$B(snap: MemorySnapshot$Adt$enums_refs$$B): ValueSnapshot$Adt$enums_refs$$B 
  
  function convert_to_memory_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$MemorySnapshot$Adt$enums_refs$$B(snap: ValueSnapshot$Adt$enums_refs$$B): MemorySnapshot$Adt$enums_refs$$B 
  
  // Definition of all possible values of the discriminant
  axiom value_snapshot_valid_discriminants_of_Adt$enums_refs$$B {
    (forall self: ValueSnapshot$Adt$enums_refs$$B ::
      { get_value_field_discriminant_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$$int$(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$$int$(self) ==
      0)
  }
  
  // Definition of the existence of the constructor of variant B
  axiom value_snapshot_existence_of_Adt$enums_refs$$B_variant$0 {
    (forall self: ValueSnapshot$Adt$enums_refs$$B ::
      { get_value_field_discriminant_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$$int$(self) }
      { get_value_field_v$B_f$0_of_Adt$enums_refs$$B_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$B$ValueSnapshot$U32(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$$int$(self) ==
      0 ==>
      self ==
      new_value_snap_v$B_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$U32$ValueSnapshot$Adt$enums_refs$$B(get_value_field_v$B_f$0_of_Adt$enums_refs$$B_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$B$ValueSnapshot$U32(self)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$enums_refs$$B {
    (forall value_snapshot: ValueSnapshot$Adt$enums_refs$$B ::
      { convert_from_memory_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$ValueSnapshot$Adt$enums_refs$$B(convert_to_memory_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$MemorySnapshot$Adt$enums_refs$$B(value_snapshot)) }
      convert_from_memory_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$ValueSnapshot$Adt$enums_refs$$B(convert_to_memory_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$MemorySnapshot$Adt$enums_refs$$B(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$enums_refs$$B {
    (forall memory_snapshot: MemorySnapshot$Adt$enums_refs$$B ::
      { convert_to_memory_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$MemorySnapshot$Adt$enums_refs$$B(convert_from_memory_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$ValueSnapshot$Adt$enums_refs$$B(memory_snapshot)) }
      convert_to_memory_of_Adt$enums_refs$$B__$TY$__ValueSnapshot$Adt$enums_refs$$B$MemorySnapshot$Adt$enums_refs$$B(convert_from_memory_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$Adt$enums_refs$$B$ValueSnapshot$Adt$enums_refs$$B(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$enums_refs$$C  {
  
  function new_value_snap_v$C1_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Usize$ValueSnapshot$Adt$enums_refs$$C(v$C1_f$0: ValueSnapshot$Usize): ValueSnapshot$Adt$enums_refs$$C 
  
  function new_value_snap_v$C2_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Isize$ValueSnapshot$Adt$enums_refs$$C(v$C2_f$0: ValueSnapshot$Isize): ValueSnapshot$Adt$enums_refs$$C 
  
  function get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(snap: ValueSnapshot$Adt$enums_refs$$C): Int 
  
  function get_value_field_v$C1_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$Usize(snap: ValueSnapshot$Adt$enums_refs$$C): ValueSnapshot$Usize 
  
  function get_value_field_v$C2_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$Isize(snap: ValueSnapshot$Adt$enums_refs$$C): ValueSnapshot$Isize 
  
  function convert_from_memory_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(snap: MemorySnapshot$Adt$enums_refs$$C): ValueSnapshot$Adt$enums_refs$$C 
  
  function convert_to_memory_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(snap: ValueSnapshot$Adt$enums_refs$$C): MemorySnapshot$Adt$enums_refs$$C 
  
  // Definition of all possible values of the discriminant
  axiom value_snapshot_valid_discriminants_of_Adt$enums_refs$$C {
    (forall self: ValueSnapshot$Adt$enums_refs$$C ::
      { get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(self) ==
      0 ||
      get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(self) ==
      1)
  }
  
  // Definition of the existence of the constructor of variant C1
  axiom value_snapshot_existence_of_Adt$enums_refs$$C_variant$0 {
    (forall self: ValueSnapshot$Adt$enums_refs$$C ::
      { get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(self) }
      { get_value_field_v$C1_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$Usize(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(self) ==
      0 ==>
      self ==
      new_value_snap_v$C1_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Usize$ValueSnapshot$Adt$enums_refs$$C(get_value_field_v$C1_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$Usize(self)))
  }
  
  // Definition of the existence of the constructor of variant C2
  axiom value_snapshot_existence_of_Adt$enums_refs$$C_variant$1 {
    (forall self: ValueSnapshot$Adt$enums_refs$$C ::
      { get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(self) }
      { get_value_field_v$C2_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$Isize(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$$int$(self) ==
      1 ==>
      self ==
      new_value_snap_v$C2_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Isize$ValueSnapshot$Adt$enums_refs$$C(get_value_field_v$C2_f$0_of_Adt$enums_refs$$C_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$Isize(self)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$enums_refs$$C {
    (forall value_snapshot: ValueSnapshot$Adt$enums_refs$$C ::
      { convert_from_memory_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(convert_to_memory_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(value_snapshot)) }
      convert_from_memory_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(convert_to_memory_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$enums_refs$$C {
    (forall memory_snapshot: MemorySnapshot$Adt$enums_refs$$C ::
      { convert_to_memory_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(convert_from_memory_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(memory_snapshot)) }
      convert_to_memory_of_Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(convert_from_memory_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$enums_refs$$D$1$  {
  
  function new_value_snap_v$D1_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$Adt$enums_refs$$D$1$(v$D1_f$0: ValueSnapshot$SharedRef$I32): ValueSnapshot$Adt$enums_refs$$D$1$ 
  
  function new_value_snap_v$D2_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$I8$ValueSnapshot$U8$ValueSnapshot$U64$ValueSnapshot$I64$ValueSnapshot$Adt$enums_refs$$D$1$(v$D2_f$0: ValueSnapshot$I8,
  v$D2_f$1: ValueSnapshot$U8, v$D2_f$2: ValueSnapshot$U64, v$D2_f$3: ValueSnapshot$I64): ValueSnapshot$Adt$enums_refs$$D$1$ 
  
  function new_value_snap_v$D3_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$D$1$(v$D3_f$0: ValueSnapshot$MutRef$Adt$enums_refs$$C): ValueSnapshot$Adt$enums_refs$$D$1$ 
  
  function get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(snap: ValueSnapshot$Adt$enums_refs$$D$1$): Int 
  
  function get_value_field_v$D1_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$I32(snap: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$SharedRef$I32 
  
  function get_value_field_v$D2_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$I8(snap: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$I8 
  
  function get_value_field_v$D2_f$1_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$U8(snap: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$U8 
  
  function get_value_field_v$D2_f$2_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$U64(snap: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$U64 
  
  function get_value_field_v$D2_f$3_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$I64(snap: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$I64 
  
  function get_value_field_v$D3_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$C(snap: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$MutRef$Adt$enums_refs$$C 
  
  function convert_from_memory_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(snap: MemorySnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$Adt$enums_refs$$D$1$ 
  
  // Definition of all possible values of the discriminant
  axiom value_snapshot_valid_discriminants_of_Adt$enums_refs$$D$1$ {
    (forall self: ValueSnapshot$Adt$enums_refs$$D$1$ ::
      { get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      0 ||
      (get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      1 ||
      get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      2))
  }
  
  // Definition of the existence of the constructor of variant D1
  axiom value_snapshot_existence_of_Adt$enums_refs$$D$1$_variant$0 {
    (forall self: ValueSnapshot$Adt$enums_refs$$D$1$ ::
      { get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) }
      { get_value_field_v$D1_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$I32(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      0 ==>
      self ==
      new_value_snap_v$D1_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$Adt$enums_refs$$D$1$(get_value_field_v$D1_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$I32(self)))
  }
  
  // Definition of the existence of the constructor of variant D2
  axiom value_snapshot_existence_of_Adt$enums_refs$$D$1$_variant$1 {
    (forall self: ValueSnapshot$Adt$enums_refs$$D$1$ ::
      { get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) }
      { get_value_field_v$D2_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$I8(self) }
      { get_value_field_v$D2_f$1_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$U8(self) }
      { get_value_field_v$D2_f$2_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$U64(self) }
      { get_value_field_v$D2_f$3_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$I64(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      1 ==>
      self ==
      new_value_snap_v$D2_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$I8$ValueSnapshot$U8$ValueSnapshot$U64$ValueSnapshot$I64$ValueSnapshot$Adt$enums_refs$$D$1$(get_value_field_v$D2_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$I8(self),
      get_value_field_v$D2_f$1_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$U8(self),
      get_value_field_v$D2_f$2_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$U64(self),
      get_value_field_v$D2_f$3_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$I64(self)))
  }
  
  // Definition of the existence of the constructor of variant D3
  axiom value_snapshot_existence_of_Adt$enums_refs$$D$1$_variant$2 {
    (forall self: ValueSnapshot$Adt$enums_refs$$D$1$ ::
      { get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) }
      { get_value_field_v$D3_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$C(self) }
      get_value_field_discriminant_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$$int$(self) ==
      2 ==>
      self ==
      new_value_snap_v$D3_of_Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$D$1$(get_value_field_v$D3_f$0_of_Adt$enums_refs$$D$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$C(self)))
  }
}

domain ValueSnapshot$I32  {
  
  function new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(value: Int): ValueSnapshot$I32 
  
  function get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(snap: ValueSnapshot$I32): Int 
  
  function convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(snap: MemorySnapshot$I32): ValueSnapshot$I32 
  
  function convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(snap: ValueSnapshot$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_I32_variant$0 {
    (forall self: ValueSnapshot$I32 ::
      { get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self) }
      self ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_I32_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) }
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_I32_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) }
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_I32 {
    (forall value_snapshot: ValueSnapshot$I32 ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_I32 {
    (forall memory_snapshot: MemorySnapshot$I32 ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$I64  {
  
  function new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(value: Int): ValueSnapshot$I64 
  
  function get_value_field_value_of_I64__$TY$__ValueSnapshot$I64$$int$(snap: ValueSnapshot$I64): Int 
  
  function convert_from_memory_of_I64__$TY$__MemorySnapshot$I64$ValueSnapshot$I64(snap: MemorySnapshot$I64): ValueSnapshot$I64 
  
  function convert_to_memory_of_I64__$TY$__ValueSnapshot$I64$MemorySnapshot$I64(snap: ValueSnapshot$I64): MemorySnapshot$I64 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_I64_variant$0 {
    (forall self: ValueSnapshot$I64 ::
      { get_value_field_value_of_I64__$TY$__ValueSnapshot$I64$$int$(self) }
      self ==
      new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(get_value_field_value_of_I64__$TY$__ValueSnapshot$I64$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_I64_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(f$value) }
      get_value_field_value_of_I64__$TY$__ValueSnapshot$I64$$int$(new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_I64_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_I64__$TY$__MemorySnapshot$I64$ValueSnapshot$I64(new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(f$value)) }
      { new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(f$value) }
      convert_from_memory_of_I64__$TY$__MemorySnapshot$I64$ValueSnapshot$I64(new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(f$value)) ==
      new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_I64_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_I64__$TY$__ValueSnapshot$I64$MemorySnapshot$I64(new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(v$value)) }
      { new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(v$value) }
      convert_to_memory_of_I64__$TY$__ValueSnapshot$I64$MemorySnapshot$I64(new_value_snap_of_I64__$TY$__$int$$ValueSnapshot$I64(v$value)) ==
      new_memory_snap_of_I64__$TY$__$int$$MemorySnapshot$I64(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_I64 {
    (forall value_snapshot: ValueSnapshot$I64 ::
      { convert_from_memory_of_I64__$TY$__MemorySnapshot$I64$ValueSnapshot$I64(convert_to_memory_of_I64__$TY$__ValueSnapshot$I64$MemorySnapshot$I64(value_snapshot)) }
      convert_from_memory_of_I64__$TY$__MemorySnapshot$I64$ValueSnapshot$I64(convert_to_memory_of_I64__$TY$__ValueSnapshot$I64$MemorySnapshot$I64(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_I64 {
    (forall memory_snapshot: MemorySnapshot$I64 ::
      { convert_to_memory_of_I64__$TY$__ValueSnapshot$I64$MemorySnapshot$I64(convert_from_memory_of_I64__$TY$__MemorySnapshot$I64$ValueSnapshot$I64(memory_snapshot)) }
      convert_to_memory_of_I64__$TY$__ValueSnapshot$I64$MemorySnapshot$I64(convert_from_memory_of_I64__$TY$__MemorySnapshot$I64$ValueSnapshot$I64(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$I8  {
  
  function new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(value: Int): ValueSnapshot$I8 
  
  function get_value_field_value_of_I8__$TY$__ValueSnapshot$I8$$int$(snap: ValueSnapshot$I8): Int 
  
  function convert_from_memory_of_I8__$TY$__MemorySnapshot$I8$ValueSnapshot$I8(snap: MemorySnapshot$I8): ValueSnapshot$I8 
  
  function convert_to_memory_of_I8__$TY$__ValueSnapshot$I8$MemorySnapshot$I8(snap: ValueSnapshot$I8): MemorySnapshot$I8 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_I8_variant$0 {
    (forall self: ValueSnapshot$I8 ::
      { get_value_field_value_of_I8__$TY$__ValueSnapshot$I8$$int$(self) }
      self ==
      new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(get_value_field_value_of_I8__$TY$__ValueSnapshot$I8$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_I8_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(f$value) }
      get_value_field_value_of_I8__$TY$__ValueSnapshot$I8$$int$(new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_I8_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_I8__$TY$__MemorySnapshot$I8$ValueSnapshot$I8(new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(f$value)) }
      { new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(f$value) }
      convert_from_memory_of_I8__$TY$__MemorySnapshot$I8$ValueSnapshot$I8(new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(f$value)) ==
      new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_I8_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_I8__$TY$__ValueSnapshot$I8$MemorySnapshot$I8(new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(v$value)) }
      { new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(v$value) }
      convert_to_memory_of_I8__$TY$__ValueSnapshot$I8$MemorySnapshot$I8(new_value_snap_of_I8__$TY$__$int$$ValueSnapshot$I8(v$value)) ==
      new_memory_snap_of_I8__$TY$__$int$$MemorySnapshot$I8(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_I8 {
    (forall value_snapshot: ValueSnapshot$I8 ::
      { convert_from_memory_of_I8__$TY$__MemorySnapshot$I8$ValueSnapshot$I8(convert_to_memory_of_I8__$TY$__ValueSnapshot$I8$MemorySnapshot$I8(value_snapshot)) }
      convert_from_memory_of_I8__$TY$__MemorySnapshot$I8$ValueSnapshot$I8(convert_to_memory_of_I8__$TY$__ValueSnapshot$I8$MemorySnapshot$I8(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_I8 {
    (forall memory_snapshot: MemorySnapshot$I8 ::
      { convert_to_memory_of_I8__$TY$__ValueSnapshot$I8$MemorySnapshot$I8(convert_from_memory_of_I8__$TY$__MemorySnapshot$I8$ValueSnapshot$I8(memory_snapshot)) }
      convert_to_memory_of_I8__$TY$__ValueSnapshot$I8$MemorySnapshot$I8(convert_from_memory_of_I8__$TY$__MemorySnapshot$I8$ValueSnapshot$I8(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Isize  {
  
  function new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(value: Int): ValueSnapshot$Isize 
  
  function get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(snap: ValueSnapshot$Isize): Int 
  
  function convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(snap: MemorySnapshot$Isize): ValueSnapshot$Isize 
  
  function convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(snap: ValueSnapshot$Isize): MemorySnapshot$Isize 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Isize_variant$0 {
    (forall self: ValueSnapshot$Isize ::
      { get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(self) }
      self ==
      new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Isize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value) }
      get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Isize_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value)) }
      { new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value) }
      convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value)) ==
      new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Isize_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(v$value)) }
      { new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(v$value) }
      convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(v$value)) ==
      new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Isize {
    (forall value_snapshot: ValueSnapshot$Isize ::
      { convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(value_snapshot)) }
      convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Isize {
    (forall memory_snapshot: MemorySnapshot$Isize ::
      { convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(memory_snapshot)) }
      convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutRef$Adt$enums_refs$$C  {
  
  function new_value_snap_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(target_snapshot: ValueSnapshot$Adt$enums_refs$$C): ValueSnapshot$MutRef$Adt$enums_refs$$C 
  
  function get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(snap: ValueSnapshot$MutRef$Adt$enums_refs$$C): ValueSnapshot$Adt$enums_refs$$C 
  
  function convert_from_memory_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(snap: MemorySnapshot$MutRef$Adt$enums_refs$$C): ValueSnapshot$MutRef$Adt$enums_refs$$C 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$Adt$enums_refs$$C_variant$0 {
    (forall self: ValueSnapshot$MutRef$Adt$enums_refs$$C ::
      { get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(self) }
      self ==
      new_value_snap_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$Adt$enums_refs$$C_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$enums_refs$$C ::
      { new_value_snap_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(new_value_snap_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$Adt$enums_refs$$C_variant$0 {
    (forall f$target_address: Address$Adt$enums_refs$$C, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$C ::
      { convert_from_memory_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(convert_from_memory_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(f$target_snapshot)) }
      convert_from_memory_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$Adt$enums_refs$$C__$TY$__ValueSnapshot$Adt$enums_refs$$C$ValueSnapshot$MutRef$Adt$enums_refs$$C(convert_from_memory_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Adt$enums_refs$$C$ValueSnapshot$Adt$enums_refs$$C(f$target_snapshot)))
  }
}

domain ValueSnapshot$MutRef$Adt$enums_refs$$D$1$  {
  
  function new_value_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(target_snapshot: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$MutRef$Adt$enums_refs$$D$1$ 
  
  function get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(snap: ValueSnapshot$MutRef$Adt$enums_refs$$D$1$): ValueSnapshot$Adt$enums_refs$$D$1$ 
  
  function convert_from_memory_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(snap: MemorySnapshot$MutRef$Adt$enums_refs$$D$1$): ValueSnapshot$MutRef$Adt$enums_refs$$D$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$Adt$enums_refs$$D$1$_variant$0 {
    (forall self: ValueSnapshot$MutRef$Adt$enums_refs$$D$1$ ::
      { get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(self) }
      self ==
      new_value_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$Adt$enums_refs$$D$1$_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$enums_refs$$D$1$ ::
      { new_value_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(new_value_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$Adt$enums_refs$$D$1$_variant$0 {
    (forall f$target_address: Address$Adt$enums_refs$$D$1$, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$ ::
      { convert_from_memory_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(convert_from_memory_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(f$target_snapshot)) }
      convert_from_memory_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$MutRef$Adt$enums_refs$$D$1$(convert_from_memory_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$  {
  
  function new_value_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(target_snapshot: ValueSnapshot$Adt$enums_refs$$D$1$): ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$ 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(snap: ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$): ValueSnapshot$Adt$enums_refs$$D$1$ 
  
  function convert_from_memory_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(snap: MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$): ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$enums_refs$$D$1$_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$ ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(get_value_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$enums_refs$$D$1$_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$enums_refs$$D$1$ ::
      { new_value_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(new_value_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$enums_refs$$D$1$_variant$0 {
    (forall f$target_address: Address$Adt$enums_refs$$D$1$, f$target_snapshot: MemorySnapshot$Adt$enums_refs$$D$1$ ::
      { convert_from_memory_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(convert_from_memory_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__ValueSnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$SharedRef$Adt$enums_refs$$D$1$(convert_from_memory_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$Adt$enums_refs$$D$1$$ValueSnapshot$Adt$enums_refs$$D$1$(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$I32  {
  
  function new_value_snap_of_SharedRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$SharedRef$I32(target_snapshot: ValueSnapshot$I32): ValueSnapshot$SharedRef$I32 
  
  function get_value_field_target_snapshot_of_SharedRef$I32__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$I32(snap: ValueSnapshot$SharedRef$I32): ValueSnapshot$I32 
  
  function convert_from_memory_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$ValueSnapshot$SharedRef$I32(snap: MemorySnapshot$SharedRef$I32): ValueSnapshot$SharedRef$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$I32_variant$0 {
    (forall self: ValueSnapshot$SharedRef$I32 ::
      { get_value_field_target_snapshot_of_SharedRef$I32__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$I32(self) }
      self ==
      new_value_snap_of_SharedRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$SharedRef$I32(get_value_field_target_snapshot_of_SharedRef$I32__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$I32 ::
      { new_value_snap_of_SharedRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$SharedRef$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$I32__$TY$__ValueSnapshot$SharedRef$I32$ValueSnapshot$I32(new_value_snap_of_SharedRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$SharedRef$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$I32_variant$0 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { convert_from_memory_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$ValueSnapshot$SharedRef$I32(new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$SharedRef$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$ValueSnapshot$SharedRef$I32(new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$SharedRef$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$Tuple0  {
  
  function new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0(): ValueSnapshot$Tuple0 
  
  function convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(snap: MemorySnapshot$Tuple0): ValueSnapshot$Tuple0 
  
  function convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(snap: ValueSnapshot$Tuple0): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: ValueSnapshot$Tuple0 ::self ==
      new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0())
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple0_variant$0 {
    convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()) ==
    new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple0_variant$0 {
    convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple0 {
    (forall value_snapshot: ValueSnapshot$Tuple0 ::
      { convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) }
      convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple0 {
    (forall memory_snapshot: MemorySnapshot$Tuple0 ::
      { convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) }
      convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$U32  {
  
  function new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(value: Int): ValueSnapshot$U32 
  
  function get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(snap: ValueSnapshot$U32): Int 
  
  function convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(snap: MemorySnapshot$U32): ValueSnapshot$U32 
  
  function convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(snap: ValueSnapshot$U32): MemorySnapshot$U32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_U32_variant$0 {
    (forall self: ValueSnapshot$U32 ::
      { get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(self) }
      self ==
      new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_U32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value) }
      get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_U32_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) }
      { new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value) }
      convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) ==
      new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_U32_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(v$value)) }
      { new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(v$value) }
      convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(v$value)) ==
      new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_U32 {
    (forall value_snapshot: ValueSnapshot$U32 ::
      { convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(value_snapshot)) }
      convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_U32 {
    (forall memory_snapshot: MemorySnapshot$U32 ::
      { convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(memory_snapshot)) }
      convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$U64  {
  
  function new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(value: Int): ValueSnapshot$U64 
  
  function get_value_field_value_of_U64__$TY$__ValueSnapshot$U64$$int$(snap: ValueSnapshot$U64): Int 
  
  function convert_from_memory_of_U64__$TY$__MemorySnapshot$U64$ValueSnapshot$U64(snap: MemorySnapshot$U64): ValueSnapshot$U64 
  
  function convert_to_memory_of_U64__$TY$__ValueSnapshot$U64$MemorySnapshot$U64(snap: ValueSnapshot$U64): MemorySnapshot$U64 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_U64_variant$0 {
    (forall self: ValueSnapshot$U64 ::
      { get_value_field_value_of_U64__$TY$__ValueSnapshot$U64$$int$(self) }
      self ==
      new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(get_value_field_value_of_U64__$TY$__ValueSnapshot$U64$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_U64_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(f$value) }
      get_value_field_value_of_U64__$TY$__ValueSnapshot$U64$$int$(new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_U64_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_U64__$TY$__MemorySnapshot$U64$ValueSnapshot$U64(new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(f$value)) }
      { new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(f$value) }
      convert_from_memory_of_U64__$TY$__MemorySnapshot$U64$ValueSnapshot$U64(new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(f$value)) ==
      new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_U64_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_U64__$TY$__ValueSnapshot$U64$MemorySnapshot$U64(new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(v$value)) }
      { new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(v$value) }
      convert_to_memory_of_U64__$TY$__ValueSnapshot$U64$MemorySnapshot$U64(new_value_snap_of_U64__$TY$__$int$$ValueSnapshot$U64(v$value)) ==
      new_memory_snap_of_U64__$TY$__$int$$MemorySnapshot$U64(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_U64 {
    (forall value_snapshot: ValueSnapshot$U64 ::
      { convert_from_memory_of_U64__$TY$__MemorySnapshot$U64$ValueSnapshot$U64(convert_to_memory_of_U64__$TY$__ValueSnapshot$U64$MemorySnapshot$U64(value_snapshot)) }
      convert_from_memory_of_U64__$TY$__MemorySnapshot$U64$ValueSnapshot$U64(convert_to_memory_of_U64__$TY$__ValueSnapshot$U64$MemorySnapshot$U64(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_U64 {
    (forall memory_snapshot: MemorySnapshot$U64 ::
      { convert_to_memory_of_U64__$TY$__ValueSnapshot$U64$MemorySnapshot$U64(convert_from_memory_of_U64__$TY$__MemorySnapshot$U64$ValueSnapshot$U64(memory_snapshot)) }
      convert_to_memory_of_U64__$TY$__ValueSnapshot$U64$MemorySnapshot$U64(convert_from_memory_of_U64__$TY$__MemorySnapshot$U64$ValueSnapshot$U64(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$U8  {
  
  function new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(value: Int): ValueSnapshot$U8 
  
  function get_value_field_value_of_U8__$TY$__ValueSnapshot$U8$$int$(snap: ValueSnapshot$U8): Int 
  
  function convert_from_memory_of_U8__$TY$__MemorySnapshot$U8$ValueSnapshot$U8(snap: MemorySnapshot$U8): ValueSnapshot$U8 
  
  function convert_to_memory_of_U8__$TY$__ValueSnapshot$U8$MemorySnapshot$U8(snap: ValueSnapshot$U8): MemorySnapshot$U8 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_U8_variant$0 {
    (forall self: ValueSnapshot$U8 ::
      { get_value_field_value_of_U8__$TY$__ValueSnapshot$U8$$int$(self) }
      self ==
      new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(get_value_field_value_of_U8__$TY$__ValueSnapshot$U8$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_U8_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(f$value) }
      get_value_field_value_of_U8__$TY$__ValueSnapshot$U8$$int$(new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_U8_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_U8__$TY$__MemorySnapshot$U8$ValueSnapshot$U8(new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(f$value)) }
      { new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(f$value) }
      convert_from_memory_of_U8__$TY$__MemorySnapshot$U8$ValueSnapshot$U8(new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(f$value)) ==
      new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_U8_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_U8__$TY$__ValueSnapshot$U8$MemorySnapshot$U8(new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(v$value)) }
      { new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(v$value) }
      convert_to_memory_of_U8__$TY$__ValueSnapshot$U8$MemorySnapshot$U8(new_value_snap_of_U8__$TY$__$int$$ValueSnapshot$U8(v$value)) ==
      new_memory_snap_of_U8__$TY$__$int$$MemorySnapshot$U8(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_U8 {
    (forall value_snapshot: ValueSnapshot$U8 ::
      { convert_from_memory_of_U8__$TY$__MemorySnapshot$U8$ValueSnapshot$U8(convert_to_memory_of_U8__$TY$__ValueSnapshot$U8$MemorySnapshot$U8(value_snapshot)) }
      convert_from_memory_of_U8__$TY$__MemorySnapshot$U8$ValueSnapshot$U8(convert_to_memory_of_U8__$TY$__ValueSnapshot$U8$MemorySnapshot$U8(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_U8 {
    (forall memory_snapshot: MemorySnapshot$U8 ::
      { convert_to_memory_of_U8__$TY$__ValueSnapshot$U8$MemorySnapshot$U8(convert_from_memory_of_U8__$TY$__MemorySnapshot$U8$ValueSnapshot$U8(memory_snapshot)) }
      convert_to_memory_of_U8__$TY$__ValueSnapshot$U8$MemorySnapshot$U8(convert_from_memory_of_U8__$TY$__MemorySnapshot$U8$ValueSnapshot$U8(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Usize  {
  
  function new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(value: Int): ValueSnapshot$Usize 
  
  function get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(snap: ValueSnapshot$Usize): Int 
  
  function convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(snap: MemorySnapshot$Usize): ValueSnapshot$Usize 
  
  function convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(snap: ValueSnapshot$Usize): MemorySnapshot$Usize 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Usize_variant$0 {
    (forall self: ValueSnapshot$Usize ::
      { get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(self) }
      self ==
      new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Usize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value) }
      get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Usize_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) }
      { new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value) }
      convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) ==
      new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Usize_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(v$value)) }
      { new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(v$value) }
      convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(v$value)) ==
      new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Usize {
    (forall value_snapshot: ValueSnapshot$Usize ::
      { convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(value_snapshot)) }
      convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Usize {
    (forall memory_snapshot: MemorySnapshot$Usize ::
      { convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(memory_snapshot)) }
      convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain Version  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

function read$(): Perm
  ensures none < result
  ensures result < write


method m_main()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$I32
  var _2: Address$Adt$enums_refs$$B
  var _3: Address$Adt$enums_refs$$C
  var _4: Address$Adt$enums_refs$$C
  var _5: Address$Adt$enums_refs$$D$1$
  var _6: Address$MutRef$Adt$enums_refs$$C
  var _7: Address$MutRef$Adt$enums_refs$$C
  var _8: Address$Adt$enums_refs$$D$1$
  var _9: Address$SharedRef$I32
  var _10: Address$SharedRef$I32
  var _11: Address$Adt$enums_refs$$A$2$$
  var _12: Address$SharedRef$I32
  var _13: Address$SharedRef$I32
  var _14: Address$Adt$enums_refs$$B
  var _15: Address$Adt$enums_refs$$C
  var _16: Address$SharedRef$Adt$enums_refs$$D$1$
  var _17: Address$SharedRef$Adt$enums_refs$$D$1$
  var _18: Address$MutRef$Adt$enums_refs$$D$1$
  var _19: Address$MutRef$Adt$enums_refs$$D$1$
  
  label start
  // ========== start ==========
  // Def path: "enums_refs::main"
  
  // Library ownership axioms of 17 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  
  // [mir] _1 = const 111_i32
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, version) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111)
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  
  // [mir] _2 = B::B(const 222_u32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(_2,
    version) ==
    new_memory_snap_v$B_of_Adt$enums_refs$$B__$TY$__MemorySnapshot$U32$MemorySnapshot$Adt$enums_refs$$B(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(5,
    _3, version)
  
  // [mir] _3 = C::C1(const 333_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(_3,
    version) ==
    new_memory_snap_v$C1_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Usize$MemorySnapshot$Adt$enums_refs$$C(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(333))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(3,
    _3, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(7,
    _3, version)
  
  // [mir] _4 = C::C2(const 444_isize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(_4,
    version) ==
    new_memory_snap_v$C2_of_Adt$enums_refs$$C__$TY$__MemorySnapshot$Isize$MemorySnapshot$Adt$enums_refs$$C(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(444))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_4: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(6,
    _2, version)
  // assume Allocated(_7: &mut C)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(7,
    _7, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(8,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_6: &mut C)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(10,
    _6, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(11,
    _3, version)
  
  // [mir] _7 = &mut _4
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(_7,
    version) ==
    new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(_4,
    deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(_4,
    old_version))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_7: &mut C)
  inhale owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(2,
    _7, version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(6,
    _2, version)
  // assume Allocated(_7: &mut C)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(7,
    _7, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(8,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_6: &mut C)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(10,
    _6, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(11,
    _3, version)
  
  // [mir] _6 = &mut (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(_6,
    version) ==
    new_memory_snap_of_MutRef$Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$MutRef$Adt$enums_refs$$C(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$Address$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(_7,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$C__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$C(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(_7,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(_7,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: &mut C)
  inhale owns_as_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(6,
    _2, version)
  // assume Allocated(_7: &mut C)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(7,
    _7, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(8,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_6: &mut C)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$C__$TY$__$int$$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(10,
    _6, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(11,
    _3, version)
  
  // [mir] _5 = D::<'_>::D3(move _6)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(_5,
    version) ==
    new_memory_snap_v$D3_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$C$MemorySnapshot$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$MemorySnapshot$MutRef$Adt$enums_refs$$C(_6,
    old_version))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Place _6 has been moved
  inhale move__MutRef$Adt$enums_refs$$C__$TY$__Address$MutRef$Adt$enums_refs$$C$Version$Address$MutRef$Adt$enums_refs$$C$Version$$bool$(_6,
    old_version, get_addr_v$D3_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$MutRef$Adt$enums_refs$$C(_5),
    version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_6)
  
  // [mir] FakeRead(ForLet(None), _5)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(2,
    _5, version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(5,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(7,
    _2, version)
  // assume Allocated(_10: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _10, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(9,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_9: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _9, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(12,
    _3, version)
  
  // [mir] _10 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_10,
    version) ==
    new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(_1,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_10: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(1,
    _10, version)
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(2,
    _5, version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume LocalRef(_1: i32)
  inhale owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(6,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(8,
    _2, version)
  // assume Allocated(_10: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _10, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(10,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_9: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _9, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(13,
    _3, version)
  
  // [mir] _9 = &(*_10)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_9,
    version) ==
    new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_10,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_10,
    old_version)))
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_10: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_10,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(1,
    _5, version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(3,
    _3, version)
  // assume WriteRef(_9: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _9, version)
  // assume LocalRef(_1: i32)
  inhale owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(6,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(8,
    _2, version)
  // assume Allocated(_10: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _10, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(10,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_9: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _9, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(13,
    _3, version)
  
  // [mir] _8 = D::<'_>::D1(move _9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(_8,
    version) ==
    new_memory_snap_v$D1_of_Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$Adt$enums_refs$$D$1$(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_9,
    old_version))
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_9,
    old_version, version)
  // Place _9 has been moved
  inhale move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(_9,
    old_version, get_addr_v$D1_f$0_of_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Address$SharedRef$I32(_8),
    version)
  // Framing facts
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] FakeRead(ForLet(None), _8)
  
  // [mir] StorageDead(_10)
  
  // [mir] StorageLive(_11)
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // Ownership facts
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(1,
    _5, version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_8: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(3,
    _8, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(6,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(9,
    _2, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(10,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(11,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _1,
    version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(13,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(14,
    _3, version)
  
  // [mir] _13 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_13,
    version) ==
    new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(_1,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, old_version))
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_5: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_8: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(1,
    _5, version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_8: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(3,
    _8, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume WriteRef(_13: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(5,
    _13, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(7,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(10,
    _2, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(12,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(13, _1,
    version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(14,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(15,
    _3, version)
  
  // [mir] _12 = &(*_13)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_12,
    version) ==
    new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_13,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_13,
    old_version)))
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // Fully-owned used place _13 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_13,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_5: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_2: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_8: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_13: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_13,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_14)
  
  // Ownership facts
  // assume WriteRef(_12: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(2,
    _5, version)
  // assume WriteRef(_2: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_8: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(4,
    _8, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(5,
    _3, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_14: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(7,
    _14, version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(8,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(9,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(10,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(11,
    _2, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(13,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(14, _1,
    version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(15,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(16,
    _3, version)
  
  // [mir] _14 = move _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(_14,
    version) ==
    deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(_2,
    old_version)
  // Place _2 has been moved
  inhale move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(_2,
    old_version, _14, version)
  // Framing facts
  // assume framing of WriteRef(_12: &i32)
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_5: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_8: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_3: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_15)
  
  // Ownership facts
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(1,
    _5, version)
  // assume WriteRef(_12: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_8: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(3,
    _8, version)
  // assume WriteRef(_3: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(4,
    _3, version)
  // assume WriteRef(_14: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(5,
    _14, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_14: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(7,
    _14, version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(8,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(9,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(10,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(11,
    _2, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(13,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(14, _1,
    version)
  // assume Allocated(_15: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(15,
    _15, version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(16,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(17,
    _3, version)
  
  // [mir] _15 = move _3
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(_15,
    version) ==
    deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(_3,
    old_version)
  // Place _3 has been moved
  inhale move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(_3,
    old_version, _15, version)
  // Framing facts
  // assume framing of WriteRef(_5: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_12: &i32)
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_8: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_14: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_16)
  
  // [mir] StorageLive(_17)
  
  // Ownership facts
  // assume WriteRef(_15: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_12: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_5: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(3,
    _5, version)
  // assume WriteRef(_8: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(4,
    _8, version)
  // assume WriteRef(_14: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(5,
    _14, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_17: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(7,
    _17, version)
  // assume Allocated(_14: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(8,
    _14, version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(9,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(10,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(11,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(12,
    _2, version)
  // assume Allocated(_16: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(13,
    _16, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(14,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(15,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(16, _1,
    version)
  // assume Allocated(_15: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(17,
    _15, version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(18,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(19,
    _3, version)
  
  // [mir] _17 = &_5
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(_17,
    version) ==
    new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(_5,
    deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(_5,
    old_version))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_15: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_12: &i32)
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_8: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_14: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of LocalRef(_5: D<'_>)
  inhale frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_15: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_17: &D<'_>)
  inhale owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(2,
    _17, version)
  // assume WriteRef(_12: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _12, version)
  // assume WriteRef(_8: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(4,
    _8, version)
  // assume WriteRef(_14: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(5,
    _14, version)
  // assume LocalRef(_5: D<'_>)
  inhale owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(6,
    _5, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_17: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(8,
    _17, version)
  // assume Allocated(_14: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(9,
    _14, version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(10,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(11,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(12,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(13,
    _2, version)
  // assume Allocated(_16: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(14,
    _16, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(15,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(16,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(17, _1,
    version)
  // assume Allocated(_15: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(18,
    _15, version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(19,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(20,
    _3, version)
  
  // [mir] _16 = &(*_17)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(_16,
    version) ==
    new_memory_snap_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(get_memory_field_target_address_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(_17,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(_17,
    old_version)))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_15: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_12: &i32)
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_8: D<'_>)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_14: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of LocalRef(_5: D<'_>)
  inhale frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of ReadRef(_17: &D<'_>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_17,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_18)
  
  // [mir] StorageLive(_19)
  
  // Ownership facts
  // assume WriteRef(_15: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_12: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_16: &D<'_>)
  inhale owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(3,
    _16, version)
  // assume WriteRef(_8: D<'_>)
  inhale owns_as_WriteRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(4,
    _8, version)
  // assume WriteRef(_14: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(5,
    _14, version)
  // assume LocalRef(_5: D<'_>)
  inhale owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(6,
    _5, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_17: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(8,
    _17, version)
  // assume Allocated(_14: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(9,
    _14, version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(10,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(11,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(12,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(13,
    _2, version)
  // assume Allocated(_19: &mut D<'_>)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(14,
    _19, version)
  // assume Allocated(_16: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(15,
    _16, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(16,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(17,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(18, _1,
    version)
  // assume Allocated(_18: &mut D<'_>)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(19,
    _18, version)
  // assume Allocated(_15: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(20,
    _15, version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(21,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(22,
    _3, version)
  
  // [mir] _19 = &mut _8
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(_19,
    version) ==
    new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(_8,
    deref_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$MemorySnapshot$Adt$enums_refs$$D$1$(_8,
    old_version))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_16,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_15: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_12: &i32)
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_16: &D<'_>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_14: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of LocalRef(_5: D<'_>)
  inhale frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_15: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_12: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_16: &D<'_>)
  inhale owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(3,
    _16, version)
  // assume WriteRef(_19: &mut D<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(4,
    _19, version)
  // assume WriteRef(_14: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(5,
    _14, version)
  // assume LocalRef(_5: D<'_>)
  inhale owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(6,
    _5, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_17: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(8,
    _17, version)
  // assume Allocated(_14: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(9,
    _14, version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(10,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(11,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(12,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(13,
    _2, version)
  // assume Allocated(_19: &mut D<'_>)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(14,
    _19, version)
  // assume Allocated(_16: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(15,
    _16, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(16,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(17,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(18, _1,
    version)
  // assume Allocated(_18: &mut D<'_>)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(19,
    _18, version)
  // assume Allocated(_15: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(20,
    _15, version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(21,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(22,
    _3, version)
  
  // [mir] _18 = &mut (*_19)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(_18,
    version) ==
    new_memory_snap_of_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(get_memory_field_target_address_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$Address$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(_19,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$enums_refs$$D$1$__$TY$__MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$D$1$(deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(_19,
    old_version)))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_16,
    old_version, version)
  // Fully-owned used place _19 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_19,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_15: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_12: &i32)
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_16: &D<'_>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_14: B)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of LocalRef(_5: D<'_>)
  inhale frame_across_stmt_LocalRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_15: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_12: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_18: &mut D<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(3,
    _18, version)
  // assume WriteRef(_16: &D<'_>)
  inhale owns_as_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(4,
    _16, version)
  // assume WriteRef(_14: B)
  inhale owns_as_WriteRef_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(5,
    _14, version)
  // assume LocalRef(_5: D<'_>)
  inhale owns_as_LocalRef_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(6,
    _5, version)
  // assume ReadRef(_1: i32)
  inhale owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_17: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(8,
    _17, version)
  // assume Allocated(_14: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(9,
    _14, version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(10,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(11,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(12,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(13,
    _2, version)
  // assume Allocated(_19: &mut D<'_>)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(14,
    _19, version)
  // assume Allocated(_16: &D<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(15,
    _16, version)
  // assume Allocated(_13: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(16,
    _13, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(17,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(18, _1,
    version)
  // assume Allocated(_18: &mut D<'_>)
  inhale owns_as_Allocated_MutRef$Adt$enums_refs$$D$1$__$TY$__$int$$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(19,
    _18, version)
  // assume Allocated(_15: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(20,
    _15, version)
  // assume Allocated(_12: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(21,
    _12, version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(22,
    _3, version)
  
  // [mir] _11 = A::<'_, '_> { a1: move _12, a2: move _14, a3: move _15, a4: move _16, a5: move _18 }
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Version$MemorySnapshot$Adt$enums_refs$$A$2$$(_11,
    version) ==
    new_memory_snap_of_Adt$enums_refs$$A$2$$__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$Adt$enums_refs$$B$MemorySnapshot$Adt$enums_refs$$C$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$$MemorySnapshot$Adt$enums_refs$$A$2$$(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_12,
    old_version), deref_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$MemorySnapshot$Adt$enums_refs$$B(_14,
    old_version), deref_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$MemorySnapshot$Adt$enums_refs$$C(_15,
    old_version), deref_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$SharedRef$Adt$enums_refs$$D$1$(_16,
    old_version), deref_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$MemorySnapshot$MutRef$Adt$enums_refs$$D$1$(_18,
    old_version))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _18 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_18,
    old_version, version)
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Version$$bool$(_16,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Version$$bool$(_14,
    old_version, version)
  // Place _12 has been moved
  inhale move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(_12,
    old_version, get_addr_f$a1_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$I32(_11),
    version)
  // Place _14 has been moved
  inhale move__Adt$enums_refs$$B__$TY$__Address$Adt$enums_refs$$B$Version$Address$Adt$enums_refs$$B$Version$$bool$(_14,
    old_version, get_addr_f$a2_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$B(_11),
    version)
  // Place _15 has been moved
  inhale move__Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Address$Adt$enums_refs$$C$Version$$bool$(_15,
    old_version, get_addr_f$a3_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$Adt$enums_refs$$C(_11),
    version)
  // Place _16 has been moved
  inhale move__SharedRef$Adt$enums_refs$$D$1$__$TY$__Address$SharedRef$Adt$enums_refs$$D$1$$Version$Address$SharedRef$Adt$enums_refs$$D$1$$Version$$bool$(_16,
    old_version, get_addr_f$a4_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$SharedRef$Adt$enums_refs$$D$1$(_11),
    version)
  // Place _18 has been moved
  inhale move__MutRef$Adt$enums_refs$$D$1$__$TY$__Address$MutRef$Adt$enums_refs$$D$1$$Version$Address$MutRef$Adt$enums_refs$$D$1$$Version$$bool$(_18,
    old_version, get_addr_f$a5_of_Adt$enums_refs$$A$2$$__$TY$__Address$Adt$enums_refs$$A$2$$$Address$MutRef$Adt$enums_refs$$D$1$(_11),
    version)
  // Framing facts
  // assume framing of ReadRef(_5: D<'_>)
  inhale frame_across_stmt_ReadRef_Adt$enums_refs$$D$1$__$TY$__Address$Adt$enums_refs$$D$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of ReadRef(_1: i32)
  inhale frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_18)
  
  // [mir] StorageDead(_16)
  
  // [mir] StorageDead(_15)
  
  // [mir] StorageDead(_14)
  
  // [mir] StorageDead(_12)
  
  // [mir] FakeRead(ForLet(None), _11)
  
  // [mir] StorageDead(_19)
  
  // [mir] StorageDead(_17)
  
  // [mir] StorageDead(_13)
  
  // Ownership facts
  // assume WriteRef(_4: C)
  inhale owns_as_WriteRef_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_11: A<'_, '_>)
  inhale owns_as_Allocated_Adt$enums_refs$$A$2$$__$TY$__$int$$Address$Adt$enums_refs$$A$2$$$Version$$bool$(3,
    _11, version)
  // assume Allocated(_8: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(4,
    _8, version)
  // assume Allocated(_5: D<'_>)
  inhale owns_as_Allocated_Adt$enums_refs$$D$1$__$TY$__$int$$Address$Adt$enums_refs$$D$1$$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: B)
  inhale owns_as_Allocated_Adt$enums_refs$$B__$TY$__$int$$Address$Adt$enums_refs$$B$Version$$bool$(6,
    _2, version)
  // assume Allocated(_4: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(7,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_3: C)
  inhale owns_as_Allocated_Adt$enums_refs$$C__$TY$__$int$$Address$Adt$enums_refs$$C$Version$$bool$(9,
    _3, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: C)
  inhale frame_across_stmt_WriteRef_Adt$enums_refs$$C__$TY$__Address$Adt$enums_refs$$C$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_11)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)


method bumpVersion(version: Version) returns (new_version: Version)
