domain Address$Adt$address_of$$T  {
  
  function deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(base: Address$Adt$address_of$$T,
  version: Version): MemorySnapshot$Adt$address_of$$T 
  
  function id_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$$int$(base: Address$Adt$address_of$$T,
  version: Version): Int 
  
  function get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(base: Address$Adt$address_of$$T): Address$I32 
  
  function get_base_f$0_of_Adt$address_of$$T__$TY$__Address$I32$Address$Adt$address_of$$T(field_addr: Address$I32): Address$Adt$address_of$$T 
  
  // The base address is determined by the address of field f$0
  axiom base_of_field_of_Adt$address_of$$T_variant$0_field$0 {
    (forall base_addr: Address$Adt$address_of$$T ::
      { get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(base_addr) }
      base_addr ==
      get_base_f$0_of_Adt$address_of$$T__$TY$__Address$I32$Address$Adt$address_of$$T(get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(base_addr)))
  }
}

domain Address$Bool  {
  
  function deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(base: Address$Bool,
  version: Version): MemorySnapshot$Bool 
  
  function id_Bool__$TY$__Address$Bool$Version$$int$(base: Address$Bool, version: Version): Int 
  
  function _dummy_base_to_field_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$ConstPtr$Adt$address_of$$T  {
  
  function deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(base: Address$ConstPtr$Adt$address_of$$T,
  version: Version): MemorySnapshot$ConstPtr$Adt$address_of$$T 
  
  function id_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$$int$(base: Address$ConstPtr$Adt$address_of$$T,
  version: Version): Int 
  
  function _dummy_base_to_field_of_ConstPtr$Adt$address_of$$T_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_ConstPtr$Adt$address_of$$T_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$I32  {
  
  function deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(base: Address$I32,
  version: Version): MemorySnapshot$I32 
  
  function id_I32__$TY$__Address$I32$Version$$int$(base: Address$I32, version: Version): Int 
  
  function _dummy_base_to_field_of_I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_I32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutRef$Adt$address_of$$T  {
  
  function deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(base: Address$MutRef$Adt$address_of$$T,
  version: Version): MemorySnapshot$MutRef$Adt$address_of$$T 
  
  function id_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$$int$(base: Address$MutRef$Adt$address_of$$T,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$address_of$$T_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$address_of$$T_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$address_of$$T_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$address_of$$T_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Never  {
  
  function deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(base: Address$Never,
  version: Version): MemorySnapshot$Never 
  
  function id_Never__$TY$__Address$Never$Version$$int$(base: Address$Never,
  version: Version): Int 
}

domain Address$SharedRef$Adt$address_of$$T  {
  
  function deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(base: Address$SharedRef$Adt$address_of$$T,
  version: Version): MemorySnapshot$SharedRef$Adt$address_of$$T 
  
  function id_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$$int$(base: Address$SharedRef$Adt$address_of$$T,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$address_of$$T_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$address_of$$T_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$address_of$$T_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$address_of$$T_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Tuple0  {
  
  function deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(base: Address$Tuple0,
  version: Version): MemorySnapshot$Tuple0 
  
  function id_Tuple0__$TY$__Address$Tuple0$Version$$int$(base: Address$Tuple0,
  version: Version): Int 
}

domain MemorySnapshot$Adt$address_of$$T  {
  
  function new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(f$0: MemorySnapshot$I32): MemorySnapshot$Adt$address_of$$T 
  
  function get_memory_field_f$0_of_Adt$address_of$$T_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$address_of$$T$MemorySnapshot$I32(snap: MemorySnapshot$Adt$address_of$$T): MemorySnapshot$I32 
}

domain MemorySnapshot$Bool  {
  
  function new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(value: Bool): MemorySnapshot$Bool 
  
  function get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(snap: MemorySnapshot$Bool): Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Bool_variant$0 {
    (forall self: MemorySnapshot$Bool ::
      { get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self) }
      self ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value) }
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$ConstPtr$Adt$address_of$$T  {
  
  function new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(target: Address$Adt$address_of$$T): MemorySnapshot$ConstPtr$Adt$address_of$$T 
  
  function get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(snap: MemorySnapshot$ConstPtr$Adt$address_of$$T): Address$Adt$address_of$$T 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$Adt$address_of$$T_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$Adt$address_of$$T ::
      { get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(self) }
      self ==
      new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$Adt$address_of$$T_variant$0_field$0 {
    (forall f$target: Address$Adt$address_of$$T ::
      { new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(f$target) }
      get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$I32  {
  
  function new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(value: Int): MemorySnapshot$I32 
  
  function get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(snap: MemorySnapshot$I32): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_I32_variant$0 {
    (forall self: MemorySnapshot$I32 ::
      { get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self) }
      self ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value) }
      get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$MutRef$Adt$address_of$$T  {
  
  function new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(target_address: Address$Adt$address_of$$T,
  target_snapshot: MemorySnapshot$Adt$address_of$$T): MemorySnapshot$MutRef$Adt$address_of$$T 
  
  function get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(snap: MemorySnapshot$MutRef$Adt$address_of$$T): Address$Adt$address_of$$T 
  
  function get_memory_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(snap: MemorySnapshot$MutRef$Adt$address_of$$T): MemorySnapshot$Adt$address_of$$T 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$Adt$address_of$$T_variant$0 {
    (forall self: MemorySnapshot$MutRef$Adt$address_of$$T ::
      { get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(self) }
      { get_memory_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(self) }
      self ==
      new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(self),
      get_memory_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$Adt$address_of$$T_variant$0_field$0 {
    (forall f$target_address: Address$Adt$address_of$$T, f$target_snapshot: MemorySnapshot$Adt$address_of$$T ::
      { new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$Adt$address_of$$T_variant$0_field$1 {
    (forall f$target_address: Address$Adt$address_of$$T, f$target_snapshot: MemorySnapshot$Adt$address_of$$T ::
      { new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Never  {
  
  
}

domain MemorySnapshot$SharedRef$Adt$address_of$$T  {
  
  function new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(target_address: Address$Adt$address_of$$T,
  target_snapshot: MemorySnapshot$Adt$address_of$$T): MemorySnapshot$SharedRef$Adt$address_of$$T 
  
  function get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(snap: MemorySnapshot$SharedRef$Adt$address_of$$T): Address$Adt$address_of$$T 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(snap: MemorySnapshot$SharedRef$Adt$address_of$$T): MemorySnapshot$Adt$address_of$$T 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$address_of$$T_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$address_of$$T ::
      { get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$address_of$$T_variant$0_field$0 {
    (forall f$target_address: Address$Adt$address_of$$T, f$target_snapshot: MemorySnapshot$Adt$address_of$$T ::
      { new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$address_of$$T_variant$0_field$1 {
    (forall f$target_address: Address$Adt$address_of$$T, f$target_snapshot: MemorySnapshot$Adt$address_of$$T ::
      { new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Tuple0  {
  
  function new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0(): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: MemorySnapshot$Tuple0 ::self ==
      new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0())
  }
}

domain Ownership$Adt$address_of$$T  {
  
  function owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Local_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Immutable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$Adt$address_of$$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a: Address$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Address$Adt$address_of$$T$Version$$bool$(a1: Address$Adt$address_of$$T,
  v1: Version, a2: Address$Adt$address_of$$T, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$0
  axiom agree_snap_addr_of_Adt$address_of$$T_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$address_of$$T ::
      { deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(base_addr,
      v) }
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(base_addr),
      v) ==
      get_memory_field_f$0_of_Adt$address_of$$T_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$address_of$$T$MemorySnapshot$I32(deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Local_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_NoReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_NoWriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$0: Allocated ==> Allocated
  axiom ownership_of_field_f$0_from_Allocated_of_Adt$address_of$$T {
    (forall r: Int, a: Address$Adt$address_of$$T, v: Version ::
      { owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(a),
      v))
  }
  
  // Ownership across statement of field f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$0_from_Allocated_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(a),
      v, v2))
  }
  
  // Ownership across call of field f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$0_from_Allocated_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$address_of$$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$address_of$$T
  axiom framing_definition_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(a,
      v1) ==
      deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$address_of$$T
  axiom same_id_shallow_definition_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$$int$(a,
      v1) ==
      id_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$address_of$$T
  axiom same_id_shallow_definition_of_variant_0_of_Adt$address_of$$T {
    (forall a: Address$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(a),
      v1, v2))
  }
  
  // Move definition of Adt$address_of$$T
  axiom moved_definition_of_Adt$address_of$$T {
    (forall a1: Address$Adt$address_of$$T, a2: Address$Adt$address_of$$T, v1: Version,
    v2: Version ::
      { move__Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Address$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Address$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$$int$(a1,
      v1) ==
      id_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$$int$(a2,
      v2) &&
      deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(a1,
      v1) ==
      deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$address_of$$T
  axiom moved_definition_of_variant_0_of_Adt$address_of$$T {
    (forall a1: Address$Adt$address_of$$T, a2: Address$Adt$address_of$$T, v1: Version,
    v2: Version ::
      { move__Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Address$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Address$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(a1),
      v1, get_addr_f$0_of_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Address$I32(a2),
      v2))
  }
}

domain Ownership$Bool  {
  
  function owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1: Address$Bool,
  v1: Version, a2: Address$Bool, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v),
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) &&
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v), owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Call_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Bool
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Bool
  axiom framing_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) }
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) ==>
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v2))
  }
  
  // Shallow id framing definition of Bool
  axiom same_id_shallow_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Bool
  axiom same_id_shallow_definition_of_variant_0_of_Bool {
    true
  }
  
  // Move definition of Bool
  axiom moved_definition_of_Bool {
    (forall a1: Address$Bool, a2: Address$Bool, v1: Version, v2: Version ::
      { move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) }
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a1, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a2, v2) &&
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a1, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a2, v2))
  }
  
  // Move definition of variant 0 of Bool
  axiom moved_definition_of_variant_0_of_Bool {
    true
  }
}

domain Ownership$ConstPtr$Adt$address_of$$T  {
  
  function owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Local_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Immutable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$ConstPtr$Adt$address_of$$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function move__ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(a1: Address$ConstPtr$Adt$address_of$$T,
  v1: Version, a2: Address$ConstPtr$Adt$address_of$$T, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Local_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Write_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Read_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_ConstPtr$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$ConstPtr$Adt$address_of$$T, v: Version ::
      { owns_as_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> ConstPtr$Adt$address_of$$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of ConstPtr$Adt$address_of$$T
  axiom framing_definition_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(a,
      v1) ==
      deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(a,
      v2))
  }
  
  // Shallow id framing definition of ConstPtr$Adt$address_of$$T
  axiom same_id_shallow_definition_of_ConstPtr$Adt$address_of$$T {
    (forall a: Address$ConstPtr$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$$int$(a,
      v1) ==
      id_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of ConstPtr$Adt$address_of$$T
  axiom same_id_shallow_definition_of_variant_0_of_ConstPtr$Adt$address_of$$T {
    true
  }
  
  // Move definition of ConstPtr$Adt$address_of$$T
  axiom moved_definition_of_ConstPtr$Adt$address_of$$T {
    (forall a1: Address$ConstPtr$Adt$address_of$$T, a2: Address$ConstPtr$Adt$address_of$$T,
    v1: Version, v2: Version ::
      { move__ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$$int$(a1,
      v1) ==
      id_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$$int$(a2,
      v2) &&
      deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(a1,
      v1) ==
      deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(a2,
      v2))
  }
  
  // Move definition of variant 0 of ConstPtr$Adt$address_of$$T
  axiom moved_definition_of_variant_0_of_ConstPtr$Adt$address_of$$T {
    true
  }
}

domain Ownership$I32  {
  
  function owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1: Address$I32,
  v1: Version, a2: Address$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v),
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) &&
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of I32
  axiom framing_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) }
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v2))
  }
  
  // Shallow id framing definition of I32
  axiom same_id_shallow_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of I32
  axiom same_id_shallow_definition_of_variant_0_of_I32 {
    true
  }
  
  // Move definition of I32
  axiom moved_definition_of_I32 {
    (forall a1: Address$I32, a2: Address$I32, v1: Version, v2: Version ::
      { move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a1, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a2, v2) &&
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a1, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a2, v2))
  }
  
  // Move definition of variant 0 of I32
  axiom moved_definition_of_variant_0_of_I32 {
    true
  }
}

domain Ownership$MutRef$Adt$address_of$$T  {
  
  function owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Local_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$address_of$$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$MutRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Address$MutRef$Adt$address_of$$T$Version$$bool$(a1: Address$MutRef$Adt$address_of$$T,
  v1: Version, a2: Address$MutRef$Adt$address_of$$T, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Local_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_NoReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$Adt$address_of$$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$Adt$address_of$$T
  axiom framing_definition_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v1) ==
      deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$Adt$address_of$$T
  axiom same_id_shallow_definition_of_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$$int$(a,
      v1) ==
      id_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$Adt$address_of$$T
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$Adt$address_of$$T {
    true
  }
  
  // Move definition of MutRef$Adt$address_of$$T
  axiom moved_definition_of_MutRef$Adt$address_of$$T {
    (forall a1: Address$MutRef$Adt$address_of$$T, a2: Address$MutRef$Adt$address_of$$T,
    v1: Version, v2: Version ::
      { move__MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Address$MutRef$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Address$MutRef$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$$int$(a1,
      v1) ==
      id_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$$int$(a2,
      v2) &&
      deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a1,
      v1) ==
      deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$Adt$address_of$$T
  axiom moved_definition_of_variant_0_of_MutRef$Adt$address_of$$T {
    true
  }
  
  // Invariant of the owning type MutRef$Adt$address_of$$T
  axiom owning_type_invariant_of_MutRef$Adt$address_of$$T {
    (forall r: Int, a: Address$MutRef$Adt$address_of$$T, v: Version ::
      { owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$Adt$address_of$$T {
    (forall a: Address$MutRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(a,
      v2)))
  }
}

domain Ownership$Never  {
  
  function owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1: Address$Never,
  v1: Version, a2: Address$Never, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Call_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Never
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Never
  axiom framing_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) }
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) ==>
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v2))
  }
  
  // Shallow id framing definition of Never
  axiom same_id_shallow_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a, v2))
  }
  
  // Move definition of Never
  axiom moved_definition_of_Never {
    (forall a1: Address$Never, a2: Address$Never, v1: Version, v2: Version ::
      { move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) }
      move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a1, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a2, v2) &&
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a1, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a2, v2))
  }
}

domain Ownership$SharedRef$Adt$address_of$$T  {
  
  function owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Local_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$address_of$$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a: Address$SharedRef$Adt$address_of$$T,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Address$SharedRef$Adt$address_of$$T$Version$$bool$(a1: Address$SharedRef$Adt$address_of$$T,
  v1: Version, a2: Address$SharedRef$Adt$address_of$$T, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Local_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Immutable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$address_of$$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$address_of$$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$Adt$address_of$$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$Adt$address_of$$T
  axiom framing_definition_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v1) ==
      deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$Adt$address_of$$T
  axiom same_id_shallow_definition_of_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$$int$(a,
      v1) ==
      id_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$Adt$address_of$$T
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$Adt$address_of$$T {
    true
  }
  
  // Move definition of SharedRef$Adt$address_of$$T
  axiom moved_definition_of_SharedRef$Adt$address_of$$T {
    (forall a1: Address$SharedRef$Adt$address_of$$T, a2: Address$SharedRef$Adt$address_of$$T,
    v1: Version, v2: Version ::
      { move__SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Address$SharedRef$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Address$SharedRef$Adt$address_of$$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$$int$(a1,
      v1) ==
      id_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$$int$(a2,
      v2) &&
      deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a1,
      v1) ==
      deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$Adt$address_of$$T
  axiom moved_definition_of_variant_0_of_SharedRef$Adt$address_of$$T {
    true
  }
  
  // Invariant of the owning type SharedRef$Adt$address_of$$T
  axiom owning_type_invariant_of_SharedRef$Adt$address_of$$T {
    (forall r: Int, a: Address$SharedRef$Adt$address_of$$T, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(r,
      a, v) ==>
      deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$Adt$address_of$$T {
    (forall a: Address$SharedRef$Adt$address_of$$T, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(a,
      v2)))
  }
}

domain Ownership$Tuple0  {
  
  function owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1: Address$Tuple0,
  v1: Version, a2: Address$Tuple0, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Tuple0
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Tuple0
  axiom framing_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1,
      v2) }
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) ==>
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v2))
  }
  
  // Shallow id framing definition of Tuple0
  axiom same_id_shallow_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Tuple0
  axiom same_id_shallow_definition_of_variant_0_of_Tuple0 {
    true
  }
  
  // Move definition of Tuple0
  axiom moved_definition_of_Tuple0 {
    (forall a1: Address$Tuple0, a2: Address$Tuple0, v1: Version, v2: Version ::
      { move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a1, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a2, v2) &&
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a1, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a2, v2))
  }
  
  // Move definition of variant 0 of Tuple0
  axiom moved_definition_of_variant_0_of_Tuple0 {
    true
  }
}

domain ValueSnapshot$Adt$address_of$$T  {
  
  function new_value_snap_of_Adt$address_of$$T__$TY$__ValueSnapshot$I32$ValueSnapshot$Adt$address_of$$T(f$0: ValueSnapshot$I32): ValueSnapshot$Adt$address_of$$T 
  
  function get_value_field_f$0_of_Adt$address_of$$T_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$I32(snap: ValueSnapshot$Adt$address_of$$T): ValueSnapshot$I32 
  
  function convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(snap: MemorySnapshot$Adt$address_of$$T): ValueSnapshot$Adt$address_of$$T 
  
  function convert_to_memory_of_Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(snap: ValueSnapshot$Adt$address_of$$T): MemorySnapshot$Adt$address_of$$T 
  
  // Definition of the existence of the constructor of variant T
  axiom value_snapshot_existence_of_Adt$address_of$$T_variant$0 {
    (forall self: ValueSnapshot$Adt$address_of$$T ::
      { get_value_field_f$0_of_Adt$address_of$$T_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$I32(self) }
      self ==
      new_value_snap_of_Adt$address_of$$T__$TY$__ValueSnapshot$I32$ValueSnapshot$Adt$address_of$$T(get_value_field_f$0_of_Adt$address_of$$T_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$I32(self)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$address_of$$T {
    (forall value_snapshot: ValueSnapshot$Adt$address_of$$T ::
      { convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(convert_to_memory_of_Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(value_snapshot)) }
      convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(convert_to_memory_of_Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$address_of$$T {
    (forall memory_snapshot: MemorySnapshot$Adt$address_of$$T ::
      { convert_to_memory_of_Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(memory_snapshot)) }
      convert_to_memory_of_Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T(convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Bool  {
  
  function new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(value: Bool): ValueSnapshot$Bool 
  
  function get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(snap: ValueSnapshot$Bool): Bool 
  
  function convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(snap: MemorySnapshot$Bool): ValueSnapshot$Bool 
  
  function convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(snap: ValueSnapshot$Bool): MemorySnapshot$Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Bool_variant$0 {
    (forall self: ValueSnapshot$Bool ::
      { get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self) }
      self ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Bool_variant$0 {
    (forall f$value: Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) }
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Bool_variant$0 {
    (forall v$value: Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) }
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Bool {
    (forall value_snapshot: ValueSnapshot$Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Bool {
    (forall memory_snapshot: MemorySnapshot$Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$Adt$address_of$$T  {
  
  function new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(target: Address$Adt$address_of$$T): ValueSnapshot$ConstPtr$Adt$address_of$$T 
  
  function get_value_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(snap: ValueSnapshot$ConstPtr$Adt$address_of$$T): Address$Adt$address_of$$T 
  
  function convert_from_memory_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(snap: MemorySnapshot$ConstPtr$Adt$address_of$$T): ValueSnapshot$ConstPtr$Adt$address_of$$T 
  
  function convert_to_memory_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(snap: ValueSnapshot$ConstPtr$Adt$address_of$$T): MemorySnapshot$ConstPtr$Adt$address_of$$T 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$Adt$address_of$$T_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$Adt$address_of$$T ::
      { get_value_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(self) }
      self ==
      new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(get_value_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$Adt$address_of$$T_variant$0_field$0 {
    (forall f$target: Address$Adt$address_of$$T ::
      { new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(f$target) }
      get_value_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$Adt$address_of$$T_variant$0 {
    (forall f$target: Address$Adt$address_of$$T ::
      { convert_from_memory_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(f$target)) }
      { new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(f$target) }
      convert_from_memory_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(f$target)) ==
      new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$Adt$address_of$$T_variant$0 {
    (forall v$target: Address$Adt$address_of$$T ::
      { convert_to_memory_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(v$target)) }
      { new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(v$target) }
      convert_to_memory_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(new_value_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(v$target)) ==
      new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$Adt$address_of$$T {
    (forall value_snapshot: ValueSnapshot$ConstPtr$Adt$address_of$$T ::
      { convert_from_memory_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(convert_to_memory_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(value_snapshot)) }
      convert_from_memory_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(convert_to_memory_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$Adt$address_of$$T {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$Adt$address_of$$T ::
      { convert_to_memory_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(convert_from_memory_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$Adt$address_of$$T__$TY$__ValueSnapshot$ConstPtr$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(convert_from_memory_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$ValueSnapshot$ConstPtr$Adt$address_of$$T(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$I32  {
  
  function new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(value: Int): ValueSnapshot$I32 
  
  function get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(snap: ValueSnapshot$I32): Int 
  
  function convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(snap: MemorySnapshot$I32): ValueSnapshot$I32 
  
  function convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(snap: ValueSnapshot$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_I32_variant$0 {
    (forall self: ValueSnapshot$I32 ::
      { get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self) }
      self ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_I32_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) }
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_I32_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) }
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_I32 {
    (forall value_snapshot: ValueSnapshot$I32 ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_I32 {
    (forall memory_snapshot: MemorySnapshot$I32 ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutRef$Adt$address_of$$T  {
  
  function new_value_snap_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(target_snapshot: ValueSnapshot$Adt$address_of$$T): ValueSnapshot$MutRef$Adt$address_of$$T 
  
  function get_value_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$MutRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(snap: ValueSnapshot$MutRef$Adt$address_of$$T): ValueSnapshot$Adt$address_of$$T 
  
  function convert_from_memory_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(snap: MemorySnapshot$MutRef$Adt$address_of$$T): ValueSnapshot$MutRef$Adt$address_of$$T 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$Adt$address_of$$T_variant$0 {
    (forall self: ValueSnapshot$MutRef$Adt$address_of$$T ::
      { get_value_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$MutRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(self) }
      self ==
      new_value_snap_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(get_value_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$MutRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$Adt$address_of$$T_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$address_of$$T ::
      { new_value_snap_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$MutRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(new_value_snap_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$Adt$address_of$$T_variant$0 {
    (forall f$target_address: Address$Adt$address_of$$T, f$target_snapshot: MemorySnapshot$Adt$address_of$$T ::
      { convert_from_memory_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(f$target_snapshot)) }
      convert_from_memory_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$MutRef$Adt$address_of$$T(convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$Adt$address_of$$T  {
  
  function new_value_snap_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(target_snapshot: ValueSnapshot$Adt$address_of$$T): ValueSnapshot$SharedRef$Adt$address_of$$T 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$SharedRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(snap: ValueSnapshot$SharedRef$Adt$address_of$$T): ValueSnapshot$Adt$address_of$$T 
  
  function convert_from_memory_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(snap: MemorySnapshot$SharedRef$Adt$address_of$$T): ValueSnapshot$SharedRef$Adt$address_of$$T 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$address_of$$T_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$address_of$$T ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$SharedRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(get_value_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$SharedRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$address_of$$T_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$address_of$$T ::
      { new_value_snap_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$SharedRef$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(new_value_snap_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$address_of$$T_variant$0 {
    (forall f$target_address: Address$Adt$address_of$$T, f$target_snapshot: MemorySnapshot$Adt$address_of$$T ::
      { convert_from_memory_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$address_of$$T__$TY$__ValueSnapshot$Adt$address_of$$T$ValueSnapshot$SharedRef$Adt$address_of$$T(convert_from_memory_of_Adt$address_of$$T__$TY$__MemorySnapshot$Adt$address_of$$T$ValueSnapshot$Adt$address_of$$T(f$target_snapshot)))
  }
}

domain ValueSnapshot$Tuple0  {
  
  function new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0(): ValueSnapshot$Tuple0 
  
  function convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(snap: MemorySnapshot$Tuple0): ValueSnapshot$Tuple0 
  
  function convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(snap: ValueSnapshot$Tuple0): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: ValueSnapshot$Tuple0 ::self ==
      new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0())
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple0_variant$0 {
    convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()) ==
    new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple0_variant$0 {
    convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple0 {
    (forall value_snapshot: ValueSnapshot$Tuple0 ::
      { convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) }
      convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple0 {
    (forall memory_snapshot: MemorySnapshot$Tuple0 ::
      { convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) }
      convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain Version  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

function read$(): Perm
  ensures none < result
  ensures result < write


method m_bad_2_4()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$ConstPtr$Adt$address_of$$T
  var _8: Address$SharedRef$Adt$address_of$$T
  var _9: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_2_4"
  
  // Library ownership axioms of 7 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _6 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _3, version)
  
  // [mir] _8 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_8: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _8, version)
  // assume LocalRef(_2: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _7 = &raw const (*_8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_8,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_8: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _5 = Eq(move _6, move _7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(6,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_9: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _9 = core::panicking::panic(const "assertion failed: addr_of!(a) == &b as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) == &b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_2_1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$ConstPtr$Adt$address_of$$T
  var _8: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_2_1"
  
  // Library ownership axioms of 6 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _6 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _7 = &raw const _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_2)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _3, version)
  
  // [mir] _5 = Eq(move _6, move _7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_8)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_8: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _8, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _8 = core::panicking::panic(const "assertion failed: addr_of!(a) == addr_of!(b)") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) == addr_of!(b)"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_1_3()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$MutRef$Adt$address_of$$T
  var _8: Address$ConstPtr$Adt$address_of$$T
  var _9: Address$MutRef$Adt$address_of$$T
  var _10: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_1_3"
  
  // Library ownership axioms of 7 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _7 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_7: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(2,
    _7, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _6 = &raw const (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_7: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _9 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_9: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _9, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _8 = &raw const (*_9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_9: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_8: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _8, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _5 = Ne(move _6, move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    old_version))))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _10, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _10 = core::panicking::panic(const "assertion failed: &mut a as *const T != &mut a as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &mut a as *const T != &mut a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_good()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$ConstPtr$Adt$address_of$$T
  var _8: Address$Never
  var _9: Address$Tuple0
  var _10: Address$Bool
  var _11: Address$Bool
  var _12: Address$ConstPtr$Adt$address_of$$T
  var _13: Address$SharedRef$Adt$address_of$$T
  var _14: Address$ConstPtr$Adt$address_of$$T
  var _15: Address$SharedRef$Adt$address_of$$T
  var _16: Address$Never
  var _17: Address$Tuple0
  var _18: Address$Bool
  var _19: Address$Bool
  var _20: Address$ConstPtr$Adt$address_of$$T
  var _21: Address$MutRef$Adt$address_of$$T
  var _22: Address$ConstPtr$Adt$address_of$$T
  var _23: Address$MutRef$Adt$address_of$$T
  var _24: Address$Never
  var _25: Address$Tuple0
  var _26: Address$Bool
  var _27: Address$Bool
  var _28: Address$ConstPtr$Adt$address_of$$T
  var _29: Address$ConstPtr$Adt$address_of$$T
  var _30: Address$SharedRef$Adt$address_of$$T
  var _31: Address$Never
  var _32: Address$Tuple0
  var _33: Address$Bool
  var _34: Address$Bool
  var _35: Address$ConstPtr$Adt$address_of$$T
  var _36: Address$SharedRef$Adt$address_of$$T
  var _37: Address$ConstPtr$Adt$address_of$$T
  var _38: Address$MutRef$Adt$address_of$$T
  var _39: Address$Never
  var _40: Address$Tuple0
  var _41: Address$Bool
  var _42: Address$Bool
  var _43: Address$ConstPtr$Adt$address_of$$T
  var _44: Address$ConstPtr$Adt$address_of$$T
  var _45: Address$Never
  var _46: Address$Tuple0
  var _47: Address$Bool
  var _48: Address$Bool
  var _49: Address$ConstPtr$Adt$address_of$$T
  var _50: Address$SharedRef$Adt$address_of$$T
  var _51: Address$ConstPtr$Adt$address_of$$T
  var _52: Address$SharedRef$Adt$address_of$$T
  var _53: Address$Never
  var _54: Address$Tuple0
  var _55: Address$Bool
  var _56: Address$Bool
  var _57: Address$ConstPtr$Adt$address_of$$T
  var _58: Address$MutRef$Adt$address_of$$T
  var _59: Address$ConstPtr$Adt$address_of$$T
  var _60: Address$MutRef$Adt$address_of$$T
  var _61: Address$Never
  var _62: Address$Tuple0
  var _63: Address$Bool
  var _64: Address$Bool
  var _65: Address$ConstPtr$Adt$address_of$$T
  var _66: Address$ConstPtr$Adt$address_of$$T
  var _67: Address$SharedRef$Adt$address_of$$T
  var _68: Address$Never
  var _69: Address$Tuple0
  var _70: Address$Bool
  var _71: Address$Bool
  var _72: Address$ConstPtr$Adt$address_of$$T
  var _73: Address$SharedRef$Adt$address_of$$T
  var _74: Address$ConstPtr$Adt$address_of$$T
  var _75: Address$MutRef$Adt$address_of$$T
  var _76: Address$Never
  var _77: Address$Tuple0
  var _78: Address$Bool
  var _79: Address$Never
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::good"
  
  // Library ownership axioms of 8 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _3, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  
  // [mir] _6 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _6, version)
  
  // [mir] _7 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _5, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  
  // [mir] _5 = Eq(move _6, move _7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _3, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _4, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _3, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _4, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_8)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_8: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _4, version)
  
  // [mir] _8 = core::panicking::panic(const "assertion failed: addr_of!(a) == addr_of!(a)") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) == addr_of!(a)"
  assert false
  // Framing facts
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb10
  // ========== bb10 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _33,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _33, version)
  
  // [mir] _32 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_32,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _33 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_33: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_33)
  
  // [mir] StorageDead(_32)
  
  // [mir] StorageLive(_40)
  
  // [mir] StorageLive(_41)
  
  // [mir] StorageLive(_42)
  
  // [mir] StorageLive(_43)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_43: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _43, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_40: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _40, version)
  // assume Allocated(_41: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _41, version)
  // assume Allocated(_42: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _42, version)
  
  // [mir] _43 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_43,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_44)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_43: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _43, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_43: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _43, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_44: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(6,
    _44, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_40: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _40, version)
  // assume Allocated(_41: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _41, version)
  // assume Allocated(_42: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _42, version)
  
  // [mir] _44 = &raw const _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_44,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_2)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _43 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_43,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_43: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_43,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_44: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _44, version)
  // assume WriteRef(_43: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _43, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_43: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _43, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_44: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _44, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_40: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _40, version)
  // assume Allocated(_41: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _41, version)
  // assume Allocated(_42: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _42, version)
  
  // [mir] _42 = Ne(move _43, move _44)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_42, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_43,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_44,
    old_version))))
  // Fully-owned used place _44 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_44,
    old_version, version)
  // Fully-owned used place _43 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_43,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_44)
  
  // [mir] StorageDead(_43)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_42: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _42,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_40: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _40, version)
  // assume Allocated(_41: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _41, version)
  // assume Allocated(_42: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _42, version)
  
  // [mir] _41 = Not(move _42)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_41, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_42,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_42)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_41: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _41,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_40: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _40, version)
  // assume Allocated(_41: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _41, version)
  
  // [mir] switchInt(move _41) -> [0: bb12, otherwise: bb11]
  old_version := version
  version := bumpVersion(version)
  __t5 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_41,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t5) {
    goto l11
  }
  goto l10
  
  label bb11
  // ========== bb11 ==========
  
  // [mir] StorageLive(_45)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_41: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _41,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_45: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _45, version)
  // assume Allocated(_40: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _40, version)
  // assume Allocated(_41: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _41, version)
  
  // [mir] _45 = core::panicking::panic(const "assertion failed: addr_of!(a) != addr_of!(b)") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) != addr_of!(b)"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_41: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_41,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb12
  // ========== bb12 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_41: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _41,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_40: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _40, version)
  // assume Allocated(_41: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _41, version)
  
  // [mir] _40 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_40,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _41 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_41,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_41: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_41,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_41)
  
  // [mir] StorageDead(_40)
  
  // [mir] StorageLive(_46)
  
  // [mir] StorageLive(_47)
  
  // [mir] StorageLive(_48)
  
  // [mir] StorageLive(_49)
  
  // [mir] StorageLive(_50)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_49: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _49, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_50: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _50, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _47, version)
  // assume Allocated(_48: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _48, version)
  
  // [mir] _50 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_50,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_50: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _50, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_49: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _49, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_50: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(6,
    _50, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _47, version)
  // assume Allocated(_48: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _48, version)
  
  // [mir] _49 = &raw const (*_50)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_49,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_50,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _50 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_50,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_50: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_50,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_51)
  
  // [mir] StorageLive(_52)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_49: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _49, version)
  // assume Allocated(_49: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _49, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_50: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(6,
    _50, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_51: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _51, version)
  // assume Allocated(_52: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _52, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _47, version)
  // assume Allocated(_48: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _48, version)
  
  // [mir] _52 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_52,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _49 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_49,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_49: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_49,
    old_version, version)
  // assume framing of LocalRef(_2: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_52: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(1,
    _52, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_49: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _49, version)
  // assume LocalRef(_2: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_49: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _49, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_50: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(7,
    _50, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_51: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _51, version)
  // assume Allocated(_52: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _52, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _47, version)
  // assume Allocated(_48: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _48, version)
  
  // [mir] _51 = &raw const (*_52)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_51,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_52,
    old_version)))
  // Fully-owned used place _52 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_52,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _49 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_49,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_49: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_49,
    old_version, version)
  // assume framing of ReadRef(_2: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_52: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_52,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_51: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _51, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_49: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _49, version)
  // assume Allocated(_49: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _49, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_50: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(7,
    _50, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_51: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _51, version)
  // assume Allocated(_52: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _52, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _47, version)
  // assume Allocated(_48: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _48, version)
  
  // [mir] _48 = Ne(move _49, move _51)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_48, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_49,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_51,
    old_version))))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _51 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_51,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _49 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_49,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_51)
  
  // [mir] StorageDead(_49)
  
  // Ownership facts
  // assume WriteRef(_48: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _48,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_50: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _50, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_52: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(7,
    _52, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _47, version)
  // assume Allocated(_48: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _48, version)
  
  // [mir] _47 = Not(move _48)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_47, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_48,
    old_version)))
  // Fully-owned used place _48 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_48,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_52)
  
  // [mir] StorageDead(_50)
  
  // [mir] StorageDead(_48)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_47: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _47,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _47, version)
  
  // [mir] switchInt(move _47) -> [0: bb14, otherwise: bb13]
  old_version := version
  version := bumpVersion(version)
  __t6 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_47,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t6) {
    goto l13
  }
  goto l12
  
  label bb13
  // ========== bb13 ==========
  
  // [mir] StorageLive(_53)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_47: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _47,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _46, version)
  // assume Allocated(_53: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _53, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _47, version)
  
  // [mir] _53 = core::panicking::panic(const "assertion failed: &a as *const T != &b as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T != &b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_47: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_47,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb14
  // ========== bb14 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_47: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _47,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_46: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _46, version)
  // assume Allocated(_47: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _47, version)
  
  // [mir] _46 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_46,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _47 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_47,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_47: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_47,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_47)
  
  // [mir] StorageDead(_46)
  
  // [mir] StorageLive(_54)
  
  // [mir] StorageLive(_55)
  
  // [mir] StorageLive(_56)
  
  // [mir] StorageLive(_57)
  
  // [mir] StorageLive(_58)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_56: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _56, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_57: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _57, version)
  // assume Allocated(_58: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(8,
    _58, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _54, version)
  
  // [mir] _58 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_58,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_58: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(2,
    _58, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_56: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _56, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_57: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _57, version)
  // assume Allocated(_58: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(8,
    _58, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _54, version)
  
  // [mir] _57 = &raw const (*_58)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_57,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_58,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _58 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_58,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_58: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_58,
    old_version, version)
  
  // [mir] StorageLive(_59)
  
  // [mir] StorageLive(_60)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_57: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _57, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_56: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _56, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_57: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _57, version)
  // assume Allocated(_58: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _58, version)
  // assume Allocated(_59: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _59, version)
  // assume Allocated(_60: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(11,
    _60, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _54, version)
  
  // [mir] _60 = &mut _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_60,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _57 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_57,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_57: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_57,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_57: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _57, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_60: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _60, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_56: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _56, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_57: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _57, version)
  // assume Allocated(_58: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _58, version)
  // assume Allocated(_59: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _59, version)
  // assume Allocated(_60: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(11,
    _60, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _54, version)
  
  // [mir] _59 = &raw const (*_60)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_59,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_60,
    old_version)))
  // Fully-owned used place _57 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_57,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _60 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_60,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_57: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_57,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_60: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_60,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_59: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _59, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_57: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _57, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_56: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _56, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_57: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _57, version)
  // assume Allocated(_58: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _58, version)
  // assume Allocated(_59: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _59, version)
  // assume Allocated(_60: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(12,
    _60, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _54, version)
  
  // [mir] _56 = Ne(move _57, move _59)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_56, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_57,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_59,
    old_version))))
  // Fully-owned used place _59 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_59,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _57 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_57,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_59)
  
  // [mir] StorageDead(_57)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_56: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _56,
    version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_56: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _56, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_58: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(8,
    _58, version)
  // assume Allocated(_60: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _60, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _54, version)
  
  // [mir] _55 = Not(move _56)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_55, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_56,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _56 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_56,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_60)
  
  // [mir] StorageDead(_58)
  
  // [mir] StorageDead(_56)
  
  // Ownership facts
  // assume WriteRef(_55: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _55,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _54, version)
  
  // [mir] switchInt(move _55) -> [0: bb16, otherwise: bb15]
  old_version := version
  version := bumpVersion(version)
  __t7 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_55,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t7) {
    goto l15
  }
  goto l14
  
  label bb15
  // ========== bb15 ==========
  
  // [mir] StorageLive(_61)
  
  // Ownership facts
  // assume WriteRef(_55: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _55,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_61: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _61, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _54, version)
  
  // [mir] _61 = core::panicking::panic(const "assertion failed: &mut a as *const T != &mut b as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &mut a as *const T != &mut b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_55: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_55,
    old_version, version)
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb16
  // ========== bb16 ==========
  
  // Ownership facts
  // assume WriteRef(_55: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _55,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_55: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _55, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_54: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _54, version)
  
  // [mir] _54 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_54,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _55 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_55,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_55: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_55,
    old_version, version)
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_55)
  
  // [mir] StorageDead(_54)
  
  // [mir] StorageLive(_62)
  
  // [mir] StorageLive(_63)
  
  // [mir] StorageLive(_64)
  
  // [mir] StorageLive(_65)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _63, version)
  // assume Allocated(_64: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _64, version)
  // assume Allocated(_65: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _65, version)
  
  // [mir] _65 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_65,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_66)
  
  // [mir] StorageLive(_67)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_65: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _65, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _63, version)
  // assume Allocated(_64: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _64, version)
  // assume Allocated(_65: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _65, version)
  // assume Allocated(_66: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _66, version)
  // assume Allocated(_67: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(11,
    _67, version)
  
  // [mir] _67 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_67,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _65 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_65,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_65: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_65,
    old_version, version)
  // assume framing of LocalRef(_2: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_65: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _65, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_67: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _67, version)
  // assume LocalRef(_2: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _63, version)
  // assume Allocated(_64: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _64, version)
  // assume Allocated(_65: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _65, version)
  // assume Allocated(_66: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _66, version)
  // assume Allocated(_67: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _67, version)
  
  // [mir] _66 = &raw const (*_67)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_66,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_67,
    old_version)))
  // Fully-owned used place _67 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_67,
    old_version, version)
  // Fully-owned used place _65 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_65,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_65: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_65,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_67: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_67,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_66: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _66, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_65: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _65, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _63, version)
  // assume Allocated(_64: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _64, version)
  // assume Allocated(_65: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _65, version)
  // assume Allocated(_66: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _66, version)
  // assume Allocated(_67: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _67, version)
  
  // [mir] _64 = Ne(move _65, move _66)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_64, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_65,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_66,
    old_version))))
  // Fully-owned used place _66 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_66,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _65 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_65,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_66)
  
  // [mir] StorageDead(_65)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_64: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _64,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _63, version)
  // assume Allocated(_64: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _64, version)
  // assume Allocated(_67: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _67, version)
  
  // [mir] _63 = Not(move _64)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_63, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_64,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _64 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_64,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_67)
  
  // [mir] StorageDead(_64)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_63: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _63,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _63, version)
  
  // [mir] switchInt(move _63) -> [0: bb18, otherwise: bb17]
  old_version := version
  version := bumpVersion(version)
  __t8 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_63,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t8) {
    goto l17
  }
  goto l16
  
  label bb17
  // ========== bb17 ==========
  
  // [mir] StorageLive(_68)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_63: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _63,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_68: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _68, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _63, version)
  
  // [mir] _68 = core::panicking::panic(const "assertion failed: addr_of!(a) != &b as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) != &b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_63: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_63,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb18
  // ========== bb18 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_63: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _63,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_62: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _62, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_63: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _63, version)
  
  // [mir] _62 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_62,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _63 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_63,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_63: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_63,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_63)
  
  // [mir] StorageDead(_62)
  
  // [mir] StorageLive(_69)
  
  // [mir] StorageLive(_70)
  
  // [mir] StorageLive(_71)
  
  // [mir] StorageLive(_72)
  
  // [mir] StorageLive(_73)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _70, version)
  // assume Allocated(_71: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _71, version)
  // assume Allocated(_72: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _72, version)
  // assume Allocated(_73: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _73, version)
  
  // [mir] _73 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_73,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_73: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _73, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _70, version)
  // assume Allocated(_71: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _71, version)
  // assume Allocated(_72: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _72, version)
  // assume Allocated(_73: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _73, version)
  
  // [mir] _72 = &raw const (*_73)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_72,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_73,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _73 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_73,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_73: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_73,
    old_version, version)
  
  // [mir] StorageLive(_74)
  
  // [mir] StorageLive(_75)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_72: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _72, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_74: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _74, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_75: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(6,
    _75, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _70, version)
  // assume Allocated(_71: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _71, version)
  // assume Allocated(_72: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _72, version)
  // assume Allocated(_73: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _73, version)
  
  // [mir] _75 = &mut _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_75,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _72 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_72,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_72: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_72,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_72: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _72, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_75: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _75, version)
  // assume Allocated(_74: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _74, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_75: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(6,
    _75, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _70, version)
  // assume Allocated(_71: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _71, version)
  // assume Allocated(_72: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _72, version)
  // assume Allocated(_73: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _73, version)
  
  // [mir] _74 = &raw const (*_75)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_74,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_75,
    old_version)))
  // Fully-owned used place _72 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_72,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _75 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_75,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_72: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_72,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_75: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_75,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_72: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _72, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_74: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _74, version)
  // assume Allocated(_74: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _74, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_75: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(7,
    _75, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _70, version)
  // assume Allocated(_71: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _71, version)
  // assume Allocated(_72: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _72, version)
  // assume Allocated(_73: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(13,
    _73, version)
  
  // [mir] _71 = Ne(move _72, move _74)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_71, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_72,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_74,
    old_version))))
  // Fully-owned used place _72 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_72,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _74 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_74,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_74)
  
  // [mir] StorageDead(_72)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_71: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _71,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_75: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(5,
    _75, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _70, version)
  // assume Allocated(_71: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _71, version)
  // assume Allocated(_73: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _73, version)
  
  // [mir] _70 = Not(move _71)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_70, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_71,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _71 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_71,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_75)
  
  // [mir] StorageDead(_73)
  
  // [mir] StorageDead(_71)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_70: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _70,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _70, version)
  
  // [mir] switchInt(move _70) -> [0: bb20, otherwise: bb19]
  old_version := version
  version := bumpVersion(version)
  __t9 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_70,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t9) {
    goto l19
  }
  goto l18
  
  label bb19
  // ========== bb19 ==========
  
  // [mir] StorageLive(_76)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_70: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _70,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_76: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _76, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _70, version)
  
  // [mir] _76 = core::panicking::panic(const "assertion failed: &a as *const T != &mut b as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T != &mut b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_70: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_70,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _3, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _4, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_13: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _13, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _11, version)
  // assume Allocated(_12: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _12, version)
  
  // [mir] _13 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_13,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_13: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _13, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_13: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _11, version)
  // assume Allocated(_12: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _12, version)
  
  // [mir] _12 = &raw const (*_13)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_12,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_13,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _13 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_13,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_13: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_13,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_14)
  
  // [mir] StorageLive(_15)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_12: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _12, version)
  // assume Allocated(_13: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_14: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(6,
    _14, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_15: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(8,
    _15, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _11, version)
  // assume Allocated(_12: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _12, version)
  
  // [mir] _15 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_15,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_15: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_12: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _12, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_13: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_14: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _14, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_15: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _15, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _11, version)
  // assume Allocated(_12: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(13,
    _12, version)
  
  // [mir] _14 = &raw const (*_15)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_14,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_15,
    old_version)))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of ReadRef(_15: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_12: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_14: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _14, version)
  // assume Allocated(_13: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_14: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _14, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_15: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _15, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _11, version)
  // assume Allocated(_12: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(13,
    _12, version)
  
  // [mir] _11 = Eq(move _12, move _14)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_11, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_12,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_14,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_14)
  
  // [mir] StorageDead(_12)
  
  // Ownership facts
  // assume WriteRef(_11: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_13: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_15: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(7,
    _15, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _11, version)
  
  // [mir] _10 = Not(move _11)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_11,
    old_version)))
  // Fully-owned used place _11 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_11,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_15)
  
  // [mir] StorageDead(_13)
  
  // [mir] StorageDead(_11)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _10,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _10, version)
  
  // [mir] switchInt(move _10) -> [0: bb4, otherwise: bb3]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label bb20
  // ========== bb20 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_70: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _70,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_69: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _69, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_70: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _70, version)
  
  // [mir] _69 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_69,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _70 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_70,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_70: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_70,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_70)
  
  // [mir] StorageDead(_69)
  
  // [mir] StorageLive(_77)
  
  // [mir] StorageLive(_78)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_77: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _77, version)
  // assume Allocated(_78: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _78, version)
  
  // [mir] _78 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_78, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_78: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _78,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_77: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _77, version)
  // assume Allocated(_78: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _78, version)
  
  // [mir] switchInt(move _78) -> [0: bb22, otherwise: bb21]
  old_version := version
  version := bumpVersion(version)
  __t10 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_78,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t10) {
    goto l21
  }
  goto l20
  
  label bb21
  // ========== bb21 ==========
  
  // [mir] StorageLive(_79)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_78: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _78,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_77: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _77, version)
  // assume Allocated(_78: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _78, version)
  // assume Allocated(_79: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _79, version)
  
  // [mir] _79 = core::panicking::panic(const "assertion failed: false") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_78: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_78,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb22
  // ========== bb22 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_78: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _78,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_77: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _77, version)
  // assume Allocated(_78: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _78, version)
  
  // [mir] _77 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_77,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _78 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_78,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_78: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_78,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_78)
  
  // [mir] StorageDead(_77)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb3
  // ========== bb3 ==========
  
  // [mir] StorageLive(_16)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _10,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _9, version)
  // assume Allocated(_16: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _16, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _10, version)
  
  // [mir] _16 = core::panicking::panic(const "assertion failed: &a as *const T == &a as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T == &a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb4
  // ========== bb4 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _10,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _9, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _10, version)
  
  // [mir] _9 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_9,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_10)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageLive(_17)
  
  // [mir] StorageLive(_18)
  
  // [mir] StorageLive(_19)
  
  // [mir] StorageLive(_20)
  
  // [mir] StorageLive(_21)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _19, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_20: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _20, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_21: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(7,
    _21, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _18, version)
  
  // [mir] _21 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_21,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_21: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(2,
    _21, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _19, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_20: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _20, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_21: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(7,
    _21, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _18, version)
  
  // [mir] _20 = &raw const (*_21)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_20,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_21,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _21 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_21,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_21: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_21,
    old_version, version)
  
  // [mir] StorageLive(_22)
  
  // [mir] StorageLive(_23)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_20: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _20, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_20: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(6,
    _20, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_21: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(8,
    _21, version)
  // assume Allocated(_22: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _22, version)
  // assume Allocated(_23: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _23, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _18, version)
  
  // [mir] _23 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_23,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _20 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_20,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_20: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_20,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_23: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(2,
    _23, version)
  // assume WriteRef(_20: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _20, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_20: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(6,
    _20, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_21: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(8,
    _21, version)
  // assume Allocated(_22: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _22, version)
  // assume Allocated(_23: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _23, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _18, version)
  
  // [mir] _22 = &raw const (*_23)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_22,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_23,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_23,
    old_version, version)
  // Fully-owned used place _20 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_20,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_20: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_20,
    old_version, version)
  // assume framing of ReadRef(_23: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_23,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_22: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _22, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_20: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _20, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_20: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _20, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_21: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _21, version)
  // assume Allocated(_22: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _22, version)
  // assume Allocated(_23: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(11,
    _23, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _18, version)
  
  // [mir] _19 = Eq(move _20, move _22)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_19, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_20,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_22,
    old_version)))
  // Fully-owned used place _22 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_22,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _20 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_20,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_22)
  
  // [mir] StorageDead(_20)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_19: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _19,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_21: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(7,
    _21, version)
  // assume Allocated(_23: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(8,
    _23, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _18, version)
  
  // [mir] _18 = Not(move _19)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_18, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_19,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _19 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_19,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_23)
  
  // [mir] StorageDead(_21)
  
  // [mir] StorageDead(_19)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_18: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _18,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _18, version)
  
  // [mir] switchInt(move _18) -> [0: bb6, otherwise: bb5]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_18,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t2) {
    goto l5
  }
  goto l4
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageLive(_24)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_18: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _18,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _17, version)
  // assume Allocated(_24: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _24, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _18, version)
  
  // [mir] _24 = core::panicking::panic(const "assertion failed: &mut a as *const T == &mut a as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &mut a as *const T == &mut a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_18: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_18,
    old_version, version)
  goto end_of_method
  
  label bb6
  // ========== bb6 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_18: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _18,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_17: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _17, version)
  // assume Allocated(_18: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _18, version)
  
  // [mir] _17 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_17,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _18 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_18,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_18: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_18,
    old_version, version)
  
  // [mir] StorageDead(_18)
  
  // [mir] StorageDead(_17)
  
  // [mir] StorageLive(_25)
  
  // [mir] StorageLive(_26)
  
  // [mir] StorageLive(_27)
  
  // [mir] StorageLive(_28)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _27, version)
  // assume Allocated(_28: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _28, version)
  
  // [mir] _28 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_28,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_29)
  
  // [mir] StorageLive(_30)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_28: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _28, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _27, version)
  // assume Allocated(_28: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _28, version)
  // assume Allocated(_29: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _29, version)
  // assume Allocated(_30: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(11,
    _30, version)
  
  // [mir] _30 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_30,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _28 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_28,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_28: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_28,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_28: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _28, version)
  // assume WriteRef(_30: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _30, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _27, version)
  // assume Allocated(_28: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _28, version)
  // assume Allocated(_29: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _29, version)
  // assume Allocated(_30: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _30, version)
  
  // [mir] _29 = &raw const (*_30)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_29,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_30,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _28 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_28,
    old_version, version)
  // Fully-owned used place _30 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_30,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_28: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_28,
    old_version, version)
  // assume framing of ReadRef(_30: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_30,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_28: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _28, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_29: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _29, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _27, version)
  // assume Allocated(_28: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _28, version)
  // assume Allocated(_29: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _29, version)
  // assume Allocated(_30: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _30, version)
  
  // [mir] _27 = Eq(move _28, move _29)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_27, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_28,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_29,
    old_version)))
  // Fully-owned used place _28 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_28,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _29 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_29,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_29)
  
  // [mir] StorageDead(_28)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_27: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _27,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _27, version)
  // assume Allocated(_30: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _30, version)
  
  // [mir] _26 = Not(move _27)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_26, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_27,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _27 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_27,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_30)
  
  // [mir] StorageDead(_27)
  
  // Ownership facts
  // assume WriteRef(_26: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _26,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  
  // [mir] switchInt(move _26) -> [0: bb8, otherwise: bb7]
  old_version := version
  version := bumpVersion(version)
  __t3 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_26,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t3) {
    goto l7
  }
  goto l6
  
  label bb7
  // ========== bb7 ==========
  
  // [mir] StorageLive(_31)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_26: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _26,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_31: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _31, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  
  // [mir] _31 = core::panicking::panic(const "assertion failed: addr_of!(a) == &a as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) == &a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_26: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_26,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb8
  // ========== bb8 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_26: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _26,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _26, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  
  // [mir] _25 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_25,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _26 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_26,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_26: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_26,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_26)
  
  // [mir] StorageDead(_25)
  
  // [mir] StorageLive(_32)
  
  // [mir] StorageLive(_33)
  
  // [mir] StorageLive(_34)
  
  // [mir] StorageLive(_35)
  
  // [mir] StorageLive(_36)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _33, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _34, version)
  // assume Allocated(_35: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _35, version)
  // assume Allocated(_36: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _36, version)
  
  // [mir] _36 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_36,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_36: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _36, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _33, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _34, version)
  // assume Allocated(_35: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _35, version)
  // assume Allocated(_36: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _36, version)
  
  // [mir] _35 = &raw const (*_36)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_35,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_36,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _36 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_36,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_36: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_36,
    old_version, version)
  
  // [mir] StorageLive(_37)
  
  // [mir] StorageLive(_38)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_35: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _35, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_37: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _37, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_38: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(6,
    _38, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _33, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _34, version)
  // assume Allocated(_35: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _35, version)
  // assume Allocated(_36: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _36, version)
  
  // [mir] _38 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_38,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _35 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_35,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_35: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_35,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_35: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _35, version)
  // assume WriteRef(_38: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _38, version)
  // assume Allocated(_37: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _37, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_38: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(6,
    _38, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _33, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _34, version)
  // assume Allocated(_35: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _35, version)
  // assume Allocated(_36: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(12,
    _36, version)
  
  // [mir] _37 = &raw const (*_38)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_37,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_38,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _35 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_35,
    old_version, version)
  // Fully-owned used place _38 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_38,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_35: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_35,
    old_version, version)
  // assume framing of ReadRef(_38: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_38,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_37: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _37, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_35: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _35, version)
  // assume Allocated(_37: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _37, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_38: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(7,
    _38, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _33, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _34, version)
  // assume Allocated(_35: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _35, version)
  // assume Allocated(_36: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(13,
    _36, version)
  
  // [mir] _34 = Eq(move _35, move _37)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_34, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_35,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_37,
    old_version)))
  // Fully-owned used place _37 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_37,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _35 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_35,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_37)
  
  // [mir] StorageDead(_35)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_34: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _34,
    version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_38: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(5,
    _38, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _33, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _34, version)
  // assume Allocated(_36: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _36, version)
  
  // [mir] _33 = Not(move _34)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_34,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _34 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_34,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_38)
  
  // [mir] StorageDead(_36)
  
  // [mir] StorageDead(_34)
  
  // Ownership facts
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _33,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _33, version)
  
  // [mir] switchInt(move _33) -> [0: bb10, otherwise: bb9]
  old_version := version
  version := bumpVersion(version)
  __t4 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t4) {
    goto l9
  }
  goto l8
  
  label bb9
  // ========== bb9 ==========
  
  // [mir] StorageLive(_39)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _33,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_39: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _39, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _33, version)
  
  // [mir] _39 = core::panicking::panic(const "assertion failed: &a as *const T == &mut a as *const T") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T == &mut a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_33: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label l10
  // ========== l10 ==========
  // MIR edge bb10 --> bb12
  goto bb12
  
  label l11
  // ========== l11 ==========
  // MIR edge bb10 --> bb11
  goto bb11
  
  label l12
  // ========== l12 ==========
  // MIR edge bb12 --> bb14
  goto bb14
  
  label l13
  // ========== l13 ==========
  // MIR edge bb12 --> bb13
  goto bb13
  
  label l14
  // ========== l14 ==========
  // MIR edge bb14 --> bb16
  goto bb16
  
  label l15
  // ========== l15 ==========
  // MIR edge bb14 --> bb15
  goto bb15
  
  label l16
  // ========== l16 ==========
  // MIR edge bb16 --> bb18
  goto bb18
  
  label l17
  // ========== l17 ==========
  // MIR edge bb16 --> bb17
  goto bb17
  
  label l18
  // ========== l18 ==========
  // MIR edge bb18 --> bb20
  goto bb20
  
  label l19
  // ========== l19 ==========
  // MIR edge bb18 --> bb19
  goto bb19
  
  label l2
  // ========== l2 ==========
  // MIR edge bb2 --> bb4
  goto bb4
  
  label l20
  // ========== l20 ==========
  // MIR edge bb20 --> bb22
  goto bb22
  
  label l21
  // ========== l21 ==========
  // MIR edge bb20 --> bb21
  goto bb21
  
  label l3
  // ========== l3 ==========
  // MIR edge bb2 --> bb3
  goto bb3
  
  label l4
  // ========== l4 ==========
  // MIR edge bb4 --> bb6
  goto bb6
  
  label l5
  // ========== l5 ==========
  // MIR edge bb4 --> bb5
  goto bb5
  
  label l6
  // ========== l6 ==========
  // MIR edge bb6 --> bb8
  goto bb8
  
  label l7
  // ========== l7 ==========
  // MIR edge bb6 --> bb7
  goto bb7
  
  label l8
  // ========== l8 ==========
  // MIR edge bb8 --> bb10
  goto bb10
  
  label l9
  // ========== l9 ==========
  // MIR edge bb8 --> bb9
  goto bb9
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_2_5()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$SharedRef$Adt$address_of$$T
  var _8: Address$ConstPtr$Adt$address_of$$T
  var _9: Address$MutRef$Adt$address_of$$T
  var _10: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_2_5"
  
  // Library ownership axioms of 8 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _7 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_7: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _7, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _6 = &raw const (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_7: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _9 = &mut _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_9: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _9, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _8 = &raw const (*_9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_9: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_8: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _8, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _5 = Eq(move _6, move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _10, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _10 = core::panicking::panic(const "assertion failed: &a as *const T == &mut b as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T == &mut b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_2_2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$SharedRef$Adt$address_of$$T
  var _8: Address$ConstPtr$Adt$address_of$$T
  var _9: Address$SharedRef$Adt$address_of$$T
  var _10: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_2_2"
  
  // Library ownership axioms of 7 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _7 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_7: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _7, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _6 = &raw const (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_7: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _9 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_9,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_9: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _9, version)
  // assume LocalRef(_2: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _8 = &raw const (*_9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_9,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_9: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_8: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _8, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _5 = Eq(move _6, move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _10, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _10 = core::panicking::panic(const "assertion failed: &a as *const T == &b as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T == &b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_1_4()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$ConstPtr$Adt$address_of$$T
  var _8: Address$SharedRef$Adt$address_of$$T
  var _9: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_1_4"
  
  // Library ownership axioms of 7 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _6 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _3, version)
  
  // [mir] _8 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_8: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _8, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _7 = &raw const (*_8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_8,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_8: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _5 = Ne(move _6, move _7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    old_version))))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_8: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(6,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_9: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _9 = core::panicking::panic(const "assertion failed: addr_of!(a) != &a as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) != &a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_1_1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$ConstPtr$Adt$address_of$$T
  var _8: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_1_1"
  
  // Library ownership axioms of 6 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _6 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _7 = &raw const _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(_1)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(10,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _3, version)
  
  // [mir] _5 = Ne(move _6, move _7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_7,
    old_version))))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_8)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_8: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _8, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _8 = core::panicking::panic(const "assertion failed: addr_of!(a) != addr_of!(a)") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: addr_of!(a) != addr_of!(a)"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_main()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  
  label start
  // ========== start ==========
  // Def path: "address_of::main"
  
  // Library ownership axioms of 1 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_2_3()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$MutRef$Adt$address_of$$T
  var _8: Address$ConstPtr$Adt$address_of$$T
  var _9: Address$MutRef$Adt$address_of$$T
  var _10: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_2_3"
  
  // Library ownership axioms of 7 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _7 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_7: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(2,
    _7, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _6 = &raw const (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_7: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _9 = &mut _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_2,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_9: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _9, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _8 = &raw const (*_9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_9: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_8: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _8, version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _5 = Eq(move _6, move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_7: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _10, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _10 = core::panicking::panic(const "assertion failed: &mut a as *const T == &mut b as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &mut a as *const T == &mut b as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_1_5()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$SharedRef$Adt$address_of$$T
  var _8: Address$ConstPtr$Adt$address_of$$T
  var _9: Address$MutRef$Adt$address_of$$T
  var _10: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_1_5"
  
  // Library ownership axioms of 8 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _7 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_7: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _7, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _6 = &raw const (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_7: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _9 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    version) ==
    new_memory_snap_of_MutRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$MutRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_9: &mut T)
  inhale owns_as_WriteRef_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(3,
    _9, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _8 = &raw const (*_9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_MutRef$Adt$address_of$$T__$TY$__MemorySnapshot$MutRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$MemorySnapshot$MutRef$Adt$address_of$$T(_9,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_9: &mut T)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$address_of$$T__$TY$__Address$MutRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_8: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _8, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _5 = Ne(move _6, move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    old_version))))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &mut T)
  inhale owns_as_Allocated_MutRef$Adt$address_of$$T__$TY$__$int$$Address$MutRef$Adt$address_of$$T$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _10, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _10 = core::panicking::panic(const "assertion failed: &a as *const T != &mut a as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T != &mut a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_bad_1_2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$address_of$$T
  var _2: Address$Adt$address_of$$T
  var _3: Address$Tuple0
  var _4: Address$Bool
  var _5: Address$Bool
  var _6: Address$ConstPtr$Adt$address_of$$T
  var _7: Address$SharedRef$Adt$address_of$$T
  var _8: Address$ConstPtr$Adt$address_of$$T
  var _9: Address$SharedRef$Adt$address_of$$T
  var _10: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "address_of::bad_1_2"
  
  // Library ownership axioms of 7 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _1 = T(const 111_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(111))
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  
  // [mir] _2 = T(const 222_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_2,
    version) ==
    new_memory_snap_of_Adt$address_of$$T__$TY$__MemorySnapshot$I32$MemorySnapshot$Adt$address_of$$T(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(222))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _3, version)
  
  // [mir] _7 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_7: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(2,
    _7, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(9,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _6 = &raw const (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_7,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_7: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(11,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _3, version)
  
  // [mir] _9 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_9,
    version) ==
    new_memory_snap_of_SharedRef$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$Adt$address_of$$T$MemorySnapshot$SharedRef$Adt$address_of$$T(_1,
    deref_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$MemorySnapshot$Adt$address_of$$T(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of LocalRef(_1: T)
  inhale frame_across_stmt_LocalRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(2,
    _6, version)
  // assume WriteRef(_9: &T)
  inhale owns_as_WriteRef_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(3,
    _9, version)
  // assume LocalRef(_1: T)
  inhale owns_as_LocalRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _1, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _8 = &raw const (*_9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    version) ==
    new_memory_snap_of_ConstPtr$Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$MemorySnapshot$ConstPtr$Adt$address_of$$T(get_memory_field_target_address_of_SharedRef$Adt$address_of$$T__$TY$__MemorySnapshot$SharedRef$Adt$address_of$$T$Address$Adt$address_of$$T(deref_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$MemorySnapshot$SharedRef$Adt$address_of$$T(_9,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: *const T)
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_1: T)
  inhale frame_across_stmt_ReadRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_9: &T)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$address_of$$T__$TY$__Address$SharedRef$Adt$address_of$$T$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(1,
    _6, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_8: *const T)
  inhale owns_as_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(4,
    _8, version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _1, version)
  // assume Allocated(_8: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(8,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(10,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: *const T)
  inhale owns_as_Allocated_ConstPtr$Adt$address_of$$T__$TY$__$int$$Address$ConstPtr$Adt$address_of$$T$Version$$bool$(12,
    _6, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _3, version)
  
  // [mir] _5 = Ne(move _6, move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_6,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$Adt$address_of$$T__$TY$__MemorySnapshot$ConstPtr$Adt$address_of$$T$Address$Adt$address_of$$T(deref_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$MemorySnapshot$ConstPtr$Adt$address_of$$T(_8,
    old_version))))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$Adt$address_of$$T__$TY$__Address$ConstPtr$Adt$address_of$$T$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_7: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &T)
  inhale owns_as_Allocated_SharedRef$Adt$address_of$$T__$TY$__$int$$Address$SharedRef$Adt$address_of$$T$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _3, version)
  
  // [mir] _4 = Not(move _5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _4) -> [0: bb2, otherwise: bb1]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _10, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(7,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _3, version)
  
  // [mir] _10 = core::panicking::panic(const "assertion failed: &a as *const T != &a as *const T") -> bb3
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: &a as *const T != &a as *const T"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_call_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb2
  // ========== bb2 ==========
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_4: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(5,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_3,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_4: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(2,
    _1, version)
  // assume Allocated(_1: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: T)
  inhale owns_as_Allocated_Adt$address_of$$T__$TY$__$int$$Address$Adt$address_of$$T$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_Adt$address_of$$T__$TY$__Address$Adt$address_of$$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb0 --> bb2
  goto bb2
  
  label l1
  // ========== l1 ==========
  // MIR edge bb0 --> bb1
  goto bb1
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)


method bumpVersion(version: Version) returns (new_version: Version)
