domain Address$Adt$private_references$$lib$$T$1$  {
  
  function deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(base: Address$Adt$private_references$$lib$$T$1$,
  version: Version): MemorySnapshot$Adt$private_references$$lib$$T$1$ 
  
  function id_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$$int$(base: Address$Adt$private_references$$lib$$T$1$,
  version: Version): Int 
  
  function get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(base: Address$Adt$private_references$$lib$$T$1$): Address$MutRef$U32 
  
  function get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(base: Address$Adt$private_references$$lib$$T$1$): Address$Adt$std$$std$$sync$$Mutex$1$Tuple0 
  
  function get_base_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$U32$Address$Adt$private_references$$lib$$T$1$(field_addr: Address$MutRef$U32): Address$Adt$private_references$$lib$$T$1$ 
  
  function get_base_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Address$Adt$private_references$$lib$$T$1$(field_addr: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0): Address$Adt$private_references$$lib$$T$1$ 
  
  // The base address is determined by the address of field f$inner
  axiom base_of_field_of_Adt$private_references$$lib$$T$1$_variant$0_field$0 {
    (forall base_addr: Address$Adt$private_references$$lib$$T$1$ ::
      { get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(base_addr) }
      base_addr ==
      get_base_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$U32$Address$Adt$private_references$$lib$$T$1$(get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(base_addr)))
  }
  
  // The base address is determined by the address of field f$mutex
  axiom base_of_field_of_Adt$private_references$$lib$$T$1$_variant$0_field$1 {
    (forall base_addr: Address$Adt$private_references$$lib$$T$1$ ::
      { get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(base_addr) }
      base_addr ==
      get_base_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Address$Adt$private_references$$lib$$T$1$(get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(base_addr)))
  }
}

domain Address$Adt$std$$std$$sync$$Mutex$1$Tuple0  {
  
  function deref_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(base: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  version: Version): MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0 
  
  function id_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$int$(base: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  version: Version): Int 
}

domain Address$Bool  {
  
  function deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(base: Address$Bool,
  version: Version): MemorySnapshot$Bool 
  
  function id_Bool__$TY$__Address$Bool$Version$$int$(base: Address$Bool, version: Version): Int 
  
  function _dummy_base_to_field_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutRef$Adt$private_references$$lib$$T$1$  {
  
  function deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(base: Address$MutRef$Adt$private_references$$lib$$T$1$,
  version: Version): MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$ 
  
  function id_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$int$(base: Address$MutRef$Adt$private_references$$lib$$T$1$,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$MutRef$U32  {
  
  function deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(base: Address$MutRef$U32,
  version: Version): MemorySnapshot$MutRef$U32 
  
  function id_MutRef$U32__$TY$__Address$MutRef$U32$Version$$int$(base: Address$MutRef$U32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$U32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$U32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$U32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$U32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Never  {
  
  function deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(base: Address$Never,
  version: Version): MemorySnapshot$Never 
  
  function id_Never__$TY$__Address$Never$Version$$int$(base: Address$Never,
  version: Version): Int 
}

domain Address$SharedRef$Adt$private_references$$lib$$T$1$  {
  
  function deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(base: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  version: Version): MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$ 
  
  function id_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$int$(base: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Tuple0  {
  
  function deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(base: Address$Tuple0,
  version: Version): MemorySnapshot$Tuple0 
  
  function id_Tuple0__$TY$__Address$Tuple0$Version$$int$(base: Address$Tuple0,
  version: Version): Int 
}

domain Address$U32  {
  
  function deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(base: Address$U32,
  version: Version): MemorySnapshot$U32 
  
  function id_U32__$TY$__Address$U32$Version$$int$(base: Address$U32, version: Version): Int 
  
  function _dummy_base_to_field_of_U32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_U32_variant$0_field$0__$TY$__$int$(): Int 
}

domain MemorySnapshot$Adt$private_references$$lib$$T$1$  {
  
  function new_memory_snap_of_Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$MemorySnapshot$Adt$private_references$$lib$$T$1$(f$inner: MemorySnapshot$MutRef$U32,
  f$mutex: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0): MemorySnapshot$Adt$private_references$$lib$$T$1$ 
  
  function get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(snap: MemorySnapshot$Adt$private_references$$lib$$T$1$): MemorySnapshot$MutRef$U32 
  
  function get_memory_field_f$mutex_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(snap: MemorySnapshot$Adt$private_references$$lib$$T$1$): MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0 
}

domain MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0  {
  
  
}

domain MemorySnapshot$Bool  {
  
  function new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(value: Bool): MemorySnapshot$Bool 
  
  function get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(snap: MemorySnapshot$Bool): Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Bool_variant$0 {
    (forall self: MemorySnapshot$Bool ::
      { get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self) }
      self ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value) }
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$  {
  
  function new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(target_address: Address$Adt$private_references$$lib$$T$1$,
  target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$): MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$ 
  
  function get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(snap: MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$): Address$Adt$private_references$$lib$$T$1$ 
  
  function get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(snap: MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$): MemorySnapshot$Adt$private_references$$lib$$T$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0 {
    (forall self: MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$ ::
      { get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(self) }
      { get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(self) }
      self ==
      new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(self),
      get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0_field$0 {
    (forall f$target_address: Address$Adt$private_references$$lib$$T$1$, f$target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$ ::
      { new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0_field$1 {
    (forall f$target_address: Address$Adt$private_references$$lib$$T$1$, f$target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$ ::
      { new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$MutRef$U32  {
  
  function new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(target_address: Address$U32,
  target_snapshot: MemorySnapshot$U32): MemorySnapshot$MutRef$U32 
  
  function get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(snap: MemorySnapshot$MutRef$U32): Address$U32 
  
  function get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(snap: MemorySnapshot$MutRef$U32): MemorySnapshot$U32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$U32_variant$0 {
    (forall self: MemorySnapshot$MutRef$U32 ::
      { get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(self) }
      { get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(self) }
      self ==
      new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(self),
      get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$U32_variant$0_field$0 {
    (forall f$target_address: Address$U32, f$target_snapshot: MemorySnapshot$U32 ::
      { new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$U32_variant$0_field$1 {
    (forall f$target_address: Address$U32, f$target_snapshot: MemorySnapshot$U32 ::
      { new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Never  {
  
  
}

domain MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$  {
  
  function new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(target_address: Address$Adt$private_references$$lib$$T$1$,
  target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$): MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$ 
  
  function get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(snap: MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$): Address$Adt$private_references$$lib$$T$1$ 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(snap: MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$): MemorySnapshot$Adt$private_references$$lib$$T$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$ ::
      { get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0_field$0 {
    (forall f$target_address: Address$Adt$private_references$$lib$$T$1$, f$target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$ ::
      { new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0_field$1 {
    (forall f$target_address: Address$Adt$private_references$$lib$$T$1$, f$target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$ ::
      { new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Tuple0  {
  
  function new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0(): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: MemorySnapshot$Tuple0 ::self ==
      new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0())
  }
}

domain MemorySnapshot$U32  {
  
  function new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(value: Int): MemorySnapshot$U32 
  
  function get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(snap: MemorySnapshot$U32): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_U32_variant$0 {
    (forall self: MemorySnapshot$U32 ::
      { get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(self) }
      self ==
      new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_U32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value) }
      get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) ==
      f$value)
  }
}

domain Ownership$Adt$private_references$$lib$$T$1$  {
  
  function owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Local_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Immutable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(a1: Address$Adt$private_references$$lib$$T$1$,
  v1: Version, a2: Address$Adt$private_references$$lib$$T$1$, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field f$inner
  axiom agree_snap_addr_of_Adt$private_references$$lib$$T$1$_variant$0_field$0 {
    (forall v: Version, base_addr: Address$Adt$private_references$$lib$$T$1$ ::
      { deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(base_addr,
      v) }
      deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(base_addr),
      v) ==
      get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(base_addr,
      v)))
  }
  
  // The snapshot and address definitions agree on field f$mutex
  axiom agree_snap_addr_of_Adt$private_references$$lib$$T$1$_variant$0_field$1 {
    (forall v: Version, base_addr: Address$Adt$private_references$$lib$$T$1$ ::
      { deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(base_addr,
      v) }
      deref_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(base_addr),
      v) ==
      get_memory_field_f$mutex_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Local_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Immutable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Immutable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field f$inner: Allocated ==> Allocated
  axiom ownership_of_field_f$inner_from_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(a),
      v))
  }
  
  // Ownership across statement of field f$inner: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$inner_from_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(a),
      v, v2))
  }
  
  // Ownership across call of field f$inner: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$inner_from_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(a),
      v, v2))
  }
  
  // Ownership of field f$mutex: Allocated ==> Allocated
  axiom ownership_of_field_f$mutex_from_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(a),
      v))
  }
  
  // Ownership across statement of field f$mutex: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_f$mutex_from_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(a),
      v, v2))
  }
  
  // Ownership across call of field f$mutex: Allocated ==> Allocated
  axiom ownership_across_call_of_field_f$mutex_from_Allocated_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v: Version, v2: Version ::
      { frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$private_references$$lib$$T$1$
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$private_references$$lib$$T$1$
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$private_references$$lib$$T$1$
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$private_references$$lib$$T$1$
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$private_references$$lib$$T$1$
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$private_references$$lib$$T$1$
  axiom framing_definition_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(a,
      v1) ==
      deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$private_references$$lib$$T$1$
  axiom same_id_shallow_definition_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$$int$(a,
      v1) ==
      id_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$private_references$$lib$$T$1$
  axiom same_id_shallow_definition_of_variant_0_of_Adt$private_references$$lib$$T$1$ {
    (forall a: Address$Adt$private_references$$lib$$T$1$, v1: Version, v2: Version ::
      { same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(a),
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(a),
      v1, v2))
  }
  
  // Move definition of Adt$private_references$$lib$$T$1$
  axiom moved_definition_of_Adt$private_references$$lib$$T$1$ {
    (forall a1: Address$Adt$private_references$$lib$$T$1$, a2: Address$Adt$private_references$$lib$$T$1$,
    v1: Version, v2: Version ::
      { move__Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$$int$(a1,
      v1) ==
      id_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$$int$(a2,
      v2) &&
      deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(a1,
      v1) ==
      deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$private_references$$lib$$T$1$
  axiom moved_definition_of_variant_0_of_Adt$private_references$$lib$$T$1$ {
    (forall a1: Address$Adt$private_references$$lib$$T$1$, a2: Address$Adt$private_references$$lib$$T$1$,
    v1: Version, v2: Version ::
      { move__Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) ==>
      move__MutRef$U32__$TY$__Address$MutRef$U32$Version$Address$MutRef$U32$Version$$bool$(get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(a1),
      v1, get_addr_f$inner_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$MutRef$U32(a2),
      v2) &&
      move__Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(a1),
      v1, get_addr_f$mutex_of_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0(a2),
      v2))
  }
}

domain Ownership$Adt$std$$std$$sync$$Mutex$1$Tuple0  {
  
  function owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(a1: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
  v1: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v), owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v), owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v: Version ::
      { owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom framing_definition_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v1: Version, v2: Version ::
      { same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(a,
      v1) ==
      deref_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom same_id_shallow_definition_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, v1: Version, v2: Version ::
      { same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$int$(a,
      v1) ==
      id_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$std$$std$$sync$$Mutex$1$Tuple0
  axiom moved_definition_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall a1: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0, a2: Address$Adt$std$$std$$sync$$Mutex$1$Tuple0,
    v1: Version, v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$int$(a1,
      v1) ==
      id_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$$int$(a2,
      v2) &&
      deref_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(a1,
      v1) ==
      deref_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$Tuple0$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(a2,
      v2))
  }
}

domain Ownership$Bool  {
  
  function owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1: Address$Bool,
  v1: Version, a2: Address$Bool, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v),
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) &&
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v), owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Call_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Bool
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Bool
  axiom framing_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) }
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) ==>
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v2))
  }
  
  // Shallow id framing definition of Bool
  axiom same_id_shallow_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Bool
  axiom same_id_shallow_definition_of_variant_0_of_Bool {
    true
  }
  
  // Move definition of Bool
  axiom moved_definition_of_Bool {
    (forall a1: Address$Bool, a2: Address$Bool, v1: Version, v2: Version ::
      { move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) }
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a1, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a2, v2) &&
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a1, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a2, v2))
  }
  
  // Move definition of variant 0 of Bool
  axiom moved_definition_of_variant_0_of_Bool {
    true
  }
}

domain Ownership$MutRef$Adt$private_references$$lib$$T$1$  {
  
  function owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(a1: Address$MutRef$Adt$private_references$$lib$$T$1$,
  v1: Version, a2: Address$MutRef$Adt$private_references$$lib$$T$1$, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$Adt$private_references$$lib$$T$1$
  axiom framing_definition_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v1) ==
      deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$Adt$private_references$$lib$$T$1$
  axiom same_id_shallow_definition_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$int$(a,
      v1) ==
      id_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$Adt$private_references$$lib$$T$1$
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$Adt$private_references$$lib$$T$1$ {
    true
  }
  
  // Move definition of MutRef$Adt$private_references$$lib$$T$1$
  axiom moved_definition_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a1: Address$MutRef$Adt$private_references$$lib$$T$1$, a2: Address$MutRef$Adt$private_references$$lib$$T$1$,
    v1: Version, v2: Version ::
      { move__MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$int$(a1,
      v1) ==
      id_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$int$(a2,
      v2) &&
      deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a1,
      v1) ==
      deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$Adt$private_references$$lib$$T$1$
  axiom moved_definition_of_variant_0_of_MutRef$Adt$private_references$$lib$$T$1$ {
    true
  }
  
  // Invariant of the owning type MutRef$Adt$private_references$$lib$$T$1$
  axiom owning_type_invariant_of_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$MutRef$Adt$private_references$$lib$$T$1$, v: Version ::
      { owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$MutRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(a,
      v2)))
  }
}

domain Ownership$MutRef$U32  {
  
  function owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_Local_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r: Int,
  a: Address$MutRef$U32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a: Address$MutRef$U32,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$U32__$TY$__Address$MutRef$U32$Version$Address$MutRef$U32$Version$$bool$(a1: Address$MutRef$U32,
  v1: Version, a2: Address$MutRef$U32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Local_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Immutable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$U32 {
    (forall r: Int, o: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Immutable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$U32 {
    (forall r: Int, o: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$U32 {
    (forall r: Int, o: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_NoReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$U32 {
    (forall r: Int, o: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_NoWriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$U32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$U32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$U32
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$U32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$U32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$U32
  axiom framing_definition_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v1) ==
      deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$U32
  axiom same_id_shallow_definition_of_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$U32__$TY$__Address$MutRef$U32$Version$$int$(a, v1) ==
      id_MutRef$U32__$TY$__Address$MutRef$U32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$U32
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$U32 {
    true
  }
  
  // Move definition of MutRef$U32
  axiom moved_definition_of_MutRef$U32 {
    (forall a1: Address$MutRef$U32, a2: Address$MutRef$U32, v1: Version, v2: Version ::
      { move__MutRef$U32__$TY$__Address$MutRef$U32$Version$Address$MutRef$U32$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$U32__$TY$__Address$MutRef$U32$Version$Address$MutRef$U32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$U32__$TY$__Address$MutRef$U32$Version$$int$(a1, v1) ==
      id_MutRef$U32__$TY$__Address$MutRef$U32$Version$$int$(a2, v2) &&
      deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a1,
      v1) ==
      deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$U32
  axiom moved_definition_of_variant_0_of_MutRef$U32 {
    true
  }
  
  // Invariant of the owning type MutRef$U32
  axiom owning_type_invariant_of_MutRef$U32 {
    (forall r: Int, a: Address$MutRef$U32, v: Version ::
      { owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(r,
      a, v) ==>
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$U32 {
    (forall a: Address$MutRef$U32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(a,
      v2)))
  }
}

domain Ownership$Never  {
  
  function owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1: Address$Never,
  v1: Version, a2: Address$Never, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Call_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Never
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Never
  axiom framing_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) }
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) ==>
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v2))
  }
  
  // Shallow id framing definition of Never
  axiom same_id_shallow_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a, v2))
  }
  
  // Move definition of Never
  axiom moved_definition_of_Never {
    (forall a1: Address$Never, a2: Address$Never, v1: Version, v2: Version ::
      { move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) }
      move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a1, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a2, v2) &&
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a1, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a2, v2))
  }
}

domain Ownership$SharedRef$Adt$private_references$$lib$$T$1$  {
  
  function owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(a1: Address$SharedRef$Adt$private_references$$lib$$T$1$,
  v1: Version, a2: Address$SharedRef$Adt$private_references$$lib$$T$1$, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$Adt$private_references$$lib$$T$1$
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$Adt$private_references$$lib$$T$1$
  axiom framing_definition_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v1) ==
      deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$Adt$private_references$$lib$$T$1$
  axiom same_id_shallow_definition_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$int$(a,
      v1) ==
      id_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$Adt$private_references$$lib$$T$1$
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    true
  }
  
  // Move definition of SharedRef$Adt$private_references$$lib$$T$1$
  axiom moved_definition_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a1: Address$SharedRef$Adt$private_references$$lib$$T$1$, a2: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v1: Version, v2: Version ::
      { move__SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$int$(a1,
      v1) ==
      id_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$int$(a2,
      v2) &&
      deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a1,
      v1) ==
      deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$Adt$private_references$$lib$$T$1$
  axiom moved_definition_of_variant_0_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    true
  }
  
  // Invariant of the owning type SharedRef$Adt$private_references$$lib$$T$1$
  axiom owning_type_invariant_of_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall r: Int, a: Address$SharedRef$Adt$private_references$$lib$$T$1$,
    v: Version ::
      { owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(r,
      a, v) ==>
      deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$Adt$private_references$$lib$$T$1$ {
    (forall a: Address$SharedRef$Adt$private_references$$lib$$T$1$, v1: Version,
    v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$Address$Adt$private_references$$lib$$T$1$(deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(a,
      v2)))
  }
}

domain Ownership$Tuple0  {
  
  function owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1: Address$Tuple0,
  v1: Version, a2: Address$Tuple0, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Tuple0
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Tuple0
  axiom framing_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1,
      v2) }
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) ==>
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v2))
  }
  
  // Shallow id framing definition of Tuple0
  axiom same_id_shallow_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Tuple0
  axiom same_id_shallow_definition_of_variant_0_of_Tuple0 {
    true
  }
  
  // Move definition of Tuple0
  axiom moved_definition_of_Tuple0 {
    (forall a1: Address$Tuple0, a2: Address$Tuple0, v1: Version, v2: Version ::
      { move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a1, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a2, v2) &&
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a1, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a2, v2))
  }
  
  // Move definition of variant 0 of Tuple0
  axiom moved_definition_of_variant_0_of_Tuple0 {
    true
  }
}

domain Ownership$U32  {
  
  function owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r: Int,
  a: Address$U32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a: Address$U32,
  v1: Version, v2: Version): Bool 
  
  function move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1: Address$U32,
  v1: Version, a2: Address$U32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Local_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall r: Int, a: Address$U32, v: Version ::
      { owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_U32__$TY$__$int$$Address$U32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_U32 {
    (forall a: Address$U32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v),
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a, v) &&
      owns_as_Read_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_U32 {
    (forall r: Int, o: Int, a: Address$U32, v: Version ::
      { owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v), owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> U32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> U32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U32
  axiom framing_across_Call_implied_by_ownership_Unique_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> U32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> U32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_U32__$TY$__Address$U32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of U32
  axiom framing_definition_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) }
      same_snap_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) ==>
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a, v1) ==
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a, v2))
  }
  
  // Shallow id framing definition of U32
  axiom same_id_shallow_definition_of_U32 {
    (forall a: Address$U32, v1: Version, v2: Version ::
      { same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_U32__$TY$__Address$U32$Version$Version$$bool$(a, v1, v2) ==>
      id_U32__$TY$__Address$U32$Version$$int$(a, v1) ==
      id_U32__$TY$__Address$U32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of U32
  axiom same_id_shallow_definition_of_variant_0_of_U32 {
    true
  }
  
  // Move definition of U32
  axiom moved_definition_of_U32 {
    (forall a1: Address$U32, a2: Address$U32, v1: Version, v2: Version ::
      { move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1,
      v1, a2, v2) }
      move__U32__$TY$__Address$U32$Version$Address$U32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_U32__$TY$__Address$U32$Version$$int$(a1, v1) ==
      id_U32__$TY$__Address$U32$Version$$int$(a2, v2) &&
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a1, v1) ==
      deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(a2, v2))
  }
  
  // Move definition of variant 0 of U32
  axiom moved_definition_of_variant_0_of_U32 {
    true
  }
}

domain ValueSnapshot$Adt$private_references$$lib$$T$1$  {
  
  function new_value_snap_of_Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$MutRef$U32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$ValueSnapshot$Adt$private_references$$lib$$T$1$(f$inner: ValueSnapshot$MutRef$U32,
  f$mutex: ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0): ValueSnapshot$Adt$private_references$$lib$$T$1$ 
  
  function get_value_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$U32(snap: ValueSnapshot$Adt$private_references$$lib$$T$1$): ValueSnapshot$MutRef$U32 
  
  function get_value_field_f$mutex_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(snap: ValueSnapshot$Adt$private_references$$lib$$T$1$): ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0 
  
  function convert_from_memory_of_Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(snap: MemorySnapshot$Adt$private_references$$lib$$T$1$): ValueSnapshot$Adt$private_references$$lib$$T$1$ 
  
  // Definition of the existence of the constructor of variant T
  axiom value_snapshot_existence_of_Adt$private_references$$lib$$T$1$_variant$0 {
    (forall self: ValueSnapshot$Adt$private_references$$lib$$T$1$ ::
      { get_value_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$U32(self) }
      { get_value_field_f$mutex_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(self) }
      self ==
      new_value_snap_of_Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$MutRef$U32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$ValueSnapshot$Adt$private_references$$lib$$T$1$(get_value_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$U32(self),
      get_value_field_f$mutex_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(self)))
  }
}

domain ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0  {
  
  function convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(snap: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0): ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0 
  
  function convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(snap: ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0): MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall value_snapshot: ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0 ::
      { convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(value_snapshot)) }
      convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0 {
    (forall memory_snapshot: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0 ::
      { convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(memory_snapshot)) }
      convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$Tuple0__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$Tuple0(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Bool  {
  
  function new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(value: Bool): ValueSnapshot$Bool 
  
  function get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(snap: ValueSnapshot$Bool): Bool 
  
  function convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(snap: MemorySnapshot$Bool): ValueSnapshot$Bool 
  
  function convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(snap: ValueSnapshot$Bool): MemorySnapshot$Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Bool_variant$0 {
    (forall self: ValueSnapshot$Bool ::
      { get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self) }
      self ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Bool_variant$0 {
    (forall f$value: Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) }
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Bool_variant$0 {
    (forall v$value: Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) }
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Bool {
    (forall value_snapshot: ValueSnapshot$Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Bool {
    (forall memory_snapshot: MemorySnapshot$Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$  {
  
  function new_value_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(target_snapshot: ValueSnapshot$Adt$private_references$$lib$$T$1$): ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$ 
  
  function get_value_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(snap: ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$): ValueSnapshot$Adt$private_references$$lib$$T$1$ 
  
  function convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(snap: MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$): ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0 {
    (forall self: ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$ ::
      { get_value_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(self) }
      self ==
      new_value_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(get_value_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$private_references$$lib$$T$1$ ::
      { new_value_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(new_value_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$Adt$private_references$$lib$$T$1$_variant$0 {
    (forall f$target_address: Address$Adt$private_references$$lib$$T$1$, f$target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$ ::
      { convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(convert_from_memory_of_Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(f$target_snapshot)) }
      convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(convert_from_memory_of_Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(f$target_snapshot)))
  }
}

domain ValueSnapshot$MutRef$U32  {
  
  function new_value_snap_of_MutRef$U32__$TY$__ValueSnapshot$U32$ValueSnapshot$MutRef$U32(target_snapshot: ValueSnapshot$U32): ValueSnapshot$MutRef$U32 
  
  function get_value_field_target_snapshot_of_MutRef$U32__$TY$__ValueSnapshot$MutRef$U32$ValueSnapshot$U32(snap: ValueSnapshot$MutRef$U32): ValueSnapshot$U32 
  
  function convert_from_memory_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$ValueSnapshot$MutRef$U32(snap: MemorySnapshot$MutRef$U32): ValueSnapshot$MutRef$U32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$U32_variant$0 {
    (forall self: ValueSnapshot$MutRef$U32 ::
      { get_value_field_target_snapshot_of_MutRef$U32__$TY$__ValueSnapshot$MutRef$U32$ValueSnapshot$U32(self) }
      self ==
      new_value_snap_of_MutRef$U32__$TY$__ValueSnapshot$U32$ValueSnapshot$MutRef$U32(get_value_field_target_snapshot_of_MutRef$U32__$TY$__ValueSnapshot$MutRef$U32$ValueSnapshot$U32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$U32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$U32 ::
      { new_value_snap_of_MutRef$U32__$TY$__ValueSnapshot$U32$ValueSnapshot$MutRef$U32(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$U32__$TY$__ValueSnapshot$MutRef$U32$ValueSnapshot$U32(new_value_snap_of_MutRef$U32__$TY$__ValueSnapshot$U32$ValueSnapshot$MutRef$U32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$U32_variant$0 {
    (forall f$target_address: Address$U32, f$target_snapshot: MemorySnapshot$U32 ::
      { convert_from_memory_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$ValueSnapshot$MutRef$U32(new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$U32__$TY$__ValueSnapshot$U32$ValueSnapshot$MutRef$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(f$target_snapshot)) }
      convert_from_memory_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$ValueSnapshot$MutRef$U32(new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$U32__$TY$__ValueSnapshot$U32$ValueSnapshot$MutRef$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$  {
  
  function new_value_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(target_snapshot: ValueSnapshot$Adt$private_references$$lib$$T$1$): ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$ 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(snap: ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$): ValueSnapshot$Adt$private_references$$lib$$T$1$ 
  
  function convert_from_memory_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(snap: MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$): ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$ 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$ ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(get_value_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$private_references$$lib$$T$1$ ::
      { new_value_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(new_value_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$private_references$$lib$$T$1$_variant$0 {
    (forall f$target_address: Address$Adt$private_references$$lib$$T$1$, f$target_snapshot: MemorySnapshot$Adt$private_references$$lib$$T$1$ ::
      { convert_from_memory_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(convert_from_memory_of_Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__ValueSnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$SharedRef$Adt$private_references$$lib$$T$1$(convert_from_memory_of_Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$ValueSnapshot$Adt$private_references$$lib$$T$1$(f$target_snapshot)))
  }
}

domain ValueSnapshot$Tuple0  {
  
  function new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0(): ValueSnapshot$Tuple0 
  
  function convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(snap: MemorySnapshot$Tuple0): ValueSnapshot$Tuple0 
  
  function convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(snap: ValueSnapshot$Tuple0): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: ValueSnapshot$Tuple0 ::self ==
      new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0())
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple0_variant$0 {
    convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()) ==
    new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple0_variant$0 {
    convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple0 {
    (forall value_snapshot: ValueSnapshot$Tuple0 ::
      { convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) }
      convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple0 {
    (forall memory_snapshot: MemorySnapshot$Tuple0 ::
      { convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) }
      convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$U32  {
  
  function new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(value: Int): ValueSnapshot$U32 
  
  function get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(snap: ValueSnapshot$U32): Int 
  
  function convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(snap: MemorySnapshot$U32): ValueSnapshot$U32 
  
  function convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(snap: ValueSnapshot$U32): MemorySnapshot$U32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_U32_variant$0 {
    (forall self: ValueSnapshot$U32 ::
      { get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(self) }
      self ==
      new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_U32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value) }
      get_value_field_value_of_U32__$TY$__ValueSnapshot$U32$$int$(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_U32_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) }
      { new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value) }
      convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(f$value)) ==
      new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_U32_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(v$value)) }
      { new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(v$value) }
      convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(new_value_snap_of_U32__$TY$__$int$$ValueSnapshot$U32(v$value)) ==
      new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_U32 {
    (forall value_snapshot: ValueSnapshot$U32 ::
      { convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(value_snapshot)) }
      convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_U32 {
    (forall memory_snapshot: MemorySnapshot$U32 ::
      { convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(memory_snapshot)) }
      convert_to_memory_of_U32__$TY$__ValueSnapshot$U32$MemorySnapshot$U32(convert_from_memory_of_U32__$TY$__MemorySnapshot$U32$ValueSnapshot$U32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain Version  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

function read$(): Perm
  ensures none < result
  ensures result < write


method m_test_1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$private_references$$lib$$T$1$
  var _2: Address$U32
  var _3: Address$MutRef$Adt$private_references$$lib$$T$1$
  var _4: Address$Tuple0
  var _5: Address$SharedRef$Adt$private_references$$lib$$T$1$
  var _6: Address$U32
  var _7: Address$MutRef$Adt$private_references$$lib$$T$1$
  var _8: Address$Tuple0
  var _9: Address$Bool
  var _10: Address$Bool
  var _11: Address$U32
  var _12: Address$U32
  var _13: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "private_references::test_1"
  
  // Library ownership axioms of 9 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _2,
    version)
  // assume Allocated(_3: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    version) ==
    new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _2,
    version)
  // assume Allocated(_3: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = lib::T::<'_>::query(move _3) -> [return: bb1, unwind: bb6]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut lib::T<'_>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _2,
    version)
  // assume Allocated(_3: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    version)) ==
    convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_2,
    version)) ==
    get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut lib::T<'_>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _4, version)
  // assume Allocated(_5: &lib::T<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _2,
    version)
  
  // [mir] _5 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(_5,
    version) ==
    new_memory_snap_of_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$SharedRef$Adt$private_references$$lib$$T$1$(_1,
    deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: lib::T<'_>)
  inhale frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_5: &lib::T<'_>)
  inhale owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _5, version)
  // assume LocalRef(_1: lib::T<'_>)
  inhale owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_5: &lib::T<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _2,
    version)
  
  // [mir] _4 = lib::T::<'_>::increment(move _5) -> [return: bb2, unwind: bb6]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: &lib::T<'_>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of LocalRef(_1: lib::T<'_>)
  inhale frame_across_stmt_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_5: &lib::T<'_>)
  inhale owns_as_WriteRef_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _5, version)
  // assume LocalRef(_1: lib::T<'_>)
  inhale owns_as_LocalRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_5: &lib::T<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _2,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &lib::T<'_>)
  inhale owns_as_Allocated_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$$bool$(-1,
    _5, version)
  // frame ShallowlyOwned(arg#0: &lib::T<'_>)
  inhale frame_across_call_ShallowlyOwned_SharedRef$Adt$private_references$$lib$$T$1$__$TY$__Address$SharedRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: lib::T<'_>)
  inhale frame_across_call_ReadRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  goto bb2
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _7, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _6,
    version)
  
  // [mir] _7 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_7,
    version) ==
    new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_7: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _7, version)
  // assume Allocated(_7: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _7, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _6,
    version)
  
  // [mir] _6 = lib::T::<'_>::query(move _7) -> [return: bb3, unwind: bb6]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_7: &mut lib::T<'_>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_7,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_7: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _7, version)
  // assume Allocated(_7: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _7, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _6,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_7,
    version)) ==
    convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_7,
    old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_6,
    version)) ==
    get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_7,
    version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(-1,
    _7, version)
  // frame ShallowlyOwned(arg#0: &mut lib::T<'_>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb3
  
  label bb3
  // ========== bb3 ==========
  
  // [mir] StorageDead(_7)
  
  // [mir] FakeRead(ForLet(None), _6)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _10, version)
  // assume Allocated(_11: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _11,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _2,
    version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(9, _6,
    version)
  
  // [mir] _11 = _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_11, version) ==
    deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_2, old_version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: u32)
  inhale frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageLive(_12)
  
  // Ownership facts
  // assume WriteRef(_11: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _10, version)
  // assume Allocated(_11: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _11,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(8, _2,
    version)
  // assume Allocated(_12: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(9, _12,
    version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(11, _6,
    version)
  
  // [mir] _12 = _6
  old_version := version
  version := bumpVersion(version)
  inhale deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_12, version) ==
    deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_6, old_version)
  // Fully-owned used place _11 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_11,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_11: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_11,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_6: u32)
  inhale frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_11: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_12: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _12,
    version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_11: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _11,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(9, _2,
    version)
  // assume Allocated(_12: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(10, _12,
    version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(12, _6,
    version)
  
  // [mir] _10 = Eq(move _11, move _12)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_11,
    old_version)) ==
    get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_12,
    old_version)))
  // Fully-owned used place _11 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_11,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_12)
  
  // [mir] StorageDead(_11)
  
  // Ownership facts
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _10,
    version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _10, version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _2,
    version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(9, _6,
    version)
  
  // [mir] _9 = Not(move _10)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_10)
  
  // Ownership facts
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _9,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _2,
    version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _9, version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(8, _6,
    version)
  
  // [mir] switchInt(move _9) -> [0: bb5, otherwise: bb4]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageLive(_13)
  
  // Ownership facts
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _9,
    version)
  // assume Allocated(_13: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _13, version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _2,
    version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(9, _6,
    version)
  
  // [mir] _13 = core::panicking::panic(const "assertion failed: a == b") -> bb6
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: a == b"
  assert false
  // Framing facts
  // assume framing of WriteRef(_6: u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_9: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  goto end_of_method
  
  label bb5
  // ========== bb5 ==========
  
  // Ownership facts
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _9,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _2,
    version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _9, version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(8, _6,
    version)
  
  // [mir] _8 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_8,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_9: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_8)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_6: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _6,
    version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb3 --> bb5
  goto bb5
  
  label l1
  // ========== l1 ==========
  // MIR edge bb3 --> bb4
  goto bb4
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_main()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$U32
  var _2: Address$Adt$private_references$$lib$$T$1$
  var _3: Address$MutRef$U32
  var _4: Address$MutRef$U32
  var _5: Address$Tuple0
  var _6: Address$Adt$private_references$$lib$$T$1$
  
  label start
  // ========== start ==========
  // Def path: "private_references::main"
  
  // Library ownership axioms of 5 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _1,
    version)
  
  // [mir] _1 = const 42_u32
  old_version := version
  version := bumpVersion(version)
  inhale deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_1, version) ==
    new_memory_snap_of_U32__$TY$__$int$$MemorySnapshot$U32(42)
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(5,
    _3, version)
  
  // [mir] _4 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(_4,
    version) ==
    new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(_1,
    deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_1, old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_4: &mut u32)
  inhale owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(1,
    _4, version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(5,
    _3, version)
  
  // [mir] _3 = &mut (*_4)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(_3,
    version) ==
    new_memory_snap_of_MutRef$U32__$TY$__Address$U32$MemorySnapshot$U32$MemorySnapshot$MutRef$U32(get_memory_field_target_address_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$Address$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(_4,
    old_version)), get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(deref_MutRef$U32__$TY$__Address$MutRef$U32$Version$MemorySnapshot$MutRef$U32(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(_4,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut u32)
  inhale owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = lib::T::<'_>::new(move _3) -> [return: bb1, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut u32)
  inhale frame_across_stmt_WriteRef_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut u32)
  inhale owns_as_WriteRef_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _2, version)
  // assume Allocated(_4: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(5,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut u32)
  inhale owns_as_Allocated_MutRef$U32__$TY$__$int$$Address$MutRef$U32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut u32)
  inhale frame_across_call_ShallowlyOwned_MutRef$U32__$TY$__Address$MutRef$U32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _2, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_6: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(5,
    _6, version)
  
  // [mir] _6 = move _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(_6,
    version) ==
    deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(_2,
    old_version)
  // Place _2 has been moved
  inhale move__Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(_2,
    old_version, _6, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_6: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_6: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(5,
    _6, version)
  
  // [mir] _5 = test_1(move _6) -> [return: bb2, unwind: bb3]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_6: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_6,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_6: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _6, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_6: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(5,
    _6, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(-1,
    _6, version)
  // frame ShallowlyOwned(arg#0: lib::T<'_>)
  inhale frame_across_call_ShallowlyOwned_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  goto bb2
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_1: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_2: lib::T<'_>)
  inhale owns_as_Allocated_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _1,
    version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$private_references$$lib$$T$1$
  var _2: Address$U32
  var _3: Address$MutRef$Adt$private_references$$lib$$T$1$
  var _4: Address$U32
  var _5: Address$MutRef$Adt$private_references$$lib$$T$1$
  var _6: Address$Tuple0
  var _7: Address$Bool
  var _8: Address$Bool
  var _9: Address$U32
  var _10: Address$U32
  var _11: Address$Never
  var __t0: Bool
  
  label start
  // ========== start ==========
  // Def path: "private_references::test_2"
  
  // Library ownership axioms of 8 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _2,
    version)
  // assume Allocated(_3: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _3, version)
  
  // [mir] _3 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    version) ==
    new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_3: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _2,
    version)
  // assume Allocated(_3: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _3, version)
  
  // [mir] _2 = lib::T::<'_>::query(move _3) -> [return: bb1, unwind: bb5]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_3: &mut lib::T<'_>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_3: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _3, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _2,
    version)
  // assume Allocated(_3: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    version)) ==
    convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_2,
    version)) ==
    get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_3,
    version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: &mut lib::T<'_>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _4,
    version)
  // assume Allocated(_5: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _2,
    version)
  
  // [mir] _5 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_5,
    version) ==
    new_memory_snap_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    deref_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$Adt$private_references$$lib$$T$1$(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_5: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _5, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _4,
    version)
  // assume Allocated(_5: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _2,
    version)
  
  // [mir] _4 = lib::T::<'_>::query(move _5) -> [return: bb2, unwind: bb5]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: &mut lib::T<'_>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_5: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _5, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _4,
    version)
  // assume Allocated(_5: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _2,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 2) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_5,
    version)) ==
    convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_5,
    old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_4,
    version)) ==
    get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_5,
    version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut lib::T<'_>)
  inhale owns_as_Allocated_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(-1,
    _5, version)
  // frame ShallowlyOwned(arg#0: &mut lib::T<'_>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb2
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] FakeRead(ForLet(None), _4)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _4,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _4,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _2,
    version)
  // assume Allocated(_9: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(8, _9,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _6, version)
  
  // [mir] _9 = _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_9, version) ==
    deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_2, old_version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: u32)
  inhale frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_9: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _9,
    version)
  // assume Allocated(_10: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _10,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _7, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _4,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(9, _2,
    version)
  // assume Allocated(_9: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(10, _9,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _6, version)
  
  // [mir] _10 = _4
  old_version := version
  version := bumpVersion(version)
  inhale deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_10, version) ==
    deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_4, old_version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_9: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_9,
    old_version, version)
  // assume framing of LocalRef(_4: u32)
  inhale frame_across_stmt_LocalRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_10: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _10,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume WriteRef(_9: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _9,
    version)
  // assume Allocated(_10: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _10,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _7, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(8, _4,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(10, _2,
    version)
  // assume Allocated(_9: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(11, _9,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _6, version)
  
  // [mir] _8 = Eq(move _9, move _10)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_9,
    old_version)) ==
    get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_10,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_10)
  
  // [mir] StorageDead(_9)
  
  // Ownership facts
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _8,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _4,
    version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _8, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(8, _2,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _6, version)
  
  // [mir] _7 = Not(move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_7, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // Ownership facts
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _7,
    version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _4,
    version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _2,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _6, version)
  
  // [mir] switchInt(move _7) -> [0: bb4, otherwise: bb3]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_7,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_4: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb3
  // ========== bb3 ==========
  
  // [mir] StorageLive(_11)
  
  // Ownership facts
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _7,
    version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _4,
    version)
  // assume Allocated(_11: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _11, version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(8, _2,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _6, version)
  
  // [mir] _11 = core::panicking::panic(const "assertion failed: a == b") -> bb5
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: a == b"
  assert false
  // Framing facts
  // assume framing of WriteRef(_4: u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_call_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_7: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_7,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_call_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb4
  // ========== bb4 ==========
  
  // Ownership facts
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_7: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _7,
    version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _7, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(6, _4,
    version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(7, _2,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _6, version)
  
  // [mir] _6 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_6,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_7,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_7: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_7,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_4: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_2: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(2, _2,
    version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(4, _4,
    version)
  // assume Allocated(_2: u32)
  inhale owns_as_Allocated_U32__$TY$__$int$$Address$U32$Version$$bool$(5, _2,
    version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_2: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb2 --> bb4
  goto bb4
  
  label l1
  // ========== l1 ==========
  // MIR edge bb2 --> bb3
  goto bb3
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: lib::T<'_>)
  inhale frame_across_stmt_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__Address$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: lib::T<'_>)
  inhale owns_as_WriteRef_Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_lib$$T$$$openang$$sngquote$a$closeang$$$query()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$U32
  var _1: Address$MutRef$Adt$private_references$$lib$$T$1$
  
  label start
  // ========== start ==========
  // Def path: "private_references::lib::{impl#0}::query"
  
  // Library ownership axioms of 5 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &mut lib::T<'_>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(1,
    _1, version)
  
  // [mir] _0 = (*((*_1).0: &mut u32))
  old_version := version
  version := bumpVersion(version)
  inhale deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_0, version) ==
    get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    old_version))))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: &mut lib::T<'_>)
  inhale frame_across_stmt_ReadRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _0,
    version)
  // assume WriteRef(_1: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut lib::T<'_>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _0,
    version)
  // assume WriteRed(_1: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: u32)
  inhale frame_across_stmt_WriteRef_U32__$TY$__Address$U32$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &mut lib::T<'_>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: u32)
  inhale owns_as_WriteRef_U32__$TY$__$int$$Address$U32$Version$$bool$(1, _0,
    version)
  // assume WriteRed(_1: &mut lib::T<'_>)
  inhale owns_as_WriteRef_MutRef$Adt$private_references$$lib$$T$1$__$TY$__$int$$Address$MutRef$Adt$private_references$$lib$$T$1$$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    version)) ==
    convert_from_memory_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$ValueSnapshot$MutRef$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    pre_version))))))))
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(deref_U32__$TY$__Address$U32$Version$MemorySnapshot$U32(_0,
    version)) ==
    get_memory_field_value_of_U32__$TY$__MemorySnapshot$U32$$int$(get_memory_field_target_snapshot_of_MutRef$U32__$TY$__MemorySnapshot$MutRef$U32$MemorySnapshot$U32(get_memory_field_f$inner_of_Adt$private_references$$lib$$T$1$_ERROR_field_is_not_visible__$TY$__MemorySnapshot$Adt$private_references$$lib$$T$1$$MemorySnapshot$MutRef$U32(get_memory_field_target_snapshot_of_MutRef$Adt$private_references$$lib$$T$1$__$TY$__MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$$MemorySnapshot$Adt$private_references$$lib$$T$1$(deref_MutRef$Adt$private_references$$lib$$T$1$__$TY$__Address$MutRef$Adt$private_references$$lib$$T$1$$Version$MemorySnapshot$MutRef$Adt$private_references$$lib$$T$1$(_1,
    version)))))))))))
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)


method bumpVersion(version: Version) returns (new_version: Version)
