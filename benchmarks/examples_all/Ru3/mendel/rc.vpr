domain Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(base: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function id_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(base: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): Int 
}

domain Address$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(base: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function id_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(base: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): Int 
}

domain Address$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(base: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  version: Version): MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function id_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(base: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  version: Version): Int 
  
  function get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(base: Address$Adt$core$$std$$option$$Option$1$MutRef$I32): Address$MutRef$I32 
  
  function get_base_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(field_addr: Address$MutRef$I32): Address$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  // The base address is determined by the address of field v$Some_f$0
  axiom base_of_field_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1_field$0 {
    (forall base_addr: Address$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(base_addr) }
      base_addr ==
      get_base_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(base_addr)))
  }
}

domain Address$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(base: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function id_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(base: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): Int 
}

domain Address$Bool  {
  
  function deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(base: Address$Bool,
  version: Version): MemorySnapshot$Bool 
  
  function id_Bool__$TY$__Address$Bool$Version$$int$(base: Address$Bool, version: Version): Int 
  
  function _dummy_base_to_field_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Bool_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function deref_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(base: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function id_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(base: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): Int 
}

domain Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function deref_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(base: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function id_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(base: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): Int 
}

domain Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function deref_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(base: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): MemorySnapshot$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function id_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(base: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): Int 
}

domain Address$ConstPtr$I32  {
  
  function deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(base: Address$ConstPtr$I32,
  version: Version): MemorySnapshot$ConstPtr$I32 
  
  function id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(base: Address$ConstPtr$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_ConstPtr$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_ConstPtr$I32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$ConstPtr$TypeParam$Self  {
  
  function deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(base: Address$ConstPtr$TypeParam$Self,
  version: Version): MemorySnapshot$ConstPtr$TypeParam$Self 
  
  function id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(base: Address$ConstPtr$TypeParam$Self,
  version: Version): Int 
  
  function _dummy_base_to_field_of_ConstPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_ConstPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$I32  {
  
  function deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(base: Address$I32,
  version: Version): MemorySnapshot$I32 
  
  function id_I32__$TY$__Address$I32$Version$$int$(base: Address$I32, version: Version): Int 
  
  function _dummy_base_to_field_of_I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_I32_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutPtr$TypeParam$Self  {
  
  function deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(base: Address$MutPtr$TypeParam$Self,
  version: Version): MemorySnapshot$MutPtr$TypeParam$Self 
  
  function id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(base: Address$MutPtr$TypeParam$Self,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutPtr$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutPtr$TypeParam$T  {
  
  function deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(base: Address$MutPtr$TypeParam$T,
  version: Version): MemorySnapshot$MutPtr$TypeParam$T 
  
  function id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(base: Address$MutPtr$TypeParam$T,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutPtr$TypeParam$T_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutPtr$TypeParam$T_variant$0_field$0__$TY$__$int$(): Int 
}

domain Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(base: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function id_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(base: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$MutRef$I32  {
  
  function deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(base: Address$MutRef$I32,
  version: Version): MemorySnapshot$MutRef$I32 
  
  function id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(base: Address$MutRef$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Never  {
  
  function deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(base: Address$Never,
  version: Version): MemorySnapshot$Never 
  
  function id_Never__$TY$__Address$Never$Version$$int$(base: Address$Never,
  version: Version): Int 
}

domain Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(base: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(base: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(base: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(base: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(base: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  version: Version): MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function id_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(base: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$SharedRef$I32  {
  
  function deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(base: Address$SharedRef$I32,
  version: Version): MemorySnapshot$SharedRef$I32 
  
  function id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(base: Address$SharedRef$I32,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$I32_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$I32_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$I32_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$SharedRef$TypeParam$Self  {
  
  function deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(base: Address$SharedRef$TypeParam$Self,
  version: Version): MemorySnapshot$SharedRef$TypeParam$Self 
  
  function id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(base: Address$SharedRef$TypeParam$Self,
  version: Version): Int 
  
  function _dummy_base_to_field_of_SharedRef$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_base_to_field_of_SharedRef$TypeParam$Self_variant$0_field$1__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$TypeParam$Self_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_SharedRef$TypeParam$Self_variant$0_field$1__$TY$__$int$(): Int 
}

domain Address$Tuple0  {
  
  function deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(base: Address$Tuple0,
  version: Version): MemorySnapshot$Tuple0 
  
  function id_Tuple0__$TY$__Address$Tuple0$Version$$int$(base: Address$Tuple0,
  version: Version): Int 
}

domain Address$TypeParam$Self  {
  
  function deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(base: Address$TypeParam$Self,
  version: Version): MemorySnapshot$TypeParam$Self 
  
  function id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(base: Address$TypeParam$Self,
  version: Version): Int 
}

domain Address$TypeParam$T  {
  
  function deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(base: Address$TypeParam$T,
  version: Version): MemorySnapshot$TypeParam$T 
  
  function id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(base: Address$TypeParam$T,
  version: Version): Int 
}

domain Address$Usize  {
  
  function deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(base: Address$Usize,
  version: Version): MemorySnapshot$Usize 
  
  function id_Usize__$TY$__Address$Usize$Version$$int$(base: Address$Usize,
  version: Version): Int 
  
  function _dummy_base_to_field_of_Usize_variant$0_field$0__$TY$__$int$(): Int 
  
  function _dummy_field_to_base_of_Usize_variant$0_field$0__$TY$__$int$(): Int 
}

domain MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  
}

domain MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  
}

domain MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function new_memory_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(): MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(v$Some_f$0: MemorySnapshot$MutRef$I32): MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(snap: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32): Int 
  
  function get_memory_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$MutRef$I32(snap: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32): MemorySnapshot$MutRef$I32 
  
  // Definition of all possible values of the discriminant
  axiom memory_snapshot_valid_discriminants_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall self: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) }
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      0 ||
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      1)
  }
  
  // Definition of discriminant of variant None
  axiom memory_snapshot_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(new_memory_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32()) ==
    0
  }
  
  // Definition of discriminant of variant Some
  axiom memory_snapshot_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1 {
    (forall f$v$Some_f$0: MemorySnapshot$MutRef$I32 ::
      { new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0) }
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0)) ==
      1)
  }
  
  // Definition of the existence of the constructor of variant None
  axiom memory_snapshot_existence_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    (forall self: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) }
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      0 ==>
      self ==
      new_memory_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32())
  }
  
  // Definition of the existence of the constructor of variant Some
  axiom memory_snapshot_existence_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1 {
    (forall self: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) }
      { get_memory_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$MutRef$I32(self) }
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      1 ==>
      self ==
      new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(get_memory_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$MutRef$I32(self)))
  }
  
  // Definition of destructor, field v$Some_f$0
  axiom definition_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1_field$0 {
    (forall f$v$Some_f$0: MemorySnapshot$MutRef$I32 ::
      { new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0) }
      get_memory_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$MutRef$I32(new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0)) ==
      f$v$Some_f$0)
  }
}

domain MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  
}

domain MemorySnapshot$Bool  {
  
  function new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(value: Bool): MemorySnapshot$Bool 
  
  function get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(snap: MemorySnapshot$Bool): Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Bool_variant$0 {
    (forall self: MemorySnapshot$Bool ::
      { get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self) }
      self ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value) }
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  
}

domain MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  
}

domain MemorySnapshot$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  
}

domain MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(target: Address$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32): Address$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target) }
      get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$ConstPtr$Bool  {
  
  function new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(target: Address$Bool): MemorySnapshot$ConstPtr$Bool 
  
  function get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(snap: MemorySnapshot$ConstPtr$Bool): Address$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$Bool_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$Bool ::
      { get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(self) }
      self ==
      new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target) }
      get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$ConstPtr$I32  {
  
  function new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(target: Address$I32): MemorySnapshot$ConstPtr$I32 
  
  function get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(snap: MemorySnapshot$ConstPtr$I32): Address$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$I32_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$I32 ::
      { get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(self) }
      self ==
      new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target) }
      get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$ConstPtr$MutRef$I32  {
  
  function new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(target: Address$MutRef$I32): MemorySnapshot$ConstPtr$MutRef$I32 
  
  function get_memory_field_target_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(snap: MemorySnapshot$ConstPtr$MutRef$I32): Address$MutRef$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$MutRef$I32_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$MutRef$I32 ::
      { get_memory_field_target_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(self) }
      self ==
      new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(get_memory_field_target_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$MutRef$I32_variant$0_field$0 {
    (forall f$target: Address$MutRef$I32 ::
      { new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(f$target) }
      get_memory_field_target_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$ConstPtr$TypeParam$Self  {
  
  function new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(target: Address$TypeParam$Self): MemorySnapshot$ConstPtr$TypeParam$Self 
  
  function get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(snap: MemorySnapshot$ConstPtr$TypeParam$Self): Address$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$TypeParam$Self ::
      { get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target) }
      get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$ConstPtr$Usize  {
  
  function new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(target: Address$Usize): MemorySnapshot$ConstPtr$Usize 
  
  function get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(snap: MemorySnapshot$ConstPtr$Usize): Address$Usize 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_ConstPtr$Usize_variant$0 {
    (forall self: MemorySnapshot$ConstPtr$Usize ::
      { get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(self) }
      self ==
      new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_ConstPtr$Usize_variant$0_field$0 {
    (forall f$target: Address$Usize ::
      { new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(f$target) }
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$I32  {
  
  function new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(value: Int): MemorySnapshot$I32 
  
  function get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(snap: MemorySnapshot$I32): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_I32_variant$0 {
    (forall self: MemorySnapshot$I32 ::
      { get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self) }
      self ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value) }
      get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$Isize  {
  
  function new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(value: Int): MemorySnapshot$Isize 
  
  function get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(snap: MemorySnapshot$Isize): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Isize_variant$0 {
    (forall self: MemorySnapshot$Isize ::
      { get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(self) }
      self ==
      new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Isize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value) }
      get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value)) ==
      f$value)
  }
}

domain MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(target: Address$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_memory_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32): Address$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_memory_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target) }
      get_memory_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutPtr$Bool  {
  
  function new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(target: Address$Bool): MemorySnapshot$MutPtr$Bool 
  
  function get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(snap: MemorySnapshot$MutPtr$Bool): Address$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$Bool_variant$0 {
    (forall self: MemorySnapshot$MutPtr$Bool ::
      { get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(self) }
      self ==
      new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target) }
      get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutPtr$I32  {
  
  function new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(target: Address$I32): MemorySnapshot$MutPtr$I32 
  
  function get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(snap: MemorySnapshot$MutPtr$I32): Address$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$I32_variant$0 {
    (forall self: MemorySnapshot$MutPtr$I32 ::
      { get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(self) }
      self ==
      new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target) }
      get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutPtr$TypeParam$Self  {
  
  function new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(target: Address$TypeParam$Self): MemorySnapshot$MutPtr$TypeParam$Self 
  
  function get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(snap: MemorySnapshot$MutPtr$TypeParam$Self): Address$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$TypeParam$Self_variant$0 {
    (forall self: MemorySnapshot$MutPtr$TypeParam$Self ::
      { get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target) }
      get_memory_field_target_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutPtr$TypeParam$T  {
  
  function new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(target: Address$TypeParam$T): MemorySnapshot$MutPtr$TypeParam$T 
  
  function get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(snap: MemorySnapshot$MutPtr$TypeParam$T): Address$TypeParam$T 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$TypeParam$T_variant$0 {
    (forall self: MemorySnapshot$MutPtr$TypeParam$T ::
      { get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self) }
      self ==
      new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$TypeParam$T_variant$0_field$0 {
    (forall f$target: Address$TypeParam$T ::
      { new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target) }
      get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutPtr$Usize  {
  
  function new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(target: Address$Usize): MemorySnapshot$MutPtr$Usize 
  
  function get_memory_field_target_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$Address$Usize(snap: MemorySnapshot$MutPtr$Usize): Address$Usize 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom memory_snapshot_existence_of_MutPtr$Usize_variant$0 {
    (forall self: MemorySnapshot$MutPtr$Usize ::
      { get_memory_field_target_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$Address$Usize(self) }
      self ==
      new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(get_memory_field_target_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$Address$Usize(self)))
  }
  
  // Definition of destructor, field target
  axiom definition_of_MutPtr$Usize_variant$0_field$0 {
    (forall f$target: Address$Usize ::
      { new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(f$target) }
      get_memory_field_target_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$Address$Usize(new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(f$target)) ==
      f$target)
  }
}

domain MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32): MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(snap: MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32): Address$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(snap: MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32): MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0 {
    (forall self: MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(self) }
      { get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self) }
      self ==
      new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(self),
      get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32, f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$1 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32, f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$MutRef$I32  {
  
  function new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(target_address: Address$I32,
  target_snapshot: MemorySnapshot$I32): MemorySnapshot$MutRef$I32 
  
  function get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(snap: MemorySnapshot$MutRef$I32): Address$I32 
  
  function get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(snap: MemorySnapshot$MutRef$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_MutRef$I32_variant$0 {
    (forall self: MemorySnapshot$MutRef$I32 ::
      { get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(self) }
      { get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(self) }
      self ==
      new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(self),
      get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_MutRef$I32_variant$0_field$0 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_MutRef$I32_variant$0_field$1 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Never  {
  
  
}

domain MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(target_address: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$1 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32): MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(snap: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32): Address$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(snap: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32): MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32, f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$1 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32, f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(target_address: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  target_snapshot: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32): MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(snap: MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32): Address$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(snap: MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32): MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0_field$0 {
    (forall f$target_address: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    f$target_snapshot: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0_field$1 {
    (forall f$target_address: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    f$target_snapshot: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(target_address: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  target_snapshot: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32): Address$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_memory_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      { get_memory_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self),
      get_memory_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target_address: Address$Adt$std$$std$$sync$$Mutex$1$I32, f$target_snapshot: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$1 {
    (forall f$target_address: Address$Adt$std$$std$$sync$$Mutex$1$I32, f$target_snapshot: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$I32  {
  
  function new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(target_address: Address$I32,
  target_snapshot: MemorySnapshot$I32): MemorySnapshot$SharedRef$I32 
  
  function get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(snap: MemorySnapshot$SharedRef$I32): Address$I32 
  
  function get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(snap: MemorySnapshot$SharedRef$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$I32_variant$0 {
    (forall self: MemorySnapshot$SharedRef$I32 ::
      { get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(self) }
      { get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(self) }
      self ==
      new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(self),
      get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$I32_variant$0_field$0 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$I32_variant$0_field$1 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(new_memory_snap_of_SharedRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$I32(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$SharedRef$TypeParam$Self  {
  
  function new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(target_address: Address$TypeParam$Self,
  target_snapshot: MemorySnapshot$TypeParam$Self): MemorySnapshot$SharedRef$TypeParam$Self 
  
  function get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(snap: MemorySnapshot$SharedRef$TypeParam$Self): Address$TypeParam$Self 
  
  function get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(snap: MemorySnapshot$SharedRef$TypeParam$Self): MemorySnapshot$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant reference
  axiom memory_snapshot_existence_of_SharedRef$TypeParam$Self_variant$0 {
    (forall self: MemorySnapshot$SharedRef$TypeParam$Self ::
      { get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(self) }
      { get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(self) }
      self ==
      new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(self),
      get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target_address
  axiom definition_of_SharedRef$TypeParam$Self_variant$0_field$0 {
    (forall f$target_address: Address$TypeParam$Self, f$target_snapshot: MemorySnapshot$TypeParam$Self ::
      { new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot)) ==
      f$target_address)
  }
  
  // Definition of destructor, field target_snapshot
  axiom definition_of_SharedRef$TypeParam$Self_variant$0_field$1 {
    (forall f$target_address: Address$TypeParam$Self, f$target_snapshot: MemorySnapshot$TypeParam$Self ::
      { new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot) }
      get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(new_memory_snap_of_SharedRef$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$TypeParam$Self$MemorySnapshot$SharedRef$TypeParam$Self(f$target_address,
      f$target_snapshot)) ==
      f$target_snapshot)
  }
}

domain MemorySnapshot$Tuple0  {
  
  function new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0(): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: MemorySnapshot$Tuple0 ::self ==
      new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0())
  }
}

domain MemorySnapshot$Tuple2$Usize$Bool  {
  
  function new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(f$0: MemorySnapshot$Usize,
  f$1: MemorySnapshot$Bool): MemorySnapshot$Tuple2$Usize$Bool 
  
  function get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(snap: MemorySnapshot$Tuple2$Usize$Bool): MemorySnapshot$Usize 
  
  function get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(snap: MemorySnapshot$Tuple2$Usize$Bool): MemorySnapshot$Bool 
  
  // Definition of the existence of the constructor of variant tuple
  axiom memory_snapshot_existence_of_Tuple2$Usize$Bool_variant$0 {
    (forall self: MemorySnapshot$Tuple2$Usize$Bool ::
      { get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(self) }
      { get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(self) }
      self ==
      new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(self),
      get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(self)))
  }
  
  // Definition of destructor, field f$0
  axiom definition_of_Tuple2$Usize$Bool_variant$0_field$0 {
    (forall f$f$0: MemorySnapshot$Usize, f$f$1: MemorySnapshot$Bool ::
      { new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1) }
      get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1)) ==
      f$f$0)
  }
  
  // Definition of destructor, field f$1
  axiom definition_of_Tuple2$Usize$Bool_variant$0_field$1 {
    (forall f$f$0: MemorySnapshot$Usize, f$f$1: MemorySnapshot$Bool ::
      { new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1) }
      get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1)) ==
      f$f$1)
  }
}

domain MemorySnapshot$TypeParam$Self  {
  
  
}

domain MemorySnapshot$TypeParam$T  {
  
  
}

domain MemorySnapshot$Usize  {
  
  function new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(value: Int): MemorySnapshot$Usize 
  
  function get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(snap: MemorySnapshot$Usize): Int 
  
  // Definition of the existence of the constructor of variant primitive
  axiom memory_snapshot_existence_of_Usize_variant$0 {
    (forall self: MemorySnapshot$Usize ::
      { get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(self) }
      self ==
      new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom definition_of_Usize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value) }
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) ==
      f$value)
  }
}

domain Ownership$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_definition_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v1) ==
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom same_id_shallow_definition_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v1) ==
      id_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom moved_definition_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a1: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a1,
      v1) ==
      id_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a2,
      v2) &&
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a1,
      v1) ==
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))
  }
}

domain Ownership$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_definition_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1) ==
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$alloc$$std$$rc$$Rc$1$I32
  axiom same_id_shallow_definition_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v1) ==
      id_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$alloc$$std$$rc$$Rc$1$I32
  axiom moved_definition_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a1: Address$Adt$alloc$$std$$rc$$Rc$1$I32, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a1,
      v1) ==
      id_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a2,
      v2) &&
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a1,
      v1) ==
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))
  }
}

domain Ownership$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, a2: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v2: Version): Bool 
  
  // The snapshot and address definitions agree on field v$Some_f$0
  axiom agree_snap_addr_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1_field$0 {
    (forall v: Version, base_addr: Address$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(base_addr,
      v) }
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(base_addr),
      v) ==
      get_memory_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$MutRef$I32(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(base_addr,
      v)))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field v$Some_f$0: WriteRef ==> WriteRef
  axiom ownership_of_field_v$Some_f$0_from_WriteRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$Some_f$0: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_v$Some_f$0_from_WriteRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$Some_f$0: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_v$Some_f$0_from_WriteRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership of field v$Some_f$0: LocalRef ==> LocalRef
  axiom ownership_of_field_v$Some_f$0_from_LocalRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$Some_f$0: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_v$Some_f$0_from_LocalRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$Some_f$0: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_v$Some_f$0_from_LocalRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership of field v$Some_f$0: ReadRef ==> ReadRef
  axiom ownership_of_field_v$Some_f$0_from_ReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$Some_f$0: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_v$Some_f$0_from_ReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$Some_f$0: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_v$Some_f$0_from_ReadRef_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership of field v$Some_f$0: Write ==> Write
  axiom ownership_of_field_v$Some_f$0_from_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$Some_f$0: Write ==> Write
  axiom ownership_across_stmt_of_field_v$Some_f$0_from_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$Some_f$0: Write ==> Write
  axiom ownership_across_call_of_field_v$Some_f$0_from_Write_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership of field v$Some_f$0: Allocated ==> Allocated
  axiom ownership_of_field_v$Some_f$0_from_Allocated_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$Some_f$0: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_v$Some_f$0_from_Allocated_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$Some_f$0: Allocated ==> Allocated
  axiom ownership_across_call_of_field_v$Some_f$0_from_Allocated_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership of field v$Some_f$0: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_v$Some_f$0_from_DeeplyUnreachable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$Some_f$0: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_v$Some_f$0_from_DeeplyUnreachable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$Some_f$0: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_v$Some_f$0_from_DeeplyUnreachable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership of field v$Some_f$0: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_of_field_v$Some_f$0_from_ShallowlyOwned_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version ::
      { owns_as_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      owns_as_ShallowlyOwned_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v))
  }
  
  // Ownership across statement of field v$Some_f$0: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_across_stmt_of_field_v$Some_f$0_from_ShallowlyOwned_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_stmt_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_stmt_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Ownership across call of field v$Some_f$0: ShallowlyOwned ==> ShallowlyOwned
  axiom ownership_across_call_of_field_v$Some_f$0_from_ShallowlyOwned_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version,
    v2: Version ::
      { frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)) ==
      1 ==>
      frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { frame_across_call_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_definition_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v1) ==
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom same_id_shallow_definition_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a,
      v1) ==
      id_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom same_id_shallow_definition_of_variant_0_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    true
  }
  
  // Shallow id framing definition of variant 1 of Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom same_id_shallow_definition_of_variant_1_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v1)) ==
      1 ==>
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a),
      v1, v2))
  }
  
  // Move definition of Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom moved_definition_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a1: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, a2: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a1,
      v1) ==
      id_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a2,
      v2) &&
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a1,
      v1) ==
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom moved_definition_of_variant_0_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    true
  }
  
  // Move definition of variant 1 of Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom moved_definition_of_variant_1_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a1: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, a2: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { move__Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) &&
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a1,
      v1)) ==
      1 ==>
      move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a1),
      v1, get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(a2),
      v2))
  }
  
  // Framing across stmt of a shallowly unreachable place Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_stmt_of_shallowly_unreachable_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_call_of_shallowly_unreachable_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v1)) ==
      get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v2)))
  }
}

domain Ownership$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1: Address$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_definition_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version, v2: Version ::
      { same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v1) ==
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Adt$std$$std$$sync$$Mutex$1$I32
  axiom same_id_shallow_definition_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v1: Version, v2: Version ::
      { same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v1) ==
      id_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Adt$std$$std$$sync$$Mutex$1$I32
  axiom moved_definition_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a1: Address$Adt$std$$std$$sync$$Mutex$1$I32, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a1,
      v1) ==
      id_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a2,
      v2) &&
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a1,
      v1) ==
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))
  }
}

domain Ownership$Bool  {
  
  function owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r: Int,
  a: Address$Bool, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a: Address$Bool,
  v1: Version, v2: Version): Bool 
  
  function move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1: Address$Bool,
  v1: Version, a2: Address$Bool, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall r: Int, a: Address$Bool, v: Version ::
      { owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Bool {
    (forall a: Address$Bool, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Immutable_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_Write_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v),
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a, v) &&
      owns_as_Read_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v), owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Bool {
    (forall r: Int, o: Int, a: Address$Bool, v: Version ::
      { owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v), owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Call_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Bool
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Bool
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Bool
  axiom framing_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) }
      same_snap_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1, v2) ==>
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a, v2))
  }
  
  // Shallow id framing definition of Bool
  axiom same_id_shallow_definition_of_Bool {
    (forall a: Address$Bool, v1: Version, v2: Version ::
      { same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_Bool__$TY$__Address$Bool$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Bool
  axiom same_id_shallow_definition_of_variant_0_of_Bool {
    true
  }
  
  // Move definition of Bool
  axiom moved_definition_of_Bool {
    (forall a1: Address$Bool, a2: Address$Bool, v1: Version, v2: Version ::
      { move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) }
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Bool__$TY$__Address$Bool$Version$$int$(a1, v1) ==
      id_Bool__$TY$__Address$Bool$Version$$int$(a2, v2) &&
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a1, v1) ==
      deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(a2, v2))
  }
  
  // Move definition of variant 0 of Bool
  axiom moved_definition_of_variant_0_of_Bool {
    true
  }
}

domain Ownership$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, a2: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_definition_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1) ==
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom same_id_shallow_definition_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v1) ==
      id_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom moved_definition_of_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a1: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    a2: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { move__Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a1,
      v1) ==
      id_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a2,
      v2) &&
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a1,
      v1) ==
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))
  }
}

domain Ownership$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, a2: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_definition_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1) ==
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom same_id_shallow_definition_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v1) ==
      id_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom moved_definition_of_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a1: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    a2: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { move__Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a1,
      v1) ==
      id_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a2,
      v2) &&
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a1,
      v1) ==
      deref_Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))
  }
}

domain Ownership$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function owns_as_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, a2: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_definition_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v1) ==
      deref_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom same_id_shallow_definition_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v1) ==
      id_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v2))
  }
  
  // Move definition of Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom moved_definition_of_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a1: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    a2: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { move__Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a1,
      v1) ==
      id_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a2,
      v2) &&
      deref_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a1,
      v1) ==
      deref_Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))
  }
}

domain Ownership$ConstPtr$I32  {
  
  function owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r: Int,
  a: Address$ConstPtr$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a: Address$ConstPtr$I32,
  v1: Version, v2: Version): Bool 
  
  function move__ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Address$ConstPtr$I32$Version$$bool$(a1: Address$ConstPtr$I32,
  v1: Version, a2: Address$ConstPtr$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$I32 {
    (forall r: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_ConstPtr$I32 {
    (forall r: Int, o: Int, a: Address$ConstPtr$I32, v: Version ::
      { owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> ConstPtr$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of ConstPtr$I32
  axiom framing_definition_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a,
      v1) ==
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a,
      v2))
  }
  
  // Shallow id framing definition of ConstPtr$I32
  axiom same_id_shallow_definition_of_ConstPtr$I32 {
    (forall a: Address$ConstPtr$I32, v1: Version, v2: Version ::
      { same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a, v1) ==
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of ConstPtr$I32
  axiom same_id_shallow_definition_of_variant_0_of_ConstPtr$I32 {
    true
  }
  
  // Move definition of ConstPtr$I32
  axiom moved_definition_of_ConstPtr$I32 {
    (forall a1: Address$ConstPtr$I32, a2: Address$ConstPtr$I32, v1: Version,
    v2: Version ::
      { move__ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Address$ConstPtr$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Address$ConstPtr$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a1, v1) ==
      id_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$$int$(a2, v2) &&
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a1,
      v1) ==
      deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of ConstPtr$I32
  axiom moved_definition_of_variant_0_of_ConstPtr$I32 {
    true
  }
}

domain Ownership$ConstPtr$TypeParam$Self  {
  
  function owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$ConstPtr$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a: Address$ConstPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Address$ConstPtr$TypeParam$Self$Version$$bool$(a1: Address$ConstPtr$TypeParam$Self,
  v1: Version, a2: Address$ConstPtr$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$TypeParam$Self {
    (forall r: Int, a: Address$ConstPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> ConstPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> ConstPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> ConstPtr$TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of ConstPtr$TypeParam$Self
  axiom framing_definition_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a,
      v1) ==
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of ConstPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_ConstPtr$TypeParam$Self {
    (forall a: Address$ConstPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a,
      v1) ==
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of ConstPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_variant_0_of_ConstPtr$TypeParam$Self {
    true
  }
  
  // Move definition of ConstPtr$TypeParam$Self
  axiom moved_definition_of_ConstPtr$TypeParam$Self {
    (forall a1: Address$ConstPtr$TypeParam$Self, a2: Address$ConstPtr$TypeParam$Self,
    v1: Version, v2: Version ::
      { move__ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Address$ConstPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Address$ConstPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a1,
      v1) ==
      id_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$$int$(a2,
      v2) &&
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a1,
      v1) ==
      deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(a2,
      v2))
  }
  
  // Move definition of variant 0 of ConstPtr$TypeParam$Self
  axiom moved_definition_of_variant_0_of_ConstPtr$TypeParam$Self {
    true
  }
}

domain Ownership$I32  {
  
  function owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r: Int,
  a: Address$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a: Address$I32,
  v1: Version, v2: Version): Bool 
  
  function move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1: Address$I32,
  v1: Version, a2: Address$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      { owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall r: Int, a: Address$I32, v: Version ::
      { owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_I32 {
    (forall a: Address$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v),
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v) }
      !(r == o) ==>
      !(owns_as_Unique_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a, v) &&
      owns_as_Read_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_I32 {
    (forall r: Int, o: Int, a: Address$I32, v: Version ::
      { owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v), owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, a,
      v) &&
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(o, a, v)))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2))
  }
  
  // Framing definition of I32
  axiom framing_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) }
      same_snap_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a, v2))
  }
  
  // Shallow id framing definition of I32
  axiom same_id_shallow_definition_of_I32 {
    (forall a: Address$I32, v1: Version, v2: Version ::
      { same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1,
      v2) }
      same_id_shallow_I32__$TY$__Address$I32$Version$Version$$bool$(a, v1, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of I32
  axiom same_id_shallow_definition_of_variant_0_of_I32 {
    true
  }
  
  // Move definition of I32
  axiom moved_definition_of_I32 {
    (forall a1: Address$I32, a2: Address$I32, v1: Version, v2: Version ::
      { move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(a1, v1,
      a2, v2) ==>
      id_I32__$TY$__Address$I32$Version$$int$(a1, v1) ==
      id_I32__$TY$__Address$I32$Version$$int$(a2, v2) &&
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a1, v1) ==
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(a2, v2))
  }
  
  // Move definition of variant 0 of I32
  axiom moved_definition_of_variant_0_of_I32 {
    true
  }
}

domain Ownership$MutPtr$TypeParam$Self  {
  
  function owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a: Address$MutPtr$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Address$MutPtr$TypeParam$Self$Version$$bool$(a1: Address$MutPtr$TypeParam$Self,
  v1: Version, a2: Address$MutPtr$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$Self {
    (forall r: Int, a: Address$MutPtr$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutPtr$TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutPtr$TypeParam$Self
  axiom framing_definition_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a,
      v1) ==
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of MutPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_MutPtr$TypeParam$Self {
    (forall a: Address$MutPtr$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a,
      v1) ==
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutPtr$TypeParam$Self
  axiom same_id_shallow_definition_of_variant_0_of_MutPtr$TypeParam$Self {
    true
  }
  
  // Move definition of MutPtr$TypeParam$Self
  axiom moved_definition_of_MutPtr$TypeParam$Self {
    (forall a1: Address$MutPtr$TypeParam$Self, a2: Address$MutPtr$TypeParam$Self,
    v1: Version, v2: Version ::
      { move__MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Address$MutPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Address$MutPtr$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a1,
      v1) ==
      id_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$$int$(a2,
      v2) &&
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a1,
      v1) ==
      deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutPtr$TypeParam$Self
  axiom moved_definition_of_variant_0_of_MutPtr$TypeParam$Self {
    true
  }
}

domain Ownership$MutPtr$TypeParam$T  {
  
  function owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_Allocated_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r: Int,
  a: Address$MutPtr$TypeParam$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a: Address$MutPtr$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function move__MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Address$MutPtr$TypeParam$T$Version$$bool$(a1: Address$MutPtr$TypeParam$T,
  v1: Version, a2: Address$MutPtr$TypeParam$T, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$T {
    (forall r: Int, a: Address$MutPtr$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutPtr$TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutPtr$TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutPtr$TypeParam$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutPtr$TypeParam$T
  axiom framing_definition_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a,
      v1) ==
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a,
      v2))
  }
  
  // Shallow id framing definition of MutPtr$TypeParam$T
  axiom same_id_shallow_definition_of_MutPtr$TypeParam$T {
    (forall a: Address$MutPtr$TypeParam$T, v1: Version, v2: Version ::
      { same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a,
      v1) ==
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutPtr$TypeParam$T
  axiom same_id_shallow_definition_of_variant_0_of_MutPtr$TypeParam$T {
    true
  }
  
  // Move definition of MutPtr$TypeParam$T
  axiom moved_definition_of_MutPtr$TypeParam$T {
    (forall a1: Address$MutPtr$TypeParam$T, a2: Address$MutPtr$TypeParam$T,
    v1: Version, v2: Version ::
      { move__MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Address$MutPtr$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Address$MutPtr$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a1,
      v1) ==
      id_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$$int$(a2,
      v2) &&
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a1,
      v1) ==
      deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutPtr$TypeParam$T
  axiom moved_definition_of_variant_0_of_MutPtr$TypeParam$T {
    true
  }
}

domain Ownership$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, a2: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_definition_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1) ==
      deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom same_id_shallow_definition_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v1) ==
      id_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    true
  }
  
  // Move definition of MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom moved_definition_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a1: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, a2: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { move__MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a1,
      v1) ==
      id_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a2,
      v2) &&
      deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a1,
      v1) ==
      deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom moved_definition_of_variant_0_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    true
  }
  
  // Invariant of the owning type MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom owning_type_invariant_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2)))
  }
}

domain Ownership$MutRef$I32  {
  
  function owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r: Int,
  a: Address$MutRef$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a: Address$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(a1: Address$MutRef$I32,
  v1: Version, a2: Address$MutRef$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_MutRef$I32 {
    (forall r: Int, o: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: WriteRef ==> WriteRef
  axiom ownership_of_field_target_address_from_WriteRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_stmt_of_field_target_address_from_WriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: WriteRef ==> WriteRef
  axiom ownership_across_call_of_field_target_address_from_WriteRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: LocalRef ==> LocalRef
  axiom ownership_of_field_target_address_from_LocalRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_stmt_of_field_target_address_from_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: LocalRef ==> LocalRef
  axiom ownership_across_call_of_field_target_address_from_LocalRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Write ==> Write
  axiom ownership_of_field_target_address_from_Write_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Write ==> Write
  axiom ownership_across_stmt_of_field_target_address_from_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Write ==> Write
  axiom ownership_across_call_of_field_target_address_from_Write_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> MutRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of MutRef$I32
  axiom framing_definition_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v1) ==
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of MutRef$I32
  axiom same_id_shallow_definition_of_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a, v1) ==
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of MutRef$I32
  axiom same_id_shallow_definition_of_variant_0_of_MutRef$I32 {
    true
  }
  
  // Move definition of MutRef$I32
  axiom moved_definition_of_MutRef$I32 {
    (forall a1: Address$MutRef$I32, a2: Address$MutRef$I32, v1: Version, v2: Version ::
      { move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a1, v1) ==
      id_MutRef$I32__$TY$__Address$MutRef$I32$Version$$int$(a2, v2) &&
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a1,
      v1) ==
      deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of MutRef$I32
  axiom moved_definition_of_variant_0_of_MutRef$I32 {
    true
  }
  
  // Invariant of the owning type MutRef$I32
  axiom owning_type_invariant_of_MutRef$I32 {
    (forall r: Int, a: Address$MutRef$I32, v: Version ::
      { owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_MutRef$I32 {
    (forall a: Address$MutRef$I32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(a,
      v2)))
  }
}

domain Ownership$Never  {
  
  function owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r: Int,
  a: Address$Never, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a: Address$Never,
  v1: Version, v2: Version): Bool 
  
  function move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1: Address$Never,
  v1: Version, a2: Address$Never, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Write_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Local_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      owns_as_Immutable_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_Read_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall r: Int, a: Address$Never, v: Version ::
      { owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Never__$TY$__$int$$Address$Never$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Never {
    (forall a: Address$Never, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Call_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Never
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Never
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Never
  axiom framing_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) }
      same_snap_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1, v2) ==>
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a, v2))
  }
  
  // Shallow id framing definition of Never
  axiom same_id_shallow_definition_of_Never {
    (forall a: Address$Never, v1: Version, v2: Version ::
      { same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Never__$TY$__Address$Never$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a, v2))
  }
  
  // Move definition of Never
  axiom moved_definition_of_Never {
    (forall a1: Address$Never, a2: Address$Never, v1: Version, v2: Version ::
      { move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) }
      move__Never__$TY$__Address$Never$Version$Address$Never$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Never__$TY$__Address$Never$Version$$int$(a1, v1) ==
      id_Never__$TY$__Address$Never$Version$$int$(a2, v2) &&
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a1, v1) ==
      deref_Never__$TY$__Address$Never$Version$MemorySnapshot$Never(a2, v2))
  }
}

domain Ownership$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v1: Version, a2: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom framing_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v1) ==
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom same_id_shallow_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v1) ==
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    true
  }
  
  // Move definition of SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom moved_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a1: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    a2: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { move__SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a1,
      v1) ==
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$int$(a2,
      v2) &&
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a1,
      v1) ==
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom moved_definition_of_variant_0_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    true
  }
  
  // Invariant of the owning type SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  axiom owning_type_invariant_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v2)))
  }
}

domain Ownership$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  v1: Version, a2: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v: Version ::
      { owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom framing_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1) ==
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom same_id_shallow_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v1) ==
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    true
  }
  
  // Move definition of SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom moved_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a1: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, a2: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
    v1: Version, v2: Version ::
      { move__SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a1,
      v1) ==
      id_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$int$(a2,
      v2) &&
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a1,
      v1) ==
      deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom moved_definition_of_variant_0_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    true
  }
  
  // Invariant of the owning type SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  axiom owning_type_invariant_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall a: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32, v1: Version,
    v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v2)))
  }
}

domain Ownership$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v1: Version, a2: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
  v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom framing_definition_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v1) ==
      deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom same_id_shallow_definition_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a,
      v1) ==
      id_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    true
  }
  
  // Move definition of SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom moved_definition_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a1: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    a2: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32, v1: Version,
    v2: Version ::
      { move__SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a1,
      v1) ==
      id_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$int$(a2,
      v2) &&
      deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a1,
      v1) ==
      deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom moved_definition_of_variant_0_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    true
  }
  
  // Invariant of the owning type SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  axiom owning_type_invariant_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall r: Int, a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v: Version ::
      { owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(r,
      a, v) ==>
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall a: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32,
    v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(a,
      v2)))
  }
}

domain Ownership$SharedRef$I32  {
  
  function owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r: Int,
  a: Address$SharedRef$I32, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a: Address$SharedRef$I32,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(a1: Address$SharedRef$I32,
  v1: Version, a2: Address$SharedRef$I32, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Write_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Unique_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_Read_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_SharedRef$I32 {
    (forall r: Int, o: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v), owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(o,
      a, v)))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_I32__$TY$__$int$$Address$I32$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$I32
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$I32
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$I32
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$I32
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$I32
  axiom framing_definition_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v1) ==
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$I32
  axiom same_id_shallow_definition_of_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a, v1) ==
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$I32
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$I32 {
    true
  }
  
  // Move definition of SharedRef$I32
  axiom moved_definition_of_SharedRef$I32 {
    (forall a1: Address$SharedRef$I32, a2: Address$SharedRef$I32, v1: Version,
    v2: Version ::
      { move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Address$SharedRef$I32$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a1, v1) ==
      id_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$$int$(a2, v2) &&
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a1,
      v1) ==
      deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$I32
  axiom moved_definition_of_variant_0_of_SharedRef$I32 {
    true
  }
  
  // Invariant of the owning type SharedRef$I32
  axiom owning_type_invariant_of_SharedRef$I32 {
    (forall r: Int, a: Address$SharedRef$I32, v: Version ::
      { owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(r,
      a, v) ==>
      deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$I32 {
    (forall a: Address$SharedRef$I32, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(a,
      v2)))
  }
}

domain Ownership$SharedRef$TypeParam$Self  {
  
  function owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$SharedRef$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a: Address$SharedRef$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Address$SharedRef$TypeParam$Self$Version$$bool$(a1: Address$SharedRef$TypeParam$Self,
  v1: Version, a2: Address$SharedRef$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership of field target_address: ReadRef ==> ReadRef
  axiom ownership_of_field_target_address_from_ReadRef_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_stmt_of_field_target_address_from_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: ReadRef ==> ReadRef
  axiom ownership_across_call_of_field_target_address_from_ReadRef_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: Allocated ==> Allocated
  axiom ownership_of_field_target_address_from_Allocated_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: Allocated ==> Allocated
  axiom ownership_across_stmt_of_field_target_address_from_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: Allocated ==> Allocated
  axiom ownership_across_call_of_field_target_address_from_Allocated_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Allocated_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v))
  }
  
  // Ownership across statement of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_stmt_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Ownership across call of field target_address: DeeplyUnreachable ==> DeeplyUnreachable
  axiom ownership_across_call_of_field_target_address_from_DeeplyUnreachable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> SharedRef$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> SharedRef$TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> SharedRef$TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of SharedRef$TypeParam$Self
  axiom framing_definition_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v1) ==
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of SharedRef$TypeParam$Self
  axiom same_id_shallow_definition_of_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a,
      v1) ==
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a,
      v2))
  }
  
  // Shallow id framing definition of variant 0 of SharedRef$TypeParam$Self
  axiom same_id_shallow_definition_of_variant_0_of_SharedRef$TypeParam$Self {
    true
  }
  
  // Move definition of SharedRef$TypeParam$Self
  axiom moved_definition_of_SharedRef$TypeParam$Self {
    (forall a1: Address$SharedRef$TypeParam$Self, a2: Address$SharedRef$TypeParam$Self,
    v1: Version, v2: Version ::
      { move__SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Address$SharedRef$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Address$SharedRef$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a1,
      v1) ==
      id_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$$int$(a2,
      v2) &&
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a1,
      v1) ==
      deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a2,
      v2))
  }
  
  // Move definition of variant 0 of SharedRef$TypeParam$Self
  axiom moved_definition_of_variant_0_of_SharedRef$TypeParam$Self {
    true
  }
  
  // Invariant of the owning type SharedRef$TypeParam$Self
  axiom owning_type_invariant_of_SharedRef$TypeParam$Self {
    (forall r: Int, a: Address$SharedRef$TypeParam$Self, v: Version ::
      { owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Allocated_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)), v) ==
      get_memory_field_target_snapshot_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$MemorySnapshot$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v)))
  }
  
  // Framing across stmt of a shallowly unreachable place
  axiom framing_across_stmt_of_shallowly_unreachable_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v2)))
  }
  
  // Framing across call of a shallowly unreachable place
  axiom framing_across_call_of_shallowly_unreachable_SharedRef$TypeParam$Self {
    (forall a: Address$SharedRef$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_ShallowlyOwned_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v1)) ==
      get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(a,
      v2)))
  }
}

domain Ownership$Tuple0  {
  
  function owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r: Int,
  a: Address$Tuple0, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a: Address$Tuple0,
  v1: Version, v2: Version): Bool 
  
  function move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1: Address$Tuple0,
  v1: Version, a2: Address$Tuple0, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Write_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Local_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      owns_as_Immutable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v) }
      { owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_Read_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall r: Int, a: Address$Tuple0, v: Version ::
      { owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Tuple0 {
    (forall a: Address$Tuple0, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Call_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> Tuple0
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Tuple0
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of Tuple0
  axiom framing_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1,
      v2) }
      same_snap_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a, v1, v2) ==>
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a, v2))
  }
  
  // Shallow id framing definition of Tuple0
  axiom same_id_shallow_definition_of_Tuple0 {
    (forall a: Address$Tuple0, v1: Version, v2: Version ::
      { same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(a,
      v1, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Tuple0
  axiom same_id_shallow_definition_of_variant_0_of_Tuple0 {
    true
  }
  
  // Move definition of Tuple0
  axiom moved_definition_of_Tuple0 {
    (forall a1: Address$Tuple0, a2: Address$Tuple0, v1: Version, v2: Version ::
      { move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) }
      move__Tuple0__$TY$__Address$Tuple0$Version$Address$Tuple0$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a1, v1) ==
      id_Tuple0__$TY$__Address$Tuple0$Version$$int$(a2, v2) &&
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a1, v1) ==
      deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(a2, v2))
  }
  
  // Move definition of variant 0 of Tuple0
  axiom moved_definition_of_variant_0_of_Tuple0 {
    true
  }
}

domain Ownership$TypeParam$Self  {
  
  function owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function owns_as_NoWriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r: Int,
  a: Address$TypeParam$Self, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a: Address$TypeParam$Self,
  v1: Version, v2: Version): Bool 
  
  function move__TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Address$TypeParam$Self$Version$$bool$(a1: Address$TypeParam$Self,
  v1: Version, a2: Address$TypeParam$Self, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Write_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Local_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_Read_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$Self {
    (forall r: Int, a: Address$TypeParam$Self, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_TypeParam$Self__$TY$__$int$$Address$TypeParam$Self$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$Self
  axiom framing_across_Call_implied_by_ownership_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$Self
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> TypeParam$Self
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of TypeParam$Self
  axiom framing_definition_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a,
      v1) ==
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a,
      v2))
  }
  
  // Shallow id framing definition of TypeParam$Self
  axiom same_id_shallow_definition_of_TypeParam$Self {
    (forall a: Address$TypeParam$Self, v1: Version, v2: Version ::
      { same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Version$$bool$(a,
      v1, v2) ==>
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a, v1) ==
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a, v2))
  }
  
  // Move definition of TypeParam$Self
  axiom moved_definition_of_TypeParam$Self {
    (forall a1: Address$TypeParam$Self, a2: Address$TypeParam$Self, v1: Version,
    v2: Version ::
      { move__TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Address$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) }
      move__TypeParam$Self__$TY$__Address$TypeParam$Self$Version$Address$TypeParam$Self$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a1, v1) ==
      id_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$$int$(a2, v2) &&
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a1,
      v1) ==
      deref_TypeParam$Self__$TY$__Address$TypeParam$Self$Version$MemorySnapshot$TypeParam$Self(a2,
      v2))
  }
}

domain Ownership$TypeParam$T  {
  
  function owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_Allocated_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function owns_as_NoWriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r: Int,
  a: Address$TypeParam$T, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a: Address$TypeParam$T,
  v1: Version, v2: Version): Bool 
  
  function move__TypeParam$T__$TY$__Address$TypeParam$T$Version$Address$TypeParam$T$Version$$bool$(a1: Address$TypeParam$T,
  v1: Version, a2: Address$TypeParam$T, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Write_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Local_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Immutable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Allocated_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_Read_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Allocated_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$T {
    (forall r: Int, a: Address$TypeParam$T, v: Version ::
      { owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Immutable ==> TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$T
  axiom framing_across_Call_implied_by_ownership_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: Unique ==> TypeParam$T
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> TypeParam$T
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) &&
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2))
  }
  
  // Framing definition of TypeParam$T
  axiom framing_definition_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_snap_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a,
      v1) ==
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a,
      v2))
  }
  
  // Shallow id framing definition of TypeParam$T
  axiom same_id_shallow_definition_of_TypeParam$T {
    (forall a: Address$TypeParam$T, v1: Version, v2: Version ::
      { same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(a,
      v1, v2) ==>
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a, v1) ==
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a, v2))
  }
  
  // Move definition of TypeParam$T
  axiom moved_definition_of_TypeParam$T {
    (forall a1: Address$TypeParam$T, a2: Address$TypeParam$T, v1: Version, v2: Version ::
      { move__TypeParam$T__$TY$__Address$TypeParam$T$Version$Address$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) }
      move__TypeParam$T__$TY$__Address$TypeParam$T$Version$Address$TypeParam$T$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a1, v1) ==
      id_TypeParam$T__$TY$__Address$TypeParam$T$Version$$int$(a2, v2) &&
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a1,
      v1) ==
      deref_TypeParam$T__$TY$__Address$TypeParam$T$Version$MemorySnapshot$TypeParam$T(a2,
      v2))
  }
}

domain Ownership$Usize  {
  
  function owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_ShallowlyOwned_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r: Int,
  a: Address$Usize, v: Version): Bool 
  
  function frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_ShallowlyOwned_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_ShallowlyOwned_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a: Address$Usize,
  v1: Version, v2: Version): Bool 
  
  function move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1: Address$Usize,
  v1: Version, a2: Address$Usize, v2: Version): Bool 
  
  // Ownership implication: WriteRef ==> Unique
  axiom ownership_implication_at_from_WriteRef_to_Unique_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Unique
  axiom ownership_implication_across_stmt_from_WriteRef_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Unique
  axiom ownership_implication_across_call_from_WriteRef_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> Write
  axiom ownership_implication_at_from_WriteRef_to_Write_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: WriteRef ==> Write
  axiom ownership_implication_across_stmt_from_WriteRef_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> Write
  axiom ownership_implication_across_call_from_WriteRef_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: WriteRef ==> LocalRef
  axiom ownership_implication_at_from_WriteRef_to_LocalRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: WriteRef ==> LocalRef
  axiom ownership_implication_across_stmt_from_WriteRef_to_LocalRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: WriteRef ==> LocalRef
  axiom ownership_implication_across_call_from_WriteRef_to_LocalRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> Local
  axiom ownership_implication_at_from_LocalRef_to_Local_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: LocalRef ==> Local
  axiom ownership_implication_across_stmt_from_LocalRef_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> Local
  axiom ownership_implication_across_call_from_LocalRef_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: LocalRef ==> ReadRef
  axiom ownership_implication_at_from_LocalRef_to_ReadRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_LocalRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: LocalRef ==> ReadRef
  axiom ownership_implication_across_stmt_from_LocalRef_to_ReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: LocalRef ==> ReadRef
  axiom ownership_implication_across_call_from_LocalRef_to_ReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Local
  axiom ownership_implication_at_from_Unique_to_Local_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Local
  axiom ownership_implication_across_stmt_from_Unique_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Local
  axiom ownership_implication_across_call_from_Unique_to_Local_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Unique ==> Write
  axiom ownership_implication_at_from_Unique_to_Write_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Unique ==> Write
  axiom ownership_implication_across_stmt_from_Unique_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Unique ==> Write
  axiom ownership_implication_across_call_from_Unique_to_Write_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: ReadRef ==> Immutable
  axiom ownership_implication_at_from_ReadRef_to_Immutable_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: ReadRef ==> Immutable
  axiom ownership_implication_across_stmt_from_ReadRef_to_Immutable_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: ReadRef ==> Immutable
  axiom ownership_implication_across_call_from_ReadRef_to_Immutable_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Write ==> Read
  axiom ownership_implication_at_from_Write_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Write ==> Read
  axiom ownership_implication_across_stmt_from_Write_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Write ==> Read
  axiom ownership_implication_across_call_from_Write_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Write_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Local ==> Read
  axiom ownership_implication_at_from_Local_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Local ==> Read
  axiom ownership_implication_across_stmt_from_Local_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Local ==> Read
  axiom ownership_implication_across_call_from_Local_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Immutable ==> Read
  axiom ownership_implication_at_from_Immutable_to_Read_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) ==>
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: Immutable ==> Read
  axiom ownership_implication_across_stmt_from_Immutable_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Immutable ==> Read
  axiom ownership_implication_across_call_from_Immutable_to_Read_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: Read ==> Allocated
  axiom ownership_implication_at_from_Read_to_Allocated_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) }
      { owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v) ==>
      owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: Read ==> Allocated
  axiom ownership_implication_across_stmt_from_Read_to_Allocated_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: Read ==> Allocated
  axiom ownership_implication_across_call_from_Read_to_Allocated_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_Read_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Allocated_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> Unique
  axiom ownership_implication_at_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> Unique
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_Unique_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoReadRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoReadRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_at_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall r: Int, a: Address$Usize, v: Version ::
      { owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      { owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) }
      owns_as_DeeplyUnreachable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v))
  }
  
  // Ownership implication across stmt: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_stmt_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership implication across call: DeeplyUnreachable ==> NoWriteRef
  axiom ownership_implication_across_call_from_DeeplyUnreachable_to_NoWriteRef_of_Usize {
    (forall a: Address$Usize, v: Version, v2: Version ::
      { frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      { frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_DeeplyUnreachable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v, v2))
  }
  
  // Ownership incompatibility: Immutable -- Write
  axiom ownership_incompatibility_at_between_Immutable_Write_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_Immutable_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_Write_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: Unique -- Read
  axiom ownership_incompatibility_at_between_Unique_Read_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v), owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v) }
      !(r == o) ==>
      !(owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, a,
      v) &&
      owns_as_Read_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a, v)))
  }
  
  // Ownership incompatibility: NoReadRef -- ReadRef
  axiom ownership_incompatibility_at_between_NoReadRef_ReadRef_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_ReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v)))
  }
  
  // Ownership incompatibility: NoWriteRef -- WriteRef
  axiom ownership_incompatibility_at_between_NoWriteRef_WriteRef_of_Usize {
    (forall r: Int, o: Int, a: Address$Usize, v: Version ::
      { owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v), owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o,
      a, v) }
      !(r == o) ==>
      !(owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      a, v) &&
      owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(o, a,
      v)))
  }
  
  // Framing implied by ownership: Immutable ==> Usize
  axiom framing_across_Call_implied_by_ownership_Immutable_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Immutable ==> Usize
  axiom framing_across_Stmt_implied_by_ownership_Immutable_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Immutable_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Usize
  axiom framing_across_Call_implied_by_ownership_Unique_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: Unique ==> Usize
  axiom framing_across_Stmt_implied_by_ownership_Unique_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing implied by ownership: NoWriteRef && Local ==> Usize
  axiom framing_across_stmt_implied_by_ownership_NoWriteRef_and_Local_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2), frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) &&
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) ==>
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) &&
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2))
  }
  
  // Framing definition of Usize
  axiom framing_definition_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) }
      same_snap_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1, v2) ==>
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a, v1) ==
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a, v2))
  }
  
  // Shallow id framing definition of Usize
  axiom same_id_shallow_definition_of_Usize {
    (forall a: Address$Usize, v1: Version, v2: Version ::
      { same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a,
      v1, v2) }
      same_id_shallow_Usize__$TY$__Address$Usize$Version$Version$$bool$(a, v1,
      v2) ==>
      id_Usize__$TY$__Address$Usize$Version$$int$(a, v1) ==
      id_Usize__$TY$__Address$Usize$Version$$int$(a, v2))
  }
  
  // Shallow id framing definition of variant 0 of Usize
  axiom same_id_shallow_definition_of_variant_0_of_Usize {
    true
  }
  
  // Move definition of Usize
  axiom moved_definition_of_Usize {
    (forall a1: Address$Usize, a2: Address$Usize, v1: Version, v2: Version ::
      { move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1,
      v1, a2, v2) }
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(a1,
      v1, a2, v2) ==>
      id_Usize__$TY$__Address$Usize$Version$$int$(a1, v1) ==
      id_Usize__$TY$__Address$Usize$Version$$int$(a2, v2) &&
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a1, v1) ==
      deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(a2, v2))
  }
  
  // Move definition of variant 0 of Usize
  axiom moved_definition_of_variant_0_of_Usize {
    true
  }
}

domain ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall value_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) }
      convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall memory_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) }
      convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(snap: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(snap: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32): MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall value_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(value_snapshot)) }
      convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32 {
    (forall memory_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(memory_snapshot)) }
      convert_to_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function new_value_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(): ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(v$Some_f$0: ValueSnapshot$MutRef$I32): ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(snap: ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32): Int 
  
  function get_value_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$MutRef$I32(snap: ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32): ValueSnapshot$MutRef$I32 
  
  function convert_from_memory_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(snap: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32): ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  // Definition of all possible values of the discriminant
  axiom value_snapshot_valid_discriminants_of_Adt$core$$std$$option$$Option$1$MutRef$I32 {
    (forall self: ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) }
      get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      0 ||
      get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      1)
  }
  
  // Definition of discriminant of variant None
  axiom value_snapshot_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(new_value_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32()) ==
    0
  }
  
  // Definition of discriminant of variant Some
  axiom value_snapshot_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1 {
    (forall f$v$Some_f$0: ValueSnapshot$MutRef$I32 ::
      { new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0) }
      get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0)) ==
      1)
  }
  
  // Definition of the existence of the constructor of variant None
  axiom value_snapshot_existence_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    (forall self: ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) }
      get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      0 ==>
      self ==
      new_value_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32())
  }
  
  // Definition of the existence of the constructor of variant Some
  axiom value_snapshot_existence_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1 {
    (forall self: ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) }
      { get_value_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$MutRef$I32(self) }
      get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(self) ==
      1 ==>
      self ==
      new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(get_value_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$MutRef$I32(self)))
  }
  
  // Definition of destructor, field v$Some_f$0
  axiom value_snapshot_definition_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1_field$0 {
    (forall f$v$Some_f$0: ValueSnapshot$MutRef$I32 ::
      { new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0) }
      get_value_field_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$MutRef$I32(new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0)) ==
      f$v$Some_f$0)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    convert_from_memory_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32()) ==
    new_value_snap_v$None_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32()
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Adt$core$$std$$option$$Option$1$MutRef$I32_variant$1 {
    (forall f$v$Some_f$0: MemorySnapshot$MutRef$I32 ::
      { convert_from_memory_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0)) }
      { new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(f$v$Some_f$0)) }
      convert_from_memory_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$v$Some_f$0)) ==
      new_value_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(f$v$Some_f$0)))
  }
}

domain ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall value_snapshot: ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) }
      convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall memory_snapshot: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) }
      convert_to_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Bool  {
  
  function new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(value: Bool): ValueSnapshot$Bool 
  
  function get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(snap: ValueSnapshot$Bool): Bool 
  
  function convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(snap: MemorySnapshot$Bool): ValueSnapshot$Bool 
  
  function convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(snap: ValueSnapshot$Bool): MemorySnapshot$Bool 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Bool_variant$0 {
    (forall self: ValueSnapshot$Bool ::
      { get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self) }
      self ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Bool_variant$0_field$0 {
    (forall f$value: Bool ::
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Bool_variant$0 {
    (forall f$value: Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) }
      { new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(f$value)) ==
      new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Bool_variant$0 {
    (forall v$value: Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) }
      { new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(new_value_snap_of_Bool__$TY$__$bool$$ValueSnapshot$Bool(v$value)) ==
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Bool {
    (forall value_snapshot: ValueSnapshot$Bool ::
      { convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) }
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Bool {
    (forall memory_snapshot: MemorySnapshot$Bool ::
      { convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) }
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(target: Address$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32): Address$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target) }
      get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall f$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) }
      { new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target) }
      convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) ==
      new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall v$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target)) }
      { new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target) }
      convert_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target)) ==
      new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall value_snapshot: ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) }
      convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$Bool  {
  
  function new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(target: Address$Bool): ValueSnapshot$ConstPtr$Bool 
  
  function get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(snap: ValueSnapshot$ConstPtr$Bool): Address$Bool 
  
  function convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(snap: MemorySnapshot$ConstPtr$Bool): ValueSnapshot$ConstPtr$Bool 
  
  function convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(snap: ValueSnapshot$ConstPtr$Bool): MemorySnapshot$ConstPtr$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$Bool_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$Bool ::
      { get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(self) }
      self ==
      new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target) }
      get_value_field_target_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$Address$Bool(new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$Bool_variant$0 {
    (forall f$target: Address$Bool ::
      { convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target)) }
      { new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target) }
      convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(f$target)) ==
      new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$Bool_variant$0 {
    (forall v$target: Address$Bool ::
      { convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(v$target)) }
      { new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(v$target) }
      convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(new_value_snap_of_ConstPtr$Bool__$TY$__Address$Bool$ValueSnapshot$ConstPtr$Bool(v$target)) ==
      new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$Bool {
    (forall value_snapshot: ValueSnapshot$ConstPtr$Bool ::
      { convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(value_snapshot)) }
      convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$Bool {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$Bool ::
      { convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$Bool__$TY$__ValueSnapshot$ConstPtr$Bool$MemorySnapshot$ConstPtr$Bool(convert_from_memory_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$ValueSnapshot$ConstPtr$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$I32  {
  
  function new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(target: Address$I32): ValueSnapshot$ConstPtr$I32 
  
  function get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(snap: ValueSnapshot$ConstPtr$I32): Address$I32 
  
  function convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(snap: MemorySnapshot$ConstPtr$I32): ValueSnapshot$ConstPtr$I32 
  
  function convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(snap: ValueSnapshot$ConstPtr$I32): MemorySnapshot$ConstPtr$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$I32_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$I32 ::
      { get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(self) }
      self ==
      new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target) }
      get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$I32_variant$0 {
    (forall f$target: Address$I32 ::
      { convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target)) }
      { new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target) }
      convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(f$target)) ==
      new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$I32_variant$0 {
    (forall v$target: Address$I32 ::
      { convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(v$target)) }
      { new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(v$target) }
      convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(new_value_snap_of_ConstPtr$I32__$TY$__Address$I32$ValueSnapshot$ConstPtr$I32(v$target)) ==
      new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$I32 {
    (forall value_snapshot: ValueSnapshot$ConstPtr$I32 ::
      { convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(value_snapshot)) }
      convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$I32 {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$I32 ::
      { convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$MemorySnapshot$ConstPtr$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$MutRef$I32  {
  
  function new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(target: Address$MutRef$I32): ValueSnapshot$ConstPtr$MutRef$I32 
  
  function get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(snap: ValueSnapshot$ConstPtr$MutRef$I32): Address$MutRef$I32 
  
  function convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(snap: MemorySnapshot$ConstPtr$MutRef$I32): ValueSnapshot$ConstPtr$MutRef$I32 
  
  function convert_to_memory_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(snap: ValueSnapshot$ConstPtr$MutRef$I32): MemorySnapshot$ConstPtr$MutRef$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$MutRef$I32_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$MutRef$I32 ::
      { get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(self) }
      self ==
      new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$MutRef$I32_variant$0_field$0 {
    (forall f$target: Address$MutRef$I32 ::
      { new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(f$target) }
      get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$MutRef$I32_variant$0 {
    (forall f$target: Address$MutRef$I32 ::
      { convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(f$target)) }
      { new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(f$target) }
      convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(f$target)) ==
      new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$MutRef$I32_variant$0 {
    (forall v$target: Address$MutRef$I32 ::
      { convert_to_memory_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(v$target)) }
      { new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(v$target) }
      convert_to_memory_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(new_value_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(v$target)) ==
      new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$MutRef$I32 {
    (forall value_snapshot: ValueSnapshot$ConstPtr$MutRef$I32 ::
      { convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(convert_to_memory_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(value_snapshot)) }
      convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(convert_to_memory_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$MutRef$I32 {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$MutRef$I32 ::
      { convert_to_memory_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$TypeParam$Self  {
  
  function new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(target: Address$TypeParam$Self): ValueSnapshot$ConstPtr$TypeParam$Self 
  
  function get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(snap: ValueSnapshot$ConstPtr$TypeParam$Self): Address$TypeParam$Self 
  
  function convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(snap: MemorySnapshot$ConstPtr$TypeParam$Self): ValueSnapshot$ConstPtr$TypeParam$Self 
  
  function convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(snap: ValueSnapshot$ConstPtr$TypeParam$Self): MemorySnapshot$ConstPtr$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$TypeParam$Self ::
      { get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target) }
      get_value_field_target_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall f$target: Address$TypeParam$Self ::
      { convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target)) }
      { new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target) }
      convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(f$target)) ==
      new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$TypeParam$Self_variant$0 {
    (forall v$target: Address$TypeParam$Self ::
      { convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(v$target)) }
      { new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(v$target) }
      convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(new_value_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(v$target)) ==
      new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$TypeParam$Self {
    (forall value_snapshot: ValueSnapshot$ConstPtr$TypeParam$Self ::
      { convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(value_snapshot)) }
      convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$TypeParam$Self {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$TypeParam$Self ::
      { convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$TypeParam$Self__$TY$__ValueSnapshot$ConstPtr$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(convert_from_memory_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$ValueSnapshot$ConstPtr$TypeParam$Self(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$ConstPtr$Usize  {
  
  function new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(target: Address$Usize): ValueSnapshot$ConstPtr$Usize 
  
  function get_value_field_target_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$Address$Usize(snap: ValueSnapshot$ConstPtr$Usize): Address$Usize 
  
  function convert_from_memory_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$ValueSnapshot$ConstPtr$Usize(snap: MemorySnapshot$ConstPtr$Usize): ValueSnapshot$ConstPtr$Usize 
  
  function convert_to_memory_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$MemorySnapshot$ConstPtr$Usize(snap: ValueSnapshot$ConstPtr$Usize): MemorySnapshot$ConstPtr$Usize 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_ConstPtr$Usize_variant$0 {
    (forall self: ValueSnapshot$ConstPtr$Usize ::
      { get_value_field_target_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$Address$Usize(self) }
      self ==
      new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(get_value_field_target_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$Address$Usize(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_ConstPtr$Usize_variant$0_field$0 {
    (forall f$target: Address$Usize ::
      { new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(f$target) }
      get_value_field_target_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$Address$Usize(new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_ConstPtr$Usize_variant$0 {
    (forall f$target: Address$Usize ::
      { convert_from_memory_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$ValueSnapshot$ConstPtr$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(f$target)) }
      { new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(f$target) }
      convert_from_memory_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$ValueSnapshot$ConstPtr$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(f$target)) ==
      new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_ConstPtr$Usize_variant$0 {
    (forall v$target: Address$Usize ::
      { convert_to_memory_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$MemorySnapshot$ConstPtr$Usize(new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(v$target)) }
      { new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(v$target) }
      convert_to_memory_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$MemorySnapshot$ConstPtr$Usize(new_value_snap_of_ConstPtr$Usize__$TY$__Address$Usize$ValueSnapshot$ConstPtr$Usize(v$target)) ==
      new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_ConstPtr$Usize {
    (forall value_snapshot: ValueSnapshot$ConstPtr$Usize ::
      { convert_from_memory_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$ValueSnapshot$ConstPtr$Usize(convert_to_memory_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$MemorySnapshot$ConstPtr$Usize(value_snapshot)) }
      convert_from_memory_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$ValueSnapshot$ConstPtr$Usize(convert_to_memory_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$MemorySnapshot$ConstPtr$Usize(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_ConstPtr$Usize {
    (forall memory_snapshot: MemorySnapshot$ConstPtr$Usize ::
      { convert_to_memory_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$MemorySnapshot$ConstPtr$Usize(convert_from_memory_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$ValueSnapshot$ConstPtr$Usize(memory_snapshot)) }
      convert_to_memory_of_ConstPtr$Usize__$TY$__ValueSnapshot$ConstPtr$Usize$MemorySnapshot$ConstPtr$Usize(convert_from_memory_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$ValueSnapshot$ConstPtr$Usize(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$I32  {
  
  function new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(value: Int): ValueSnapshot$I32 
  
  function get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(snap: ValueSnapshot$I32): Int 
  
  function convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(snap: MemorySnapshot$I32): ValueSnapshot$I32 
  
  function convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(snap: ValueSnapshot$I32): MemorySnapshot$I32 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_I32_variant$0 {
    (forall self: ValueSnapshot$I32 ::
      { get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self) }
      self ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_I32_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      get_value_field_value_of_I32__$TY$__ValueSnapshot$I32$$int$(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_I32_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) }
      { new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(f$value)) ==
      new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_I32_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) }
      { new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(new_value_snap_of_I32__$TY$__$int$$ValueSnapshot$I32(v$value)) ==
      new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_I32 {
    (forall value_snapshot: ValueSnapshot$I32 ::
      { convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) }
      convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_I32 {
    (forall memory_snapshot: MemorySnapshot$I32 ::
      { convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) }
      convert_to_memory_of_I32__$TY$__ValueSnapshot$I32$MemorySnapshot$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Isize  {
  
  function new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(value: Int): ValueSnapshot$Isize 
  
  function get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(snap: ValueSnapshot$Isize): Int 
  
  function convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(snap: MemorySnapshot$Isize): ValueSnapshot$Isize 
  
  function convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(snap: ValueSnapshot$Isize): MemorySnapshot$Isize 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Isize_variant$0 {
    (forall self: ValueSnapshot$Isize ::
      { get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(self) }
      self ==
      new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Isize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value) }
      get_value_field_value_of_Isize__$TY$__ValueSnapshot$Isize$$int$(new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Isize_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value)) }
      { new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value) }
      convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(f$value)) ==
      new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Isize_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(v$value)) }
      { new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(v$value) }
      convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(new_value_snap_of_Isize__$TY$__$int$$ValueSnapshot$Isize(v$value)) ==
      new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Isize {
    (forall value_snapshot: ValueSnapshot$Isize ::
      { convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(value_snapshot)) }
      convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Isize {
    (forall memory_snapshot: MemorySnapshot$Isize ::
      { convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(memory_snapshot)) }
      convert_to_memory_of_Isize__$TY$__ValueSnapshot$Isize$MemorySnapshot$Isize(convert_from_memory_of_Isize__$TY$__MemorySnapshot$Isize$ValueSnapshot$Isize(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(target: Address$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_value_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32): Address$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_value_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target) }
      get_value_field_target_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall f$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) }
      { new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target) }
      convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target)) ==
      new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall v$target: Address$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target)) }
      { new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target) }
      convert_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target)) ==
      new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall value_snapshot: ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) }
      convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 {
    (forall memory_snapshot: MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) }
      convert_to_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$Bool  {
  
  function new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(target: Address$Bool): ValueSnapshot$MutPtr$Bool 
  
  function get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(snap: ValueSnapshot$MutPtr$Bool): Address$Bool 
  
  function convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(snap: MemorySnapshot$MutPtr$Bool): ValueSnapshot$MutPtr$Bool 
  
  function convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(snap: ValueSnapshot$MutPtr$Bool): MemorySnapshot$MutPtr$Bool 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$Bool_variant$0 {
    (forall self: ValueSnapshot$MutPtr$Bool ::
      { get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(self) }
      self ==
      new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$Bool_variant$0_field$0 {
    (forall f$target: Address$Bool ::
      { new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target) }
      get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$Bool_variant$0 {
    (forall f$target: Address$Bool ::
      { convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target)) }
      { new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target) }
      convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(f$target)) ==
      new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$Bool_variant$0 {
    (forall v$target: Address$Bool ::
      { convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(v$target)) }
      { new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(v$target) }
      convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(new_value_snap_of_MutPtr$Bool__$TY$__Address$Bool$ValueSnapshot$MutPtr$Bool(v$target)) ==
      new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$Bool {
    (forall value_snapshot: ValueSnapshot$MutPtr$Bool ::
      { convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(value_snapshot)) }
      convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$Bool {
    (forall memory_snapshot: MemorySnapshot$MutPtr$Bool ::
      { convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(memory_snapshot)) }
      convert_to_memory_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$MemorySnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$ValueSnapshot$MutPtr$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$I32  {
  
  function new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(target: Address$I32): ValueSnapshot$MutPtr$I32 
  
  function get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(snap: ValueSnapshot$MutPtr$I32): Address$I32 
  
  function convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(snap: MemorySnapshot$MutPtr$I32): ValueSnapshot$MutPtr$I32 
  
  function convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(snap: ValueSnapshot$MutPtr$I32): MemorySnapshot$MutPtr$I32 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$I32_variant$0 {
    (forall self: ValueSnapshot$MutPtr$I32 ::
      { get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(self) }
      self ==
      new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$I32_variant$0_field$0 {
    (forall f$target: Address$I32 ::
      { new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target) }
      get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$I32_variant$0 {
    (forall f$target: Address$I32 ::
      { convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target)) }
      { new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target) }
      convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(f$target)) ==
      new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$I32_variant$0 {
    (forall v$target: Address$I32 ::
      { convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(v$target)) }
      { new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(v$target) }
      convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(new_value_snap_of_MutPtr$I32__$TY$__Address$I32$ValueSnapshot$MutPtr$I32(v$target)) ==
      new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$I32 {
    (forall value_snapshot: ValueSnapshot$MutPtr$I32 ::
      { convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(value_snapshot)) }
      convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$I32 {
    (forall memory_snapshot: MemorySnapshot$MutPtr$I32 ::
      { convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(memory_snapshot)) }
      convert_to_memory_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$MemorySnapshot$MutPtr$I32(convert_from_memory_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$ValueSnapshot$MutPtr$I32(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$TypeParam$Self  {
  
  function new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(target: Address$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$Self 
  
  function get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(snap: ValueSnapshot$MutPtr$TypeParam$Self): Address$TypeParam$Self 
  
  function convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(snap: MemorySnapshot$MutPtr$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$Self 
  
  function convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(snap: ValueSnapshot$MutPtr$TypeParam$Self): MemorySnapshot$MutPtr$TypeParam$Self 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$TypeParam$Self_variant$0 {
    (forall self: ValueSnapshot$MutPtr$TypeParam$Self ::
      { get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self) }
      self ==
      new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$TypeParam$Self_variant$0_field$0 {
    (forall f$target: Address$TypeParam$Self ::
      { new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target) }
      get_value_field_target_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$Address$TypeParam$Self(new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$TypeParam$Self_variant$0 {
    (forall f$target: Address$TypeParam$Self ::
      { convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target)) }
      { new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target) }
      convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(f$target)) ==
      new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$TypeParam$Self_variant$0 {
    (forall v$target: Address$TypeParam$Self ::
      { convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(v$target)) }
      { new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(v$target) }
      convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(new_value_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(v$target)) ==
      new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$TypeParam$Self {
    (forall value_snapshot: ValueSnapshot$MutPtr$TypeParam$Self ::
      { convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(value_snapshot)) }
      convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$TypeParam$Self {
    (forall memory_snapshot: MemorySnapshot$MutPtr$TypeParam$Self ::
      { convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(memory_snapshot)) }
      convert_to_memory_of_MutPtr$TypeParam$Self__$TY$__ValueSnapshot$MutPtr$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$TypeParam$T  {
  
  function new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(target: Address$TypeParam$T): ValueSnapshot$MutPtr$TypeParam$T 
  
  function get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(snap: ValueSnapshot$MutPtr$TypeParam$T): Address$TypeParam$T 
  
  function convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(snap: MemorySnapshot$MutPtr$TypeParam$T): ValueSnapshot$MutPtr$TypeParam$T 
  
  function convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(snap: ValueSnapshot$MutPtr$TypeParam$T): MemorySnapshot$MutPtr$TypeParam$T 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$TypeParam$T_variant$0 {
    (forall self: ValueSnapshot$MutPtr$TypeParam$T ::
      { get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self) }
      self ==
      new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$TypeParam$T_variant$0_field$0 {
    (forall f$target: Address$TypeParam$T ::
      { new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target) }
      get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$TypeParam$T_variant$0 {
    (forall f$target: Address$TypeParam$T ::
      { convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target)) }
      { new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target) }
      convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(f$target)) ==
      new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$TypeParam$T_variant$0 {
    (forall v$target: Address$TypeParam$T ::
      { convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(v$target)) }
      { new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(v$target) }
      convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(new_value_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(v$target)) ==
      new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$TypeParam$T {
    (forall value_snapshot: ValueSnapshot$MutPtr$TypeParam$T ::
      { convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(value_snapshot)) }
      convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$TypeParam$T {
    (forall memory_snapshot: MemorySnapshot$MutPtr$TypeParam$T ::
      { convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(memory_snapshot)) }
      convert_to_memory_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$T(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutPtr$Usize  {
  
  function new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(target: Address$Usize): ValueSnapshot$MutPtr$Usize 
  
  function get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(snap: ValueSnapshot$MutPtr$Usize): Address$Usize 
  
  function convert_from_memory_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$ValueSnapshot$MutPtr$Usize(snap: MemorySnapshot$MutPtr$Usize): ValueSnapshot$MutPtr$Usize 
  
  function convert_to_memory_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$MemorySnapshot$MutPtr$Usize(snap: ValueSnapshot$MutPtr$Usize): MemorySnapshot$MutPtr$Usize 
  
  // Definition of the existence of the constructor of variant raw_pointer
  axiom value_snapshot_existence_of_MutPtr$Usize_variant$0 {
    (forall self: ValueSnapshot$MutPtr$Usize ::
      { get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(self) }
      self ==
      new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(self)))
  }
  
  // Definition of destructor, field target
  axiom value_snapshot_definition_of_MutPtr$Usize_variant$0_field$0 {
    (forall f$target: Address$Usize ::
      { new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(f$target) }
      get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(f$target)) ==
      f$target)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutPtr$Usize_variant$0 {
    (forall f$target: Address$Usize ::
      { convert_from_memory_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$ValueSnapshot$MutPtr$Usize(new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(f$target)) }
      { new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(f$target) }
      convert_from_memory_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$ValueSnapshot$MutPtr$Usize(new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(f$target)) ==
      new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(f$target))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_MutPtr$Usize_variant$0 {
    (forall v$target: Address$Usize ::
      { convert_to_memory_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$MemorySnapshot$MutPtr$Usize(new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(v$target)) }
      { new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(v$target) }
      convert_to_memory_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$MemorySnapshot$MutPtr$Usize(new_value_snap_of_MutPtr$Usize__$TY$__Address$Usize$ValueSnapshot$MutPtr$Usize(v$target)) ==
      new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(v$target))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_MutPtr$Usize {
    (forall value_snapshot: ValueSnapshot$MutPtr$Usize ::
      { convert_from_memory_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$ValueSnapshot$MutPtr$Usize(convert_to_memory_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$MemorySnapshot$MutPtr$Usize(value_snapshot)) }
      convert_from_memory_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$ValueSnapshot$MutPtr$Usize(convert_to_memory_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$MemorySnapshot$MutPtr$Usize(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_MutPtr$Usize {
    (forall memory_snapshot: MemorySnapshot$MutPtr$Usize ::
      { convert_to_memory_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$MemorySnapshot$MutPtr$Usize(convert_from_memory_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$ValueSnapshot$MutPtr$Usize(memory_snapshot)) }
      convert_to_memory_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$MemorySnapshot$MutPtr$Usize(convert_from_memory_of_MutPtr$Usize__$TY$__MemorySnapshot$MutPtr$Usize$ValueSnapshot$MutPtr$Usize(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function new_value_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(target_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(snap: ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function convert_from_memory_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(snap: MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0 {
    (forall self: ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self) }
      self ==
      new_value_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { new_value_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_value_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32, f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { convert_from_memory_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot)) }
      convert_from_memory_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$MutRef$I32  {
  
  function new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(target_snapshot: ValueSnapshot$I32): ValueSnapshot$MutRef$I32 
  
  function get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(snap: ValueSnapshot$MutRef$I32): ValueSnapshot$I32 
  
  function convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(snap: MemorySnapshot$MutRef$I32): ValueSnapshot$MutRef$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_MutRef$I32_variant$0 {
    (forall self: ValueSnapshot$MutRef$I32 ::
      { get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(self) }
      self ==
      new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_MutRef$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$I32 ::
      { new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_MutRef$I32__$TY$__ValueSnapshot$MutRef$I32$ValueSnapshot$I32(new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_MutRef$I32_variant$0 {
    (forall f$target_address: Address$I32, f$target_snapshot: MemorySnapshot$I32 ::
      { convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$target_snapshot)) }
      convert_from_memory_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$MutRef$I32(new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_MutRef$I32__$TY$__ValueSnapshot$I32$ValueSnapshot$MutRef$I32(convert_from_memory_of_I32__$TY$__MemorySnapshot$I32$ValueSnapshot$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(target_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32  {
  
  function new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(target_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(snap: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  function convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(snap: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32_variant$0 {
    (forall f$target_address: Address$Adt$alloc$$std$$rc$$Rc$1$I32, f$target_snapshot: MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32 ::
      { convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(convert_from_memory_of_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32  {
  
  function new_value_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(target_snapshot: ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32): ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(snap: ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32): ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  function convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(snap: MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32): ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { new_value_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(new_value_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32_variant$0 {
    (forall f$target_address: Address$Adt$core$$std$$option$$Option$1$MutRef$I32,
    f$target_snapshot: MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32 ::
      { convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(convert_from_memory_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(convert_from_memory_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32  {
  
  function new_value_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(target_snapshot: ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function get_value_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(snap: ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32 
  
  function convert_from_memory_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(snap: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32 
  
  // Definition of the existence of the constructor of variant reference
  axiom value_snapshot_existence_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall self: ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { get_value_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(self) }
      self ==
      new_value_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(self)))
  }
  
  // Definition of destructor, field target_snapshot
  axiom value_snapshot_definition_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32_variant$0_field$0 {
    (forall f$target_snapshot: ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { new_value_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot) }
      get_value_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(new_value_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot)) ==
      f$target_snapshot)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32_variant$0 {
    (forall f$target_address: Address$Adt$std$$std$$sync$$Mutex$1$I32, f$target_snapshot: MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32 ::
      { convert_from_memory_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) }
      { new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot), new_value_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot)) }
      convert_from_memory_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(f$target_address,
      f$target_snapshot)) ==
      new_value_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$Adt$std$$std$$sync$$Mutex$1$I32(f$target_snapshot)))
  }
}

domain ValueSnapshot$Tuple0  {
  
  function new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0(): ValueSnapshot$Tuple0 
  
  function convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(snap: MemorySnapshot$Tuple0): ValueSnapshot$Tuple0 
  
  function convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(snap: ValueSnapshot$Tuple0): MemorySnapshot$Tuple0 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple0_variant$0 {
    (forall self: ValueSnapshot$Tuple0 ::self ==
      new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0())
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple0_variant$0 {
    convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()) ==
    new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple0_variant$0 {
    convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(new_value_snap_of_Tuple0__$TY$__ValueSnapshot$Tuple0()) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple0 {
    (forall value_snapshot: ValueSnapshot$Tuple0 ::
      { convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) }
      convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple0 {
    (forall memory_snapshot: MemorySnapshot$Tuple0 ::
      { convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) }
      convert_to_memory_of_Tuple0__$TY$__ValueSnapshot$Tuple0$MemorySnapshot$Tuple0(convert_from_memory_of_Tuple0__$TY$__MemorySnapshot$Tuple0$ValueSnapshot$Tuple0(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$Tuple2$Usize$Bool  {
  
  function new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(f$0: ValueSnapshot$Usize,
  f$1: ValueSnapshot$Bool): ValueSnapshot$Tuple2$Usize$Bool 
  
  function get_value_field_f$0_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Usize(snap: ValueSnapshot$Tuple2$Usize$Bool): ValueSnapshot$Usize 
  
  function get_value_field_f$1_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Bool(snap: ValueSnapshot$Tuple2$Usize$Bool): ValueSnapshot$Bool 
  
  function convert_from_memory_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$ValueSnapshot$Tuple2$Usize$Bool(snap: MemorySnapshot$Tuple2$Usize$Bool): ValueSnapshot$Tuple2$Usize$Bool 
  
  function convert_to_memory_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$MemorySnapshot$Tuple2$Usize$Bool(snap: ValueSnapshot$Tuple2$Usize$Bool): MemorySnapshot$Tuple2$Usize$Bool 
  
  // Definition of the existence of the constructor of variant tuple
  axiom value_snapshot_existence_of_Tuple2$Usize$Bool_variant$0 {
    (forall self: ValueSnapshot$Tuple2$Usize$Bool ::
      { get_value_field_f$0_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Usize(self) }
      { get_value_field_f$1_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Bool(self) }
      self ==
      new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(get_value_field_f$0_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Usize(self),
      get_value_field_f$1_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Bool(self)))
  }
  
  // Definition of destructor, field f$0
  axiom value_snapshot_definition_of_Tuple2$Usize$Bool_variant$0_field$0 {
    (forall f$f$0: ValueSnapshot$Usize, f$f$1: ValueSnapshot$Bool ::
      { new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1) }
      get_value_field_f$0_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Usize(new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1)) ==
      f$f$0)
  }
  
  // Definition of destructor, field f$1
  axiom value_snapshot_definition_of_Tuple2$Usize$Bool_variant$0_field$1 {
    (forall f$f$0: ValueSnapshot$Usize, f$f$1: ValueSnapshot$Bool ::
      { new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1) }
      get_value_field_f$1_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$ValueSnapshot$Bool(new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1)) ==
      f$f$1)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Tuple2$Usize$Bool_variant$0 {
    (forall f$f$0: MemorySnapshot$Usize, f$f$1: MemorySnapshot$Bool ::
      { convert_from_memory_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$ValueSnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1)) }
      { new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(f$f$0),
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(f$f$1)) }
      convert_from_memory_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$ValueSnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(f$f$0,
      f$f$1)) ==
      new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(f$f$0),
      convert_from_memory_of_Bool__$TY$__MemorySnapshot$Bool$ValueSnapshot$Bool(f$f$1)))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Tuple2$Usize$Bool_variant$0 {
    (forall v$f$0: ValueSnapshot$Usize, v$f$1: ValueSnapshot$Bool ::
      { convert_to_memory_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(v$f$0,
      v$f$1)) }
      { new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(v$f$0),
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(v$f$1)) }
      convert_to_memory_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_value_snap_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Usize$ValueSnapshot$Bool$ValueSnapshot$Tuple2$Usize$Bool(v$f$0,
      v$f$1)) ==
      new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(v$f$0),
      convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(v$f$1)))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Tuple2$Usize$Bool {
    (forall value_snapshot: ValueSnapshot$Tuple2$Usize$Bool ::
      { convert_from_memory_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$ValueSnapshot$Tuple2$Usize$Bool(convert_to_memory_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$MemorySnapshot$Tuple2$Usize$Bool(value_snapshot)) }
      convert_from_memory_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$ValueSnapshot$Tuple2$Usize$Bool(convert_to_memory_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$MemorySnapshot$Tuple2$Usize$Bool(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Tuple2$Usize$Bool {
    (forall memory_snapshot: MemorySnapshot$Tuple2$Usize$Bool ::
      { convert_to_memory_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$MemorySnapshot$Tuple2$Usize$Bool(convert_from_memory_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$ValueSnapshot$Tuple2$Usize$Bool(memory_snapshot)) }
      convert_to_memory_of_Tuple2$Usize$Bool__$TY$__ValueSnapshot$Tuple2$Usize$Bool$MemorySnapshot$Tuple2$Usize$Bool(convert_from_memory_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$ValueSnapshot$Tuple2$Usize$Bool(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain ValueSnapshot$TypeParam$Self  {
  
  function convert_from_memory_of_TypeParam$Self__$TY$__MemorySnapshot$TypeParam$Self$ValueSnapshot$TypeParam$Self(snap: MemorySnapshot$TypeParam$Self): ValueSnapshot$TypeParam$Self 
}

domain ValueSnapshot$Usize  {
  
  function new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(value: Int): ValueSnapshot$Usize 
  
  function get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(snap: ValueSnapshot$Usize): Int 
  
  function convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(snap: MemorySnapshot$Usize): ValueSnapshot$Usize 
  
  function convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(snap: ValueSnapshot$Usize): MemorySnapshot$Usize 
  
  // Definition of the existence of the constructor of variant primitive
  axiom value_snapshot_existence_of_Usize_variant$0 {
    (forall self: ValueSnapshot$Usize ::
      { get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(self) }
      self ==
      new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(self)))
  }
  
  // Definition of destructor, field value
  axiom value_snapshot_definition_of_Usize_variant$0_field$0 {
    (forall f$value: Int ::
      { new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value) }
      get_value_field_value_of_Usize__$TY$__ValueSnapshot$Usize$$int$(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value)) ==
      f$value)
  }
  
  // Definition of conversion between constructors
  axiom conversion_memory_to_value_between_constructors_of_Usize_variant$0 {
    (forall f$value: Int ::
      { convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) }
      { new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value) }
      convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(f$value)) ==
      new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(f$value))
  }
  
  // Definition of conversion between constructors
  axiom conversion_value_to_memory_between_constructors_of_Usize_variant$0 {
    (forall v$value: Int ::
      { convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(v$value)) }
      { new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(v$value) }
      convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(new_value_snap_of_Usize__$TY$__$int$$ValueSnapshot$Usize(v$value)) ==
      new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(v$value))
  }
  
  // Definition of conversion from value to memory to value
  axiom conversion_value_to_value_of_Usize {
    (forall value_snapshot: ValueSnapshot$Usize ::
      { convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(value_snapshot)) }
      convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(value_snapshot)) ==
      value_snapshot)
  }
  
  // Definition of conversion from memory to value to memory
  axiom conversion_memory_to_memory_of_Usize {
    (forall memory_snapshot: MemorySnapshot$Usize ::
      { convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(memory_snapshot)) }
      convert_to_memory_of_Usize__$TY$__ValueSnapshot$Usize$MemorySnapshot$Usize(convert_from_memory_of_Usize__$TY$__MemorySnapshot$Usize$ValueSnapshot$Usize(memory_snapshot)) ==
      memory_snapshot)
  }
}

domain Version  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

function m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(_1: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32): MemorySnapshot$SharedRef$I32
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$Address$I32(result))) ==
    get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1)))))))))


function m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(_1: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$MutPtr$I32
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(result) ==
    get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$I32(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1)))))))))))))
{
  new_memory_snap_of_MutPtr$I32__$TY$__Address$I32$MemorySnapshot$MutPtr$I32(get_value_field_target_of_MutPtr$I32__$TY$__ValueSnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$I32(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1))))))))
}

function m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$I32(_1: ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$MutPtr$I32


function m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(_1: ValueSnapshot$MutPtr$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$T


function m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(_1: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32,
  __version: Version): MemorySnapshot$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(result ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(_1))),
    __version)))))))
{
  m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(_1))),
  __version)
}

function m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(_1: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$MutPtr$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(result) ==
    get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1)))))))))))))
{
  new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1))))))))
}

function m_libraries$$lib_mutex$$MutexSpec$$lock_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Bool(_1: ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$MutPtr$Bool


function m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(_1: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32): MemorySnapshot$MutPtr$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(result) ==
    get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1)))))))))))))
{
  new_memory_snap_of_MutPtr$Bool__$TY$__Address$Bool$MemorySnapshot$MutPtr$Bool(get_value_field_target_of_MutPtr$Bool__$TY$__ValueSnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Bool(convert_from_memory_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_MutPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1))))))))
}

function m_libraries$$lib_mutex$$MutexSpec$$poison_ptr_offset__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Bool(_1: ValueSnapshot$MutPtr$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$MutPtr$Bool


function m_libraries$$lib_prusti$$as_ref__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(_1: MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32,
  __version: Version): MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(_1 ==
    new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_address_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(result))))))))
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1),
    __version) ==
    get_memory_field_target_snapshot_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(result)))))))


function m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(_1: MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32,
  __version: Version): MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(_1),
    __version) ==
    result))))))


function m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(_1: MemorySnapshot$ConstPtr$Bool,
  __version: Version): MemorySnapshot$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(_1),
    __version) ==
    result))))))


function m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(_1: MemorySnapshot$ConstPtr$I32,
  __version: Version): MemorySnapshot$I32
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(_1),
    __version) ==
    result))))))


function m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Usize$MemorySnapshot$ConstPtr$Usize$Version$MemorySnapshot$Usize(_1: MemorySnapshot$ConstPtr$Usize,
  __version: Version): MemorySnapshot$Usize
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(_1),
    __version) ==
    result))))))


function m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(_1: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$MutPtr$Usize


function m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(_1: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$MutPtr$Usize


function m_libraries$$lib_rwlock$$RwLockSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(_1: ValueSnapshot$MutPtr$TypeParam$Self): ValueSnapshot$MutPtr$TypeParam$T


function m_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(_1: ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32): ValueSnapshot$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(_1)) ==
    get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(result)))))))))


function m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(_1: ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32): ValueSnapshot$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_value_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(get_value_field_target_snapshot_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_1)))) ==
    1 ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)) ==
      get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(result)))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)) ==
      get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(result))))))))


function m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(_1: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32): ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32


function m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(_1: ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32): ValueSnapshot$ConstPtr$I32


function m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(_1: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
  __version: Version): MemorySnapshot$Usize
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(result) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Usize$MemorySnapshot$ConstPtr$Usize$Version$MemorySnapshot$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_1)))),
    __version))))))))


function m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(_1: MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32,
  __version: Version): MemorySnapshot$Usize
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(result) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Usize$MemorySnapshot$ConstPtr$Usize$Version$MemorySnapshot$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1)))),
    __version))))))))


function m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(_1: MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32,
  __version: Version): MemorySnapshot$Bool
  ensures get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(result) ==
    get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Bool$MemorySnapshot$ConstPtr$Bool$Version$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(_1))),
    __version))))))))


function read$(): Perm
  ensures none < result
  ensures result < write


method m_test_3()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$I32
  var _2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  var _3: Address$Adt$std$$std$$sync$$Mutex$1$I32
  var _4: Address$I32
  var _5: Address$Tuple0
  var _6: Address$Bool
  var _7: Address$Closure$rc$$test_3$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  var _8: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  
  label start
  // ========== start ==========
  // Def path: "rc::test_3"
  
  // Library ownership axioms of 7 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #0 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #0 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #1 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Unique_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #1 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Unique_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #2 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      owns_as_Local_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #2 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_stmt_Local_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_call_Local_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #3 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #3 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #4 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      owns_as_NoReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #4 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_stmt_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_call_NoReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #5 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      owns_as_NoWriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #5 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_stmt_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      frame_across_call_NoWriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)), v)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #6 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #6 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #6 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #6 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #7 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #7 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #7 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #7 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$lock_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // User-specified library ownership spec #8 for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall r: Int, a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version ::
      { owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Bool__$TY$__$int$$Address$Bool$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v))
  // User-specified library ownership spec #8 across statement for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #8 across call for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, v2: Version ::
      { frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_LocalRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Bool__$TY$__Address$Bool$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, v2))
  // User-specified library ownership spec #8 across move for Adt$std$$std$$sync$$Mutex$1$I32
  inhale (forall a: Address$Adt$std$$std$$sync$$Mutex$1$I32, v: Version, a2: Address$Adt$std$$std$$sync$$Mutex$1$I32,
    v2: Version ::
      { move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Bool__$TY$__Address$Bool$Version$Address$Bool$Version$$bool$(get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a,
      v)))))), v, get_memory_field_target_of_ConstPtr$Bool__$TY$__MemorySnapshot$ConstPtr$Bool$Address$Bool(new_memory_snap_of_ConstPtr$Bool__$TY$__Address$Bool$MemorySnapshot$ConstPtr$Bool(get_memory_field_target_of_MutPtr$Bool__$TY$__MemorySnapshot$MutPtr$Bool$Address$Bool(m_libraries$$lib_mutex$$MutexSpec$$poison_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(a2,
      v2)))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  
  // [mir] _1 = const 42_i32
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, version) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42)
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_4: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _4,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: std::sync::Mutex<i32>)
  inhale owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _4 = _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_4, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_4: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _4,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_3: std::sync::Mutex<i32>)
  inhale owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(6,
    _3, version)
  
  // [mir] _3 = std::sync::Mutex::<i32>::new(move _4) -> [return: bb1, unwind: bb7]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_4: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_4: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _4,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_4: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _4,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_3: std::sync::Mutex<i32>)
  inhale owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(6,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 3) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_4,
    old_version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(_3,
    deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(_3,
    version))))), version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_std$$sync$$Mutex$$$openang$T$closeang$$$is_poisoned__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(_3,
    deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(_3,
    version)), version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(m_libraries$$lib_mutex$$MutexSpec$$is_locked__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Bool(new_memory_snap_of_SharedRef$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(_3,
    deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(_3,
    version)), version))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(-1, _4,
    version)
  // frame ShallowlyOwned(arg#0: i32)
  inhale frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(_4,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: std::sync::Mutex<i32>)
  inhale owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(2,
    _3, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: std::sync::Mutex<i32>)
  inhale owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = std::rc::Rc::<std::sync::Mutex<i32>>::new(move _3) -> [return: bb2, unwind: bb7]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: std::sync::Mutex<i32>)
  inhale frame_across_stmt_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: std::sync::Mutex<i32>)
  inhale owns_as_WriteRef_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(2,
    _3, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: std::sync::Mutex<i32>)
  inhale owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(5,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 3) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(_3,
    version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    version)))))), version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    version)), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(_3))),
    old_version, get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    version))))), version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: std::sync::Mutex<i32>)
  inhale owns_as_Allocated_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(-1,
    _3, version)
  // frame ShallowlyOwned(arg#0: std::sync::Mutex<i32>)
  inhale frame_across_call_ShallowlyOwned_Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb2
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _6, version)
  
  // [mir] _6 = const false
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_6, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _6, version)
  
  // [mir] switchInt(move _6) -> [0: bb4, otherwise: bb3]
  old_version := version
  version := bumpVersion(version)
  // Encoding of Prusti specification block bb3
  // Source: prusti_assert!(deref(as_ref(Rc::as_ptr(&x)).data_ptr()) == 42)
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_of_MutPtr$I32__$TY$__MemorySnapshot$MutPtr$I32$Address$I32(m_libraries$$lib_mutex$$MutexSpec$$data_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$MutPtr$I32(m_libraries$$lib_prusti$$as_ref__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$SharedRef$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(get_value_field_target_of_ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32$Address$Adt$std$$std$$sync$$Mutex$1$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$ConstPtr$Adt$std$$std$$sync$$Mutex$1$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32(_2,
    old_version)))))), old_version)))), old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(42))))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb4
  
  label bb4
  // ========== bb4 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _6, version)
  
  // [mir] _5 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_5,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_5: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _5, version)
  // assume WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _6, version)
  
  // [mir] goto -> bb5
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_6: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb5
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _0, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<std::sync::Mutex<i32>>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$Adt$std$$std$$sync$$Mutex$1$I32$Version$$bool$(5,
    _2, version)
  
  // [mir] drop(_2) -> [return: bb6, unwind: bb7]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _2
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb6
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_libraries$$lib_mutex$$MutexSpec$$data_ptr()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$MutPtr$TypeParam$T
  var _1: Address$SharedRef$TypeParam$Self
  var _2: Address$MutPtr$TypeParam$Self
  var _3: Address$MutPtr$TypeParam$Self
  var _4: Address$ConstPtr$TypeParam$Self
  var _5: Address$ConstPtr$TypeParam$Self
  
  label start
  // ========== start ==========
  // Def path: "rc::libraries::lib_mutex::MutexSpec::data_ptr"
  
  // Library ownership axioms of 6 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _3, version)
  
  // [mir] _5 = &raw const (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    version) ==
    new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: &Self)
  inhale frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _3, version)
  
  // [mir] _4 = _5
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    version) ==
    deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_5: *const Self)
  inhale frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(6,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = move _4 as *mut Self (PtrToPtr)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // [mir] AscribeUserType(_3, o, UserTypeProjection { base: UserType(2), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(7,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(8,
    _3, version)
  
  // [mir] _2 = _3
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    version) ==
    deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    old_version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of LocalRef(_3: *mut Self)
  inhale frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume WriteRef(_2: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _0 = <Self as libraries::lib_mutex::MutexSpec<T>>::data_ptr_offset(move _2) -> [return: bb1, unwind: bb2]
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(_0,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    old_version)))))
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_2: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_MutPtr$TypeParam$T__$TY$__MemorySnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(_0,
    version)) ==
    get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(m_libraries$$lib_mutex$$MutexSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(_1,
    version))))))))))))))
  goto end_of_method
  label end_of_method
}

method m_test_7()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$I32
  var _2: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _3: Address$I32
  var _4: Address$Tuple0
  var _5: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _6: Address$Tuple0
  var _7: Address$Bool
  var _8: Address$Bool
  var _9: Address$Usize
  var _10: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _11: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _12: Address$Never
  var _13: Address$Tuple0
  var _14: Address$Bool
  var _15: Address$Never
  var __t0: Bool
  var __t1: Bool
  
  label start
  // ========== start ==========
  // Def path: "rc::test_7"
  
  // Library ownership axioms of 7 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  
  // [mir] _1 = const 123_i32
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, version) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _3,
    version)
  
  // [mir] _3 = _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  
  // [mir] _2 = std::rc::Rc::<i32>::new(move _3) -> [return: bb1, unwind: bb10]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 3) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3,
    version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)))))), version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(_3))),
    old_version, get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version))))), version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(-1, _3,
    version)
  // frame ShallowlyOwned(arg#0: i32)
  inhale frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  
  // [mir] _5 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_5,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_5: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _5, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  
  // [mir] _4 = unknown::<&std::rc::Rc<i32>>(move _5) -> [return: bb2, unwind: bb9]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_5: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _5, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _5, version)
  // frame ShallowlyOwned(arg#0: &std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb2
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _10, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_9: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _9, version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _6, version)
  
  // [mir] _11 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_11,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_11: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _11, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _10, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_9: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _6, version)
  
  // [mir] _10 = &(*_11)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_10,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_11,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_11,
    old_version)))
  // Fully-owned used place _11 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_11,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_11: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_11,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_10: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _10, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _10, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_9: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _6, version)
  
  // [mir] _9 = std::rc::Rc::<i32>::strong_count(move _10) -> [return: bb3, unwind: bb9]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_9, version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_10,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_10: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb3
  
  label bb3
  // ========== bb3 ==========
  
  // [mir] StorageDead(_10)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_9: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _9, version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_9: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _9, version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _6, version)
  
  // [mir] _8 = Eq(move _9, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_9,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _8,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _6, version)
  
  // [mir] _7 = Not(move _8)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_7, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_11)
  
  // [mir] StorageDead(_8)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_7: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _7,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _6, version)
  
  // [mir] switchInt(move _7) -> [0: bb5, otherwise: bb4]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_7,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageLive(_12)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_7: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _7,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_12: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _12, version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _6, version)
  
  // [mir] _12 = core::panicking::panic(const "assertion failed: Rc::strong_count(&rc) == 1") -> bb9
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&rc) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_7: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_7,
    old_version, version)
  goto end_of_method
  
  label bb5
  // ========== bb5 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_7: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _7,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _7, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_6: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _6, version)
  
  // [mir] _6 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_6,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_7: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageLive(_13)
  
  // [mir] StorageLive(_14)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  
  // [mir] _14 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_14, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _14,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  
  // [mir] switchInt(move _14) -> [0: bb7, otherwise: bb6]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_14,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageLive(_15)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _14,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_15: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _15, version)
  
  // [mir] _15 = core::panicking::panic(const "assertion failed: false") -> bb9
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb7
  // ========== bb7 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_14: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _14,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_14: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_13: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  
  // [mir] _13 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_13,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_14: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_14)
  
  // [mir] StorageDead(_13)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _0, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  
  // [mir] drop(_2) -> [return: bb8, unwind: bb10]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _2
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb8
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb3 --> bb5
  goto bb5
  
  label l1
  // ========== l1 ==========
  // MIR edge bb3 --> bb4
  goto bb4
  
  label l2
  // ========== l2 ==========
  // MIR edge bb5 --> bb7
  goto bb7
  
  label l3
  // ========== l3 ==========
  // MIR edge bb5 --> bb6
  goto bb6
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_4()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _2: Address$I32
  var _3: Address$SharedRef$I32
  var _4: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _5: Address$Tuple0
  var _6: Address$I32
  var _7: Address$SharedRef$I32
  var _8: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _9: Address$Tuple0
  var _10: Address$Bool
  var _11: Address$Bool
  var _12: Address$I32
  var _13: Address$I32
  var _14: Address$Never
  var _15: Address$Tuple0
  var _16: Address$Bool
  var _17: Address$Never
  var __t0: Bool
  var __t1: Bool
  
  label start
  // ========== start ==========
  // Def path: "rc::test_4"
  
  // Library ownership axioms of 7 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _2,
    version)
  // assume Allocated(_4: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_3: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _3, version)
  
  // [mir] _4 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_4,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _4, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _2,
    version)
  // assume Allocated(_4: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _4, version)
  // assume Allocated(_3: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _3 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _4) -> [return: bb1, unwind: bb9]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_3,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_4,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_4: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // Ownership facts
  // assume WriteRef(_3: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(1,
    _3, version)
  // assume ReadRef(_1: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _2,
    version)
  // assume Allocated(_4: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _4, version)
  // assume Allocated(_3: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = (*_3)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_2, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_3,
    old_version))
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_3: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageDead(_3)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  
  // [mir] _5 = unknown::<i32>(const 0_i32) -> [return: bb2, unwind: bb9]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb2
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _8, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_7: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(5,
    _7, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _6,
    version)
  
  // [mir] _8 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_8,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_8: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _8, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_7: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _7, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _6,
    version)
  
  // [mir] _7 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _8) -> [return: bb3, unwind: bb9]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_7,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_8,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_8: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb3
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_7: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _7, version)
  // assume ReadRef(_1: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_7: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _7, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _6,
    version)
  
  // [mir] _6 = (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_6, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_7,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_7: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] FakeRead(ForLet(None), _6)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // [mir] StorageLive(_12)
  
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _11, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_12: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _12,
    version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _12 = _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_12, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_2, old_version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageLive(_13)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_12: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _12,
    version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _11, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _2,
    version)
  // assume Allocated(_13: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _13,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _10, version)
  // assume Allocated(_12: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _12,
    version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _6,
    version)
  
  // [mir] _13 = _6
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_13, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_6, old_version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of LocalRef(_6: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_12: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _12,
    version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume WriteRef(_13: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _13,
    version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _11, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _2,
    version)
  // assume Allocated(_13: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _13,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _10, version)
  // assume Allocated(_12: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _12,
    version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _6,
    version)
  
  // [mir] _11 = Eq(move _12, move _13)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_11, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_12,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_13,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _13 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_13,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_13)
  
  // [mir] StorageDead(_12)
  
  // Ownership facts
  // assume WriteRef(_11: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _11, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _10, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _10 = Not(move _11)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_11,
    old_version)))
  // Fully-owned used place _11 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_11,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_11)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _10,
    version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] switchInt(move _10) -> [0: bb5, otherwise: bb4]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_10,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageLive(_14)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _10,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_14: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _10, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _14 = core::panicking::panic(const "assertion failed: a == b") -> bb9
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: a == b"
  assert false
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb5
  // ========== bb5 ==========
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_10: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _10,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_10: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _10, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] _9 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_9,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_10: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_10,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_10)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageLive(_15)
  
  // [mir] StorageLive(_16)
  
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _16, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _15, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _6,
    version)
  
  // [mir] _16 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _16,
    version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _16, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _15, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] switchInt(move _16) -> [0: bb7, otherwise: bb6]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageLive(_17)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _16,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_17: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _17, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _2,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _16, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _15, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _17 = core::panicking::panic(const "assertion failed: false") -> bb9
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_16: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb7
  // ========== bb7 ==========
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _16,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _2,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _16, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _15, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] _15 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_15,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_16: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_16)
  
  // [mir] StorageDead(_15)
  
  // Ownership facts
  // assume WriteRef(_2: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _2,
    version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _6,
    version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] drop(_1) -> [return: bb8, unwind: bb10]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _1
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto bb8
  
  label bb8
  // ========== bb8 ==========
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label l0
  // ========== l0 ==========
  // MIR edge bb3 --> bb5
  goto bb5
  
  label l1
  // ========== l1 ==========
  // MIR edge bb3 --> bb4
  goto bb4
  
  label l2
  // ========== l2 ==========
  // MIR edge bb5 --> bb7
  goto bb7
  
  label l3
  // ========== l3 ==========
  // MIR edge bb5 --> bb6
  goto bb6
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_1()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$I32
  var _2: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _3: Address$I32
  var _4: Address$Tuple0
  var _5: Address$Bool
  var _6: Address$Bool
  var _7: Address$Usize
  var _8: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _9: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _10: Address$Never
  var _11: Address$Tuple0
  var _12: Address$Bool
  var _13: Address$Bool
  var _14: Address$Usize
  var _15: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _16: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _17: Address$Never
  var _18: Address$Tuple0
  var _19: Address$Bool
  var _20: Address$Bool
  var _21: Address$I32
  var _22: Address$SharedRef$I32
  var _23: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _24: Address$Never
  var _25: Address$Tuple0
  var _26: Address$Bool
  var _27: Address$Bool
  var _28: Address$I32
  var _29: Address$SharedRef$I32
  var _30: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _31: Address$Never
  var _32: Address$Tuple0
  var _33: Address$Bool
  var _34: Address$Never
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  
  label start
  // ========== start ==========
  // Def path: "rc::test_1"
  
  // Library ownership axioms of 8 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  
  // [mir] _1 = const 123_i32
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, version) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _3,
    version)
  
  // [mir] _3 = _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  
  // [mir] _2 = std::rc::Rc::<i32>::new(move _3) -> [return: bb1, unwind: bb18]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 3) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3,
    version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)))))), version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(_3))),
    old_version, get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version))))), version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(-1, _3,
    version)
  // frame ShallowlyOwned(arg#0: i32)
  inhale frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_7: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _7, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _6, version)
  
  // [mir] _9 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_9,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_9: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _9, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_7: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _6, version)
  
  // [mir] _8 = &(*_9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_8,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_9,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_9,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_9: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_8: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _8, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_7: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _8, version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _6, version)
  
  // [mir] _7 = std::rc::Rc::<i32>::strong_count(move _8) -> [return: bb2, unwind: bb17]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_7, version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_8,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_8: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb2
  
  label bb10
  // ========== bb10 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_19: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _19,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _18, version)
  
  // [mir] _18 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_18,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _19 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_19,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_19: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_19,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_19)
  
  // [mir] StorageDead(_18)
  
  // [mir] StorageLive(_25)
  
  // [mir] StorageLive(_26)
  
  // [mir] StorageLive(_27)
  
  // [mir] StorageLive(_28)
  
  // [mir] StorageLive(_29)
  
  // [mir] StorageLive(_30)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _28,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_29: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _29, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_30: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _30, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _27, version)
  
  // [mir] _30 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_30,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_30: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _30, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _28,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_29: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(7,
    _29, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_30: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _30, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _27, version)
  
  // [mir] _29 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _30) -> [return: bb11, unwind: bb17]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_29,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_30,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_30: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_30,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb11
  
  label bb11
  // ========== bb11 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_29: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _29, version)
  // assume ReadRef(_2: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _28,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_29: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(7,
    _29, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_30: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _30, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _27, version)
  
  // [mir] _28 = (*_29)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_28, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_29,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _29 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_29,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_29: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_29,
    old_version, version)
  
  // [mir] StorageDead(_30)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_28: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _28,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _28,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_29: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(7,
    _29, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _27, version)
  
  // [mir] _27 = Eq(move _28, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_27, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_28,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _28 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_28,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_28)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_27: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _27,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_29: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _29, version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_27: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _27, version)
  
  // [mir] _26 = Not(move _27)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_26, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_27,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _27 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_27,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_29)
  
  // [mir] StorageDead(_27)
  
  // Ownership facts
  // assume WriteRef(_26: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _26,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  
  // [mir] switchInt(move _26) -> [0: bb13, otherwise: bb12]
  old_version := version
  version := bumpVersion(version)
  __t3 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_26,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t3) {
    goto l7
  }
  goto l6
  
  label bb12
  // ========== bb12 ==========
  
  // [mir] StorageLive(_31)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_26: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _26,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_31: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _31, version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  
  // [mir] _31 = core::panicking::panic(const "assertion failed: *rc == 123") -> bb17
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *rc == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_26: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_26,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb13
  // ========== bb13 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_26: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _26,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_25: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_26: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  
  // [mir] _25 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_25,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _26 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_26,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_26: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_26,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_26)
  
  // [mir] StorageDead(_25)
  
  // [mir] StorageLive(_32)
  
  // [mir] StorageLive(_33)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _32, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _33, version)
  
  // [mir] _33 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _33,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _33, version)
  
  // [mir] switchInt(move _33) -> [0: bb15, otherwise: bb14]
  old_version := version
  version := bumpVersion(version)
  __t4 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t4) {
    goto l9
  }
  goto l8
  
  label bb14
  // ========== bb14 ==========
  
  // [mir] StorageLive(_34)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _33,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_34: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _34, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _32, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _33, version)
  
  // [mir] _34 = core::panicking::panic(const "assertion failed: false") -> bb17
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_33: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb15
  // ========== bb15 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _33,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _33, version)
  
  // [mir] _32 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_32,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _33 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_33: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_33)
  
  // [mir] StorageDead(_32)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _0, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  
  // [mir] drop(_2) -> [return: bb16, unwind: bb18]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _2
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb16
  
  label bb16
  // ========== bb16 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_8)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_7: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _7, version)
  // assume Allocated(_7: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _7, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _6, version)
  
  // [mir] _6 = Eq(move _7, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_6, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_7,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_7)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _6, version)
  
  // [mir] _5 = Not(move _6)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_6,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  
  // [mir] switchInt(move _5) -> [0: bb4, otherwise: bb3]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb3
  // ========== bb3 ==========
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_10: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _10, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  
  // [mir] _10 = core::panicking::panic(const "assertion failed: Rc::strong_count(&rc) == 1") -> bb17
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&rc) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb4
  // ========== bb4 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  
  // [mir] _4 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_4,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_11)
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // [mir] StorageLive(_14)
  
  // [mir] StorageLive(_15)
  
  // [mir] StorageLive(_16)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_16: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_14: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(6,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  
  // [mir] _16 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_16: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _16, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_16: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_14: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(7,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _12, version)
  
  // [mir] _15 = &(*_16)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_15,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_16,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_16: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_16,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_15: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_16: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_14: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(7,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _12, version)
  
  // [mir] _14 = std::rc::Rc::<i32>::strong_count(move _15) -> [return: bb5, unwind: bb17]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_14,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_15,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_15: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb5
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageDead(_15)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_14: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _14, version)
  // assume Allocated(_16: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_14: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(7,
    _14, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  
  // [mir] _13 = Eq(move _14, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_13, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_14,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_14)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_13: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _13,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_16: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_13: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _12, version)
  
  // [mir] _12 = Not(move _13)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_13,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _13 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_13,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_16)
  
  // [mir] StorageDead(_13)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _12,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _12, version)
  
  // [mir] switchInt(move _12) -> [0: bb7, otherwise: bb6]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageLive(_17)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _12,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_17: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _17, version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _12, version)
  
  // [mir] _17 = core::panicking::panic(const "assertion failed: Rc::strong_count(&rc) == 1") -> bb17
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&rc) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb7
  // ========== bb7 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _12,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_11: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _11, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _12, version)
  
  // [mir] _11 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_11,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_12)
  
  // [mir] StorageDead(_11)
  
  // [mir] StorageLive(_18)
  
  // [mir] StorageLive(_19)
  
  // [mir] StorageLive(_20)
  
  // [mir] StorageLive(_21)
  
  // [mir] StorageLive(_22)
  
  // [mir] StorageLive(_23)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_22: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_21: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _21,
    version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _18, version)
  
  // [mir] _23 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_23,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_23: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _23, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_22: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_21: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _21,
    version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _18, version)
  
  // [mir] _22 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _23) -> [return: bb8, unwind: bb17]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_22,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_23,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_23: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_23,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb8
  
  label bb8
  // ========== bb8 ==========
  
  // Ownership facts
  // assume WriteRef(_22: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(1,
    _22, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume ReadRef(_2: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_22: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _2, version)
  // assume Allocated(_21: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _21,
    version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _18, version)
  
  // [mir] _21 = (*_22)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_21, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_22,
    old_version))
  // Fully-owned used place _22 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_22,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_22: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_22,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_23)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_21: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _21,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_22: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_21: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _21,
    version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _18, version)
  
  // [mir] _20 = Eq(move _21, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_20, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_21,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _21 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_21,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_21)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_20: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _20,
    version)
  // assume Allocated(_22: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _18, version)
  
  // [mir] _19 = Not(move _20)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_19, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_20,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _20 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_20,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_22)
  
  // [mir] StorageDead(_20)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_19: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _19,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _18, version)
  
  // [mir] switchInt(move _19) -> [0: bb10, otherwise: bb9]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_19,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t2) {
    goto l5
  }
  goto l4
  
  label bb9
  // ========== bb9 ==========
  
  // [mir] StorageLive(_24)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_19: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _19,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _19, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_24: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _24, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _18, version)
  
  // [mir] _24 = core::panicking::panic(const "assertion failed: *rc == 123") -> bb17
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *rc == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_19: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_19,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label l0
  // ========== l0 ==========
  // MIR edge bb2 --> bb4
  goto bb4
  
  label l1
  // ========== l1 ==========
  // MIR edge bb2 --> bb3
  goto bb3
  
  label l2
  // ========== l2 ==========
  // MIR edge bb5 --> bb7
  goto bb7
  
  label l3
  // ========== l3 ==========
  // MIR edge bb5 --> bb6
  goto bb6
  
  label l4
  // ========== l4 ==========
  // MIR edge bb8 --> bb10
  goto bb10
  
  label l5
  // ========== l5 ==========
  // MIR edge bb8 --> bb9
  goto bb9
  
  label l6
  // ========== l6 ==========
  // MIR edge bb11 --> bb13
  goto bb13
  
  label l7
  // ========== l7 ==========
  // MIR edge bb11 --> bb12
  goto bb12
  
  label l8
  // ========== l8 ==========
  // MIR edge bb13 --> bb15
  goto bb15
  
  label l9
  // ========== l9 ==========
  // MIR edge bb13 --> bb14
  goto bb14
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_libraries$$lib_rwlock$$RwLockSpec$$data_ptr()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$MutPtr$TypeParam$T
  var _1: Address$SharedRef$TypeParam$Self
  var _2: Address$MutPtr$TypeParam$Self
  var _3: Address$MutPtr$TypeParam$Self
  var _4: Address$ConstPtr$TypeParam$Self
  var _5: Address$ConstPtr$TypeParam$Self
  
  label start
  // ========== start ==========
  // Def path: "rc::libraries::lib_rwlock::RwLockSpec::data_ptr"
  
  // Library ownership axioms of 6 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _3, version)
  
  // [mir] _5 = &raw const (*_1)
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    version) ==
    new_memory_snap_of_ConstPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$ConstPtr$TypeParam$Self(get_memory_field_target_address_of_SharedRef$TypeParam$Self__$TY$__MemorySnapshot$SharedRef$TypeParam$Self$Address$TypeParam$Self(deref_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$MemorySnapshot$SharedRef$TypeParam$Self(_1,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: &Self)
  inhale frame_across_stmt_ReadRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _3, version)
  
  // [mir] _4 = _5
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    version) ==
    deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_5,
    old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_5: *const Self)
  inhale frame_across_stmt_LocalRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(5,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(6,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _3 = move _4 as *mut Self (PtrToPtr)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$Self__$TY$__Address$TypeParam$Self$MemorySnapshot$MutPtr$TypeParam$Self(get_memory_field_target_of_ConstPtr$TypeParam$Self__$TY$__MemorySnapshot$ConstPtr$TypeParam$Self$Address$TypeParam$Self(deref_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$MemorySnapshot$ConstPtr$TypeParam$Self(_4,
    old_version)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  
  // [mir] AscribeUserType(_3, o, UserTypeProjection { base: UserType(2), projs: [] })
  
  // Ownership facts
  // assume WriteRef(_4: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(3,
    _5, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_4: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(7,
    _4, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(8,
    _3, version)
  
  // [mir] _2 = _3
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    version) ==
    deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_3,
    old_version)
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_4: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of LocalRef(_3: *mut Self)
  inhale frame_across_stmt_LocalRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_5: *const Self)
  inhale owns_as_WriteRef_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(2,
    _5, version)
  // assume WriteRef(_2: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: *mut Self)
  inhale owns_as_WriteRef_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(4,
    _3, version)
  // assume Allocated(_5: *const Self)
  inhale owns_as_Allocated_ConstPtr$TypeParam$Self__$TY$__$int$$Address$ConstPtr$TypeParam$Self$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(6,
    _2, version)
  // assume Allocated(_3: *mut Self)
  inhale owns_as_Allocated_MutPtr$TypeParam$Self__$TY$__$int$$Address$MutPtr$TypeParam$Self$Version$$bool$(7,
    _3, version)
  
  // [mir] _0 = <Self as libraries::lib_rwlock::RwLockSpec<T>>::data_ptr_offset(move _2) -> [return: bb1, unwind: bb2]
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$MemorySnapshot$MutPtr$TypeParam$T(_0,
    version) ==
    new_memory_snap_of_MutPtr$TypeParam$T__$TY$__Address$TypeParam$T$MemorySnapshot$MutPtr$TypeParam$T(get_value_field_target_of_MutPtr$TypeParam$T__$TY$__ValueSnapshot$MutPtr$TypeParam$T$Address$TypeParam$T(m_libraries$$lib_rwlock$$RwLockSpec$$data_ptr_offset__$TY$__MemorySnapshot$TypeParam$Self$MemorySnapshot$TypeParam$T$ValueSnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$T(convert_from_memory_of_MutPtr$TypeParam$Self__$TY$__MemorySnapshot$MutPtr$TypeParam$Self$ValueSnapshot$MutPtr$TypeParam$Self(deref_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$MemorySnapshot$MutPtr$TypeParam$Self(_2,
    old_version)))))
  // Framing facts
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_stmt_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_2: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_5: *const Self)
  inhale frame_across_call_WriteRef_ConstPtr$TypeParam$Self__$TY$__Address$ConstPtr$TypeParam$Self$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_3: *mut Self)
  inhale frame_across_call_WriteRef_MutPtr$TypeParam$Self__$TY$__Address$MutPtr$TypeParam$Self$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_call_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: *mut T)
  inhale frame_across_stmt_WriteRef_MutPtr$TypeParam$T__$TY$__Address$MutPtr$TypeParam$T$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: &Self)
  inhale frame_across_stmt_WriteRef_SharedRef$TypeParam$Self__$TY$__Address$SharedRef$TypeParam$Self$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: *mut T)
  inhale owns_as_WriteRef_MutPtr$TypeParam$T__$TY$__$int$$Address$MutPtr$TypeParam$T$Version$$bool$(1,
    _0, version)
  // assume WriteRed(_1: &Self)
  inhale owns_as_WriteRef_SharedRef$TypeParam$Self__$TY$__$int$$Address$SharedRef$TypeParam$Self$Version$$bool$(2,
    _1, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_8()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$I32
  var _2: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _3: Address$I32
  var _4: Address$Tuple0
  var _5: Address$Tuple0
  var _6: Address$Bool
  var _7: Address$Bool
  var _8: Address$Usize
  var _9: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _10: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _11: Address$Never
  var _12: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _13: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _14: Address$Tuple0
  var _15: Address$Bool
  var _16: Address$Bool
  var _17: Address$I32
  var _18: Address$SharedRef$I32
  var _19: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _20: Address$Never
  var _21: Address$Tuple0
  var _22: Address$Bool
  var _23: Address$Bool
  var _24: Address$I32
  var _25: Address$SharedRef$I32
  var _26: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _27: Address$Never
  var _28: Address$Tuple0
  var _29: Address$Bool
  var _30: Address$Bool
  var _31: Address$Usize
  var _32: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _33: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _34: Address$Never
  var _35: Address$Tuple0
  var _36: Address$Bool
  var _37: Address$Bool
  var _38: Address$Usize
  var _39: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _40: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _41: Address$Never
  var _42: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _43: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _44: Address$Tuple0
  var _45: Address$Bool
  var _46: Address$Bool
  var _47: Address$Usize
  var _48: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _49: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _50: Address$Never
  var _51: Address$Tuple0
  var _52: Address$Bool
  var _53: Address$Bool
  var _54: Address$Usize
  var _55: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _56: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _57: Address$Never
  var _58: Address$Tuple0
  var _59: Address$Bool
  var _60: Address$Bool
  var _61: Address$Usize
  var _62: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _63: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _64: Address$Never
  var _65: Address$Tuple0
  var _66: Address$Bool
  var _67: Address$Bool
  var _68: Address$I32
  var _69: Address$SharedRef$I32
  var _70: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _71: Address$Never
  var _72: Address$Tuple0
  var _73: Address$Bool
  var _74: Address$Bool
  var _75: Address$I32
  var _76: Address$SharedRef$I32
  var _77: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _78: Address$Never
  var _79: Address$Tuple0
  var _80: Address$Bool
  var _81: Address$Bool
  var _82: Address$I32
  var _83: Address$SharedRef$I32
  var _84: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _85: Address$Never
  var _86: Address$Tuple0
  var _87: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _88: Address$Tuple0
  var _89: Address$Bool
  var _90: Address$Bool
  var _91: Address$Usize
  var _92: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _93: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _94: Address$Never
  var _95: Address$Tuple0
  var _96: Address$Bool
  var _97: Address$Bool
  var _98: Address$Usize
  var _99: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _100: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _101: Address$Never
  var _102: Address$Tuple0
  var _103: Address$Bool
  var _104: Address$Bool
  var _105: Address$I32
  var _106: Address$SharedRef$I32
  var _107: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _108: Address$Never
  var _109: Address$Tuple0
  var _110: Address$Bool
  var _111: Address$Bool
  var _112: Address$I32
  var _113: Address$SharedRef$I32
  var _114: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _115: Address$Never
  var _116: Address$Tuple0
  var _117: Address$Bool
  var _118: Address$Bool
  var _119: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _120: Address$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _121: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _122: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _123: Address$Never
  var _124: Address$Tuple0
  var _125: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _126: Address$Tuple0
  var _127: Address$Bool
  var _128: Address$Bool
  var _129: Address$Usize
  var _130: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _131: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _132: Address$Never
  var _133: Address$Tuple0
  var _134: Address$Bool
  var _135: Address$Bool
  var _136: Address$I32
  var _137: Address$SharedRef$I32
  var _138: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _139: Address$Never
  var _140: Address$MutRef$I32
  var _141: Address$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _142: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _143: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _144: Address$Tuple0
  var _145: Address$Bool
  var _146: Address$Bool
  var _147: Address$I32
  var _148: Address$Never
  var _149: Address$Tuple0
  var _150: Address$Bool
  var _151: Address$Bool
  var _152: Address$Usize
  var _153: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _154: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _155: Address$Never
  var _156: Address$Tuple0
  var _157: Address$Bool
  var _158: Address$Never
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var _call_50_pre_version: Version
  var _call_50_blocked_address_0: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var _call_61_pre_version: Version
  var _call_61_blocked_address_0: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  
  label start
  // ========== start ==========
  // Def path: "rc::test_8"
  
  // Library ownership axioms of 12 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  
  // [mir] _1 = const 123_i32
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, version) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _3,
    version)
  
  // [mir] _3 = _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  
  // [mir] _2 = std::rc::Rc::<i32>::new(move _3) -> [return: bb1, unwind: bb79]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 3) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3,
    version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)))))), version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(_3))),
    old_version, get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version))))), version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(-1, _3,
    version)
  // frame ShallowlyOwned(arg#0: i32)
  inhale frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  
  // [mir] _4 = unknown::<i32>(const 0_i32) -> [return: bb2, unwind: bb78]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb2
  
  label bb10
  // ========== bb10 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_25: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _25, version)
  // assume ReadRef(_12: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _21, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _23, version)
  // assume Allocated(_25: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _22, version)
  // assume Allocated(_24: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _24,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _24 = (*_25)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_24, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_25,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _25 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_25,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_25: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_25,
    old_version, version)
  // assume framing of ReadRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // [mir] StorageDead(_26)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_24: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _24,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _21, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _23, version)
  // assume Allocated(_25: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _22, version)
  // assume Allocated(_24: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _24,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _23 = Eq(move _24, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_23, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_24,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _24 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_24,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_24)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_23: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _23,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _21, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _23, version)
  // assume Allocated(_25: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _22, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _22 = Not(move _23)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_22, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_23,
    old_version)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_23,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_25)
  
  // [mir] StorageDead(_23)
  
  // Ownership facts
  // assume WriteRef(_22: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _22,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _21, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _22, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] switchInt(move _22) -> [0: bb12, otherwise: bb11]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_22,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t2) {
    goto l5
  }
  goto l4
  
  label bb11
  // ========== bb11 ==========
  
  // [mir] StorageLive(_27)
  
  // Ownership facts
  // assume WriteRef(_22: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _22,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _21, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_27: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _27, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _22, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _27 = core::panicking::panic(const "assertion failed: *y == 123") -> bb77
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *y == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_22: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_22,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb12
  // ========== bb12 ==========
  
  // Ownership facts
  // assume WriteRef(_22: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _22,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _21, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _22, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _21 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_21,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _22 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_22,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_22: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_22,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_22)
  
  // [mir] StorageDead(_21)
  
  // [mir] StorageLive(_28)
  
  // [mir] StorageLive(_29)
  
  // [mir] StorageLive(_30)
  
  // [mir] StorageLive(_31)
  
  // [mir] StorageLive(_32)
  
  // [mir] StorageLive(_33)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_31: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _31, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_33: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _33, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _28, version)
  // assume Allocated(_30: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _30, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_32: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _32, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _33 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_33,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_33: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _33, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_31: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _31, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _33, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _28, version)
  // assume Allocated(_30: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _30, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_32: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _32, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _32 = &(*_33)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_32,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_33,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_33,
    old_version)))
  // Fully-owned used place _33 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_33,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_33: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_33,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_32: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _32, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_31: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _31, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _33, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _28, version)
  // assume Allocated(_30: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _30, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_32: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _32, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _31 = std::rc::Rc::<i32>::strong_count(move _32) -> [return: bb13, unwind: bb77]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_31,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_32,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_32: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_32,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb13
  
  label bb13
  // ========== bb13 ==========
  
  // [mir] StorageDead(_32)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_31: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _31, version)
  // assume Allocated(_31: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _31, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_33: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _33, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _28, version)
  // assume Allocated(_30: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _30, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _30 = Eq(move _31, const 2_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_30, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_31,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(2)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _31 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_31,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_31)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_30: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _30,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_33: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _33, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _28, version)
  // assume Allocated(_30: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _30, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _29 = Not(move _30)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_29, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_30,
    old_version)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _30 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_30,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_33)
  
  // [mir] StorageDead(_30)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_29: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _29,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _28, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] switchInt(move _29) -> [0: bb15, otherwise: bb14]
  old_version := version
  version := bumpVersion(version)
  __t3 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_29,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t3) {
    goto l7
  }
  goto l6
  
  label bb14
  // ========== bb14 ==========
  
  // [mir] StorageLive(_34)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_29: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _29,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _28, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_34: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _34, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _34 = core::panicking::panic(const "assertion failed: Rc::strong_count(&x) == 2") -> bb77
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&x) == 2"
  assert false
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_29: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_29,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb15
  // ========== bb15 ==========
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_29: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _29,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _28, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _29, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _28 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_28,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _29 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_29,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_29: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_29,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_29)
  
  // [mir] StorageDead(_28)
  
  // [mir] StorageLive(_35)
  
  // [mir] StorageLive(_36)
  
  // [mir] StorageLive(_37)
  
  // [mir] StorageLive(_38)
  
  // [mir] StorageLive(_39)
  
  // [mir] StorageLive(_40)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_38: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _38, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_40: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _40, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _35, version)
  // assume Allocated(_37: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _37, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_39: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _39, version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _40 = &_12
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_40,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_40: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _40, version)
  // assume LocalRef(_12: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_38: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _38, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_40: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _40, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _35, version)
  // assume Allocated(_37: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _37, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_39: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _39, version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _39 = &(*_40)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_39,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_40,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_40,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _40 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_40,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of ReadRef(_40: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_40,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_39: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _39, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_12: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_38: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _38, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_40: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _40, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _35, version)
  // assume Allocated(_37: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _37, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_39: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _39, version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _38 = std::rc::Rc::<i32>::strong_count(move _39) -> [return: bb16, unwind: bb77]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_38,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_39,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_39: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_39,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  goto bb16
  
  label bb16
  // ========== bb16 ==========
  
  // [mir] StorageDead(_39)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_38: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _38, version)
  // assume Allocated(_38: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _38, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_40: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _40, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _35, version)
  // assume Allocated(_37: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _37, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _37 = Eq(move _38, const 2_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_37, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_38,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(2)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _38 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_38,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_38)
  
  // Ownership facts
  // assume WriteRef(_37: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _37,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_40: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _40, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _35, version)
  // assume Allocated(_37: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _37, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _36 = Not(move _37)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_36, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_37,
    old_version)))
  // Fully-owned used place _37 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_37,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_40)
  
  // [mir] StorageDead(_37)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_36: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _36,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _35, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] switchInt(move _36) -> [0: bb18, otherwise: bb17]
  old_version := version
  version := bumpVersion(version)
  __t4 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_36,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t4) {
    goto l9
  }
  goto l8
  
  label bb17
  // ========== bb17 ==========
  
  // [mir] StorageLive(_41)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_36: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _36,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _35, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_41: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _41, version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _41 = core::panicking::panic(const "assertion failed: Rc::strong_count(&y) == 2") -> bb77
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&y) == 2"
  assert false
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_36: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_36,
    old_version, version)
  goto end_of_method
  
  label bb18
  // ========== bb18 ==========
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_36: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _36,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_35: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _35, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_36: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _36, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _35 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_35,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _36 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_36,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_36: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_36,
    old_version, version)
  
  // [mir] StorageDead(_36)
  
  // [mir] StorageDead(_35)
  
  // [mir] StorageLive(_42)
  
  // [mir] StorageLive(_43)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_43: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _43, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _12, version)
  
  // [mir] _43 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_43: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _43, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_43: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _43, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _42 = <std::rc::Rc<i32> as std::clone::Clone>::clone(move _43) -> [return: bb19, unwind: bb77]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_43: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_43,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_43: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _43, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_43: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _43, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 4) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    version)) ==
    get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    old_version), old_version))), new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    old_version), old_version)) <
    0 ||
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    old_version), old_version)) >
    18446744073709551615)))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
      version), version)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
      old_version), old_version))), new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
      old_version), old_version)) <
      0 ||
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
      old_version), old_version)) >
      18446744073709551615))))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    version)))))) ==
    new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    version)))))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    version)))))) ==
    new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_43,
    version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _43, version)
  // frame ShallowlyOwned(arg#0: &std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_43,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb19
  
  label bb19
  // ========== bb19 ==========
  
  // [mir] StorageDead(_43)
  
  // [mir] FakeRead(ForLet(None), _42)
  
  // [mir] StorageLive(_44)
  
  // [mir] StorageLive(_45)
  
  // [mir] StorageLive(_46)
  
  // [mir] StorageLive(_47)
  
  // [mir] StorageLive(_48)
  
  // [mir] StorageLive(_49)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _45, version)
  // assume Allocated(_47: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(7,
    _47, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_49: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _49, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _44, version)
  // assume Allocated(_46: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _46, version)
  // assume Allocated(_48: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _48, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _49 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_49,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_49: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _49, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _45, version)
  // assume Allocated(_47: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _47, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_49: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _49, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _44, version)
  // assume Allocated(_46: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _46, version)
  // assume Allocated(_48: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _48, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _48 = &(*_49)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_48,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_49,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_49,
    old_version)))
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _49 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_49,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_49: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_49,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_48: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _48, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _45, version)
  // assume Allocated(_47: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _47, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_49: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _49, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _44, version)
  // assume Allocated(_46: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _46, version)
  // assume Allocated(_48: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _48, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _47 = std::rc::Rc::<i32>::strong_count(move _48) -> [return: bb20, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_47,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_48,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_48: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_48,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb20
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _7, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_8: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _8, version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _10, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _5, version)
  
  // [mir] _10 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_10,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_10: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _10, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _7, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_8: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _8, version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _10, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _5, version)
  
  // [mir] _9 = &(*_10)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_9,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_10,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_10,
    old_version)))
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_10: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_10,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_9: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _9, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _7, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_9: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _9, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_8: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _8, version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _10, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _5, version)
  
  // [mir] _8 = std::rc::Rc::<i32>::strong_count(move _9) -> [return: bb3, unwind: bb78]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_8, version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_9,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_9: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_9,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb3
  
  label bb20
  // ========== bb20 ==========
  
  // [mir] StorageDead(_48)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_47: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _47, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _45, version)
  // assume Allocated(_47: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _47, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_49: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _49, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _44, version)
  // assume Allocated(_46: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _46, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _46 = Eq(move _47, const 3_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_46, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_47,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(3)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _47 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_47,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_47)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_46: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _46,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _45, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_49: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _49, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _44, version)
  // assume Allocated(_46: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _46, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _45 = Not(move _46)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_45, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_46,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _46 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_46,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_49)
  
  // [mir] StorageDead(_46)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_45: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _45,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _45, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _44, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] switchInt(move _45) -> [0: bb22, otherwise: bb21]
  old_version := version
  version := bumpVersion(version)
  __t5 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_45,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t5) {
    goto l11
  }
  goto l10
  
  label bb21
  // ========== bb21 ==========
  
  // [mir] StorageLive(_50)
  
  // Ownership facts
  // assume WriteRef(_45: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _45,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_50: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _50, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _45, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _44, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _50 = core::panicking::panic(const "assertion failed: Rc::strong_count(&x) == 3") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&x) == 3"
  assert false
  // Framing facts
  // assume framing of WriteRef(_45: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_45,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb22
  // ========== bb22 ==========
  
  // Ownership facts
  // assume WriteRef(_45: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _45,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_45: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _45, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_44: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _44, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _44 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_44,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _45 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_45,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_45: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_45,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_45)
  
  // [mir] StorageDead(_44)
  
  // [mir] StorageLive(_51)
  
  // [mir] StorageLive(_52)
  
  // [mir] StorageLive(_53)
  
  // [mir] StorageLive(_54)
  
  // [mir] StorageLive(_55)
  
  // [mir] StorageLive(_56)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_55: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _55, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _52, version)
  // assume Allocated(_54: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _54, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_56: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _56, version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _51, version)
  // assume Allocated(_53: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _53, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _56 = &_12
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_56,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_56: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _56, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume LocalRef(_12: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _12, version)
  // assume Allocated(_55: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _55, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _52, version)
  // assume Allocated(_54: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _54, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_56: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _56, version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _51, version)
  // assume Allocated(_53: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _53, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _55 = &(*_56)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_55,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_56,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_56,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _56 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_56,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of ReadRef(_56: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_56,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_55: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _55, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume LocalRef(_12: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _12, version)
  // assume Allocated(_55: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _55, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _52, version)
  // assume Allocated(_54: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _54, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_56: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _56, version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _51, version)
  // assume Allocated(_53: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _53, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _54 = std::rc::Rc::<i32>::strong_count(move _55) -> [return: bb23, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_54,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_55,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_55: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_55,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  goto bb23
  
  label bb23
  // ========== bb23 ==========
  
  // [mir] StorageDead(_55)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_54: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _54, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _52, version)
  // assume Allocated(_54: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _54, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_56: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _56, version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _51, version)
  // assume Allocated(_53: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _53, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _53 = Eq(move _54, const 3_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_53, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_54,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(3)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _54 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_54,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_54)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_53: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5, _53,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _52, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_56: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _56, version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _51, version)
  // assume Allocated(_53: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _53, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _52 = Not(move _53)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_52, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_53,
    old_version)))
  // Fully-owned used place _53 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_53,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_56)
  
  // [mir] StorageDead(_53)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_52: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _52,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _52, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _51, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] switchInt(move _52) -> [0: bb25, otherwise: bb24]
  old_version := version
  version := bumpVersion(version)
  __t6 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_52,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t6) {
    goto l13
  }
  goto l12
  
  label bb24
  // ========== bb24 ==========
  
  // [mir] StorageLive(_57)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_52: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _52,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_57: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _57, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _52, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _51, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _57 = core::panicking::panic(const "assertion failed: Rc::strong_count(&y) == 3") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&y) == 3"
  assert false
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_52: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_52,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb25
  // ========== bb25 ==========
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_52: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _52,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_52: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _52, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_51: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _51, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _51 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_51,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _52 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_52,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_52: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_52,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_52)
  
  // [mir] StorageDead(_51)
  
  // [mir] StorageLive(_58)
  
  // [mir] StorageLive(_59)
  
  // [mir] StorageLive(_60)
  
  // [mir] StorageLive(_61)
  
  // [mir] StorageLive(_62)
  
  // [mir] StorageLive(_63)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_62: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _62, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_61: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _61, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_63: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _63, version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _58, version)
  // assume Allocated(_60: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _60, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _63 = &_42
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_63,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_63: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _63, version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_62: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _62, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_61: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(10,
    _61, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_63: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _63, version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _58, version)
  // assume Allocated(_60: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _60, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _62 = &(*_63)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_62,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_63,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_63,
    old_version)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _63 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_63,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_63: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_63,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_62: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _62, version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_62: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _62, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_61: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(10,
    _61, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_63: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _63, version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _58, version)
  // assume Allocated(_60: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _60, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _61 = std::rc::Rc::<i32>::strong_count(move _62) -> [return: bb26, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_61,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_62,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_62: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_62,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb26
  
  label bb26
  // ========== bb26 ==========
  
  // [mir] StorageDead(_62)
  
  // Ownership facts
  // assume WriteRef(_61: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(1,
    _61, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_61: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _61, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_63: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _63, version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _58, version)
  // assume Allocated(_60: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _60, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _60 = Eq(move _61, const 3_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_60, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_61,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(3)))
  // Fully-owned used place _61 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_61,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_61)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_60: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5, _60,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_63: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _63, version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _58, version)
  // assume Allocated(_60: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _60, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _59 = Not(move _60)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_59, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_60,
    old_version)))
  // Fully-owned used place _60 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_60,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_63)
  
  // [mir] StorageDead(_60)
  
  // Ownership facts
  // assume WriteRef(_59: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _59,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _58, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] switchInt(move _59) -> [0: bb28, otherwise: bb27]
  old_version := version
  version := bumpVersion(version)
  __t7 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_59,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t7) {
    goto l15
  }
  goto l14
  
  label bb27
  // ========== bb27 ==========
  
  // [mir] StorageLive(_64)
  
  // Ownership facts
  // assume WriteRef(_59: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _59,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_64: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _64, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _58, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _64 = core::panicking::panic(const "assertion failed: Rc::strong_count(&z) == 3") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&z) == 3"
  assert false
  // Framing facts
  // assume framing of WriteRef(_59: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_59,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb28
  // ========== bb28 ==========
  
  // Ownership facts
  // assume WriteRef(_59: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _59,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_59: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _59, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_58: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _58, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _58 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_58,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _59 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_59,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_59: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_59,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_59)
  
  // [mir] StorageDead(_58)
  
  // [mir] StorageLive(_65)
  
  // [mir] StorageLive(_66)
  
  // [mir] StorageLive(_67)
  
  // [mir] StorageLive(_68)
  
  // [mir] StorageLive(_69)
  
  // [mir] StorageLive(_70)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_69: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(5,
    _69, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_68: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _68,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_70: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _70, version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  // assume Allocated(_67: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _67, version)
  
  // [mir] _70 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_70,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_70: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _70, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_69: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _69, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_68: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _68,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_70: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _70, version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  // assume Allocated(_67: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _67, version)
  
  // [mir] _69 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _70) -> [return: bb29, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_69,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_70,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_70: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_70,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb29
  
  label bb29
  // ========== bb29 ==========
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_69: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _69, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume ReadRef(_2: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_69: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _69, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_68: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _68,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_70: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _70, version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  // assume Allocated(_67: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _67, version)
  
  // [mir] _68 = (*_69)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_68, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_69,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _69 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_69,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_69: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_69,
    old_version, version)
  
  // [mir] StorageDead(_70)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_68: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _68,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_69: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _69, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_68: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _68,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  // assume Allocated(_67: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _67, version)
  
  // [mir] _67 = Eq(move _68, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_67, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_68,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _68 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_68,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_68)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_67: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _67,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_69: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(6,
    _69, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  // assume Allocated(_67: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _67, version)
  
  // [mir] _66 = Not(move _67)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_66, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_67,
    old_version)))
  // Fully-owned used place _67 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_67,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_69)
  
  // [mir] StorageDead(_67)
  
  // Ownership facts
  // assume WriteRef(_66: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _66,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] switchInt(move _66) -> [0: bb31, otherwise: bb30]
  old_version := version
  version := bumpVersion(version)
  __t8 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_66,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t8) {
    goto l17
  }
  goto l16
  
  label bb3
  // ========== bb3 ==========
  
  // [mir] StorageDead(_9)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_8: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(2,
    _8, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _7, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_8: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _8, version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _10, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _5, version)
  
  // [mir] _7 = Eq(move _8, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_7, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_8,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_7: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _7,
    version)
  // assume Allocated(_7: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _7, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_10: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _10, version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _5, version)
  
  // [mir] _6 = Not(move _7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_6, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_7,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_10)
  
  // [mir] StorageDead(_7)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _5, version)
  
  // [mir] switchInt(move _6) -> [0: bb5, otherwise: bb4]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_6,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb30
  // ========== bb30 ==========
  
  // [mir] StorageLive(_71)
  
  // Ownership facts
  // assume WriteRef(_66: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _66,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_71: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _71, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _71 = core::panicking::panic(const "assertion failed: *x == 123") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *x == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_66: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_66,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb31
  // ========== bb31 ==========
  
  // Ownership facts
  // assume WriteRef(_66: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _66,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_66: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _66, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_65: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _65, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _65 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_65,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _66 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_66,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_66: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_66,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_66)
  
  // [mir] StorageDead(_65)
  
  // [mir] StorageLive(_72)
  
  // [mir] StorageLive(_73)
  
  // [mir] StorageLive(_74)
  
  // [mir] StorageLive(_75)
  
  // [mir] StorageLive(_76)
  
  // [mir] StorageLive(_77)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_74: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _74, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_76: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(7,
    _76, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_75: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _75,
    version)
  // assume Allocated(_77: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _77, version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _77 = &_12
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_77,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_77: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _77, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume LocalRef(_12: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _12, version)
  // assume Allocated(_74: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _74, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_76: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _76, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_75: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _75,
    version)
  // assume Allocated(_77: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _77, version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(14,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _76 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _77) -> [return: bb32, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_76,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_77,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_77: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_77,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  goto bb32
  
  label bb32
  // ========== bb32 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_76: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _76, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume ReadRef(_12: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _12, version)
  // assume Allocated(_74: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _74, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_76: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _76, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_75: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _75,
    version)
  // assume Allocated(_77: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _77, version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(14,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _75 = (*_76)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_75, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_76,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _76 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_76,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of ReadRef(_76: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_76,
    old_version, version)
  
  // [mir] StorageDead(_77)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _12, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_75: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _75,
    version)
  // assume Allocated(_74: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _74, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_76: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _76, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_75: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _75,
    version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _74 = Eq(move _75, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_74, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_75,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _75 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_75,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_75)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_74: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _74,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_74: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _74, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_76: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _76, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _73 = Not(move _74)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_73, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_74,
    old_version)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _74 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_74,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_76)
  
  // [mir] StorageDead(_74)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_73: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _73,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] switchInt(move _73) -> [0: bb34, otherwise: bb33]
  old_version := version
  version := bumpVersion(version)
  __t9 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_73,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t9) {
    goto l19
  }
  goto l18
  
  label bb33
  // ========== bb33 ==========
  
  // [mir] StorageLive(_78)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_73: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _73,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_78: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _78, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _78 = core::panicking::panic(const "assertion failed: *y == 123") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *y == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_73: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_73,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb34
  // ========== bb34 ==========
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_73: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _73,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_73: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _73, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_72: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _72, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _72 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_72,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _73 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_73,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_73: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_73,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_73)
  
  // [mir] StorageDead(_72)
  
  // [mir] StorageLive(_79)
  
  // [mir] StorageLive(_80)
  
  // [mir] StorageLive(_81)
  
  // [mir] StorageLive(_82)
  
  // [mir] StorageLive(_83)
  
  // [mir] StorageLive(_84)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_81: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _81, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_83: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(7,
    _83, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_82: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _82,
    version)
  // assume Allocated(_84: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _84, version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _84 = &_42
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_84,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_84: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _84, version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_81: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _81, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_83: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _83, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_82: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _82,
    version)
  // assume Allocated(_84: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _84, version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(14,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _83 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _84) -> [return: bb35, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_83,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_84,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_84: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_84,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb35
  
  label bb35
  // ========== bb35 ==========
  
  // Ownership facts
  // assume WriteRef(_83: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(1,
    _83, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume ReadRef(_42: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_81: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _81, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_83: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _83, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_82: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _82,
    version)
  // assume Allocated(_84: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _84, version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(14,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _82 = (*_83)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_82, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_83,
    old_version))
  // Fully-owned used place _83 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_83,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_83: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_83,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_84)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume WriteRef(_82: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _82,
    version)
  // assume Allocated(_81: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _81, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_83: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _83, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_82: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _82,
    version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _81 = Eq(move _82, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_81, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_82,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _82 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_82,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_82)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_81: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _81,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_81: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _81, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_83: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _83, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _80 = Not(move _81)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_80, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_81,
    old_version)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _81 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_81,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_83)
  
  // [mir] StorageDead(_81)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_80: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _80,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] switchInt(move _80) -> [0: bb37, otherwise: bb36]
  old_version := version
  version := bumpVersion(version)
  __t10 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_80,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t10) {
    goto l21
  }
  goto l20
  
  label bb36
  // ========== bb36 ==========
  
  // [mir] StorageLive(_85)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_80: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _80,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_85: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _85, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _85 = core::panicking::panic(const "assertion failed: *z == 123") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *z == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_80: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_80,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb37
  // ========== bb37 ==========
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_80: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _80,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_80: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _80, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_79: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _79, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _79 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_79,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _80 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_80,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_80: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_80,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_80)
  
  // [mir] StorageDead(_79)
  
  // [mir] StorageLive(_86)
  
  // [mir] StorageLive(_87)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_86: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _86, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_87: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _87, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _87 = move _12
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
    version) ==
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    old_version)
  // Place _12 has been moved
  inhale move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(_12,
    old_version, _87, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_87: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _87, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_86: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _86, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_87: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _87, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _86 = libraries::lib_rc::drop_rc::<i32>(move _87) -> [return: bb38, unwind: bb75]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_87: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_87,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_87: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _87, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_86: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _86, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_87: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _87, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  // Check the preconditions (num: 1) of the call
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
    old_version)), old_version)) >=
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))))))
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
    old_version)), old_version)) >=
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(2)))))) ?
      (!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
      old_version)), old_version)) -
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))),
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
      old_version)), old_version)) -
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) <
      0 ||
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
      old_version)), old_version)) -
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) >
      18446744073709551615)))) ?
        (!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Usize$MemorySnapshot$ConstPtr$Usize$Version$MemorySnapshot$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        old_version)))))), version)) ==
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        old_version)), old_version)) -
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))),
        new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        old_version)), old_version)) -
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) <
        0 ||
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
        old_version)), old_version)) -
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) >
        18446744073709551615)))))) ?
          new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
          new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
          deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
          old_version)))))), version) ==
          m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
          deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_87,
          old_version)))))), old_version))))))) :
        new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _87, version)
  // frame ShallowlyOwned(arg#0: std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_87,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb38
  
  label bb38
  // ========== bb38 ==========
  
  // [mir] StorageDead(_87)
  
  // [mir] StorageDead(_86)
  
  // [mir] StorageLive(_88)
  
  // [mir] StorageLive(_89)
  
  // [mir] StorageLive(_90)
  
  // [mir] StorageLive(_91)
  
  // [mir] StorageLive(_92)
  
  // [mir] StorageLive(_93)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_93: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _93, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _88, version)
  // assume Allocated(_90: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _90, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_92: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _92, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _89, version)
  // assume Allocated(_91: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(12,
    _91, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _93 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_93,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_93: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _93, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_93: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _93, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _88, version)
  // assume Allocated(_90: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _90, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_92: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _92, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _89, version)
  // assume Allocated(_91: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(13,
    _91, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _92 = &(*_93)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_92,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_93,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_93,
    old_version)))
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _93 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_93,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_93: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_93,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_92: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _92, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_93: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _93, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _88, version)
  // assume Allocated(_90: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _90, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_92: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _92, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _89, version)
  // assume Allocated(_91: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(13,
    _91, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _91 = std::rc::Rc::<i32>::strong_count(move _92) -> [return: bb39, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_91,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_92,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_92: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_92,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb39
  
  label bb39
  // ========== bb39 ==========
  
  // [mir] StorageDead(_92)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_91: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _91, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_93: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _93, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _88, version)
  // assume Allocated(_90: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _90, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _89, version)
  // assume Allocated(_91: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(12,
    _91, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _90 = Eq(move _91, const 2_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_90, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_91,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(2)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _91 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_91,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_91)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_90: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _90,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_93: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _93, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _88, version)
  // assume Allocated(_90: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _90, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _89, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _89 = Not(move _90)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_89, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_90,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _90 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_90,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_93)
  
  // [mir] StorageDead(_90)
  
  // Ownership facts
  // assume WriteRef(_89: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _89,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _88, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _89, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _89) -> [0: bb41, otherwise: bb40]
  old_version := version
  version := bumpVersion(version)
  __t11 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_89,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t11) {
    goto l23
  }
  goto l22
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageLive(_11)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_11: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _11, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _5, version)
  
  // [mir] _11 = core::panicking::panic(const "assertion failed: Rc::strong_count(&x) == 1") -> bb78
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&x) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb40
  // ========== bb40 ==========
  
  // [mir] StorageLive(_94)
  
  // Ownership facts
  // assume WriteRef(_89: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _89,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _88, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_94: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(9,
    _94, version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _89, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _94 = core::panicking::panic(const "assertion failed: Rc::strong_count(&x) == 2") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&x) == 2"
  assert false
  // Framing facts
  // assume framing of WriteRef(_89: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_89,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb41
  // ========== bb41 ==========
  
  // Ownership facts
  // assume WriteRef(_89: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _89,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_88: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _88, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_89: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _89, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _88 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_88,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _89 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_89,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_89: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_89,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_89)
  
  // [mir] StorageDead(_88)
  
  // [mir] StorageLive(_95)
  
  // [mir] StorageLive(_96)
  
  // [mir] StorageLive(_97)
  
  // [mir] StorageLive(_98)
  
  // [mir] StorageLive(_99)
  
  // [mir] StorageLive(_100)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_98: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _98, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_100: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _100, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_97: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _97, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_99: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _99, version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _100 = &_42
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_100,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_100: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _100, version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_98: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _98, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_100: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _100, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_97: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _97, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_99: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _99, version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _99 = &(*_100)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_99,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_100,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_100,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _100 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_100,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_100: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_100,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_99: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _99, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_98: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _98, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_100: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _100, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_97: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _97, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_99: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _99, version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _98 = std::rc::Rc::<i32>::strong_count(move _99) -> [return: bb42, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_98,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_99,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_99: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_99,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb42
  
  label bb42
  // ========== bb42 ==========
  
  // [mir] StorageDead(_99)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_98: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _98, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_98: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _98, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_100: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _100, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_97: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _97, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _97 = Eq(move _98, const 2_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_97, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_98,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(2)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _98 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_98,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_98)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_97: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _97,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_100: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _100, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_97: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _97, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _96 = Not(move _97)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_96, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_97,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _97 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_97,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_100)
  
  // [mir] StorageDead(_97)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_96: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _96,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _96) -> [0: bb44, otherwise: bb43]
  old_version := version
  version := bumpVersion(version)
  __t12 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_96,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t12) {
    goto l25
  }
  goto l24
  
  label bb43
  // ========== bb43 ==========
  
  // [mir] StorageLive(_101)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_96: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _96,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_101: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(9,
    _101, version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _101 = core::panicking::panic(const "assertion failed: Rc::strong_count(&z) == 2") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&z) == 2"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_96: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_96,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb44
  // ========== bb44 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_96: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _96,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_95: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _95, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_96: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _96, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _95 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_95,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _96 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_96,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_96: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_96,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_96)
  
  // [mir] StorageDead(_95)
  
  // [mir] StorageLive(_102)
  
  // [mir] StorageLive(_103)
  
  // [mir] StorageLive(_104)
  
  // [mir] StorageLive(_105)
  
  // [mir] StorageLive(_106)
  
  // [mir] StorageLive(_107)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_105: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _105,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_107: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _107, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_104: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _104, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_106: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _106, version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _107 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_107,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_107: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _107, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_105: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _105,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_107: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _107, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_104: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _104, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_106: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _106, version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _106 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _107) -> [return: bb45, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_106,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_107,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_107: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_107,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb45
  
  label bb45
  // ========== bb45 ==========
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_106: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _106, version)
  // assume ReadRef(_2: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_105: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _105,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_107: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _107, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_104: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _104, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_106: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _106, version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _105 = (*_106)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_105, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_106,
    old_version))
  // Fully-owned used place _106 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_106,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_106: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_106,
    old_version, version)
  
  // [mir] StorageDead(_107)
  
  // Ownership facts
  // assume WriteRef(_105: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _105,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_105: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _105,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_104: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _104, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_106: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _106, version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _104 = Eq(move _105, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_104, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_105,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _105 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_105,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_105)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_104: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _104,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_104: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _104, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_106: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(10,
    _106, version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _103 = Not(move _104)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_103, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_104,
    old_version)))
  // Fully-owned used place _104 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_104,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_106)
  
  // [mir] StorageDead(_104)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_103: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _103,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _103) -> [0: bb47, otherwise: bb46]
  old_version := version
  version := bumpVersion(version)
  __t13 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_103,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t13) {
    goto l27
  }
  goto l26
  
  label bb46
  // ========== bb46 ==========
  
  // [mir] StorageLive(_108)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_103: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _103,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_108: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(9,
    _108, version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _108 = core::panicking::panic(const "assertion failed: *x == 123") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *x == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_103: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_103,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb47
  // ========== bb47 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_103: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _103,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_102: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _102, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_103: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _103, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _102 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_102,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _103 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_103,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_103: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_103,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_103)
  
  // [mir] StorageDead(_102)
  
  // [mir] StorageLive(_109)
  
  // [mir] StorageLive(_110)
  
  // [mir] StorageLive(_111)
  
  // [mir] StorageLive(_112)
  
  // [mir] StorageLive(_113)
  
  // [mir] StorageLive(_114)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_112: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _112,
    version)
  // assume Allocated(_114: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _114, version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_111: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _111, version)
  // assume Allocated(_113: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _113, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _114 = &_42
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_114,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_114: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _114, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_112: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _112,
    version)
  // assume Allocated(_114: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _114, version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_111: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _111, version)
  // assume Allocated(_113: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(13,
    _113, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _113 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _114) -> [return: bb48, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_113,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_114,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_114: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_114,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb48
  
  label bb48
  // ========== bb48 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_113: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _113, version)
  // assume ReadRef(_42: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_112: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _112,
    version)
  // assume Allocated(_114: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _114, version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_111: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _111, version)
  // assume Allocated(_113: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(13,
    _113, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _112 = (*_113)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_112, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_113,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _113 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_113,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_113: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_113,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_114)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_112: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _112,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_112: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _112,
    version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_111: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _111, version)
  // assume Allocated(_113: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(12,
    _113, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _111 = Eq(move _112, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_111, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_112,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _112 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_112,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_112)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_111: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _111,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_111: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _111, version)
  // assume Allocated(_113: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _113, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _110 = Not(move _111)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_110, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_111,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _111 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_111,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_113)
  
  // [mir] StorageDead(_111)
  
  // Ownership facts
  // assume WriteRef(_110: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _110,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _110) -> [0: bb50, otherwise: bb49]
  old_version := version
  version := bumpVersion(version)
  __t14 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_110,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t14) {
    goto l29
  }
  goto l28
  
  label bb49
  // ========== bb49 ==========
  
  // [mir] StorageLive(_115)
  
  // Ownership facts
  // assume WriteRef(_110: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _110,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_115: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(10,
    _115, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _115 = core::panicking::panic(const "assertion failed: *z == 123") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *z == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_110: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_110,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb5
  // ========== bb5 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_6: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _6, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_5: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _5, version)
  
  // [mir] _5 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_5,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_13: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _12, version)
  
  // [mir] _13 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_13: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _13, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_13: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _12, version)
  
  // [mir] _12 = <std::rc::Rc<i32> as std::clone::Clone>::clone(move _13) -> [return: bb6, unwind: bb78]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_13: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_13,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_13: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _13, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_13: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _12, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 4) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version)) ==
    get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version), old_version))), new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version), old_version)) <
    0 ||
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version), old_version)) >
    18446744073709551615)))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
      version), version)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
      old_version), old_version))), new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
      old_version), old_version)) <
      0 ||
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) +
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
      old_version), old_version)) >
      18446744073709551615))))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    version)))))) ==
    new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version)))))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    version)))))) ==
    new_memory_snap_of_MutPtr$Usize__$TY$__Address$Usize$MemorySnapshot$MutPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version)))))))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _13, version)
  // frame ShallowlyOwned(arg#0: &std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_13,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb6
  
  label bb50
  // ========== bb50 ==========
  
  // Ownership facts
  // assume WriteRef(_110: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _110,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_110: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _110, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_109: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _109, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _109 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_109,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _110 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_110,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_110: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_110,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_110)
  
  // [mir] StorageDead(_109)
  
  // [mir] StorageLive(_116)
  
  // [mir] StorageLive(_117)
  
  // [mir] StorageLive(_118)
  
  // [mir] StorageLive(_119)
  
  // [mir] StorageLive(_120)
  
  // [mir] StorageLive(_121)
  
  // [mir] StorageLive(_122)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _122, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_119: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _119, version)
  // assume Allocated(_121: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _121, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_118: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _118, version)
  // assume Allocated(_120: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _120, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _122 = &mut _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_122,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _122, version)
  // assume Allocated(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _122, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_119: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _119, version)
  // assume Allocated(_121: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _121, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_118: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _118, version)
  // assume Allocated(_120: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _120, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _121 = &mut (*_122)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_122,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_122,
    old_version)))
  // Fully-owned used place _122 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_122,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_121: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _121, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _122, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_119: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _119, version)
  // assume Allocated(_121: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _121, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_118: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _118, version)
  // assume Allocated(_120: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _120, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _120 = std::rc::Rc::<i32>::get_mut(move _121) -> [return: bb51, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_121: &mut std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_121,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_121: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _121, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _122, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_119: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _119, version)
  // assume Allocated(_121: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _121, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_118: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _118, version)
  // assume Allocated(_120: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _120, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_50_pre_version := old_version
  _call_50_blocked_address_0 := get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    old_version))
  // Assume the postconditions (num: 5) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version) ==
    deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version))))))), version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    old_version))))))), old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    old_version))), old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_120,
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_120,
      version)))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_120,
    version)))) ==
    1 ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_120),
      version)))) ==
      get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
      old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_121,
      old_version))))))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _121, version)
  // frame ShallowlyOwned(arg#0: &mut std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_121,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb51
  
  label bb51
  // ========== bb51 ==========
  
  // Ownership facts
  // assume WriteRef(_120: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _120, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _122, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_119: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _119, version)
  // assume Allocated(_121: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _121, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_118: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _118, version)
  // assume Allocated(_120: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _120, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _119 = &_120
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_119,
    version) ==
    new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_120,
    deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_120,
    old_version))
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Fully-owned used place _120 does not change
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_120,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_120: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_120,
    old_version, version)
  
  // [mir] StorageDead(_121)
  
  // Ownership facts
  // assume WriteRef(_119: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _119, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume LocalRef(_120: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(4,
    _120, version)
  // assume Allocated(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _122, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_119: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _119, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _1,
    version)
  // assume Allocated(_118: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _118, version)
  // assume Allocated(_120: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _120, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _118 = std::option::Option::<&mut i32>::is_none(move _119) -> [return: bb52, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_118, version) ==
    convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(m_std$$option$$Option$$$openang$T$closeang$$$is_none__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_119,
    old_version))))
  // Framing facts
  // assume framing of WriteRef(_119: &std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_119,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of LocalRef(_120: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_120,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_120: std::option::Option<&mut i32>)
  inhale frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_120,
    old_version, version)
  goto l30
  
  label bb52
  // ========== bb52 ==========
  
  // [mir] StorageDead(_119)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_118: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _118,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_122: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _122, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_118: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _118, version)
  // assume Allocated(_120: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(12,
    _120, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _117 = Not(move _118)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_117, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_118,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _118 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_118,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_122)
  
  // [mir] StorageDead(_120)
  
  // [mir] StorageDead(_118)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_117: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _117,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _117) -> [0: bb54, otherwise: bb53]
  old_version := version
  version := bumpVersion(version)
  __t15 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_117,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t15) {
    goto l32
  }
  goto l31
  
  label bb53
  // ========== bb53 ==========
  
  // [mir] StorageLive(_123)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_117: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _117,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_123: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(10,
    _123, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _123 = core::panicking::panic(const "assertion failed: Rc::get_mut(&mut x).is_none()") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::get_mut(&mut x).is_none()"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_117: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_117,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb54
  // ========== bb54 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_117: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _117,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_117: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _117, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_116: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _116, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _116 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_116,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _117 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_117,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_117: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_117,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_117)
  
  // [mir] StorageDead(_116)
  
  // [mir] StorageLive(_124)
  
  // [mir] StorageLive(_125)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_124: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _124, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_125: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _125, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _125 = move _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
    version) ==
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version)
  // Place _2 has been moved
  inhale move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(_2,
    old_version, _125, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_125: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _125, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_124: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _124, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_125: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _125, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _124 = libraries::lib_rc::drop_rc::<i32>(move _125) -> [return: bb55, unwind: bb74]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_125: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_125,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_125: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _125, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_124: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _124, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_125: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _125, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  // Check the preconditions (num: 1) of the call
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
    old_version)), old_version)) >=
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))))))
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
    old_version)), old_version)) >=
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(2)))))) ?
      (!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(get_memory_field_f$1_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Bool(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
      old_version)), old_version)) -
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))),
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
      old_version)), old_version)) -
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) <
      0 ||
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
      old_version)), old_version)) -
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) >
      18446744073709551615)))) ?
        (!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$Usize$MemorySnapshot$ConstPtr$Usize$Version$MemorySnapshot$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        old_version)))))), version)) ==
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(get_memory_field_f$0_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Tuple2$Usize$Bool$MemorySnapshot$Usize(new_memory_snap_of_Tuple2$Usize$Bool__$TY$__MemorySnapshot$Usize$MemorySnapshot$Bool$MemorySnapshot$Tuple2$Usize$Bool(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        old_version)), old_version)) -
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))),
        new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        old_version)), old_version)) -
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) <
        0 ||
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
        old_version)), old_version)) -
        get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)) >
        18446744073709551615)))))) ?
          new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false))))) :
          new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
          deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
          old_version)))))), version) ==
          m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
          deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_125,
          old_version)))))), old_version))))))) :
        new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _125, version)
  // frame ShallowlyOwned(arg#0: std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_125,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb55
  
  label bb55
  // ========== bb55 ==========
  
  // [mir] StorageDead(_125)
  
  // [mir] StorageDead(_124)
  
  // [mir] StorageLive(_126)
  
  // [mir] StorageLive(_127)
  
  // [mir] StorageLive(_128)
  
  // [mir] StorageLive(_129)
  
  // [mir] StorageLive(_130)
  
  // [mir] StorageLive(_131)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _42, version)
  // assume Allocated(_129: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _129, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_131: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _131, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_128: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _128, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_130: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _130, version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _131 = &_42
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_131,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_131: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _131, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_129: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _129, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_131: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _131, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_128: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _128, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_130: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _130, version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _130 = &(*_131)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_130,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_131,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_131,
    old_version)))
  // Fully-owned used place _131 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_131,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_131: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_131,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_130: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _130, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_129: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _129, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_131: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _131, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_128: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _128, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_130: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _130, version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _129 = std::rc::Rc::<i32>::strong_count(move _130) -> [return: bb56, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_129,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_130,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_130: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_130,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb56
  
  label bb56
  // ========== bb56 ==========
  
  // [mir] StorageDead(_130)
  
  // Ownership facts
  // assume WriteRef(_129: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(1,
    _129, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_129: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _129, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_131: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _131, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_128: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _128, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _128 = Eq(move _129, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_128, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_129,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _129 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_129,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_129)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_128: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _128,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_131: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _131, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_128: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _128, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _127 = Not(move _128)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_127, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_128,
    old_version)))
  // Fully-owned used place _128 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_128,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_131)
  
  // [mir] StorageDead(_128)
  
  // Ownership facts
  // assume WriteRef(_127: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _127,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] switchInt(move _127) -> [0: bb58, otherwise: bb57]
  old_version := version
  version := bumpVersion(version)
  __t16 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_127,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t16) {
    goto l34
  }
  goto l33
  
  label bb57
  // ========== bb57 ==========
  
  // [mir] StorageLive(_132)
  
  // Ownership facts
  // assume WriteRef(_127: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _127,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_132: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _132, version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _132 = core::panicking::panic(const "assertion failed: Rc::strong_count(&z) == 1") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&z) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_127: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_127,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb58
  // ========== bb58 ==========
  
  // Ownership facts
  // assume WriteRef(_127: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _127,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_126: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _126, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_127: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _127, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _126 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_126,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _127 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_127,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_127: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_127,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_127)
  
  // [mir] StorageDead(_126)
  
  // [mir] StorageLive(_133)
  
  // [mir] StorageLive(_134)
  
  // [mir] StorageLive(_135)
  
  // [mir] StorageLive(_136)
  
  // [mir] StorageLive(_137)
  
  // [mir] StorageLive(_138)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _42, version)
  // assume Allocated(_136: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _136,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_138: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _138, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_135: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _135, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_137: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(10,
    _137, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _134, version)
  
  // [mir] _138 = &_42
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_138,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_138: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _138, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_136: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _136,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_138: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _138, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_135: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _135, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_137: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _137, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _134, version)
  
  // [mir] _137 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _138) -> [return: bb59, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_137,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_138,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_138: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_138,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb59
  
  label bb59
  // ========== bb59 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_137: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _137, version)
  // assume ReadRef(_42: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_136: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _136,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_138: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _138, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _42, version)
  // assume Allocated(_135: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _135, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_137: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _137, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _134, version)
  
  // [mir] _136 = (*_137)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_136, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_137,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _137 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_137,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_137: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_137,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_138)
  
  // Ownership facts
  // assume WriteRef(_136: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _136,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_136: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _136,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_135: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _135, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_137: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(10,
    _137, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _134, version)
  
  // [mir] _135 = Eq(move _136, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_135, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_136,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _136 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_136,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_136)
  
  // Ownership facts
  // assume WriteRef(_135: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _135,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_135: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _135, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_137: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _137, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _134, version)
  
  // [mir] _134 = Not(move _135)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_134, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_135,
    old_version)))
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _135 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_135,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_137)
  
  // [mir] StorageDead(_135)
  
  // Ownership facts
  // assume WriteRef(_134: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _134,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _134, version)
  
  // [mir] switchInt(move _134) -> [0: bb61, otherwise: bb60]
  old_version := version
  version := bumpVersion(version)
  __t17 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_134,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t17) {
    goto l36
  }
  goto l35
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageDead(_13)
  
  // [mir] FakeRead(ForLet(None), _12)
  
  // [mir] StorageLive(_14)
  
  // [mir] StorageLive(_15)
  
  // [mir] StorageLive(_16)
  
  // [mir] StorageLive(_17)
  
  // [mir] StorageLive(_18)
  
  // [mir] StorageLive(_19)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_19: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _19, version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _16, version)
  // assume Allocated(_18: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _15, version)
  // assume Allocated(_17: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _17,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _19 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_19: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _19, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_19: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _19, version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _16, version)
  // assume Allocated(_18: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _18, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _15, version)
  // assume Allocated(_17: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _17,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _18 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _19) -> [return: bb7, unwind: bb77]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_18,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_19: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_19,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb7
  
  label bb60
  // ========== bb60 ==========
  
  // [mir] StorageLive(_139)
  
  // Ownership facts
  // assume WriteRef(_134: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _134,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_139: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _139, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _134, version)
  
  // [mir] _139 = core::panicking::panic(const "assertion failed: *z == 123") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *z == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_134: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_134,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb61
  // ========== bb61 ==========
  
  // Ownership facts
  // assume WriteRef(_134: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _134,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_133: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _133, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _12, version)
  // assume Allocated(_134: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _134, version)
  
  // [mir] _133 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_133,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _134 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_134,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_134: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_134,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_134)
  
  // [mir] StorageDead(_133)
  
  // [mir] StorageLive(_140)
  
  // [mir] StorageLive(_141)
  
  // [mir] StorageLive(_142)
  
  // [mir] StorageLive(_143)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _42, version)
  // assume Allocated(_141: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _141, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_143: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _143, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_142: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _142, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _143 = &mut _42
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_143,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_143: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _143, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_141: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _141, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_143: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _143, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_142: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _142, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _142 = &mut (*_143)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_143,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_143,
    old_version)))
  // Fully-owned used place _143 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_143,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_142: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _142, version)
  // assume Allocated(_141: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _141, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_143: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _143, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_142: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _142, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _141 = std::rc::Rc::<i32>::get_mut(move _142) -> [return: bb62, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_142: &mut std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_142,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_142: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _142, version)
  // assume Allocated(_141: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _141, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_143: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _143, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_142: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _142, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_61_pre_version := old_version
  _call_61_blocked_address_0 := get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    old_version))
  // Assume the postconditions (num: 5) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version) ==
    deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version))))))), version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    old_version))))))), old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    old_version))), old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_141,
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_141,
      version)))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_141,
    version)))) ==
    1 ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_141),
      version)))) ==
      get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
      old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_142,
      old_version))))))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _142, version)
  // frame ShallowlyOwned(arg#0: &mut std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_142,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb62
  
  label bb62
  // ========== bb62 ==========
  
  // [mir] StorageDead(_142)
  
  // Ownership facts
  // assume WriteRef(_141: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _141, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_141: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _141, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_143: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _143, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _140 = std::option::Option::<&mut i32>::unwrap(move _141) -> [return: bb63, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_141: std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_141,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_141: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _141, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_141: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _141, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_143: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _143, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  // Check the preconditions (num: 1) of the call
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_141,
    deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_141,
    old_version)))))))))
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_141)))),
    old_version, get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(_140))),
    version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(-1,
    _141, version)
  // frame ShallowlyOwned(arg#0: std::option::Option<&mut i32>)
  inhale frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_141,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb63
  
  label bb63
  // ========== bb63 ==========
  
  // [mir] StorageDead(_141)
  
  // [mir] FakeRead(ForLet(None), _140)
  
  // [mir] StorageDead(_143)
  
  // [mir] StorageLive(_144)
  
  // [mir] StorageLive(_145)
  
  // [mir] StorageLive(_146)
  
  // [mir] StorageLive(_147)
  
  // Ownership facts
  // assume WriteRef(_140: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _140, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_145: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _145, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _140, version)
  // assume Allocated(_147: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _147,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_144: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _144, version)
  // assume Allocated(_146: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _146, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _147 = (*_140)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_147, version) ==
    get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_140,
    old_version))
  // Fully-owned used place _140 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_140,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_140: &mut i32)
  inhale frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_140,
    old_version, version)
  // Allocation facts
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume Allocated(_145: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2,
    _145, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _140, version)
  // assume Allocated(_147: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _147,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_144: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _144, version)
  // assume Allocated(_146: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _146, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  // Applying pledges of function alloc::std::rc::Rc::<T>::get_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    version)) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    _call_61_pre_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    version)))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    _call_61_pre_version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_61_blocked_address_0,
    _call_61_pre_version)))), _call_61_pre_version))))))))
  
  // Ownership facts
  // assume WriteRef(_147: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _147,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_145: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _145, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_147: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _147,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_144: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _144, version)
  // assume Allocated(_146: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _146, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _146 = Eq(move _147, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_146, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_147,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _147 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_147,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_147)
  
  // Ownership facts
  // assume WriteRef(_146: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _146,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_145: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _145, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_144: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _144, version)
  // assume Allocated(_146: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _146, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _145 = Not(move _146)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_145, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_146,
    old_version)))
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _146 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_146,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_146)
  
  // Ownership facts
  // assume WriteRef(_145: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _145,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_145: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _145, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_144: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _144, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _145) -> [0: bb65, otherwise: bb64]
  old_version := version
  version := bumpVersion(version)
  __t18 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_145,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t18) {
    goto l38
  }
  goto l37
  
  label bb64
  // ========== bb64 ==========
  
  // [mir] StorageLive(_148)
  
  // Ownership facts
  // assume WriteRef(_145: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _145,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_148: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _148, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_145: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _145, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_144: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _144, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _148 = core::panicking::panic(const "assertion failed: *data == 123") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *data == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_145: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_145,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto end_of_method
  
  label bb65
  // ========== bb65 ==========
  
  // Ownership facts
  // assume WriteRef(_145: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _145,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_145: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _145, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_144: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _144, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _144 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_144,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _145 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_145,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_145: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_145,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_145)
  
  // [mir] StorageDead(_144)
  
  // [mir] StorageLive(_149)
  
  // [mir] StorageLive(_150)
  
  // [mir] StorageLive(_151)
  
  // [mir] StorageLive(_152)
  
  // [mir] StorageLive(_153)
  
  // [mir] StorageLive(_154)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _42, version)
  // assume Allocated(_153: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _153, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_152: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(7,
    _152, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_154: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _154, version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _149, version)
  // assume Allocated(_151: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _151, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _154 = &_42
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_154,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_42,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_154: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _154, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_153: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _153, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_152: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _152, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_154: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _154, version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _149, version)
  // assume Allocated(_151: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _151, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _153 = &(*_154)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_153,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_154,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_154,
    old_version)))
  // Fully-owned used place _154 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_154,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of ReadRef(_154: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_154,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_153: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _153, version)
  // assume LocalRef(_42: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_153: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _153, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_152: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _152, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_154: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _154, version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _149, version)
  // assume Allocated(_151: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(13,
    _151, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(14,
    _12, version)
  
  // [mir] _152 = std::rc::Rc::<i32>::strong_count(move _153) -> [return: bb66, unwind: bb76]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_152,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_153,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_153: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_153,
    old_version, version)
  // assume framing of LocalRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  goto bb66
  
  label bb66
  // ========== bb66 ==========
  
  // [mir] StorageDead(_153)
  
  // Ownership facts
  // assume WriteRef(_152: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(1,
    _152, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_152: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(7,
    _152, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_154: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _154, version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _149, version)
  // assume Allocated(_151: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _151, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _151 = Eq(move _152, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_151, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_152,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _152 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_152,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_152)
  
  // Ownership facts
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _42, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_151: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _151,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_154: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _154, version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _149, version)
  // assume Allocated(_151: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _151, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _150 = Not(move _151)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_150, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_151,
    old_version)))
  // Fully-owned used place _151 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_151,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_154)
  
  // [mir] StorageDead(_151)
  
  // Ownership facts
  // assume WriteRef(_150: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _150,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _149, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _150) -> [0: bb68, otherwise: bb67]
  old_version := version
  version := bumpVersion(version)
  __t19 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_150,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t19) {
    goto l40
  }
  goto l39
  
  label bb67
  // ========== bb67 ==========
  
  // [mir] StorageLive(_155)
  
  // Ownership facts
  // assume WriteRef(_150: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _150,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_155: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _155, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _149, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _155 = core::panicking::panic(const "assertion failed: Rc::strong_count(&z) == 1") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&z) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_150: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_150,
    old_version, version)
  goto end_of_method
  
  label bb68
  // ========== bb68 ==========
  
  // Ownership facts
  // assume WriteRef(_150: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _150,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_150: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _150, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_149: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _149, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _149 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_149,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _150 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_150,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_150: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_150,
    old_version, version)
  
  // [mir] StorageDead(_150)
  
  // [mir] StorageDead(_149)
  
  // [mir] StorageLive(_156)
  
  // [mir] StorageLive(_157)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_157: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _157, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_156: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _156, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _157 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_157, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_157: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _157,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_157: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _157, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_156: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _156, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] switchInt(move _157) -> [0: bb70, otherwise: bb69]
  old_version := version
  version := bumpVersion(version)
  __t20 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_157,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  if (__t20) {
    goto l42
  }
  goto l41
  
  label bb69
  // ========== bb69 ==========
  
  // [mir] StorageLive(_158)
  
  // Ownership facts
  // assume WriteRef(_157: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _157,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_157: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _157, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_156: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _156, version)
  // assume Allocated(_158: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(10,
    _158, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _158 = core::panicking::panic(const "assertion failed: false") -> bb76
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_157: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_157,
    old_version, version)
  goto end_of_method
  
  label bb7
  // ========== bb7 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_18: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _18, version)
  // assume ReadRef(_2: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_19: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _19, version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _16, version)
  // assume Allocated(_18: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _18, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _15, version)
  // assume Allocated(_17: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _17,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _17 = (*_18)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_17, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_18,
    old_version))
  // Fully-owned used place _18 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_18,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_18: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_18,
    old_version, version)
  
  // [mir] StorageDead(_19)
  
  // Ownership facts
  // assume WriteRef(_17: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _17,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _16, version)
  // assume Allocated(_18: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _15, version)
  // assume Allocated(_17: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _17,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _16 = Eq(move _17, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_17,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_17)
  
  // Ownership facts
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _16,
    version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _16, version)
  // assume Allocated(_18: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _15, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _12, version)
  
  // [mir] _15 = Not(move _16)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_15, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16,
    old_version)))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_18)
  
  // [mir] StorageDead(_16)
  
  // Ownership facts
  // assume WriteRef(_15: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _15,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _15, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] switchInt(move _15) -> [0: bb9, otherwise: bb8]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_15,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label bb70
  // ========== bb70 ==========
  
  // Ownership facts
  // assume WriteRef(_157: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _157,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_157: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _157, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_156: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _156, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _156 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_156,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _157 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_157,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_157: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_157,
    old_version, version)
  
  // [mir] StorageDead(_157)
  
  // [mir] StorageDead(_156)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _42, version)
  // assume Allocated(_140: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _140, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _12, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _42 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_42: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_42,
    old_version, version)
  
  // [mir] StorageDead(_140)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_42: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _42, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_42: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _42, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _12, version)
  
  // [mir] drop(_42) -> [return: bb71, unwind: bb77]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _42
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb71
  
  label bb71
  // ========== bb71 ==========
  
  // [mir] StorageDead(_42)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _12, version)
  
  // [mir] drop(_12) -> [return: bb72, unwind: bb78]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _12
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb72
  
  label bb72
  // ========== bb72 ==========
  
  // [mir] StorageDead(_12)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  
  // [mir] drop(_2) -> [return: bb73, unwind: bb79]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _2
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb73
  
  label bb73
  // ========== bb73 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageLive(_20)
  
  // Ownership facts
  // assume WriteRef(_15: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _15,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_20: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _20, version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _15, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _20 = core::panicking::panic(const "assertion failed: *x == 123") -> bb77
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *x == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_15: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb9
  // ========== bb9 ==========
  
  // Ownership facts
  // assume WriteRef(_15: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _15,
    version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_14: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_15: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _15, version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _14 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_14,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_15: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_15)
  
  // [mir] StorageDead(_14)
  
  // [mir] StorageLive(_21)
  
  // [mir] StorageLive(_22)
  
  // [mir] StorageLive(_23)
  
  // [mir] StorageLive(_24)
  
  // [mir] StorageLive(_25)
  
  // [mir] StorageLive(_26)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _21, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _23, version)
  // assume Allocated(_25: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(8,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _22, version)
  // assume Allocated(_24: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _24,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _12, version)
  
  // [mir] _26 = &_12
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_26,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_26: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _26, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_12: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _26, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _21, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _23, version)
  // assume Allocated(_25: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _25, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _22, version)
  // assume Allocated(_24: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _24,
    version)
  // assume Allocated(_12: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _25 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _26) -> [return: bb10, unwind: bb77]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_25,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_26,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_26: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_26,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_12: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  goto bb10
  
  label l0
  // ========== l0 ==========
  // MIR edge bb3 --> bb5
  goto bb5
  
  label l1
  // ========== l1 ==========
  // MIR edge bb3 --> bb4
  goto bb4
  
  label l10
  // ========== l10 ==========
  // MIR edge bb20 --> bb22
  goto bb22
  
  label l11
  // ========== l11 ==========
  // MIR edge bb20 --> bb21
  goto bb21
  
  label l12
  // ========== l12 ==========
  // MIR edge bb23 --> bb25
  goto bb25
  
  label l13
  // ========== l13 ==========
  // MIR edge bb23 --> bb24
  goto bb24
  
  label l14
  // ========== l14 ==========
  // MIR edge bb26 --> bb28
  goto bb28
  
  label l15
  // ========== l15 ==========
  // MIR edge bb26 --> bb27
  goto bb27
  
  label l16
  // ========== l16 ==========
  // MIR edge bb29 --> bb31
  goto bb31
  
  label l17
  // ========== l17 ==========
  // MIR edge bb29 --> bb30
  goto bb30
  
  label l18
  // ========== l18 ==========
  // MIR edge bb32 --> bb34
  goto bb34
  
  label l19
  // ========== l19 ==========
  // MIR edge bb32 --> bb33
  goto bb33
  
  label l2
  // ========== l2 ==========
  // MIR edge bb7 --> bb9
  goto bb9
  
  label l20
  // ========== l20 ==========
  // MIR edge bb35 --> bb37
  goto bb37
  
  label l21
  // ========== l21 ==========
  // MIR edge bb35 --> bb36
  goto bb36
  
  label l22
  // ========== l22 ==========
  // MIR edge bb39 --> bb41
  goto bb41
  
  label l23
  // ========== l23 ==========
  // MIR edge bb39 --> bb40
  goto bb40
  
  label l24
  // ========== l24 ==========
  // MIR edge bb42 --> bb44
  goto bb44
  
  label l25
  // ========== l25 ==========
  // MIR edge bb42 --> bb43
  goto bb43
  
  label l26
  // ========== l26 ==========
  // MIR edge bb45 --> bb47
  goto bb47
  
  label l27
  // ========== l27 ==========
  // MIR edge bb45 --> bb46
  goto bb46
  
  label l28
  // ========== l28 ==========
  // MIR edge bb48 --> bb50
  goto bb50
  
  label l29
  // ========== l29 ==========
  // MIR edge bb48 --> bb49
  goto bb49
  
  label l3
  // ========== l3 ==========
  // MIR edge bb7 --> bb8
  goto bb8
  
  label l30
  // ========== l30 ==========
  // MIR edge bb51 --> bb52
  // Expire borrows
  // Applying pledges of function alloc::std::rc::Rc::<T>::get_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    version)) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    _call_50_pre_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    version)))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    _call_50_pre_version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_50_blocked_address_0,
    _call_50_pre_version)))), _call_50_pre_version))))))))
  goto bb52
  
  label l31
  // ========== l31 ==========
  // MIR edge bb52 --> bb54
  goto bb54
  
  label l32
  // ========== l32 ==========
  // MIR edge bb52 --> bb53
  goto bb53
  
  label l33
  // ========== l33 ==========
  // MIR edge bb56 --> bb58
  goto bb58
  
  label l34
  // ========== l34 ==========
  // MIR edge bb56 --> bb57
  goto bb57
  
  label l35
  // ========== l35 ==========
  // MIR edge bb59 --> bb61
  goto bb61
  
  label l36
  // ========== l36 ==========
  // MIR edge bb59 --> bb60
  goto bb60
  
  label l37
  // ========== l37 ==========
  // MIR edge bb63 --> bb65
  goto bb65
  
  label l38
  // ========== l38 ==========
  // MIR edge bb63 --> bb64
  goto bb64
  
  label l39
  // ========== l39 ==========
  // MIR edge bb66 --> bb68
  goto bb68
  
  label l4
  // ========== l4 ==========
  // MIR edge bb10 --> bb12
  goto bb12
  
  label l40
  // ========== l40 ==========
  // MIR edge bb66 --> bb67
  goto bb67
  
  label l41
  // ========== l41 ==========
  // MIR edge bb68 --> bb70
  goto bb70
  
  label l42
  // ========== l42 ==========
  // MIR edge bb68 --> bb69
  goto bb69
  
  label l5
  // ========== l5 ==========
  // MIR edge bb10 --> bb11
  goto bb11
  
  label l6
  // ========== l6 ==========
  // MIR edge bb13 --> bb15
  goto bb15
  
  label l7
  // ========== l7 ==========
  // MIR edge bb13 --> bb14
  goto bb14
  
  label l8
  // ========== l8 ==========
  // MIR edge bb16 --> bb18
  goto bb18
  
  label l9
  // ========== l9 ==========
  // MIR edge bb16 --> bb17
  goto bb17
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_5()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _2: Address$Bool
  var _3: Address$Usize
  var _4: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _5: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _6: Address$I32
  var _7: Address$SharedRef$I32
  var _8: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _9: Address$Tuple0
  var _10: Address$Tuple0
  var _11: Address$Bool
  var _12: Address$Bool
  var _13: Address$Usize
  var _14: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _15: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _16: Address$Never
  var _17: Address$MutRef$I32
  var _18: Address$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _19: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _20: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _21: Address$Tuple0
  var _22: Address$Bool
  var _23: Address$Bool
  var _24: Address$I32
  var _25: Address$I32
  var _26: Address$Never
  var _27: Address$Tuple0
  var _28: Address$Bool
  var _29: Address$Bool
  var _30: Address$I32
  var _31: Address$Never
  var _32: Address$Tuple0
  var _33: Address$Bool
  var _34: Address$Bool
  var _35: Address$I32
  var _36: Address$SharedRef$I32
  var _37: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _38: Address$Never
  var _39: Address$Tuple0
  var _40: Address$Bool
  var _41: Address$Never
  var _42: Address$Tuple0
  var _43: Address$Bool
  var _44: Address$Bool
  var _45: Address$Usize
  var _46: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _47: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _48: Address$Never
  var _49: Address$Tuple0
  var _50: Address$Bool
  var _51: Address$Never
  var __t0: Bool
  var __t1: Bool
  var _call_7_pre_version: Version
  var _call_7_blocked_address_0: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  
  label start
  // ========== start ==========
  // Def path: "rc::test_5"
  
  // Library ownership axioms of 11 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume Allocated(_4: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _4, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _3, version)
  
  // [mir] _5 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_5,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_5: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _5, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_3: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(6,
    _3, version)
  
  // [mir] _4 = &(*_5)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_4,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_5,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_5,
    old_version)))
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_5,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_5: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_5,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _4, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _4, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _5, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_3: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(6,
    _3, version)
  
  // [mir] _3 = std::rc::Rc::<i32>::strong_count(move _4) -> [return: bb1, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_3, version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_4,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_4: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_3: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(2,
    _3, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _5, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _3, version)
  
  // [mir] _2 = Eq(move _3, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_2, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_3,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _2, version)
  
  // [mir] switchInt(move _2) -> [0: bb19, otherwise: bb2]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_2,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb10
  // ========== bb10 ==========
  
  // [mir] StorageLive(_26)
  
  // Ownership facts
  // assume WriteRef(_22: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _22,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _22, version)
  // assume Allocated(_26: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _26, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _21, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _26 = core::panicking::panic(const "assertion failed: a == *data") -> bb27
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: a == *data"
  assert false
  // Framing facts
  // assume framing of WriteRef(_22: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_22,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb11
  // ========== bb11 ==========
  
  // Ownership facts
  // assume WriteRef(_22: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _22,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _17, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _22, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _21, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _21 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_21,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _22 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_22,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_22: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_22,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_17: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_22)
  
  // [mir] StorageDead(_21)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _17, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _6,
    version)
  
  // [mir] (*_17) = const 123_i32
  old_version := version
  version := bumpVersion(version)
  inhale get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_17,
    version)) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)
  // Target of _17 doesn't change
  inhale get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_17,
    old_version)) ==
    get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_17,
    version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  
  // [mir] StorageLive(_27)
  
  // [mir] StorageLive(_28)
  
  // [mir] StorageLive(_29)
  
  // [mir] StorageLive(_30)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _17, version)
  // assume Allocated(_28: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _29, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_30: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _30,
    version)
  // assume Allocated(_27: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _27, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _30 = (*_17)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_30, version) ==
    get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_17,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_17: &mut i32)
  inhale frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Allocation facts
  // assume Allocated(_28: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2,
    _29, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _2, version)
  // assume Allocated(_30: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _30,
    version)
  // assume Allocated(_27: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _27, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _6,
    version)
  // Applying pledges of function alloc::std::rc::Rc::<T>::get_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version)))), _call_7_pre_version))))))))
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_30: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _30,
    version)
  // assume Allocated(_28: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _29, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_30: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _30,
    version)
  // assume Allocated(_27: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _27, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _6,
    version)
  
  // [mir] _29 = Eq(move _30, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_29, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_30,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _30 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_30,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_30)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_29: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _29,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_28: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _29, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_27: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _27, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _28 = Not(move _29)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_28, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_29,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _29 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_29,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_29)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_28: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _28,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_28: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _28, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_27: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _27, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] switchInt(move _28) -> [0: bb13, otherwise: bb12]
  old_version := version
  version := bumpVersion(version)
  __t3 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_28,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t3) {
    goto l7
  }
  goto l6
  
  label bb12
  // ========== bb12 ==========
  
  // [mir] StorageLive(_31)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_28: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _28,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_31: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _31, version)
  // assume Allocated(_28: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _28, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_27: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _27, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _31 = core::panicking::panic(const "assertion failed: *data == 123") -> bb27
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *data == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_28: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_28,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb13
  // ========== bb13 ==========
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_28: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _28,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_28: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _28, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_27: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _27, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _27 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_27,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _28 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_28,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_28: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_28,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_28)
  
  // [mir] StorageDead(_27)
  
  // [mir] StorageLive(_32)
  
  // [mir] StorageLive(_33)
  
  // [mir] StorageLive(_34)
  
  // [mir] StorageLive(_35)
  
  // [mir] StorageLive(_36)
  
  // [mir] StorageLive(_37)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_37: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _37, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _34, version)
  // assume Allocated(_35: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _35,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _2, version)
  // assume Allocated(_36: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(10,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _6,
    version)
  
  // [mir] _37 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_37,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_37: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _37, version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _2,
    version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_37: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _37, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _34, version)
  // assume Allocated(_35: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _35,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _2, version)
  // assume Allocated(_36: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(13, _6,
    version)
  
  // [mir] _36 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _37) -> [return: bb14, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_36,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_37,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_37: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_37,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb14
  
  label bb14
  // ========== bb14 ==========
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_36: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _36, version)
  // assume ReadRef(_1: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_37: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _37, version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _34, version)
  // assume Allocated(_35: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _35,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _2, version)
  // assume Allocated(_36: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(11,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(13, _6,
    version)
  
  // [mir] _35 = (*_36)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_35, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_36,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _36 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_36,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_36: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_36,
    old_version, version)
  
  // [mir] StorageDead(_37)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_35: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _35,
    version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _34, version)
  // assume Allocated(_35: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _35,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _2, version)
  // assume Allocated(_36: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(10,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _6,
    version)
  
  // [mir] _34 = Eq(move _35, const 123_i32)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_34, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_35,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _35 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_35,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_35)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_34: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _34,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_34: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _34, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_36: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(9,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _6,
    version)
  
  // [mir] _33 = Not(move _34)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_34,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _34 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_34,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_36)
  
  // [mir] StorageDead(_34)
  
  // Ownership facts
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _33,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] switchInt(move _33) -> [0: bb16, otherwise: bb15]
  old_version := version
  version := bumpVersion(version)
  __t4 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t4) {
    goto l9
  }
  goto l8
  
  label bb15
  // ========== bb15 ==========
  
  // [mir] StorageLive(_38)
  
  // Ownership facts
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _33,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_38: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _38, version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _38 = core::panicking::panic(const "assertion failed: *rc == 123") -> bb27
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: *rc == 123"
  assert false
  // Framing facts
  // assume framing of WriteRef(_33: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb16
  // ========== bb16 ==========
  
  // Ownership facts
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _33,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_32: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _32, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _33, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _32 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_32,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _33 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_33: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_33)
  
  // [mir] StorageDead(_32)
  
  // [mir] StorageLive(_39)
  
  // [mir] StorageLive(_40)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_40: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _40, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  // assume Allocated(_39: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _39, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] _40 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_40, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_40: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _40,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_40: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _40, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_39: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _39, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] switchInt(move _40) -> [0: bb18, otherwise: bb17]
  old_version := version
  version := bumpVersion(version)
  __t5 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_40,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (!__t5) {
    goto l11
  }
  goto l10
  
  label bb17
  // ========== bb17 ==========
  
  // [mir] StorageLive(_41)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_40: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _40,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_40: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _40, version)
  // assume Allocated(_41: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _41, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_39: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _39, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _41 = core::panicking::panic(const "assertion failed: false") -> bb27
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_40: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_40,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb18
  // ========== bb18 ==========
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_40: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _40,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_40: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _40, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_39: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _39, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _39 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_39,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _40 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_40,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_40: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_40,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_40)
  
  // [mir] StorageDead(_39)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _6,
    version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_17)
  
  // [mir] StorageDead(_6)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _2, version)
  
  // [mir] goto -> bb25
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb25
  
  label bb19
  // ========== bb19 ==========
  
  // [mir] StorageLive(_42)
  
  // [mir] StorageLive(_43)
  
  // [mir] StorageLive(_44)
  
  // [mir] StorageLive(_45)
  
  // [mir] StorageLive(_46)
  
  // [mir] StorageLive(_47)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_46: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _46, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _43, version)
  // assume Allocated(_47: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _47, version)
  // assume Allocated(_44: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _44, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_45: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _45, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _42, version)
  
  // [mir] _47 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_47,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_47: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _47, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_46: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _46, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _43, version)
  // assume Allocated(_47: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _47, version)
  // assume Allocated(_44: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _44, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_45: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _45, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _42, version)
  
  // [mir] _46 = &(*_47)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_46,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_47,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_47,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _47 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_47,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_47: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_47,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_46: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _46, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_46: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _46, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _43, version)
  // assume Allocated(_47: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _47, version)
  // assume Allocated(_44: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _44, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_45: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(9,
    _45, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _42, version)
  
  // [mir] _45 = std::rc::Rc::<i32>::strong_count(move _46) -> [return: bb20, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_45,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_46,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_46: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_46,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb20
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageLive(_6)
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_7: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(3,
    _7, version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _6,
    version)
  
  // [mir] _8 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_8,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_8: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _8, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _7, version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _6,
    version)
  
  // [mir] _7 = <std::rc::Rc<i32> as std::ops::Deref>::deref(move _8) -> [return: bb3, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_7,
    version) ==
    m_$openang$std$$rc$$Rc$openang$T$closeang$$space$as$space$std$$ops$$Deref$closeang$$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_8,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_8: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb3
  
  label bb20
  // ========== bb20 ==========
  
  // [mir] StorageDead(_46)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_45: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(2,
    _45, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _43, version)
  // assume Allocated(_47: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _47, version)
  // assume Allocated(_44: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _44, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_45: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(8,
    _45, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _42, version)
  
  // [mir] _44 = Ne(move _45, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_44, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_45,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _45 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_45,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_45)
  
  // Ownership facts
  // assume WriteRef(_44: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _44,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _43, version)
  // assume Allocated(_47: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _47, version)
  // assume Allocated(_44: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _44, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _42, version)
  
  // [mir] _43 = Not(move _44)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_43, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_44,
    old_version)))
  // Fully-owned used place _44 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_44,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_47)
  
  // [mir] StorageDead(_44)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_43: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _43,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _43, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _42, version)
  
  // [mir] switchInt(move _43) -> [0: bb22, otherwise: bb21]
  old_version := version
  version := bumpVersion(version)
  __t6 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_43,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t6) {
    goto l13
  }
  goto l12
  
  label bb21
  // ========== bb21 ==========
  
  // [mir] StorageLive(_48)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_43: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _43,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _43, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_48: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _48, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _42, version)
  
  // [mir] _48 = core::panicking::panic(const "assertion failed: Rc::strong_count(&rc) != 1") -> bb27
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&rc) != 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_43: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_43,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb22
  // ========== bb22 ==========
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_43: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _43,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_43: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _43, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  // assume Allocated(_42: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _42, version)
  
  // [mir] _42 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_42,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _43 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_43,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_43: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_43,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_43)
  
  // [mir] StorageDead(_42)
  
  // [mir] StorageLive(_49)
  
  // [mir] StorageLive(_50)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_49: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _49, version)
  // assume Allocated(_50: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _50, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _2, version)
  
  // [mir] _50 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_50, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_50: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _50,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_49: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _49, version)
  // assume Allocated(_50: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _50, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  
  // [mir] switchInt(move _50) -> [0: bb24, otherwise: bb23]
  old_version := version
  version := bumpVersion(version)
  __t7 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_50,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (!__t7) {
    goto l15
  }
  goto l14
  
  label bb23
  // ========== bb23 ==========
  
  // [mir] StorageLive(_51)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_50: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _50,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_49: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _49, version)
  // assume Allocated(_50: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _50, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  // assume Allocated(_51: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _51, version)
  
  // [mir] _51 = core::panicking::panic(const "assertion failed: false") -> bb27
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_50: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_50,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb24
  // ========== bb24 ==========
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_50: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _50,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_49: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _49, version)
  // assume Allocated(_50: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _50, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  
  // [mir] _49 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_49,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _50 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_50,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_50: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_50,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_50)
  
  // [mir] StorageDead(_49)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _2, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(2,
    _0, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _2, version)
  
  // [mir] goto -> bb25
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb25
  
  label bb25
  // ========== bb25 ==========
  
  // [mir] StorageDead(_2)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] drop(_1) -> [return: bb26, unwind: bb28]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _1
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto bb26
  
  label bb26
  // ========== bb26 ==========
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_7: &i32)
  inhale owns_as_WriteRef_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(2,
    _7, version)
  // assume ReadRef(_1: std::rc::Rc<i32>)
  inhale owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_7: &i32)
  inhale owns_as_Allocated_SharedRef$I32__$TY$__$int$$Address$SharedRef$I32$Version$$bool$(4,
    _7, version)
  // assume Allocated(_8: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _6,
    version)
  
  // [mir] _6 = (*_7)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_6, version) ==
    get_memory_field_target_snapshot_of_SharedRef$I32__$TY$__MemorySnapshot$SharedRef$I32$MemorySnapshot$I32(deref_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$MemorySnapshot$SharedRef$I32(_7,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _7 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_7,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_7: &i32)
  inhale frame_across_stmt_ReadRef_SharedRef$I32__$TY$__Address$SharedRef$I32$Version$Version$$bool$(_7,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] FakeRead(ForLet(None), _6)
  
  // [mir] AscribeUserType(_6, o, UserTypeProjection { base: UserType(2), projs: [] })
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _2, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _6,
    version)
  
  // [mir] _9 = unknown::<i32>(const 0_i32) -> [return: bb4, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _2, version)
  // assume Allocated(_9: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _9, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _6,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 0) of the call
  // Validity and shallow ownership of the arguments
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb4
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // [mir] StorageLive(_14)
  
  // [mir] StorageLive(_15)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_13: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _13, version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _10, version)
  // assume Allocated(_14: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _6,
    version)
  
  // [mir] _15 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_15,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_15: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _2,
    version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_13: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _13, version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _10, version)
  // assume Allocated(_14: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _14, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _12, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _6,
    version)
  
  // [mir] _14 = &(*_15)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_14,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_15,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_15,
    old_version)))
  // Fully-owned used place _15 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_15,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_15: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_15,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_14: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _14, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_13: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _13, version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _10, version)
  // assume Allocated(_14: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _14, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _12, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _6,
    version)
  
  // [mir] _13 = std::rc::Rc::<i32>::strong_count(move _14) -> [return: bb5, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_13,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_14,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_14: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_14,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb5
  
  label bb5
  // ========== bb5 ==========
  
  // [mir] StorageDead(_14)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_13: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _13, version)
  // assume Allocated(_13: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _13, version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _12, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _6,
    version)
  
  // [mir] _12 = Eq(move _13, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_13,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _13 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_13,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_13)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_12: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _12,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_15: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _15, version)
  // assume Allocated(_12: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _12, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _11 = Not(move _12)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_11, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_12,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_15)
  
  // [mir] StorageDead(_12)
  
  // Ownership facts
  // assume WriteRef(_11: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] switchInt(move _11) -> [0: bb7, otherwise: bb6]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_11,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageLive(_16)
  
  // Ownership facts
  // assume WriteRef(_11: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_16: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _16, version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _16 = core::panicking::panic(const "assertion failed: Rc::strong_count(&rc) == 1") -> bb27
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&rc) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_11: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_11,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  goto end_of_method
  
  label bb7
  // ========== bb7 ==========
  
  // Ownership facts
  // assume WriteRef(_11: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _11,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_10: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _10, version)
  // assume Allocated(_11: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _11, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] _10 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_10,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _11 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_11,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_11: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_11,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  
  // [mir] StorageDead(_11)
  
  // [mir] StorageDead(_10)
  
  // [mir] StorageLive(_17)
  
  // [mir] StorageLive(_18)
  
  // [mir] StorageLive(_19)
  
  // [mir] StorageLive(_20)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_19: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _19, version)
  // assume Allocated(_20: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _20, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_18: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _20 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_20,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_20: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _20, version)
  // assume Allocated(_19: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _19, version)
  // assume Allocated(_20: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _20, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_18: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _19 = &mut (*_20)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_20,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_20,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _20 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_20,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_19: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _19, version)
  // assume Allocated(_19: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _19, version)
  // assume Allocated(_20: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _20, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_18: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] _18 = std::rc::Rc::<i32>::get_mut(move _19) -> [return: bb8, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_19: &mut std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_19,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_19: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _19, version)
  // assume Allocated(_19: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _19, version)
  // assume Allocated(_20: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _20, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_18: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_7_pre_version := old_version
  _call_7_blocked_address_0 := get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    old_version))
  // Assume the postconditions (num: 5) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version) ==
    deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version))))))), version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    old_version))))))), old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    old_version))), old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_18,
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_18,
      version)))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_18,
    version)))) ==
    1 ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_18),
      version)))) ==
      get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
      old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_19,
      old_version))))))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _19, version)
  // frame ShallowlyOwned(arg#0: &mut std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_19,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  goto bb8
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageDead(_19)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_18: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _18, version)
  // assume Allocated(_20: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _20, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  // assume Allocated(_18: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _18, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  
  // [mir] _17 = std::option::Option::<&mut i32>::unwrap(move _18) -> [return: bb9, unwind: bb27]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_18: std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_18,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_18: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _18, version)
  // assume Allocated(_20: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _20, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _2, version)
  // assume Allocated(_18: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _18, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _6,
    version)
  // Check the preconditions (num: 1) of the call
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_18,
    deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_18,
    old_version)))))))))
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_18)))),
    old_version, get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(_17))),
    version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(-1,
    _18, version)
  // frame ShallowlyOwned(arg#0: std::option::Option<&mut i32>)
  inhale frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_18,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  goto bb9
  
  label bb9
  // ========== bb9 ==========
  
  // [mir] StorageDead(_18)
  
  // [mir] FakeRead(ForLet(None), _17)
  
  // [mir] StorageDead(_20)
  
  // [mir] StorageLive(_21)
  
  // [mir] StorageLive(_22)
  
  // [mir] StorageLive(_23)
  
  // [mir] StorageLive(_24)
  
  // Ownership facts
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _2,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _17, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _22, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _23, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_24: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _24,
    version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _21, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _24 = _6
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_24, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_6, old_version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_17: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // assume framing of LocalRef(_6: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  
  // [mir] StorageLive(_25)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _17, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_24: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _24,
    version)
  // assume Allocated(_25: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _25,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _22, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _23, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _2, version)
  // assume Allocated(_24: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _24,
    version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _21, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(12, _6,
    version)
  
  // [mir] _25 = (*_17)
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_25, version) ==
    get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_17,
    old_version))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _24 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_24,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_24: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_24,
    old_version, version)
  // assume framing of ReadRef(_17: &mut i32)
  inhale frame_across_stmt_ReadRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _17, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _2,
    version)
  // assume WriteRef(_24: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _24,
    version)
  // assume WriteRef(_25: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _25,
    version)
  // assume Allocated(_25: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _25,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _22, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _23, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _2, version)
  // assume Allocated(_24: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(11, _24,
    version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(12,
    _21, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(13, _6,
    version)
  
  // [mir] _23 = Eq(move _24, move _25)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_23, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_24,
    old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_25,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _24 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_24,
    old_version, version)
  // Fully-owned used place _25 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_25,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_17: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  
  // [mir] StorageDead(_25)
  
  // [mir] StorageDead(_24)
  
  // Ownership facts
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _17, version)
  // assume WriteRef(_23: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _23,
    version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _22, version)
  // assume Allocated(_23: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _23, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _21, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(10, _6,
    version)
  
  // [mir] _22 = Not(move _23)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_22, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_23,
    old_version)))
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_23,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_17: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  
  // [mir] StorageDead(_23)
  
  // Ownership facts
  // assume WriteRef(_22: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _22,
    version)
  // assume WriteRef(_6: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _6,
    version)
  // assume WriteRef(_17: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(3,
    _17, version)
  // assume WriteRef(_2: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _2,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _22, version)
  // assume Allocated(_17: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _2, version)
  // assume Allocated(_21: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _21, version)
  // assume Allocated(_6: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _6,
    version)
  
  // [mir] switchInt(move _22) -> [0: bb11, otherwise: bb10]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_22,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_6: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_6,
    old_version, version)
  // assume framing of WriteRef(_17: &mut i32)
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_17,
    old_version, version)
  if (__t2) {
    goto l5
  }
  goto l4
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb19
  goto bb19
  
  label l1
  // ========== l1 ==========
  // MIR edge bb1 --> bb2
  goto bb2
  
  label l10
  // ========== l10 ==========
  // MIR edge bb16 --> bb17
  goto bb17
  
  label l11
  // ========== l11 ==========
  // MIR edge bb16 --> bb18
  goto bb18
  
  label l12
  // ========== l12 ==========
  // MIR edge bb20 --> bb22
  goto bb22
  
  label l13
  // ========== l13 ==========
  // MIR edge bb20 --> bb21
  goto bb21
  
  label l14
  // ========== l14 ==========
  // MIR edge bb22 --> bb23
  goto bb23
  
  label l15
  // ========== l15 ==========
  // MIR edge bb22 --> bb24
  goto bb24
  
  label l2
  // ========== l2 ==========
  // MIR edge bb5 --> bb7
  goto bb7
  
  label l3
  // ========== l3 ==========
  // MIR edge bb5 --> bb6
  goto bb6
  
  label l4
  // ========== l4 ==========
  // MIR edge bb9 --> bb11
  goto bb11
  
  label l5
  // ========== l5 ==========
  // MIR edge bb9 --> bb10
  // Expire borrows
  // Applying pledges of function alloc::std::rc::Rc::<T>::get_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version)))), _call_7_pre_version))))))))
  goto bb10
  
  label l6
  // ========== l6 ==========
  // MIR edge bb11 --> bb13
  goto bb13
  
  label l7
  // ========== l7 ==========
  // MIR edge bb11 --> bb12
  goto bb12
  
  label l8
  // ========== l8 ==========
  // MIR edge bb14 --> bb16
  goto bb16
  
  label l9
  // ========== l9 ==========
  // MIR edge bb14 --> bb15
  goto bb15
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_2()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$I32
  var _2: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _3: Address$I32
  var _4: Address$Tuple0
  var _5: Address$Bool
  var _6: Address$Closure$rc$$test_2$$$opencur$closure$sharp$0$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _7: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _8: Address$Tuple0
  var _9: Address$Bool
  var _10: Address$Closure$rc$$test_2$$$opencur$closure$sharp$1$closecur$$3$I8$FnPtr$args$1$Tuple0$return$Bool$Tuple1$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _11: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _12: Address$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _13: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _14: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _15: Address$Tuple0
  var _16: Address$Bool
  var _17: Address$Bool
  var _18: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _19: Address$Never
  var _20: Address$Tuple0
  var _21: Address$Bool
  var _22: Address$Bool
  var _23: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _24: Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _25: Address$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _26: Address$MutRef$I32
  var _27: Address$MutRef$I32
  var _28: Address$I32
  var _29: Address$Never
  var _30: Address$Tuple0
  var _31: Address$Bool
  var _32: Address$Never
  var _call_7_pre_version: Version
  var _call_7_blocked_address_0: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  
  label start
  // ========== start ==========
  // Def path: "rc::test_2"
  
  // Library ownership axioms of 12 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_1)
  
  // Ownership facts
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  
  // [mir] _1 = const 123_i32
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, version) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)
  // Framing facts
  
  // [mir] FakeRead(ForLet(None), _1)
  
  // [mir] StorageLive(_2)
  
  // [mir] StorageLive(_3)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _3,
    version)
  
  // [mir] _3 = _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3, version) ==
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_1, old_version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of LocalRef(_1: i32)
  inhale frame_across_stmt_LocalRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  
  // [mir] _2 = std::rc::Rc::<i32>::new(move _3) -> [return: bb1, unwind: bb19]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_3: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _3,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_3: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _3,
    version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 3) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_3,
    version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)))))), version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version)), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(convert_from_memory_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$ValueSnapshot$ConstPtr$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(_3))),
    old_version, get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    version))))), version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(-1, _3,
    version)
  // frame ShallowlyOwned(arg#0: i32)
  inhale frame_across_call_ShallowlyOwned_I32__$TY$__Address$I32$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_3)
  
  // [mir] FakeRead(ForLet(None), _2)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  
  // [mir] _5 = const false
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_5, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _5,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  
  // [mir] switchInt(move _5) -> [0: bb3, otherwise: bb2]
  old_version := version
  version := bumpVersion(version)
  // Encoding of Prusti specification block bb2
  // Source: prusti_assert!(Rc::strong_count(&rc) == 1)
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version)), old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb3
  
  label bb10
  // ========== bb10 ==========
  
  // [mir] StorageLive(_19)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _16,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_19: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(4,
    _19, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _16, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _15, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _19 = core::panicking::panic(const "assertion failed: data_ref.is_some()") -> bb18
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: data_ref.is_some()"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_16: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb11
  // ========== bb11 ==========
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _16,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _16, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _15, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _12, version)
  
  // [mir] _15 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_15,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _16 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_16: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // [mir] StorageDead(_16)
  
  // [mir] StorageDead(_15)
  
  // [mir] StorageLive(_20)
  
  // [mir] StorageLive(_21)
  
  // [mir] StorageLive(_22)
  
  // [mir] StorageLive(_23)
  
  // Ownership facts
  // assume WriteRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_23: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(5,
    _23, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _23 = &_12
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_23,
    version) ==
    new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_12,
    deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_12,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // [mir] StorageLive(_24)
  
  // [mir] StorageLive(_25)
  
  // [mir] StorageLive(_26)
  
  // [mir] StorageLive(_27)
  
  // [mir] StorageLive(_28)
  
  // Ownership facts
  // assume WriteRef(_23: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _23, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume LocalRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _12, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _28,
    version)
  // assume Allocated(_25: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(5,
    _25, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(7, _1,
    version)
  // assume Allocated(_26: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _26, version)
  // assume Allocated(_23: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(9,
    _23, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(11,
    _2, version)
  // assume Allocated(_27: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(12,
    _27, version)
  // assume Allocated(_24: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _24, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(15,
    _12, version)
  
  // [mir] _28 = const 123_i32
  old_version := version
  version := bumpVersion(version)
  inhale deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_28, version) ==
    new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_23: &std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_28: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _28,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_23: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _23, version)
  // assume LocalRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _28,
    version)
  // assume Allocated(_25: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(6,
    _25, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_26: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _26, version)
  // assume Allocated(_23: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(10,
    _23, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _2, version)
  // assume Allocated(_27: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(13,
    _27, version)
  // assume Allocated(_24: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(14,
    _24, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(16,
    _12, version)
  
  // [mir] _27 = &mut _28
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_27,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(_28,
    deref_I32__$TY$__Address$I32$Version$MemorySnapshot$I32(_28, old_version))
  // Fully-owned used place _28 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_28,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_23: &std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_27: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _27, version)
  // assume WriteRef(_23: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(2,
    _23, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume LocalRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _28,
    version)
  // assume Allocated(_25: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(6,
    _25, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_26: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _26, version)
  // assume Allocated(_23: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(10,
    _23, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _2, version)
  // assume Allocated(_27: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(13,
    _27, version)
  // assume Allocated(_24: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(14,
    _24, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(16,
    _12, version)
  
  // [mir] _26 = &mut (*_27)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_26,
    version) ==
    new_memory_snap_of_MutRef$I32__$TY$__Address$I32$MemorySnapshot$I32$MemorySnapshot$MutRef$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_27,
    old_version)), get_memory_field_target_snapshot_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_27,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // Fully-owned used place _27 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_27,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_23: &std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_26: &mut i32)
  inhale owns_as_WriteRef_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(1,
    _26, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_23: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _23, version)
  // assume LocalRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _28,
    version)
  // assume Allocated(_25: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(6,
    _25, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_26: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _26, version)
  // assume Allocated(_23: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(10,
    _23, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _2, version)
  // assume Allocated(_27: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(13,
    _27, version)
  // assume Allocated(_24: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(14,
    _24, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(16,
    _12, version)
  
  // [mir] _25 = std::option::Option::<&mut i32>::Some(move _26)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_25,
    version) ==
    new_memory_snap_v$Some_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(_26,
    old_version))
  // Fully-owned used place _26 does not change
  inhale frame_across_stmt_WriteRef_MutRef$I32__$TY$__Address$MutRef$I32$Version$Version$$bool$(_26,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // Place _26 has been moved
  inhale move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(_26,
    old_version, get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_25),
    version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_23: &std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_25: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _25, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_23: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _23, version)
  // assume LocalRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(4,
    _12, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _28,
    version)
  // assume Allocated(_25: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(6,
    _25, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_26: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _26, version)
  // assume Allocated(_23: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(10,
    _23, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _2, version)
  // assume Allocated(_27: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(13,
    _27, version)
  // assume Allocated(_24: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(14,
    _24, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(16,
    _12, version)
  
  // [mir] _24 = &_25
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_24,
    version) ==
    new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_25,
    deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_25,
    old_version))
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // Fully-owned used place _25 does not change
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_25,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_23: &std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_23,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of LocalRef(_25: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_25,
    old_version, version)
  
  // [mir] StorageDead(_26)
  
  // Ownership facts
  // assume WriteRef(_24: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _24, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_23: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _23, version)
  // assume LocalRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(4,
    _12, version)
  // assume LocalRef(_25: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(5,
    _25, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _28,
    version)
  // assume Allocated(_25: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _25, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(9, _1,
    version)
  // assume Allocated(_23: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(10,
    _23, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(12,
    _2, version)
  // assume Allocated(_27: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(13,
    _27, version)
  // assume Allocated(_24: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(14,
    _24, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(16,
    _12, version)
  
  // [mir] _22 = <std::option::Option<&mut i32> as std::cmp::PartialEq<std::option::Option<&mut i32>>>::eq(move _23, move _24) -> [return: bb12, unwind: bb18]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_22, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_23,
    old_version)) ==
    convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_24,
    old_version)))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of ReadRef(_25: std::option::Option<&mut i32>)
  inhale frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_25,
    old_version, version)
  goto l2
  
  label bb12
  // ========== bb12 ==========
  
  // [mir] StorageDead(_24)
  
  // [mir] StorageDead(_23)
  
  // Ownership facts
  // assume WriteRef(_22: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _22,
    version)
  // assume WriteRef(_28: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _28,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_28: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _28,
    version)
  // assume Allocated(_25: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(6,
    _25, version)
  // assume Allocated(_22: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _22, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(8, _1,
    version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(10,
    _2, version)
  // assume Allocated(_27: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(11,
    _27, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(13,
    _12, version)
  
  // [mir] _21 = Not(move _22)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_21, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_22,
    old_version)))
  // Fully-owned used place _22 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_22,
    old_version, version)
  // Fully-owned used place _28 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_28,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_28: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_28,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_28)
  
  // [mir] StorageDead(_27)
  
  // [mir] StorageDead(_25)
  
  // [mir] StorageDead(_22)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_21: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _21,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _12, version)
  
  // [mir] switchInt(move _21) -> [0: bb14, otherwise: bb13]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_21,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t1) {
    goto l4
  }
  goto l3
  
  label bb13
  // ========== bb13 ==========
  
  // [mir] StorageLive(_29)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_21: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _21,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_29: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _29, version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _29 = core::panicking::panic(const "assertion failed: data_ref == Some(&mut 123)") -> bb18
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: data_ref == Some(&mut 123)"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_21: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_21,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto end_of_method
  
  label bb14
  // ========== bb14 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_21: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _21,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_20: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _20, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_21: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _21, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _12, version)
  
  // [mir] _20 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_20,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _21 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_21,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_21: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_21,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_21)
  
  // [mir] StorageDead(_20)
  
  // [mir] StorageLive(_30)
  
  // [mir] StorageLive(_31)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_31: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _31, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_30: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _30, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _12, version)
  
  // [mir] _31 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_31, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_31: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _31,
    version)
  // assume Allocated(_31: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _31, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_30: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _30, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _12, version)
  
  // [mir] switchInt(move _31) -> [0: bb16, otherwise: bb15]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_31,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t2) {
    goto l6
  }
  goto l5
  
  label bb15
  // ========== bb15 ==========
  
  // [mir] StorageLive(_32)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_31: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _31,
    version)
  // assume Allocated(_31: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _31, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_32: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(6,
    _32, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_30: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _30, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _32 = core::panicking::panic(const "assertion failed: false") -> bb18
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_31: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_31,
    old_version, version)
  goto end_of_method
  
  label bb16
  // ========== bb16 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_31: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _31,
    version)
  // assume Allocated(_31: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _31, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_30: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _30, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _12, version)
  
  // [mir] _30 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_30,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _31 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_31,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_31: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_31,
    old_version, version)
  
  // [mir] StorageDead(_31)
  
  // [mir] StorageDead(_30)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(5,
    _12, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_12)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  
  // [mir] drop(_2) -> [return: bb17, unwind: bb19]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _2
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb17
  
  label bb17
  // ========== bb17 ==========
  
  // [mir] StorageDead(_2)
  
  // [mir] StorageDead(_1)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb3
  // ========== bb3 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  
  // [mir] _4 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_4,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _5 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_4: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_5: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _5,
    version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _2, version)
  // assume Allocated(_4: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _4, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(6, _1,
    version)
  // assume Allocated(_5: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _5, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _2, version)
  
  // [mir] goto -> bb4
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_4: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_4,
    old_version, version)
  // assume framing of WriteRef(_5: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb4
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageDead(_5)
  
  // [mir] StorageDead(_4)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _9, version)
  
  // [mir] _9 = const false
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _9,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _9, version)
  
  // [mir] switchInt(move _9) -> [0: bb6, otherwise: bb5]
  old_version := version
  version := bumpVersion(version)
  // Encoding of Prusti specification block bb5
  // Source: prusti_assert!(deref(Rc::as_ptr(&rc)) == 123)
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version)))))), old_version)) ==
    get_memory_field_value_of_I32__$TY$__MemorySnapshot$I32$$int$(new_memory_snap_of_I32__$TY$__$int$$MemorySnapshot$I32(123))))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb6
  
  label bb6
  // ========== bb6 ==========
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _9,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _9, version)
  
  // [mir] _8 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_8,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_9: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_8: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(3,
    _8, version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _9,
    version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_8: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _8, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  
  // [mir] goto -> bb7
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_8: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_9: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  goto bb7
  
  label bb7
  // ========== bb7 ==========
  
  // [mir] StorageDead(_9)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageLive(_12)
  
  // [mir] StorageLive(_13)
  
  // [mir] StorageLive(_14)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_13: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_14: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _12, version)
  
  // [mir] _14 = &mut _2
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_14,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_14: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _14, version)
  // assume Allocated(_13: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_14: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _12, version)
  
  // [mir] _13 = &mut (*_14)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_14,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_14,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _14 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_14,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_13: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _13, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_13: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_14: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _12, version)
  
  // [mir] _12 = std::rc::Rc::<i32>::get_mut(move _13) -> [return: bb8, unwind: bb18]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_13: &mut std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_13,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_13: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _13, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_13: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _13, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_14: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _14, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _12, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_7_pre_version := old_version
  _call_7_blocked_address_0 := get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version))
  // Assume the postconditions (num: 5) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version) ==
    deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version))))))), version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version))))))), old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    old_version))), old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_12,
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_12,
      version)))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_12,
    version)))) ==
    1 ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_12),
      version)))) ==
      get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
      old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_13,
      old_version))))))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _13, version)
  // frame ShallowlyOwned(arg#0: &mut std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_13,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb8
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageDead(_13)
  
  // [mir] FakeRead(ForLet(None), _12)
  
  // [mir] StorageDead(_14)
  
  // [mir] StorageLive(_15)
  
  // [mir] StorageLive(_16)
  
  // [mir] StorageLive(_17)
  
  // [mir] StorageLive(_18)
  
  // Ownership facts
  // assume WriteRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(2, _1,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _16, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(4, _1,
    version)
  // assume Allocated(_17: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _17, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_18: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _18, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _15, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _18 = &_12
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_18,
    version) ==
    new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_12,
    deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_12,
    old_version))
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(1, _1,
    version)
  // assume WriteRef(_18: &std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(2,
    _18, version)
  // assume LocalRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(3,
    _12, version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _16, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_17: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_18: &std::option::Option<&mut i32>)
  inhale owns_as_Allocated_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _18, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(9,
    _15, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(10,
    _12, version)
  
  // [mir] _17 = std::option::Option::<&mut i32>::is_some(move _18) -> [return: bb9, unwind: bb18]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_17, version) ==
    convert_to_memory_of_Bool__$TY$__ValueSnapshot$Bool$MemorySnapshot$Bool(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(deref_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_18,
    old_version))))
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_18: &std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_18,
    old_version, version)
  // assume framing of LocalRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_LocalRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_call_ReadRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  goto bb9
  
  label bb9
  // ========== bb9 ==========
  
  // [mir] StorageDead(_18)
  
  // Ownership facts
  // assume WriteRef(_17: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _17,
    version)
  // assume WriteRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _16, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_17: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _17, version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _2, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _15, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(9,
    _12, version)
  
  // [mir] _16 = Not(move _17)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_17,
    old_version)))
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_17)
  
  // Ownership facts
  // assume WriteRef(_16: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _16,
    version)
  // assume WriteRef(_12: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_1: i32)
  inhale owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(3, _1,
    version)
  // assume Allocated(_16: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _16, version)
  // assume Allocated(_1: i32)
  inhale owns_as_Allocated_I32__$TY$__$int$$Address$I32$Version$$bool$(5, _1,
    version)
  // assume Allocated(_2: std::rc::Rc<i32>)
  inhale owns_as_Allocated_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _2, version)
  // assume Allocated(_15: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _15, version)
  // assume Allocated(_12: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(8,
    _12, version)
  
  // [mir] switchInt(move _16) -> [0: bb11, otherwise: bb10]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_16,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_12: std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_12,
    old_version, version)
  // assume framing of WriteRef(_1: i32)
  inhale frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label l0
  // ========== l0 ==========
  // MIR edge bb9 --> bb11
  goto bb11
  
  label l1
  // ========== l1 ==========
  // MIR edge bb9 --> bb10
  // Expire borrows
  // Applying pledges of function alloc::std::rc::Rc::<T>::get_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version)))), _call_7_pre_version))))))))
  goto bb10
  
  label l2
  // ========== l2 ==========
  // MIR edge bb11 --> bb12
  // Expire borrows
  // Applying pledges of function alloc::std::rc::Rc::<T>::get_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    version)))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_7_blocked_address_0,
    _call_7_pre_version)))), _call_7_pre_version))))))))
  goto bb12
  
  label l3
  // ========== l3 ==========
  // MIR edge bb12 --> bb14
  goto bb14
  
  label l4
  // ========== l4 ==========
  // MIR edge bb12 --> bb13
  goto bb13
  
  label l5
  // ========== l5 ==========
  // MIR edge bb14 --> bb16
  goto bb16
  
  label l6
  // ========== l6 ==========
  // MIR edge bb14 --> bb15
  goto bb15
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_unknown()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$TypeParam$T
  
  label start
  // ========== start ==========
  // Def path: "rc::unknown"
  
  // Library ownership axioms of 2 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(1,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(1,
    _1, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: T)
  inhale frame_across_stmt_WriteRef_TypeParam$T__$TY$__Address$TypeParam$T$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: T)
  inhale owns_as_WriteRef_TypeParam$T__$TY$__$int$$Address$TypeParam$T$Version$$bool$(2,
    _1, version)
  
  // [mir] drop(_1) -> [return: bb1, unwind: bb2]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _1
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_main()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  
  label start
  // ========== start ==========
  // Def path: "rc::main"
  
  // Library ownership axioms of 1 types:
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // Ownership facts
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Framing facts
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method m_test_6()
{
  var version: Version
  var old_version: Version
  var pre_version: Version
  var _0: Address$Tuple0
  var _1: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _2: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var _3: Address$Bool
  var _4: Address$Usize
  var _5: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _6: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _7: Address$Tuple0
  var _8: Address$Bool
  var _9: Address$Bool
  var _10: Address$Usize
  var _11: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _12: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _13: Address$Never
  var _14: Address$MutRef$I32
  var _15: Address$Adt$core$$std$$option$$Option$1$MutRef$I32
  var _16: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _17: Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _18: Address$Tuple0
  var _19: Address$Bool
  var _20: Address$Bool
  var _21: Address$ConstPtr$I32
  var _22: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _23: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _24: Address$ConstPtr$I32
  var _25: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _26: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _27: Address$Never
  var _28: Address$Tuple0
  var _29: Address$Bool
  var _30: Address$Never
  var _31: Address$Tuple0
  var _32: Address$Bool
  var _33: Address$Bool
  var _34: Address$Usize
  var _35: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _36: Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32
  var _37: Address$Never
  var _38: Address$Tuple0
  var _39: Address$Bool
  var _40: Address$Never
  var __t0: Bool
  var __t1: Bool
  var _call_5_pre_version: Version
  var _call_5_blocked_address_0: Address$Adt$alloc$$std$$rc$$Rc$1$I32
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  
  label start
  // ========== start ==========
  // Def path: "rc::test_6"
  
  // Library ownership axioms of 11 types:
  // User-specified library ownership spec #0 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_ReadRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #0 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_ReadRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #0 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #1 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_Local_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #1 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_Local_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #1 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #2 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoReadRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #2 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoReadRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #2 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #3 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) ==>
      owns_as_NoWriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r,
      get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #3 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_stmt_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) ==>
      frame_across_call_NoWriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #3 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #4 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_WriteRef_I32__$TY$__$int$$Address$I32$Version$$bool$(r, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #4 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_WriteRef_I32__$TY$__Address$I32$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #4 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__I32__$TY$__Address$I32$Version$Address$I32$Version$$bool$(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // User-specified library ownership spec #5 for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall r: Int, a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version ::
      { owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) }
      owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(r,
      a, v) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      owns_as_Unique_Usize__$TY$__$int$$Address$Usize$Version$$bool$(r, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v))
  // User-specified library ownership spec #5 across statement for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_stmt_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across call for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, v2: Version ::
      { frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) }
      frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(a,
      v, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      frame_across_call_Unique_Usize__$TY$__Address$Usize$Version$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, v2))
  // User-specified library ownership spec #5 across move for Adt$alloc$$std$$rc$$Rc$1$I32
  inhale (forall a: Address$Adt$alloc$$std$$rc$$Rc$1$I32, v: Version, a2: Address$Adt$alloc$$std$$rc$$Rc$1$I32,
    v2: Version ::
      { move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) }
      move__Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(a,
      v, a2, v2) &&
      get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v)), v)) ==
      get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))) ==>
      move__Usize__$TY$__Address$Usize$Version$Address$Usize$Version$$bool$(get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a,
      v))))))), v, get_memory_field_target_of_ConstPtr$Usize__$TY$__MemorySnapshot$ConstPtr$Usize$Address$Usize(new_memory_snap_of_ConstPtr$Usize__$TY$__Address$Usize$MemorySnapshot$ConstPtr$Usize(get_value_field_target_of_MutPtr$Usize__$TY$__ValueSnapshot$MutPtr$Usize$Address$Usize(m_libraries$$lib_rc$$RcSpec$$strong_count_ptr__$TY$__MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$MutPtr$Usize(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(a2,
      v2))))))), v2))
  // Assume precondition
  // Remember initial version
  pre_version := version
  // Ownership
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // Stabilize precondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb0
  
  label bb0
  // ========== bb0 ==========
  
  // [mir] StorageLive(_3)
  
  // [mir] StorageLive(_4)
  
  // [mir] StorageLive(_5)
  
  // [mir] StorageLive(_6)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume Allocated(_4: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(3,
    _4, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _5, version)
  // assume Allocated(_6: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _6, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _3, version)
  
  // [mir] _6 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_6,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_6: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _6, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _4, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _5, version)
  // assume Allocated(_6: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _6, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] _5 = &(*_6)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_5,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_6,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_6,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _6 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_6,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_6: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_6,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_5: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _5, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _4, version)
  // assume Allocated(_5: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _5, version)
  // assume Allocated(_6: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _6, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] _4 = std::rc::Rc::<i32>::strong_count(move _5) -> [return: bb1, unwind: bb23]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_4, version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_5,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_5: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_5,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb1
  
  label bb1
  // ========== bb1 ==========
  
  // [mir] StorageDead(_5)
  
  // Ownership facts
  // assume WriteRef(_4: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(1,
    _4, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_4: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _4, version)
  // assume Allocated(_6: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _6, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _3, version)
  
  // [mir] _3 = Eq(move _4, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_3, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_4,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _4 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_4,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // [mir] StorageDead(_6)
  
  // [mir] StorageDead(_4)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _3, version)
  
  // [mir] switchInt(move _3) -> [0: bb14, otherwise: bb2]
  old_version := version
  version := bumpVersion(version)
  __t0 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_3,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  if (__t0) {
    goto l1
  }
  goto l0
  
  label bb10
  // ========== bb10 ==========
  
  // [mir] StorageLive(_27)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_19: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _19,
    version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_27: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(7,
    _27, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(8,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _3, version)
  
  // [mir] _27 = core::panicking::panic(const "assertion failed: Rc::as_ptr(&rc) != Rc::as_ptr(&other)") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::as_ptr(&rc) != Rc::as_ptr(&other)"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_19: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_19,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto end_of_method
  
  label bb11
  // ========== bb11 ==========
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_19: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _19,
    version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _18 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_18,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _19 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_19,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_19: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_19,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_19)
  
  // [mir] StorageDead(_18)
  
  // [mir] StorageLive(_28)
  
  // [mir] StorageLive(_29)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _29, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] _29 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_29, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_29: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _29,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _29, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _14, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] switchInt(move _29) -> [0: bb13, otherwise: bb12]
  old_version := version
  version := bumpVersion(version)
  __t3 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_29,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  if (!__t3) {
    goto l7
  }
  goto l6
  
  label bb12
  // ========== bb12 ==========
  
  // [mir] StorageLive(_30)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_29: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _29,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _29, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _14, version)
  // assume Allocated(_30: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(8,
    _30, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _3, version)
  
  // [mir] _30 = core::panicking::panic(const "assertion failed: false") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_29: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_29,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto end_of_method
  
  label bb13
  // ========== bb13 ==========
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_29: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _29,
    version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_28: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _28, version)
  // assume Allocated(_29: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _29, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(7,
    _14, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _28 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_28,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _29 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_29,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_29: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_29,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_29)
  
  // [mir] StorageDead(_28)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(4,
    _14, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _3, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_14)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _3, version)
  
  // [mir] goto -> bb20
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto bb20
  
  label bb14
  // ========== bb14 ==========
  
  // [mir] StorageLive(_31)
  
  // [mir] StorageLive(_32)
  
  // [mir] StorageLive(_33)
  
  // [mir] StorageLive(_34)
  
  // [mir] StorageLive(_35)
  
  // [mir] StorageLive(_36)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _3,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_34: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _34, version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _31, version)
  // assume Allocated(_35: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _35, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _32, version)
  // assume Allocated(_36: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _33, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _3, version)
  
  // [mir] _36 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_36,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _3,
    version)
  // assume WriteRef(_36: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _36, version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_34: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _34, version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _31, version)
  // assume Allocated(_35: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _35, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _32, version)
  // assume Allocated(_36: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _33, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _3, version)
  
  // [mir] _35 = &(*_36)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_35,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_36,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_36,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Fully-owned used place _36 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_36,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_36: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_36,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_35: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _35, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_34: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _34, version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _31, version)
  // assume Allocated(_35: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _35, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _32, version)
  // assume Allocated(_36: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _33, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _3, version)
  
  // [mir] _34 = std::rc::Rc::<i32>::strong_count(move _35) -> [return: bb15, unwind: bb23]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_34,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_35,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_35: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_35,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb15
  
  label bb15
  // ========== bb15 ==========
  
  // [mir] StorageDead(_35)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_34: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(2,
    _34, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_34: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _34, version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _31, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _32, version)
  // assume Allocated(_36: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _33, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _3, version)
  
  // [mir] _33 = Ne(move _34, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_34,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1))))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _34 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_34,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_34)
  
  // Ownership facts
  // assume WriteRef(_33: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _33,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _31, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _32, version)
  // assume Allocated(_36: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _36, version)
  // assume Allocated(_33: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _33, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _3, version)
  
  // [mir] _32 = Not(move _33)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_32, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_33,
    old_version)))
  // Fully-owned used place _33 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_33,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_36)
  
  // [mir] StorageDead(_33)
  
  // Ownership facts
  // assume WriteRef(_32: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _32,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _31, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _32, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _32) -> [0: bb17, otherwise: bb16]
  old_version := version
  version := bumpVersion(version)
  __t4 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_32,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  if (__t4) {
    goto l9
  }
  goto l8
  
  label bb16
  // ========== bb16 ==========
  
  // [mir] StorageLive(_37)
  
  // Ownership facts
  // assume WriteRef(_32: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _32,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_37: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _37, version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _31, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _32, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _37 = core::panicking::panic(const "assertion failed: Rc::strong_count(&rc) != 1") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&rc) != 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_32: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_32,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto end_of_method
  
  label bb17
  // ========== bb17 ==========
  
  // Ownership facts
  // assume WriteRef(_32: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _32,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_31: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _31, version)
  // assume Allocated(_32: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _32, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] _31 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_31,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _32 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_32,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_32: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_32,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_32)
  
  // [mir] StorageDead(_31)
  
  // [mir] StorageLive(_38)
  
  // [mir] StorageLive(_39)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_38: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(4,
    _38, version)
  // assume Allocated(_39: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _39, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _3, version)
  
  // [mir] _39 = Not(const false)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_39, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(false)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_39: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _39,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_38: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _38, version)
  // assume Allocated(_39: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _39, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _39) -> [0: bb19, otherwise: bb18]
  old_version := version
  version := bumpVersion(version)
  __t5 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_39,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  if (!__t5) {
    goto l11
  }
  goto l10
  
  label bb18
  // ========== bb18 ==========
  
  // [mir] StorageLive(_40)
  
  // Ownership facts
  // assume WriteRef(_39: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _39,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_40: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _40, version)
  // assume Allocated(_38: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _38, version)
  // assume Allocated(_39: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _39, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _40 = core::panicking::panic(const "assertion failed: false") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: false"
  assert false
  // Framing facts
  // assume framing of WriteRef(_39: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_39,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto end_of_method
  
  label bb19
  // ========== bb19 ==========
  
  // Ownership facts
  // assume WriteRef(_39: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(1, _39,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_38: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _38, version)
  // assume Allocated(_39: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _39, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] _38 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_38,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _39 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_39,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_39: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_39,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_39)
  
  // [mir] StorageDead(_38)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4,
    _3, version)
  
  // [mir] _0 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_0,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _3, version)
  
  // [mir] goto -> bb20
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto bb20
  
  label bb2
  // ========== bb2 ==========
  
  // [mir] StorageLive(_7)
  
  // [mir] StorageLive(_8)
  
  // [mir] StorageLive(_9)
  
  // [mir] StorageLive(_10)
  
  // [mir] StorageLive(_11)
  
  // [mir] StorageLive(_12)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(2, _3,
    version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume Allocated(_10: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(4,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _8, version)
  // assume Allocated(_12: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _3, version)
  
  // [mir] _12 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_12: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _12, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_10: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _8, version)
  // assume Allocated(_12: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _9, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _3, version)
  
  // [mir] _11 = &(*_12)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_11,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_12,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _12 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_12: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_12,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_11: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _11, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_10: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_11: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _11, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _8, version)
  // assume Allocated(_12: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _9, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _3, version)
  
  // [mir] _10 = std::rc::Rc::<i32>::strong_count(move _11) -> [return: bb3, unwind: bb23]
  old_version := version
  version := bumpVersion(version)
  inhale deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_10,
    version) ==
    m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_11,
    old_version), old_version)
  // Framing facts
  // assume framing of WriteRef(_11: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_11,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb3
  
  label bb20
  // ========== bb20 ==========
  
  // [mir] StorageDead(_3)
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  
  // [mir] drop(_2) -> [return: bb21, unwind: bb24]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _2
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb21
  
  label bb21
  // ========== bb21 ==========
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  
  // [mir] drop(_1) -> [return: bb22, unwind: bb25]
  old_version := version
  version := bumpVersion(version)
  // Possible drop of _1
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto bb22
  
  label bb22
  // ========== bb22 ==========
  
  // Ownership facts
  // assume WriteRef(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  
  // [mir] return
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  goto return
  
  label bb3
  // ========== bb3 ==========
  
  // [mir] StorageDead(_11)
  
  // Ownership facts
  // assume WriteRef(_10: usize)
  inhale owns_as_WriteRef_Usize__$TY$__$int$$Address$Usize$Version$$bool$(1,
    _10, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_10: usize)
  inhale owns_as_Allocated_Usize__$TY$__$int$$Address$Usize$Version$$bool$(5,
    _10, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _8, version)
  // assume Allocated(_12: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _9, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _3, version)
  
  // [mir] _9 = Eq(move _10, const 1_usize)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(deref_Usize__$TY$__Address$Usize$Version$MemorySnapshot$Usize(_10,
    old_version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))
  // Fully-owned used place _10 does not change
  inhale frame_across_stmt_WriteRef_Usize__$TY$__Address$Usize$Version$Version$$bool$(_10,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_10)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume WriteRef(_9: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _9,
    version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _8, version)
  // assume Allocated(_12: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _12, version)
  // assume Allocated(_9: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _9, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _3, version)
  
  // [mir] _8 = Not(move _9)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_9,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Fully-owned used place _9 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_9,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_12)
  
  // [mir] StorageDead(_9)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _8,
    version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _8, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] switchInt(move _8) -> [0: bb5, otherwise: bb4]
  old_version := version
  version := bumpVersion(version)
  __t1 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_8,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  if (__t1) {
    goto l3
  }
  goto l2
  
  label bb4
  // ========== bb4 ==========
  
  // [mir] StorageLive(_13)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _8,
    version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_13: !)
  inhale owns_as_Allocated_Never__$TY$__$int$$Address$Never$Version$$bool$(5,
    _13, version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(6,
    _7, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _8, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _13 = core::panicking::panic(const "assertion failed: Rc::strong_count(&rc) == 1") -> bb23
  old_version := version
  version := bumpVersion(version)
  // Rust panic - const "assertion failed: Rc::strong_count(&rc) == 1"
  assert false
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_8: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto end_of_method
  
  label bb5
  // ========== bb5 ==========
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_8: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _8,
    version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_7: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(5,
    _7, version)
  // assume Allocated(_8: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _8, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] _7 = const ()
  old_version := version
  version := bumpVersion(version)
  inhale deref_Tuple0__$TY$__Address$Tuple0$Version$MemorySnapshot$Tuple0(_7,
    version) ==
    new_memory_snap_of_Tuple0__$TY$__MemorySnapshot$Tuple0()
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _8 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_8: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_8,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_8)
  
  // [mir] StorageDead(_7)
  
  // [mir] StorageLive(_14)
  
  // [mir] StorageLive(_15)
  
  // [mir] StorageLive(_16)
  
  // [mir] StorageLive(_17)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_16: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _17, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_15: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _15, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _17 = &mut _1
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_17,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _17, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_16: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _17, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_15: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _15, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _16 = &mut (*_17)
  old_version := version
  version := bumpVersion(version)
  inhale deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_17,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_17,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _17 does not change
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_17,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_16: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _16, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_16: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _17, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_15: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _15, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] _15 = std::rc::Rc::<i32>::get_mut(move _16) -> [return: bb6, unwind: bb23]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_16: &mut std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_16,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_16: &mut std::rc::Rc<i32>)
  inhale owns_as_WriteRef_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _16, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_16: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _16, version)
  // assume Allocated(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _17, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_15: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(7,
    _15, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  // Check the preconditions (num: 0) of the call
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Store the target address of the &mut-typed arguments, for the encoding of the pledge
  _call_5_pre_version := old_version
  _call_5_blocked_address_0 := get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version))
  // Assume the postconditions (num: 5) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version) ==
    deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version))))))), version) ==
    m_libraries$$lib_prusti$$deref__$TY$__MemorySnapshot$I32$MemorySnapshot$ConstPtr$I32$Version$MemorySnapshot$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version))))))), old_version)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    old_version))), old_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
    version))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(new_memory_snap_of_Usize__$TY$__$int$$MemorySnapshot$Usize(1)))))) ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_15,
      deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_15,
      version)))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$((get_memory_field_value_of_Isize__$TY$__MemorySnapshot$Isize$$int$(new_memory_snap_of_Isize__$TY$__$int$$MemorySnapshot$Isize(get_memory_field_discriminant_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$$int$(deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_15,
    version)))) ==
    1 ?
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_memory_field_target_address_of_MutRef$I32__$TY$__MemorySnapshot$MutRef$I32$Address$I32(deref_MutRef$I32__$TY$__Address$MutRef$I32$Version$MemorySnapshot$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_15),
      version)))) ==
      get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
      old_version)), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_16,
      old_version))))))))))) :
      new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(true)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(-1,
    _16, version)
  // frame ShallowlyOwned(arg#0: &mut std::rc::Rc<i32>)
  inhale frame_across_call_ShallowlyOwned_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_16,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto bb6
  
  label bb6
  // ========== bb6 ==========
  
  // [mir] StorageDead(_16)
  
  // Ownership facts
  // assume WriteRef(_15: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _17, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _14, version)
  // assume Allocated(_15: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(6,
    _15, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  
  // [mir] _14 = std::option::Option::<&mut i32>::unwrap(move _15) -> [return: bb7, unwind: bb23]
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_15: std::option::Option<&mut i32>)
  inhale frame_across_stmt_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_15,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Ownership facts
  // assume WriteRef(_15: std::option::Option<&mut i32>)
  inhale owns_as_WriteRef_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(1,
    _15, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _17, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(5,
    _14, version)
  // assume Allocated(_15: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(6,
    _15, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _3, version)
  // Check the preconditions (num: 1) of the call
  assert get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_value_field_value_of_Bool__$TY$__ValueSnapshot$Bool$$bool$(m_std$$option$$Option$$$openang$T$closeang$$$is_some__$TY$__MemorySnapshot$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$Bool(convert_from_memory_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32$ValueSnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(new_memory_snap_of_SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32$MemorySnapshot$SharedRef$Adt$core$$std$$option$$Option$1$MutRef$I32(_15,
    deref_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$MemorySnapshot$Adt$core$$std$$option$$Option$1$MutRef$I32(_15,
    old_version)))))))))
  // Havoc the memory version during the call
  old_version := version
  version := bumpVersion(version)
  // Assume the postconditions (num: 1) of the call
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(move__MutRef$I32__$TY$__Address$MutRef$I32$Version$Address$MutRef$I32$Version$$bool$(get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(get_addr_v$Some_f$0_of_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Address$MutRef$I32(_15)))),
    old_version, get_value_field_target_of_ConstPtr$MutRef$I32__$TY$__ValueSnapshot$ConstPtr$MutRef$I32$Address$MutRef$I32(convert_from_memory_of_ConstPtr$MutRef$I32__$TY$__MemorySnapshot$ConstPtr$MutRef$I32$ValueSnapshot$ConstPtr$MutRef$I32(new_memory_snap_of_ConstPtr$MutRef$I32__$TY$__Address$MutRef$I32$MemorySnapshot$ConstPtr$MutRef$I32(_14))),
    version)))))))
  // Validity and shallow ownership of the arguments
  // assume Allocated(arg#0: std::option::Option<&mut i32>)
  inhale owns_as_Allocated_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__$int$$Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$$bool$(-1,
    _15, version)
  // frame ShallowlyOwned(arg#0: std::option::Option<&mut i32>)
  inhale frame_across_call_ShallowlyOwned_Adt$core$$std$$option$$Option$1$MutRef$I32__$TY$__Address$Adt$core$$std$$option$$Option$1$MutRef$I32$Version$Version$$bool$(_15,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  goto bb7
  
  label bb7
  // ========== bb7 ==========
  
  // [mir] StorageDead(_15)
  
  // [mir] FakeRead(ForLet(None), _14)
  // Allocation facts
  // assume Allocated(_17: &mut std::rc::Rc<i32>)
  inhale owns_as_Allocated_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _17, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(2,
    _14, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3,
    _3, version)
  // Applying pledges of function alloc::std::rc::Rc::<T>::get_mut
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    version)) ==
    new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    _call_5_pre_version))))))))
  inhale get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    version)))), version)) ==
    get_memory_field_value_of_Usize__$TY$__MemorySnapshot$Usize$$int$(m_std$$rc$$Rc$$$openang$T$closeang$$$strong_count__$TY$__MemorySnapshot$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Usize(new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    _call_5_pre_version))), get_memory_field_target_snapshot_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(new_memory_snap_of_MutRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$MutRef$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_call_5_blocked_address_0,
    _call_5_pre_version)))), _call_5_pre_version))))))))
  
  // [mir] StorageDead(_17)
  
  // [mir] StorageLive(_18)
  
  // [mir] StorageLive(_19)
  
  // [mir] StorageLive(_20)
  
  // [mir] StorageLive(_21)
  
  // [mir] StorageLive(_22)
  
  // [mir] StorageLive(_23)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume Allocated(_22: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(8,
    _14, version)
  // assume Allocated(_21: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(9,
    _21, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _3, version)
  
  // [mir] _23 = &_1
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_23,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_1,
    old_version))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _2, version)
  // assume WriteRef(_23: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _23, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_22: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _19, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _14, version)
  // assume Allocated(_21: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(10,
    _21, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _3, version)
  
  // [mir] _22 = &(*_23)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_22,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_23,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_23,
    old_version)))
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _23 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_23,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of ReadRef(_23: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_23,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_22: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _22, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume LocalRef(_1: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _1, version)
  // assume Allocated(_22: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _22, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _19, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _14, version)
  // assume Allocated(_21: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(10,
    _21, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(11,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(12,
    _3, version)
  
  // [mir] _21 = std::rc::Rc::<i32>::as_ptr(move _22) -> [return: bb8, unwind: bb23]
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(_21,
    version) ==
    new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_22,
    old_version)))))
  // Framing facts
  // assume framing of WriteRef(_22: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_22,
    old_version, version)
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  goto bb8
  
  label bb8
  // ========== bb8 ==========
  
  // [mir] StorageDead(_22)
  
  // [mir] StorageLive(_24)
  
  // [mir] StorageLive(_25)
  
  // [mir] StorageLive(_26)
  
  // Ownership facts
  // assume WriteRef(_21: *const i32)
  inhale owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(1,
    _21, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_25: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _25, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _19, version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _26, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(10,
    _14, version)
  // assume Allocated(_24: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(11,
    _24, version)
  // assume Allocated(_21: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(12,
    _21, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _3, version)
  
  // [mir] _26 = &_2
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_26,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    deref_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(_2,
    old_version))
  // Fully-owned used place _21 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_21,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_21: *const i32)
  inhale frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_21,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_26: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _26, version)
  // assume WriteRef(_21: *const i32)
  inhale owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(2,
    _21, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_25: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _25, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _19, version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _26, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(11,
    _14, version)
  // assume Allocated(_24: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(12,
    _24, version)
  // assume Allocated(_21: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(13,
    _21, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(14,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _3, version)
  
  // [mir] _25 = &(*_26)
  old_version := version
  version := bumpVersion(version)
  inhale deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_25,
    version) ==
    new_memory_snap_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(get_memory_field_target_address_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Address$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_26,
    old_version)), get_memory_field_target_snapshot_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$MemorySnapshot$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_26,
    old_version)))
  // Fully-owned used place _26 does not change
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_26,
    old_version, version)
  // Fully-owned used place _21 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_21,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_21: *const i32)
  inhale frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_21,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of ReadRef(_26: &std::rc::Rc<i32>)
  inhale frame_across_stmt_ReadRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_26,
    old_version, version)
  
  // Ownership facts
  // assume WriteRef(_21: *const i32)
  inhale owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(1,
    _21, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume WriteRef(_25: &std::rc::Rc<i32>)
  inhale owns_as_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(4,
    _25, version)
  // assume LocalRef(_2: std::rc::Rc<i32>)
  inhale owns_as_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(5,
    _2, version)
  // assume Allocated(_25: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _25, version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(7,
    _19, version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _26, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(9,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(10,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(11,
    _14, version)
  // assume Allocated(_24: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(12,
    _24, version)
  // assume Allocated(_21: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(13,
    _21, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(14,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(15,
    _3, version)
  
  // [mir] _24 = std::rc::Rc::<i32>::as_ptr(move _25) -> [return: bb9, unwind: bb23]
  old_version := version
  version := bumpVersion(version)
  inhale deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(_24,
    version) ==
    new_memory_snap_of_ConstPtr$I32__$TY$__Address$I32$MemorySnapshot$ConstPtr$I32(get_value_field_target_of_ConstPtr$I32__$TY$__ValueSnapshot$ConstPtr$I32$Address$I32(m_std$$rc$$Rc$$$openang$T$closeang$$$as_ptr__$TY$__MemorySnapshot$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$ConstPtr$I32(convert_from_memory_of_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$ValueSnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(deref_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$MemorySnapshot$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32(_25,
    old_version)))))
  // Framing facts
  // assume framing of WriteRef(_21: *const i32)
  inhale frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_21,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of WriteRef(_25: &std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_25,
    old_version, version)
  // assume framing of LocalRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_LocalRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_21: *const i32)
  inhale frame_across_call_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_21,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_call_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_call_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // assume framing of ReadRef(_2: std::rc::Rc<i32>)
  inhale frame_across_call_ReadRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  goto bb9
  
  label bb9
  // ========== bb9 ==========
  
  // [mir] StorageDead(_25)
  
  // Ownership facts
  // assume WriteRef(_21: *const i32)
  inhale owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(1,
    _21, version)
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(3,
    _2, version)
  // assume WriteRef(_24: *const i32)
  inhale owns_as_WriteRef_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(4,
    _24, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5, _3,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(6,
    _19, version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _26, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(8,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(9,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(10,
    _14, version)
  // assume Allocated(_24: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(11,
    _24, version)
  // assume Allocated(_21: *const i32)
  inhale owns_as_Allocated_ConstPtr$I32__$TY$__$int$$Address$ConstPtr$I32$Version$$bool$(12,
    _21, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(13,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(14,
    _3, version)
  
  // [mir] _20 = Ne(move _21, move _24)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_20, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!(get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(_21,
    old_version)) ==
    get_memory_field_target_of_ConstPtr$I32__$TY$__MemorySnapshot$ConstPtr$I32$Address$I32(deref_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$MemorySnapshot$ConstPtr$I32(_24,
    old_version))))
  // Fully-owned used place _21 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_21,
    old_version, version)
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _24 does not change
  inhale frame_across_stmt_WriteRef_ConstPtr$I32__$TY$__Address$ConstPtr$I32$Version$Version$$bool$(_24,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_24)
  
  // [mir] StorageDead(_21)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _3,
    version)
  // assume WriteRef(_20: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _20,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_26: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(6,
    _26, version)
  // assume Allocated(_23: &std::rc::Rc<i32>)
  inhale owns_as_Allocated_SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$SharedRef$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(7,
    _23, version)
  // assume Allocated(_20: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _20, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(9,
    _14, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(10,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(11,
    _3, version)
  
  // [mir] _19 = Not(move _20)
  old_version := version
  version := bumpVersion(version)
  inhale deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_19, version) ==
    new_memory_snap_of_Bool__$TY$__$bool$$MemorySnapshot$Bool(!get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_20,
    old_version)))
  // Fully-owned used place _1 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // Fully-owned used place _2 does not change
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // Fully-owned used place _3 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  // Fully-owned used place _20 does not change
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_20,
    old_version, version)
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  
  // [mir] StorageDead(_26)
  
  // [mir] StorageDead(_23)
  
  // [mir] StorageDead(_20)
  
  // Ownership facts
  // assume WriteRef(_1: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(1,
    _1, version)
  // assume WriteRef(_2: std::rc::Rc<i32>)
  inhale owns_as_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__$int$$Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$$bool$(2,
    _2, version)
  // assume WriteRef(_19: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(3, _19,
    version)
  // assume WriteRef(_3: bool)
  inhale owns_as_WriteRef_Bool__$TY$__$int$$Address$Bool$Version$$bool$(4, _3,
    version)
  // assume Allocated(_19: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(5,
    _19, version)
  // assume Allocated(_14: &mut i32)
  inhale owns_as_Allocated_MutRef$I32__$TY$__$int$$Address$MutRef$I32$Version$$bool$(6,
    _14, version)
  // assume Allocated(_18: ())
  inhale owns_as_Allocated_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(7,
    _18, version)
  // assume Allocated(_3: bool)
  inhale owns_as_Allocated_Bool__$TY$__$int$$Address$Bool$Version$$bool$(8,
    _3, version)
  
  // [mir] switchInt(move _19) -> [0: bb11, otherwise: bb10]
  old_version := version
  version := bumpVersion(version)
  __t2 := get_memory_field_value_of_Bool__$TY$__MemorySnapshot$Bool$$bool$(deref_Bool__$TY$__Address$Bool$Version$MemorySnapshot$Bool(_19,
    old_version))
  // Framing facts
  // assume framing of WriteRef(_2: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_2,
    old_version, version)
  // assume framing of WriteRef(_1: std::rc::Rc<i32>)
  inhale frame_across_stmt_WriteRef_Adt$alloc$$std$$rc$$Rc$1$I32__$TY$__Address$Adt$alloc$$std$$rc$$Rc$1$I32$Version$Version$$bool$(_1,
    old_version, version)
  // assume framing of WriteRef(_3: bool)
  inhale frame_across_stmt_WriteRef_Bool__$TY$__Address$Bool$Version$Version$$bool$(_3,
    old_version, version)
  if (__t2) {
    goto l5
  }
  goto l4
  
  label l0
  // ========== l0 ==========
  // MIR edge bb1 --> bb14
  goto bb14
  
  label l1
  // ========== l1 ==========
  // MIR edge bb1 --> bb2
  goto bb2
  
  label l10
  // ========== l10 ==========
  // MIR edge bb17 --> bb18
  goto bb18
  
  label l11
  // ========== l11 ==========
  // MIR edge bb17 --> bb19
  goto bb19
  
  label l2
  // ========== l2 ==========
  // MIR edge bb3 --> bb5
  goto bb5
  
  label l3
  // ========== l3 ==========
  // MIR edge bb3 --> bb4
  goto bb4
  
  label l4
  // ========== l4 ==========
  // MIR edge bb9 --> bb11
  goto bb11
  
  label l5
  // ========== l5 ==========
  // MIR edge bb9 --> bb10
  goto bb10
  
  label l6
  // ========== l6 ==========
  // MIR edge bb11 --> bb12
  goto bb12
  
  label l7
  // ========== l7 ==========
  // MIR edge bb11 --> bb13
  goto bb13
  
  label l8
  // ========== l8 ==========
  // MIR edge bb15 --> bb17
  goto bb17
  
  label l9
  // ========== l9 ==========
  // MIR edge bb15 --> bb16
  goto bb16
  
  label return
  // ========== return ==========
  // Target of any 'return' statement.
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Stabilize postcondition
  old_version := version
  version := bumpVersion(version)
  // Framing facts
  // assume framing of WriteRef(_0: ())
  inhale frame_across_stmt_WriteRef_Tuple0__$TY$__Address$Tuple0$Version$Version$$bool$(_0,
    old_version, version)
  // Ownership
  // Ownership facts
  // assume WriteRed(_0: ())
  inhale owns_as_WriteRef_Tuple0__$TY$__$int$$Address$Tuple0$Version$$bool$(1,
    _0, version)
  // Assert postcondition
  goto end_of_method
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)


method bumpVersion(version: Version) returns (new_version: Version)
